
stm32f103rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006800  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006978  08006978  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08006978  08006978  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006978  08006978  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006978  08006978  00016978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08006980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  20000190  08006b10  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001354  08006b10  00021354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010299  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002751  00000000  00000000  00030452  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  00032ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  000335b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019366  00000000  00000000  00033e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e39c  00000000  00000000  0004d1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084499  00000000  00000000  0005b592  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dfa2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002684  00000000  00000000  000dfaa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	080068f4 	.word	0x080068f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	080068f4 	.word	0x080068f4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f942 	bl	80003d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f86a 	bl	8000230 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f005 ff02 	bl	8005f64 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS (my_buf, 14);
 8000160:	210e      	movs	r1, #14
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <main+0x28>)
 8000164:	f005 ffbc 	bl	80060e0 <CDC_Transmit_FS>
	  	  	  	  HAL_Delay(1000);
 8000168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800016c:	f000 f996 	bl	800049c <HAL_Delay>
	  CDC_Transmit_FS (my_buf, 14);
 8000170:	e7f6      	b.n	8000160 <main+0x14>
 8000172:	bf00      	nop
 8000174:	20000000 	.word	0x20000000

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b094      	sub	sp, #80	; 0x50
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f006 fbac 	bl	80068e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	f107 0314 	add.w	r3, r7, #20
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b2:	2300      	movs	r3, #0
 80001b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ba:	2302      	movs	r3, #2
 80001bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 fe16 	bl	8001e00 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001da:	f000 f857 	bl	800028c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2101      	movs	r1, #1
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 f880 	bl	8002300 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000206:	f000 f841 	bl	800028c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800020a:	2310      	movs	r3, #16
 800020c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800020e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000212:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f002 f9dc 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000222:	f000 f833 	bl	800028c <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3750      	adds	r7, #80	; 0x50
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_GPIO_Init+0x58>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4a13      	ldr	r2, [pc, #76]	; (8000288 <MX_GPIO_Init+0x58>)
 800023c:	f043 0310 	orr.w	r3, r3, #16
 8000240:	6193      	str	r3, [r2, #24]
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <MX_GPIO_Init+0x58>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	f003 0310 	and.w	r3, r3, #16
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <MX_GPIO_Init+0x58>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <MX_GPIO_Init+0x58>)
 8000254:	f043 0320 	orr.w	r3, r3, #32
 8000258:	6193      	str	r3, [r2, #24]
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <MX_GPIO_Init+0x58>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	f003 0320 	and.w	r3, r3, #32
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <MX_GPIO_Init+0x58>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a07      	ldr	r2, [pc, #28]	; (8000288 <MX_GPIO_Init+0x58>)
 800026c:	f043 0304 	orr.w	r3, r3, #4
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <MX_GPIO_Init+0x58>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0304 	and.w	r3, r3, #4
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]

}
 800027e:	bf00      	nop
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	40021000 	.word	0x40021000

0800028c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800029e:	4b19      	ldr	r3, [pc, #100]	; (8000304 <HAL_MspInit+0x6c>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	4a18      	ldr	r2, [pc, #96]	; (8000304 <HAL_MspInit+0x6c>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	6193      	str	r3, [r2, #24]
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <HAL_MspInit+0x6c>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
 80002b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b6:	4b13      	ldr	r3, [pc, #76]	; (8000304 <HAL_MspInit+0x6c>)
 80002b8:	69db      	ldr	r3, [r3, #28]
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <HAL_MspInit+0x6c>)
 80002bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c0:	61d3      	str	r3, [r2, #28]
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <HAL_MspInit+0x6c>)
 80002c4:	69db      	ldr	r3, [r3, #28]
 80002c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2100      	movs	r1, #0
 80002d2:	2005      	movs	r0, #5
 80002d4:	f000 f9db 	bl	800068e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80002d8:	2005      	movs	r0, #5
 80002da:	f000 f9f4 	bl	80006c6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <HAL_MspInit+0x70>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <HAL_MspInit+0x70>)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000
 8000308:	40010000 	.word	0x40010000

0800030c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr

08000318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800031c:	e7fe      	b.n	800031c <HardFault_Handler+0x4>

0800031e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <MemManage_Handler+0x4>

08000324 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <BusFault_Handler+0x4>

0800032a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800032e:	e7fe      	b.n	800032e <UsageFault_Handler+0x4>

08000330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000358:	f000 f884 	bl	8000464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}

08000360 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000370:	4802      	ldr	r0, [pc, #8]	; (800037c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000372:	f000 faf3 	bl	800095c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20001068 	.word	0x20001068

08000380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800038c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800038e:	e003      	b.n	8000398 <LoopCopyDataInit>

08000390 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000392:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000394:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000396:	3104      	adds	r1, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000398:	480a      	ldr	r0, [pc, #40]	; (80003c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800039c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800039e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003a0:	d3f6      	bcc.n	8000390 <CopyDataInit>
  ldr r2, =_sbss
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80003a4:	e002      	b.n	80003ac <LoopFillZerobss>

080003a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003a8:	f842 3b04 	str.w	r3, [r2], #4

080003ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80003ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80003b0:	d3f9      	bcc.n	80003a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003b2:	f7ff ffe5 	bl	8000380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b6:	f006 fa71 	bl	800689c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff fec7 	bl	800014c <main>
  bx lr
 80003be:	4770      	bx	lr
  ldr r3, =_sidata
 80003c0:	08006980 	.word	0x08006980
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003c8:	20000190 	.word	0x20000190
  ldr r2, =_sbss
 80003cc:	20000190 	.word	0x20000190
  ldr r3, = _ebss
 80003d0:	20001354 	.word	0x20001354

080003d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC1_2_IRQHandler>
	...

080003d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <HAL_Init+0x28>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <HAL_Init+0x28>)
 80003e2:	f043 0310 	orr.w	r3, r3, #16
 80003e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003e8:	2003      	movs	r0, #3
 80003ea:	f000 f945 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 f808 	bl	8000404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003f4:	f7ff ff50 	bl	8000298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40022000 	.word	0x40022000

08000404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_InitTick+0x54>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_InitTick+0x58>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4619      	mov	r1, r3
 8000416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800041a:	fbb3 f3f1 	udiv	r3, r3, r1
 800041e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f95d 	bl	80006e2 <HAL_SYSTICK_Config>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800042e:	2301      	movs	r3, #1
 8000430:	e00e      	b.n	8000450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b0f      	cmp	r3, #15
 8000436:	d80a      	bhi.n	800044e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000438:	2200      	movs	r2, #0
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	f04f 30ff 	mov.w	r0, #4294967295
 8000440:	f000 f925 	bl	800068e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000444:	4a06      	ldr	r2, [pc, #24]	; (8000460 <HAL_InitTick+0x5c>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800044a:	2300      	movs	r3, #0
 800044c:	e000      	b.n	8000450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800044e:	2301      	movs	r3, #1
}
 8000450:	4618      	mov	r0, r3
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000014 	.word	0x20000014
 800045c:	2000001c 	.word	0x2000001c
 8000460:	20000018 	.word	0x20000018

08000464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <HAL_IncTick+0x1c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	461a      	mov	r2, r3
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_IncTick+0x20>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4413      	add	r3, r2
 8000474:	4a03      	ldr	r2, [pc, #12]	; (8000484 <HAL_IncTick+0x20>)
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	2000001c 	.word	0x2000001c
 8000484:	200003d0 	.word	0x200003d0

08000488 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  return uwTick;
 800048c:	4b02      	ldr	r3, [pc, #8]	; (8000498 <HAL_GetTick+0x10>)
 800048e:	681b      	ldr	r3, [r3, #0]
}
 8000490:	4618      	mov	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	200003d0 	.word	0x200003d0

0800049c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a4:	f7ff fff0 	bl	8000488 <HAL_GetTick>
 80004a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b4:	d005      	beq.n	80004c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_Delay+0x40>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	4413      	add	r3, r2
 80004c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c2:	bf00      	nop
 80004c4:	f7ff ffe0 	bl	8000488 <HAL_GetTick>
 80004c8:	4602      	mov	r2, r0
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d8f7      	bhi.n	80004c4 <HAL_Delay+0x28>
  {
  }
}
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2000001c 	.word	0x2000001c

080004e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f003 0307 	and.w	r3, r3, #7
 80004ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004fc:	4013      	ands	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000512:	4a04      	ldr	r2, [pc, #16]	; (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	60d3      	str	r3, [r2, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <__NVIC_GetPriorityGrouping+0x18>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	0a1b      	lsrs	r3, r3, #8
 8000532:	f003 0307 	and.w	r3, r3, #7
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000552:	2b00      	cmp	r3, #0
 8000554:	db0b      	blt.n	800056e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	f003 021f 	and.w	r2, r3, #31
 800055c:	4906      	ldr	r1, [pc, #24]	; (8000578 <__NVIC_EnableIRQ+0x34>)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	095b      	lsrs	r3, r3, #5
 8000564:	2001      	movs	r0, #1
 8000566:	fa00 f202 	lsl.w	r2, r0, r2
 800056a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	e000e100 	.word	0xe000e100

0800057c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	db0a      	blt.n	80005a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	490c      	ldr	r1, [pc, #48]	; (80005c8 <__NVIC_SetPriority+0x4c>)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	0112      	lsls	r2, r2, #4
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	440b      	add	r3, r1
 80005a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a4:	e00a      	b.n	80005bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4908      	ldr	r1, [pc, #32]	; (80005cc <__NVIC_SetPriority+0x50>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	f003 030f 	and.w	r3, r3, #15
 80005b2:	3b04      	subs	r3, #4
 80005b4:	0112      	lsls	r2, r2, #4
 80005b6:	b2d2      	uxtb	r2, r2
 80005b8:	440b      	add	r3, r1
 80005ba:	761a      	strb	r2, [r3, #24]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000e100 	.word	0xe000e100
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	f1c3 0307 	rsb	r3, r3, #7
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	bf28      	it	cs
 80005ee:	2304      	movcs	r3, #4
 80005f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3304      	adds	r3, #4
 80005f6:	2b06      	cmp	r3, #6
 80005f8:	d902      	bls.n	8000600 <NVIC_EncodePriority+0x30>
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	3b03      	subs	r3, #3
 80005fe:	e000      	b.n	8000602 <NVIC_EncodePriority+0x32>
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000604:	f04f 32ff 	mov.w	r2, #4294967295
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	43da      	mvns	r2, r3
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	401a      	ands	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000618:	f04f 31ff 	mov.w	r1, #4294967295
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43d9      	mvns	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	4313      	orrs	r3, r2
         );
}
 800062a:	4618      	mov	r0, r3
 800062c:	3724      	adds	r7, #36	; 0x24
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3b01      	subs	r3, #1
 8000640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000644:	d301      	bcc.n	800064a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000646:	2301      	movs	r3, #1
 8000648:	e00f      	b.n	800066a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <SysTick_Config+0x40>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3b01      	subs	r3, #1
 8000650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000652:	210f      	movs	r1, #15
 8000654:	f04f 30ff 	mov.w	r0, #4294967295
 8000658:	f7ff ff90 	bl	800057c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <SysTick_Config+0x40>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <SysTick_Config+0x40>)
 8000664:	2207      	movs	r2, #7
 8000666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	e000e010 	.word	0xe000e010

08000678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ff2d 	bl	80004e0 <__NVIC_SetPriorityGrouping>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006a0:	f7ff ff42 	bl	8000528 <__NVIC_GetPriorityGrouping>
 80006a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	68b9      	ldr	r1, [r7, #8]
 80006aa:	6978      	ldr	r0, [r7, #20]
 80006ac:	f7ff ff90 	bl	80005d0 <NVIC_EncodePriority>
 80006b0:	4602      	mov	r2, r0
 80006b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff5f 	bl	800057c <__NVIC_SetPriority>
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	4603      	mov	r3, r0
 80006ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff35 	bl	8000544 <__NVIC_EnableIRQ>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ffa2 	bl	8000634 <SysTick_Config>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80006fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fc:	b08b      	sub	sp, #44	; 0x2c
 80006fe:	af06      	add	r7, sp, #24
 8000700:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d101      	bne.n	800070c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	e0fd      	b.n	8000908 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d106      	bne.n	8000726 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f005 fe11 	bl	8006348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2203      	movs	r2, #3
 800072a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f002 f82a 	bl	800278c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	687e      	ldr	r6, [r7, #4]
 8000740:	466d      	mov	r5, sp
 8000742:	f106 0410 	add.w	r4, r6, #16
 8000746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	602b      	str	r3, [r5, #0]
 800074e:	1d33      	adds	r3, r6, #4
 8000750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000752:	6838      	ldr	r0, [r7, #0]
 8000754:	f001 fff4 	bl	8002740 <USB_CoreInit>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d005      	beq.n	800076a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2202      	movs	r2, #2
 8000762:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e0ce      	b.n	8000908 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f002 f825 	bl	80027c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e04c      	b.n	8000816 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	440b      	add	r3, r1
 800078c:	3301      	adds	r3, #1
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	440b      	add	r3, r1
 80007a2:	7bfa      	ldrb	r2, [r7, #15]
 80007a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	b298      	uxth	r0, r3
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	440b      	add	r3, r1
 80007b8:	3336      	adds	r3, #54	; 0x36
 80007ba:	4602      	mov	r2, r0
 80007bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	440b      	add	r3, r1
 80007ce:	3303      	adds	r3, #3
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80007d4:	7bfa      	ldrb	r2, [r7, #15]
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	440b      	add	r3, r1
 80007e2:	3338      	adds	r3, #56	; 0x38
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	440b      	add	r3, r1
 80007f6:	333c      	adds	r3, #60	; 0x3c
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	440b      	add	r3, r1
 800080a:	3340      	adds	r3, #64	; 0x40
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	3301      	adds	r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
 8000816:	7bfa      	ldrb	r2, [r7, #15]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	d3ad      	bcc.n	800077c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000820:	2300      	movs	r3, #0
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e044      	b.n	80008b0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000826:	7bfa      	ldrb	r2, [r7, #15]
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800083c:	7bfa      	ldrb	r2, [r7, #15]
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	440b      	add	r3, r1
 800084a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800084e:	7bfa      	ldrb	r2, [r7, #15]
 8000850:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000852:	7bfa      	ldrb	r2, [r7, #15]
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	440b      	add	r3, r1
 8000860:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	440b      	add	r3, r1
 8000876:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	3301      	adds	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	7bfa      	ldrb	r2, [r7, #15]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3b5      	bcc.n	8000826 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	687e      	ldr	r6, [r7, #4]
 80008c2:	466d      	mov	r5, sp
 80008c4:	f106 0410 	add.w	r4, r6, #16
 80008c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	602b      	str	r3, [r5, #0]
 80008d0:	1d33      	adds	r3, r6, #4
 80008d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008d4:	6838      	ldr	r0, [r7, #0]
 80008d6:	f001 ff7f 	bl	80027d8 <USB_DevInit>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d005      	beq.n	80008ec <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e00d      	b.n	8000908 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f003 ff19 	bl	8004738 <USB_DevDisconnect>

  return HAL_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000910 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800091e:	2b01      	cmp	r3, #1
 8000920:	d101      	bne.n	8000926 <HAL_PCD_Start+0x16>
 8000922:	2302      	movs	r3, #2
 8000924:	e016      	b.n	8000954 <HAL_PCD_Start+0x44>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2201      	movs	r2, #1
 800092a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f001 ff14 	bl	8002760 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000938:	2101      	movs	r1, #1
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f005 ff77 	bl	800682e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f003 feed 	bl	8004724 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f003 feef 	bl	800474c <USB_ReadInterrupts>
 800096e:	4603      	mov	r3, r0
 8000970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000978:	d102      	bne.n	8000980 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 fb61 	bl	8001042 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fee1 	bl	800474c <USB_ReadInterrupts>
 800098a:	4603      	mov	r3, r0
 800098c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000994:	d112      	bne.n	80009bc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800099e:	b29a      	uxth	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009a8:	b292      	uxth	r2, r2
 80009aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f005 fd45 	bl	800643e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009b4:	2100      	movs	r1, #0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f925 	bl	8000c06 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 fec3 	bl	800474c <USB_ReadInterrupts>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009d0:	d10b      	bne.n	80009ea <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009da:	b29a      	uxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009e4:	b292      	uxth	r2, r2
 80009e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 feac 	bl	800474c <USB_ReadInterrupts>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009fe:	d10b      	bne.n	8000a18 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a12:	b292      	uxth	r2, r2
 8000a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 fe95 	bl	800474c <USB_ReadInterrupts>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a2c:	d126      	bne.n	8000a7c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f022 0204 	bic.w	r2, r2, #4
 8000a40:	b292      	uxth	r2, r2
 8000a42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f022 0208 	bic.w	r2, r2, #8
 8000a58:	b292      	uxth	r2, r2
 8000a5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f005 fd26 	bl	80064b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a76:	b292      	uxth	r2, r2
 8000a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fe63 	bl	800474c <USB_ReadInterrupts>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a90:	f040 8084 	bne.w	8000b9c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	77fb      	strb	r3, [r7, #31]
 8000a98:	e011      	b.n	8000abe <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	7ffb      	ldrb	r3, [r7, #31]
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	441a      	add	r2, r3
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	8812      	ldrh	r2, [r2, #0]
 8000aaa:	b292      	uxth	r2, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	f107 0120 	add.w	r1, r7, #32
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000ab8:	7ffb      	ldrb	r3, [r7, #31]
 8000aba:	3301      	adds	r3, #1
 8000abc:	77fb      	strb	r3, [r7, #31]
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	2b07      	cmp	r3, #7
 8000ac2:	d9ea      	bls.n	8000a9a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f042 0201 	orr.w	r2, r2, #1
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 0201 	bic.w	r2, r2, #1
 8000aee:	b292      	uxth	r2, r2
 8000af0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000af4:	bf00      	nop
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f6      	beq.n	8000af6 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	77fb      	strb	r3, [r7, #31]
 8000b24:	e010      	b.n	8000b48 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000b26:	7ffb      	ldrb	r3, [r7, #31]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	7ffa      	ldrb	r2, [r7, #31]
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	440a      	add	r2, r1
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	f107 0120 	add.w	r1, r7, #32
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000b40:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000b42:	7ffb      	ldrb	r3, [r7, #31]
 8000b44:	3301      	adds	r3, #1
 8000b46:	77fb      	strb	r3, [r7, #31]
 8000b48:	7ffb      	ldrb	r3, [r7, #31]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d9eb      	bls.n	8000b26 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f042 0208 	orr.w	r2, r2, #8
 8000b60:	b292      	uxth	r2, r2
 8000b62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b78:	b292      	uxth	r2, r2
 8000b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0204 	orr.w	r2, r2, #4
 8000b90:	b292      	uxth	r2, r2
 8000b92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f005 fc70 	bl	800647c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fdd3 	bl	800474c <USB_ReadInterrupts>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bb0:	d10e      	bne.n	8000bd0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bc4:	b292      	uxth	r2, r2
 8000bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f005 fc29 	bl	8006422 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fdb9 	bl	800474c <USB_ReadInterrupts>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be4:	d10b      	bne.n	8000bfe <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d101      	bne.n	8000c20 <HAL_PCD_SetAddress+0x1a>
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e013      	b.n	8000c48 <HAL_PCD_SetAddress+0x42>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	78fa      	ldrb	r2, [r7, #3]
 8000c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	78fa      	ldrb	r2, [r7, #3]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fd60 	bl	80046fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	4608      	mov	r0, r1
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4603      	mov	r3, r0
 8000c60:	70fb      	strb	r3, [r7, #3]
 8000c62:	460b      	mov	r3, r1
 8000c64:	803b      	strh	r3, [r7, #0]
 8000c66:	4613      	mov	r3, r2
 8000c68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	da0e      	bge.n	8000c94 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	705a      	strb	r2, [r3, #1]
 8000c92:	e00e      	b.n	8000cb2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	f003 0207 	and.w	r2, r3, #7
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000cbe:	883a      	ldrh	r2, [r7, #0]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	78ba      	ldrb	r2, [r7, #2]
 8000cc8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	785b      	ldrb	r3, [r3, #1]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d004      	beq.n	8000cdc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000cdc:	78bb      	ldrb	r3, [r7, #2]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d102      	bne.n	8000ce8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <HAL_PCD_EP_Open+0xa6>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	e00e      	b.n	8000d14 <HAL_PCD_EP_Open+0xc4>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68f9      	ldr	r1, [r7, #12]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fd87 	bl	8002818 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000d12:	7afb      	ldrb	r3, [r7, #11]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da0e      	bge.n	8000d4e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	705a      	strb	r2, [r3, #1]
 8000d4c:	e00e      	b.n	8000d6c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	f003 0207 	and.w	r2, r3, #7
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <HAL_PCD_EP_Close+0x6a>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e00e      	b.n	8000da4 <HAL_PCD_EP_Close+0x88>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68f9      	ldr	r1, [r7, #12]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 f8a9 	bl	8002eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	460b      	mov	r3, r1
 8000dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000dbc:	7afb      	ldrb	r3, [r7, #11]
 8000dbe:	f003 0207 	and.w	r2, r3, #7
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2200      	movs	r2, #0
 8000dea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dec:	7afb      	ldrb	r3, [r7, #11]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000df8:	7afb      	ldrb	r3, [r7, #11]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d106      	bne.n	8000e10 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6979      	ldr	r1, [r7, #20]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 fa5b 	bl	80032c4 <USB_EPStartXfer>
 8000e0e:	e005      	b.n	8000e1c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6979      	ldr	r1, [r7, #20]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fa54 	bl	80032c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	f003 0207 	and.w	r2, r3, #7
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e48:	681b      	ldr	r3, [r3, #0]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	460b      	mov	r3, r1
 8000e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000eac:	7afb      	ldrb	r3, [r7, #11]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d106      	bne.n	8000ec4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6979      	ldr	r1, [r7, #20]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fa01 	bl	80032c4 <USB_EPStartXfer>
 8000ec2:	e005      	b.n	8000ed0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6979      	ldr	r1, [r7, #20]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 f9fa 	bl	80032c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	f003 0207 	and.w	r2, r3, #7
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d901      	bls.n	8000ef8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e04c      	b.n	8000f92 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	da0e      	bge.n	8000f1e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	705a      	strb	r2, [r3, #1]
 8000f1c:	e00c      	b.n	8000f38 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d101      	bne.n	8000f58 <HAL_PCD_EP_SetStall+0x7e>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e01c      	b.n	8000f92 <HAL_PCD_EP_SetStall+0xb8>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68f9      	ldr	r1, [r7, #12]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 facc 	bl	8004504 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d108      	bne.n	8000f88 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f003 fbf1 	bl	800476a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	f003 020f 	and.w	r2, r3, #15
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d901      	bls.n	8000fb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e040      	b.n	800103a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da0e      	bge.n	8000fde <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	705a      	strb	r2, [r3, #1]
 8000fdc:	e00e      	b.n	8000ffc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	f003 0207 	and.w	r2, r3, #7
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	b2da      	uxtb	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_PCD_EP_ClrStall+0x82>
 8001018:	2302      	movs	r3, #2
 800101a:	e00e      	b.n	800103a <HAL_PCD_EP_ClrStall+0xa0>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68f9      	ldr	r1, [r7, #12]
 800102a:	4618      	mov	r0, r3
 800102c:	f003 faba 	bl	80045a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b08e      	sub	sp, #56	; 0x38
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800104a:	e2df      	b.n	800160c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001054:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001056:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001062:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 8158 	bne.w	800131c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800106c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b00      	cmp	r3, #0
 8001074:	d152      	bne.n	800111c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001086:	81fb      	strh	r3, [r7, #14]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001096:	b29b      	uxth	r3, r3
 8001098:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3328      	adds	r3, #40	; 0x28
 800109e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4413      	add	r3, r2
 80010b4:	3302      	adds	r3, #2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	441a      	add	r2, r3
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010da:	2100      	movs	r1, #0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f005 f986 	bl	80063ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 828e 	beq.w	800160c <PCD_EP_ISR_Handler+0x5ca>
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f040 8289 	bne.w	800160c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001106:	b2da      	uxtb	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b292      	uxth	r2, r2
 800110e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800111a:	e277      	b.n	800160c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800112c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800112e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001132:	2b00      	cmp	r3, #0
 8001134:	d034      	beq.n	80011a0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800113e:	b29b      	uxth	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4413      	add	r3, r2
 800114a:	3306      	adds	r3, #6
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	4413      	add	r3, r2
 8001154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001174:	b29b      	uxth	r3, r3
 8001176:	f003 fb47 	bl	8004808 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	b29a      	uxth	r2, r3
 8001182:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001186:	4013      	ands	r3, r2
 8001188:	823b      	strh	r3, [r7, #16]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	8a3a      	ldrh	r2, [r7, #16]
 8001190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001194:	b292      	uxth	r2, r2
 8001196:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f005 f8fb 	bl	8006394 <HAL_PCD_SetupStageCallback>
 800119e:	e235      	b.n	800160c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f280 8231 	bge.w	800160c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80011b6:	4013      	ands	r3, r2
 80011b8:	83bb      	strh	r3, [r7, #28]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	8bba      	ldrh	r2, [r7, #28]
 80011c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011c4:	b292      	uxth	r2, r2
 80011c6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	3306      	adds	r3, #6
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d019      	beq.n	8001230 <PCD_EP_ISR_Handler+0x1ee>
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d015      	beq.n	8001230 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	6959      	ldr	r1, [r3, #20]
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001214:	b29b      	uxth	r3, r3
 8001216:	f003 faf7 	bl	8004808 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	441a      	add	r2, r3
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001228:	2100      	movs	r1, #0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f005 f8c4 	bl	80063b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4413      	add	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d112      	bne.n	800127e <PCD_EP_ISR_Handler+0x23c>
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001262:	b29a      	uxth	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	801a      	strh	r2, [r3, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001276:	b29a      	uxth	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	801a      	strh	r2, [r3, #0]
 800127c:	e02f      	b.n	80012de <PCD_EP_ISR_Handler+0x29c>
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b3e      	cmp	r3, #62	; 0x3e
 8001284:	d813      	bhi.n	80012ae <PCD_EP_ISR_Handler+0x26c>
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	085b      	lsrs	r3, r3, #1
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <PCD_EP_ISR_Handler+0x25e>
 800129a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129c:	3301      	adds	r3, #1
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
 80012a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	029b      	lsls	r3, r3, #10
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	801a      	strh	r2, [r3, #0]
 80012ac:	e017      	b.n	80012de <PCD_EP_ISR_Handler+0x29c>
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <PCD_EP_ISR_Handler+0x286>
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	3b01      	subs	r3, #1
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
 80012c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	029b      	lsls	r3, r3, #10
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012d8:	b29a      	uxth	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ee:	827b      	strh	r3, [r7, #18]
 80012f0:	8a7b      	ldrh	r3, [r7, #18]
 80012f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80012f6:	827b      	strh	r3, [r7, #18]
 80012f8:	8a7b      	ldrh	r3, [r7, #18]
 80012fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80012fe:	827b      	strh	r3, [r7, #18]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	8a7b      	ldrh	r3, [r7, #18]
 8001306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800130a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800130e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001316:	b29b      	uxth	r3, r3
 8001318:	8013      	strh	r3, [r2, #0]
 800131a:	e177      	b.n	800160c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800132e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001332:	2b00      	cmp	r3, #0
 8001334:	f280 80ea 	bge.w	800150c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	b29a      	uxth	r2, r3
 800134a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800134e:	4013      	ands	r3, r2
 8001350:	853b      	strh	r3, [r7, #40]	; 0x28
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001366:	b292      	uxth	r2, r2
 8001368:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800136a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	7b1b      	ldrb	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d122      	bne.n	80013ce <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001390:	b29b      	uxth	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	3306      	adds	r3, #6
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013b0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80013b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 8087 	beq.w	80014c8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	6959      	ldr	r1, [r3, #20]
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	88da      	ldrh	r2, [r3, #6]
 80013c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013c8:	f003 fa1e 	bl	8004808 <USB_ReadPMA>
 80013cc:	e07c      	b.n	80014c8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	78db      	ldrb	r3, [r3, #3]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d108      	bne.n	80013e8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80013d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013d8:	461a      	mov	r2, r3
 80013da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f923 	bl	8001628 <HAL_PCD_EP_DB_Receive>
 80013e2:	4603      	mov	r3, r0
 80013e4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80013e6:	e06f      	b.n	80014c8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001402:	847b      	strh	r3, [r7, #34]	; 0x22
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	441a      	add	r2, r3
 8001412:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800141c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001420:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001424:	b29b      	uxth	r3, r3
 8001426:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d021      	beq.n	8001486 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800144a:	b29b      	uxth	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	3302      	adds	r3, #2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	4413      	add	r3, r2
 8001460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800146a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800146c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800146e:	2b00      	cmp	r3, #0
 8001470:	d02a      	beq.n	80014c8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	6959      	ldr	r1, [r3, #20]
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	891a      	ldrh	r2, [r3, #8]
 800147e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001480:	f003 f9c2 	bl	8004808 <USB_ReadPMA>
 8001484:	e020      	b.n	80014c8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	3306      	adds	r3, #6
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80014b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	6959      	ldr	r1, [r3, #20]
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	895a      	ldrh	r2, [r3, #10]
 80014c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014c4:	f003 f9a0 	bl	8004808 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	69da      	ldr	r2, [r3, #28]
 80014cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014ce:	441a      	add	r2, r3
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014da:	441a      	add	r2, r3
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <PCD_EP_ISR_Handler+0x4b0>
 80014e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d206      	bcs.n	8001500 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f004 ff5d 	bl	80063b8 <HAL_PCD_DataOutStageCallback>
 80014fe:	e005      	b.n	800150c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fedc 	bl	80032c4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800150c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	2b00      	cmp	r3, #0
 8001514:	d07a      	beq.n	800160c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001516:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001544:	843b      	strh	r3, [r7, #32]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	441a      	add	r2, r3
 8001554:	8c3b      	ldrh	r3, [r7, #32]
 8001556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800155a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800155e:	b29b      	uxth	r3, r3
 8001560:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	78db      	ldrb	r3, [r3, #3]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d108      	bne.n	800157c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800156e:	2b02      	cmp	r3, #2
 8001570:	d146      	bne.n	8001600 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001572:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d141      	bne.n	8001600 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001584:	b29b      	uxth	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	3302      	adds	r3, #2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015a4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	8bfb      	ldrh	r3, [r7, #30]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d906      	bls.n	80015be <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	8bfb      	ldrh	r3, [r7, #30]
 80015b6:	1ad2      	subs	r2, r2, r3
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	e002      	b.n	80015c4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d106      	bne.n	80015da <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f004 ff0b 	bl	80063ee <HAL_PCD_DataInStageCallback>
 80015d8:	e018      	b.n	800160c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	8bfb      	ldrh	r3, [r7, #30]
 80015e0:	441a      	add	r2, r3
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	8bfb      	ldrh	r3, [r7, #30]
 80015ec:	441a      	add	r2, r3
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fe63 	bl	80032c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80015fe:	e005      	b.n	800160c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001600:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001602:	461a      	mov	r2, r3
 8001604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f91b 	bl	8001842 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001614:	b29b      	uxth	r3, r3
 8001616:	b21b      	sxth	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	f6ff ad17 	blt.w	800104c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3738      	adds	r7, #56	; 0x38
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	4613      	mov	r3, r2
 8001634:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d07e      	beq.n	800173e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	3302      	adds	r3, #2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	4413      	add	r3, r2
 800165e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001668:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	8b7b      	ldrh	r3, [r7, #26]
 8001670:	429a      	cmp	r2, r3
 8001672:	d306      	bcc.n	8001682 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	8b7b      	ldrh	r3, [r7, #26]
 800167a:	1ad2      	subs	r2, r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	e002      	b.n	8001688 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d123      	bne.n	80016d8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016aa:	833b      	strh	r3, [r7, #24]
 80016ac:	8b3b      	ldrh	r3, [r7, #24]
 80016ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80016b2:	833b      	strh	r3, [r7, #24]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	441a      	add	r2, r3
 80016c2:	8b3b      	ldrh	r3, [r7, #24]
 80016c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01f      	beq.n	8001722 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fc:	82fb      	strh	r3, [r7, #22]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	441a      	add	r2, r3
 800170c:	8afb      	ldrh	r3, [r7, #22]
 800170e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800171e:	b29b      	uxth	r3, r3
 8001720:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001722:	8b7b      	ldrh	r3, [r7, #26]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8087 	beq.w	8001838 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	6959      	ldr	r1, [r3, #20]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	891a      	ldrh	r2, [r3, #8]
 8001736:	8b7b      	ldrh	r3, [r7, #26]
 8001738:	f003 f866 	bl	8004808 <USB_ReadPMA>
 800173c:	e07c      	b.n	8001838 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001746:	b29b      	uxth	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	3306      	adds	r3, #6
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	4413      	add	r3, r2
 800175c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001766:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	699a      	ldr	r2, [r3, #24]
 800176c:	8b7b      	ldrh	r3, [r7, #26]
 800176e:	429a      	cmp	r2, r3
 8001770:	d306      	bcc.n	8001780 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	699a      	ldr	r2, [r3, #24]
 8001776:	8b7b      	ldrh	r3, [r7, #26]
 8001778:	1ad2      	subs	r2, r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	619a      	str	r2, [r3, #24]
 800177e:	e002      	b.n	8001786 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d123      	bne.n	80017d6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a8:	83fb      	strh	r3, [r7, #30]
 80017aa:	8bfb      	ldrh	r3, [r7, #30]
 80017ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017b0:	83fb      	strh	r3, [r7, #30]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	441a      	add	r2, r3
 80017c0:	8bfb      	ldrh	r3, [r7, #30]
 80017c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d11f      	bne.n	8001820 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fa:	83bb      	strh	r3, [r7, #28]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	441a      	add	r2, r3
 800180a:	8bbb      	ldrh	r3, [r7, #28]
 800180c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800181c:	b29b      	uxth	r3, r3
 800181e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001820:	8b7b      	ldrh	r3, [r7, #26]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	6959      	ldr	r1, [r3, #20]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	895a      	ldrh	r2, [r3, #10]
 8001832:	8b7b      	ldrh	r3, [r7, #26]
 8001834:	f002 ffe8 	bl	8004808 <USB_ReadPMA>
    }
  }

  return count;
 8001838:	8b7b      	ldrh	r3, [r7, #26]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b092      	sub	sp, #72	; 0x48
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	4613      	mov	r3, r2
 800184e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8132 	beq.w	8001ac0 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001864:	b29b      	uxth	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	3302      	adds	r3, #2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001884:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	699a      	ldr	r2, [r3, #24]
 800188a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800188c:	429a      	cmp	r2, r3
 800188e:	d906      	bls.n	800189e <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	699a      	ldr	r2, [r3, #24]
 8001894:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001896:	1ad2      	subs	r2, r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	619a      	str	r2, [r3, #24]
 800189c:	e002      	b.n	80018a4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d12c      	bne.n	8001906 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f004 fd9b 	bl	80063ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 822f 	beq.w	8001d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018de:	827b      	strh	r3, [r7, #18]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	441a      	add	r2, r3
 80018ee:	8a7b      	ldrh	r3, [r7, #18]
 80018f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001900:	b29b      	uxth	r3, r3
 8001902:	8013      	strh	r3, [r2, #0]
 8001904:	e20d      	b.n	8001d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01f      	beq.n	8001950 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	441a      	add	r2, r3
 800193a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800193c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	b29b      	uxth	r3, r3
 800194e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001956:	2b01      	cmp	r3, #1
 8001958:	f040 81e3 	bne.w	8001d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001962:	441a      	add	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	69da      	ldr	r2, [r3, #28]
 800196c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800196e:	441a      	add	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d309      	bcc.n	8001994 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	6a1a      	ldr	r2, [r3, #32]
 800198a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198c:	1ad2      	subs	r2, r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	621a      	str	r2, [r3, #32]
 8001992:	e014      	b.n	80019be <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d106      	bne.n	80019aa <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800199c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019a8:	e009      	b.n	80019be <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2200      	movs	r2, #0
 80019bc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d155      	bne.n	8001a72 <HAL_PCD_EP_DB_Transmit+0x230>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	4413      	add	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	011a      	lsls	r2, r3, #4
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	4413      	add	r3, r2
 80019e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d112      	bne.n	8001a1a <HAL_PCD_EP_DB_Transmit+0x1d8>
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	801a      	strh	r2, [r3, #0]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	e047      	b.n	8001aaa <HAL_PCD_EP_DB_Transmit+0x268>
 8001a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1c:	2b3e      	cmp	r3, #62	; 0x3e
 8001a1e:	d811      	bhi.n	8001a44 <HAL_PCD_EP_DB_Transmit+0x202>
 8001a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a32:	3301      	adds	r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	029b      	lsls	r3, r3, #10
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	e032      	b.n	8001aaa <HAL_PCD_EP_DB_Transmit+0x268>
 8001a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <HAL_PCD_EP_DB_Transmit+0x218>
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	3b01      	subs	r3, #1
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	029b      	lsls	r3, r3, #10
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	801a      	strh	r2, [r3, #0]
 8001a70:	e01b      	b.n	8001aaa <HAL_PCD_EP_DB_Transmit+0x268>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	785b      	ldrb	r3, [r3, #1]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d117      	bne.n	8001aaa <HAL_PCD_EP_DB_Transmit+0x268>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	4413      	add	r3, r2
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	011a      	lsls	r2, r3, #4
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	6959      	ldr	r1, [r3, #20]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	891a      	ldrh	r2, [r3, #8]
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f002 fe61 	bl	8004780 <USB_WritePMA>
 8001abe:	e130      	b.n	8001d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3306      	adds	r3, #6
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d306      	bcc.n	8001b02 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001afa:	1ad2      	subs	r2, r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	619a      	str	r2, [r3, #24]
 8001b00:	e002      	b.n	8001b08 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d12c      	bne.n	8001b6a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f004 fc69 	bl	80063ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 80fd 	bne.w	8001d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b42:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	441a      	add	r2, r3
 8001b52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	8013      	strh	r3, [r2, #0]
 8001b68:	e0db      	b.n	8001d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d11f      	bne.n	8001bb4 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	441a      	add	r2, r3
 8001b9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	f040 80b1 	bne.w	8001d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bc6:	441a      	add	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	69da      	ldr	r2, [r3, #28]
 8001bd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bd2:	441a      	add	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	6a1a      	ldr	r2, [r3, #32]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d309      	bcc.n	8001bf8 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	6a1a      	ldr	r2, [r3, #32]
 8001bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf0:	1ad2      	subs	r2, r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	621a      	str	r2, [r3, #32]
 8001bf6:	e014      	b.n	8001c22 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d106      	bne.n	8001c0e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8001c00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c02:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c0c:	e009      	b.n	8001c22 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2200      	movs	r2, #0
 8001c18:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	785b      	ldrb	r3, [r3, #1]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d155      	bne.n	8001cdc <HAL_PCD_EP_DB_Transmit+0x49a>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	647b      	str	r3, [r7, #68]	; 0x44
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c44:	4413      	add	r3, r2
 8001c46:	647b      	str	r3, [r7, #68]	; 0x44
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	011a      	lsls	r2, r3, #4
 8001c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c50:	4413      	add	r3, r2
 8001c52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
 8001c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d112      	bne.n	8001c84 <HAL_PCD_EP_DB_Transmit+0x442>
 8001c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	e044      	b.n	8001d0e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c86:	2b3e      	cmp	r3, #62	; 0x3e
 8001c88:	d811      	bhi.n	8001cae <HAL_PCD_EP_DB_Transmit+0x46c>
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_PCD_EP_DB_Transmit+0x45e>
 8001c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	029b      	lsls	r3, r3, #10
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	e02f      	b.n	8001d0e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <HAL_PCD_EP_DB_Transmit+0x482>
 8001cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	029b      	lsls	r3, r3, #10
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd8:	801a      	strh	r2, [r3, #0]
 8001cda:	e018      	b.n	8001d0e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	785b      	ldrb	r3, [r3, #1]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d114      	bne.n	8001d0e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	4413      	add	r3, r2
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	011a      	lsls	r2, r3, #4
 8001cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfe:	4413      	add	r3, r2
 8001d00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
 8001d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	6959      	ldr	r1, [r3, #20]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	895a      	ldrh	r2, [r3, #10]
 8001d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f002 fd2f 	bl	8004780 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d3c:	823b      	strh	r3, [r7, #16]
 8001d3e:	8a3b      	ldrh	r3, [r7, #16]
 8001d40:	f083 0310 	eor.w	r3, r3, #16
 8001d44:	823b      	strh	r3, [r7, #16]
 8001d46:	8a3b      	ldrh	r3, [r7, #16]
 8001d48:	f083 0320 	eor.w	r3, r3, #32
 8001d4c:	823b      	strh	r3, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	441a      	add	r2, r3
 8001d5c:	8a3b      	ldrh	r3, [r7, #16]
 8001d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3748      	adds	r7, #72	; 0x48
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	817b      	strh	r3, [r7, #10]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001d8e:	897b      	ldrh	r3, [r7, #10]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00b      	beq.n	8001db2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	897b      	ldrh	r3, [r7, #10]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e009      	b.n	8001dc6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001db2:	897a      	ldrh	r2, [r7, #10]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001dc6:	893b      	ldrh	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	80da      	strh	r2, [r3, #6]
 8001dda:	e00b      	b.n	8001df4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2201      	movs	r2, #1
 8001de0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e26c      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8087 	beq.w	8001f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e20:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d00c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e2c:	4b8f      	ldr	r3, [pc, #572]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d112      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5e>
 8001e38:	4b8c      	ldr	r3, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d10b      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d06c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x12c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d168      	bne.n	8001f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e246      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x76>
 8001e68:	4b80      	ldr	r3, [pc, #512]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a7f      	ldr	r2, [pc, #508]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e02e      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x98>
 8001e7e:	4b7b      	ldr	r3, [pc, #492]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7a      	ldr	r2, [pc, #488]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b78      	ldr	r3, [pc, #480]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a77      	ldr	r2, [pc, #476]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0xbc>
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a71      	ldr	r2, [pc, #452]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001ebc:	4b6b      	ldr	r3, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6a      	ldr	r2, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe fad4 	bl	8000488 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7fe fad0 	bl	8000488 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1fa      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xe4>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fac0 	bl	8000488 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fabc 	bl	8000488 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1e6      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x10c>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3a:	4b4c      	ldr	r3, [pc, #304]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f46:	4b49      	ldr	r3, [pc, #292]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x18c>
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x176>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1ba      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4939      	ldr	r1, [pc, #228]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e03a      	b.n	8002002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe fa75 	bl	8000488 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7fe fa71 	bl	8000488 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e19b      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4927      	ldr	r1, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fa54 	bl	8000488 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7fe fa50 	bl	8000488 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e17a      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03a      	beq.n	8002084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d019      	beq.n	800204a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7fe fa34 	bl	8000488 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7fe fa30 	bl	8000488 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e15a      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002042:	2001      	movs	r0, #1
 8002044:	f000 faa8 	bl	8002598 <RCC_Delay>
 8002048:	e01c      	b.n	8002084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fa1a 	bl	8000488 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002056:	e00f      	b.n	8002078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7fe fa16 	bl	8000488 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d908      	bls.n	8002078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e140      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	42420000 	.word	0x42420000
 8002074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b9e      	ldr	r3, [pc, #632]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e9      	bne.n	8002058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a6 	beq.w	80021de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b97      	ldr	r3, [pc, #604]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10d      	bne.n	80020be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b94      	ldr	r3, [pc, #592]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a93      	ldr	r2, [pc, #588]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b91      	ldr	r3, [pc, #580]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a8a      	ldr	r2, [pc, #552]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7fe f9d7 	bl	8000488 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7fe f9d3 	bl	8000488 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b64      	cmp	r3, #100	; 0x64
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0fd      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x312>
 8002104:	4b7b      	ldr	r3, [pc, #492]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a7a      	ldr	r2, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e02d      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x334>
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a72      	ldr	r2, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	e01c      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b05      	cmp	r3, #5
 800213a:	d10c      	bne.n	8002156 <HAL_RCC_OscConfig+0x356>
 800213c:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a6c      	ldr	r2, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a69      	ldr	r2, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	e00b      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002156:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a66      	ldr	r2, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a63      	ldr	r2, [pc, #396]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d015      	beq.n	80021a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7fe f987 	bl	8000488 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe f983 	bl	8000488 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0ab      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ee      	beq.n	800217e <HAL_RCC_OscConfig+0x37e>
 80021a0:	e014      	b.n	80021cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7fe f971 	bl	8000488 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7fe f96d 	bl	8000488 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e095      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ee      	bne.n	80021aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a47      	ldr	r2, [pc, #284]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8081 	beq.w	80022ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e8:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d061      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d146      	bne.n	800228a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <HAL_RCC_OscConfig+0x4fc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7fe f941 	bl	8000488 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe f93d 	bl	8000488 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e067      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002230:	d108      	bne.n	8002244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	492d      	ldr	r1, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a19      	ldr	r1, [r3, #32]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	430b      	orrs	r3, r1
 8002256:	4927      	ldr	r1, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x4fc>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe f911 	bl	8000488 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe f90d 	bl	8000488 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e037      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x46a>
 8002288:	e02f      	b.n	80022ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_RCC_OscConfig+0x4fc>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe f8fa 	bl	8000488 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe f8f6 	bl	8000488 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e020      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x498>
 80022b6:	e018      	b.n	80022ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e013      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
 80022fc:	42420060 	.word	0x42420060

08002300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0d0      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d910      	bls.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4965      	ldr	r1, [pc, #404]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b8      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a58      	ldr	r2, [pc, #352]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002366:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	494d      	ldr	r1, [pc, #308]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d040      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d115      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e07f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e073      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06b      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4936      	ldr	r1, [pc, #216]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe f84a 	bl	8000488 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe f846 	bl	8000488 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e053      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d210      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 0207 	bic.w	r2, r3, #7
 8002436:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e032      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4916      	ldr	r1, [pc, #88]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	490e      	ldr	r1, [pc, #56]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248e:	f000 f821 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002492:	4601      	mov	r1, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	fa21 f303 	lsr.w	r3, r1, r3
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1cc>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1d0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd ffa8 	bl	8000404 <HAL_InitTick>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40022000 	.word	0x40022000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08006968 	.word	0x08006968
 80024cc:	20000014 	.word	0x20000014
 80024d0:	20000018 	.word	0x20000018

080024d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b490      	push	{r4, r7}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024dc:	1d3c      	adds	r4, r7, #4
 80024de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fe:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d002      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x40>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d003      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x46>
 8002512:	e02d      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002514:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002516:	623b      	str	r3, [r7, #32]
      break;
 8002518:	e02d      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	0c9b      	lsrs	r3, r3, #18
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002526:	4413      	add	r3, r2
 8002528:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800252c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	0c5b      	lsrs	r3, r3, #17
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002546:	4413      	add	r3, r2
 8002548:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800254c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002552:	fb02 f203 	mul.w	r2, r2, r3
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	e004      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	623b      	str	r3, [r7, #32]
      break;
 800256e:	e002      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002572:	623b      	str	r3, [r7, #32]
      break;
 8002574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002576:	6a3b      	ldr	r3, [r7, #32]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bc90      	pop	{r4, r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	0800690c 	.word	0x0800690c
 8002588:	0800691c 	.word	0x0800691c
 800258c:	40021000 	.word	0x40021000
 8002590:	007a1200 	.word	0x007a1200
 8002594:	003d0900 	.word	0x003d0900

08002598 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <RCC_Delay+0x34>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <RCC_Delay+0x38>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0a5b      	lsrs	r3, r3, #9
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b4:	bf00      	nop
  }
  while (Delay --);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <RCC_Delay+0x1c>
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000014 	.word	0x20000014
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d07d      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80025f0:	2300      	movs	r3, #0
 80025f2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f4:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10d      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002600:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4a4b      	ldr	r2, [pc, #300]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260a:	61d3      	str	r3, [r2, #28]
 800260c:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002618:	2301      	movs	r3, #1
 800261a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b46      	ldr	r3, [pc, #280]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d118      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002628:	4b43      	ldr	r3, [pc, #268]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a42      	ldr	r2, [pc, #264]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002634:	f7fd ff28 	bl	8000488 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	e008      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7fd ff24 	bl	8000488 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e06d      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800265a:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d02e      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d027      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002680:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800268e:	4a29      	ldr	r2, [pc, #164]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d014      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fd fef3 	bl	8000488 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fd feef 	bl	8000488 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e036      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ee      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c8:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4917      	ldr	r1, [pc, #92]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	4a13      	ldr	r2, [pc, #76]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	490b      	ldr	r1, [pc, #44]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
 800273c:	42420440 	.word	0x42420440

08002740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002740:	b084      	sub	sp, #16
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	f107 0014 	add.w	r0, r7, #20
 800274e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	b004      	add	sp, #16
 800275e:	4770      	bx	lr

08002760 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002770:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002774:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002794:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002798:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4013      	ands	r3, r2
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80027d8:	b084      	sub	sp, #16
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	f107 0014 	add.w	r0, r7, #20
 80027e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	b004      	add	sp, #16
 8002816:	4770      	bx	lr

08002818 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002818:	b480      	push	{r7}
 800281a:	b09b      	sub	sp, #108	; 0x6c
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	78db      	ldrb	r3, [r3, #3]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d81f      	bhi.n	800288a <USB_ActivateEndpoint+0x72>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <USB_ActivateEndpoint+0x38>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	08002861 	.word	0x08002861
 8002854:	0800287d 	.word	0x0800287d
 8002858:	08002893 	.word	0x08002893
 800285c:	0800286f 	.word	0x0800286f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002860:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002868:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800286c:	e012      	b.n	8002894 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800286e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002872:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002876:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800287a:	e00b      	b.n	8002894 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800287c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002884:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002888:	e004      	b.n	8002894 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002890:	e000      	b.n	8002894 <USB_ActivateEndpoint+0x7c>
      break;
 8002892:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	441a      	add	r2, r3
 800289e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80028a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	441a      	add	r2, r3
 80028e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80028e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	7b1b      	ldrb	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 8149 	bne.w	8002b98 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8084 	beq.w	8002a18 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	4413      	add	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	011a      	lsls	r2, r3, #4
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	88db      	ldrh	r3, [r3, #6]
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	b29b      	uxth	r3, r3
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	81fb      	strh	r3, [r7, #14]
 8002952:	89fb      	ldrh	r3, [r7, #14]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01b      	beq.n	8002994 <USB_ActivateEndpoint+0x17c>
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	81bb      	strh	r3, [r7, #12]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	441a      	add	r2, r3
 800297e:	89bb      	ldrh	r3, [r7, #12]
 8002980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002990:	b29b      	uxth	r3, r3
 8002992:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d020      	beq.n	80029de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b2:	813b      	strh	r3, [r7, #8]
 80029b4:	893b      	ldrh	r3, [r7, #8]
 80029b6:	f083 0320 	eor.w	r3, r3, #32
 80029ba:	813b      	strh	r3, [r7, #8]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	441a      	add	r2, r3
 80029c6:	893b      	ldrh	r3, [r7, #8]
 80029c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d8:	b29b      	uxth	r3, r3
 80029da:	8013      	strh	r3, [r2, #0]
 80029dc:	e27f      	b.n	8002ede <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	441a      	add	r2, r3
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	8013      	strh	r3, [r2, #0]
 8002a16:	e262      	b.n	8002ede <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	4413      	add	r3, r2
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	011a      	lsls	r2, r3, #4
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	88db      	ldrh	r3, [r3, #6]
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	4413      	add	r3, r2
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	011a      	lsls	r2, r3, #4
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	4413      	add	r3, r2
 8002a6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d112      	bne.n	8002a9e <USB_ActivateEndpoint+0x286>
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	e02f      	b.n	8002afe <USB_ActivateEndpoint+0x2e6>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8002aa4:	d813      	bhi.n	8002ace <USB_ActivateEndpoint+0x2b6>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	663b      	str	r3, [r7, #96]	; 0x60
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <USB_ActivateEndpoint+0x2a8>
 8002aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abc:	3301      	adds	r3, #1
 8002abe:	663b      	str	r3, [r7, #96]	; 0x60
 8002ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	029b      	lsls	r3, r3, #10
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	801a      	strh	r2, [r3, #0]
 8002acc:	e017      	b.n	8002afe <USB_ActivateEndpoint+0x2e6>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <USB_ActivateEndpoint+0x2d0>
 8002ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	029b      	lsls	r3, r3, #10
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	83fb      	strh	r3, [r7, #30]
 8002b0c:	8bfb      	ldrh	r3, [r7, #30]
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01b      	beq.n	8002b4e <USB_ActivateEndpoint+0x336>
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2c:	83bb      	strh	r3, [r7, #28]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	441a      	add	r2, r3
 8002b38:	8bbb      	ldrh	r3, [r7, #28]
 8002b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b64:	837b      	strh	r3, [r7, #26]
 8002b66:	8b7b      	ldrh	r3, [r7, #26]
 8002b68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b6c:	837b      	strh	r3, [r7, #26]
 8002b6e:	8b7b      	ldrh	r3, [r7, #26]
 8002b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b74:	837b      	strh	r3, [r7, #26]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	8b7b      	ldrh	r3, [r7, #26]
 8002b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	8013      	strh	r3, [r2, #0]
 8002b96:	e1a2      	b.n	8002ede <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	441a      	add	r2, r3
 8002bbc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be4:	4413      	add	r3, r2
 8002be6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	011a      	lsls	r2, r3, #4
 8002bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	891b      	ldrh	r3, [r3, #8]
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	801a      	strh	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c18:	4413      	add	r3, r2
 8002c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	011a      	lsls	r2, r3, #4
 8002c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	895b      	ldrh	r3, [r3, #10]
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 8091 	bne.w	8002d68 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002c54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01b      	beq.n	8002c96 <USB_ActivateEndpoint+0x47e>
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c74:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	441a      	add	r2, r3
 8002c80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	873b      	strh	r3, [r7, #56]	; 0x38
 8002ca4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01b      	beq.n	8002ce6 <USB_ActivateEndpoint+0x4ce>
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	441a      	add	r2, r3
 8002cd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002cfe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002d00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002d06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002d08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	441a      	add	r2, r3
 8002d18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d44:	867b      	strh	r3, [r7, #50]	; 0x32
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	441a      	add	r2, r3
 8002d50:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	8013      	strh	r3, [r2, #0]
 8002d66:	e0ba      	b.n	8002ede <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002d78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01d      	beq.n	8002dc0 <USB_ActivateEndpoint+0x5a8>
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002dd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01d      	beq.n	8002e18 <USB_ActivateEndpoint+0x600>
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	441a      	add	r2, r3
 8002e00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	78db      	ldrb	r3, [r3, #3]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d024      	beq.n	8002e6a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002e3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e3e:	f083 0320 	eor.w	r3, r3, #32
 8002e42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	441a      	add	r2, r3
 8002e50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	8013      	strh	r3, [r2, #0]
 8002e68:	e01d      	b.n	8002ea6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	441a      	add	r2, r3
 8002e8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002ede:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	376c      	adds	r7, #108	; 0x6c
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b08d      	sub	sp, #52	; 0x34
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	7b1b      	ldrb	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 808e 	bne.w	800301c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	785b      	ldrb	r3, [r3, #1]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d044      	beq.n	8002f92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	81bb      	strh	r3, [r7, #12]
 8002f16:	89bb      	ldrh	r3, [r7, #12]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01b      	beq.n	8002f58 <USB_DeactivateEndpoint+0x6c>
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	441a      	add	r2, r3
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f6e:	813b      	strh	r3, [r7, #8]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	893b      	ldrh	r3, [r7, #8]
 8002f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	8013      	strh	r3, [r2, #0]
 8002f90:	e192      	b.n	80032b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	827b      	strh	r3, [r7, #18]
 8002fa0:	8a7b      	ldrh	r3, [r7, #18]
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01b      	beq.n	8002fe2 <USB_DeactivateEndpoint+0xf6>
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc0:	823b      	strh	r3, [r7, #16]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	8a3b      	ldrh	r3, [r7, #16]
 8002fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff8:	81fb      	strh	r3, [r7, #14]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	441a      	add	r2, r3
 8003004:	89fb      	ldrh	r3, [r7, #14]
 8003006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800300a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003016:	b29b      	uxth	r3, r3
 8003018:	8013      	strh	r3, [r2, #0]
 800301a:	e14d      	b.n	80032b8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 80a5 	bne.w	8003170 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	843b      	strh	r3, [r7, #32]
 8003034:	8c3b      	ldrh	r3, [r7, #32]
 8003036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01b      	beq.n	8003076 <USB_DeactivateEndpoint+0x18a>
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	b29b      	uxth	r3, r3
 800304c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003054:	83fb      	strh	r3, [r7, #30]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	441a      	add	r2, r3
 8003060:	8bfb      	ldrh	r3, [r7, #30]
 8003062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800306a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800306e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003072:	b29b      	uxth	r3, r3
 8003074:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	83bb      	strh	r3, [r7, #28]
 8003084:	8bbb      	ldrh	r3, [r7, #28]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01b      	beq.n	80030c6 <USB_DeactivateEndpoint+0x1da>
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a4:	837b      	strh	r3, [r7, #26]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	8b7b      	ldrh	r3, [r7, #26]
 80030b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030dc:	833b      	strh	r3, [r7, #24]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	441a      	add	r2, r3
 80030e8:	8b3b      	ldrh	r3, [r7, #24]
 80030ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003114:	82fb      	strh	r3, [r7, #22]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	441a      	add	r2, r3
 8003120:	8afb      	ldrh	r3, [r7, #22]
 8003122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800312a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003132:	b29b      	uxth	r3, r3
 8003134:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314c:	82bb      	strh	r3, [r7, #20]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	441a      	add	r2, r3
 8003158:	8abb      	ldrh	r3, [r7, #20]
 800315a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316a:	b29b      	uxth	r3, r3
 800316c:	8013      	strh	r3, [r2, #0]
 800316e:	e0a3      	b.n	80032b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800317e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <USB_DeactivateEndpoint+0x2d4>
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031bc:	b29b      	uxth	r3, r3
 80031be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80031ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01b      	beq.n	8003210 <USB_DeactivateEndpoint+0x324>
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800320c:	b29b      	uxth	r3, r3
 800320e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003244:	b29b      	uxth	r3, r3
 8003246:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800325e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800326c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327c:	b29b      	uxth	r3, r3
 800327e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	847b      	strh	r3, [r7, #34]	; 0x22
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3734      	adds	r7, #52	; 0x34
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b0c4      	sub	sp, #272	; 0x110
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	6018      	str	r0, [r3, #0]
 80032ce:	463b      	mov	r3, r7
 80032d0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80032d2:	463b      	mov	r3, r7
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 8557 	bne.w	8003d8c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80032de:	463b      	mov	r3, r7
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	463b      	mov	r3, r7
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d905      	bls.n	80032fa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80032ee:	463b      	mov	r3, r7
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80032f8:	e004      	b.n	8003304 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80032fa:	463b      	mov	r3, r7
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003304:	463b      	mov	r3, r7
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	7b1b      	ldrb	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d12c      	bne.n	8003368 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800330e:	463b      	mov	r3, r7
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6959      	ldr	r1, [r3, #20]
 8003314:	463b      	mov	r3, r7
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	88da      	ldrh	r2, [r3, #6]
 800331a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800331e:	b29b      	uxth	r3, r3
 8003320:	1d38      	adds	r0, r7, #4
 8003322:	6800      	ldr	r0, [r0, #0]
 8003324:	f001 fa2c 	bl	8004780 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003336:	b29b      	uxth	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4413      	add	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	463b      	mov	r3, r7
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	011a      	lsls	r2, r3, #4
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	4413      	add	r3, r2
 800334c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335a:	b29a      	uxth	r2, r3
 800335c:	f107 0310 	add.w	r3, r7, #16
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	801a      	strh	r2, [r3, #0]
 8003364:	f000 bcdd 	b.w	8003d22 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003368:	463b      	mov	r3, r7
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	78db      	ldrb	r3, [r3, #3]
 800336e:	2b02      	cmp	r3, #2
 8003370:	f040 8347 	bne.w	8003a02 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003374:	463b      	mov	r3, r7
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6a1a      	ldr	r2, [r3, #32]
 800337a:	463b      	mov	r3, r7
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	f240 82eb 	bls.w	800395c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	463b      	mov	r3, r7
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	463b      	mov	r3, r7
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80033b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033be:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80033c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80033ca:	463b      	mov	r3, r7
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d4:	1ad2      	subs	r2, r2, r3
 80033d6:	463b      	mov	r3, r7
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	463b      	mov	r3, r7
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8159 	beq.w	80036aa <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	637b      	str	r3, [r7, #52]	; 0x34
 80033fe:	463b      	mov	r3, r7
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d164      	bne.n	80034d2 <USB_EPStartXfer+0x20e>
 8003408:	1d3b      	adds	r3, r7, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340e:	1d3b      	adds	r3, r7, #4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003416:	b29b      	uxth	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	4413      	add	r3, r2
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003420:	463b      	mov	r3, r7
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	011a      	lsls	r2, r3, #4
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	4413      	add	r3, r2
 800342c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
 8003432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d112      	bne.n	8003460 <USB_EPStartXfer+0x19c>
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003444:	b29a      	uxth	r2, r3
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003458:	b29a      	uxth	r2, r3
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	e054      	b.n	800350a <USB_EPStartXfer+0x246>
 8003460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003464:	2b3e      	cmp	r3, #62	; 0x3e
 8003466:	d817      	bhi.n	8003498 <USB_EPStartXfer+0x1d4>
 8003468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d004      	beq.n	8003488 <USB_EPStartXfer+0x1c4>
 800347e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003482:	3301      	adds	r3, #1
 8003484:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800348c:	b29b      	uxth	r3, r3
 800348e:	029b      	lsls	r3, r3, #10
 8003490:	b29a      	uxth	r2, r3
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	801a      	strh	r2, [r3, #0]
 8003496:	e038      	b.n	800350a <USB_EPStartXfer+0x246>
 8003498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80034a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d104      	bne.n	80034b8 <USB_EPStartXfer+0x1f4>
 80034ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034b2:	3b01      	subs	r3, #1
 80034b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80034b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034bc:	b29b      	uxth	r3, r3
 80034be:	029b      	lsls	r3, r3, #10
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	e01b      	b.n	800350a <USB_EPStartXfer+0x246>
 80034d2:	463b      	mov	r3, r7
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d116      	bne.n	800350a <USB_EPStartXfer+0x246>
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	4413      	add	r3, r2
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
 80034ee:	463b      	mov	r3, r7
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	011a      	lsls	r2, r3, #4
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	4413      	add	r3, r2
 80034fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003504:	b29a      	uxth	r2, r3
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800350a:	463b      	mov	r3, r7
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	895b      	ldrh	r3, [r3, #10]
 8003510:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003514:	463b      	mov	r3, r7
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6959      	ldr	r1, [r3, #20]
 800351a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800351e:	b29b      	uxth	r3, r3
 8003520:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003524:	1d38      	adds	r0, r7, #4
 8003526:	6800      	ldr	r0, [r0, #0]
 8003528:	f001 f92a 	bl	8004780 <USB_WritePMA>
            ep->xfer_buff += len;
 800352c:	463b      	mov	r3, r7
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003536:	441a      	add	r2, r3
 8003538:	463b      	mov	r3, r7
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800353e:	463b      	mov	r3, r7
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a1a      	ldr	r2, [r3, #32]
 8003544:	463b      	mov	r3, r7
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	429a      	cmp	r2, r3
 800354c:	d909      	bls.n	8003562 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800354e:	463b      	mov	r3, r7
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003558:	1ad2      	subs	r2, r2, r3
 800355a:	463b      	mov	r3, r7
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	621a      	str	r2, [r3, #32]
 8003560:	e008      	b.n	8003574 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003562:	463b      	mov	r3, r7
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800356c:	463b      	mov	r3, r7
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003574:	463b      	mov	r3, r7
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d164      	bne.n	8003648 <USB_EPStartXfer+0x384>
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358c:	b29b      	uxth	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	463b      	mov	r3, r7
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	011a      	lsls	r2, r3, #4
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d112      	bne.n	80035d6 <USB_EPStartXfer+0x312>
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	801a      	strh	r2, [r3, #0]
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	e057      	b.n	8003686 <USB_EPStartXfer+0x3c2>
 80035d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035da:	2b3e      	cmp	r3, #62	; 0x3e
 80035dc:	d817      	bhi.n	800360e <USB_EPStartXfer+0x34a>
 80035de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <USB_EPStartXfer+0x33a>
 80035f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035f8:	3301      	adds	r3, #1
 80035fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003602:	b29b      	uxth	r3, r3
 8003604:	029b      	lsls	r3, r3, #10
 8003606:	b29a      	uxth	r2, r3
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e03b      	b.n	8003686 <USB_EPStartXfer+0x3c2>
 800360e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2b00      	cmp	r3, #0
 8003622:	d104      	bne.n	800362e <USB_EPStartXfer+0x36a>
 8003624:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003628:	3b01      	subs	r3, #1
 800362a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800362e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003632:	b29b      	uxth	r3, r3
 8003634:	029b      	lsls	r3, r3, #10
 8003636:	b29b      	uxth	r3, r3
 8003638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003640:	b29a      	uxth	r2, r3
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	e01e      	b.n	8003686 <USB_EPStartXfer+0x3c2>
 8003648:	463b      	mov	r3, r7
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	785b      	ldrb	r3, [r3, #1]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d119      	bne.n	8003686 <USB_EPStartXfer+0x3c2>
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003660:	b29b      	uxth	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	4413      	add	r3, r2
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
 800366a:	463b      	mov	r3, r7
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	011a      	lsls	r2, r3, #4
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	4413      	add	r3, r2
 8003676:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800367a:	623b      	str	r3, [r7, #32]
 800367c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003680:	b29a      	uxth	r2, r3
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003686:	463b      	mov	r3, r7
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	891b      	ldrh	r3, [r3, #8]
 800368c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003690:	463b      	mov	r3, r7
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6959      	ldr	r1, [r3, #20]
 8003696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369a:	b29b      	uxth	r3, r3
 800369c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80036a0:	1d38      	adds	r0, r7, #4
 80036a2:	6800      	ldr	r0, [r0, #0]
 80036a4:	f001 f86c 	bl	8004780 <USB_WritePMA>
 80036a8:	e33b      	b.n	8003d22 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80036aa:	463b      	mov	r3, r7
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d164      	bne.n	800377e <USB_EPStartXfer+0x4ba>
 80036b4:	1d3b      	adds	r3, r7, #4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c8:	4413      	add	r3, r2
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036cc:	463b      	mov	r3, r7
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	011a      	lsls	r2, r3, #4
 80036d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d6:	4413      	add	r3, r2
 80036d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80036de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d112      	bne.n	800370c <USB_EPStartXfer+0x448>
 80036e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003704:	b29a      	uxth	r2, r3
 8003706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e057      	b.n	80037bc <USB_EPStartXfer+0x4f8>
 800370c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003710:	2b3e      	cmp	r3, #62	; 0x3e
 8003712:	d817      	bhi.n	8003744 <USB_EPStartXfer+0x480>
 8003714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800371e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <USB_EPStartXfer+0x470>
 800372a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800372e:	3301      	adds	r3, #1
 8003730:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003738:	b29b      	uxth	r3, r3
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	b29a      	uxth	r2, r3
 800373e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	e03b      	b.n	80037bc <USB_EPStartXfer+0x4f8>
 8003744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800374e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2b00      	cmp	r3, #0
 8003758:	d104      	bne.n	8003764 <USB_EPStartXfer+0x4a0>
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375e:	3b01      	subs	r3, #1
 8003760:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003768:	b29b      	uxth	r3, r3
 800376a:	029b      	lsls	r3, r3, #10
 800376c:	b29b      	uxth	r3, r3
 800376e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003776:	b29a      	uxth	r2, r3
 8003778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800377a:	801a      	strh	r2, [r3, #0]
 800377c:	e01e      	b.n	80037bc <USB_EPStartXfer+0x4f8>
 800377e:	463b      	mov	r3, r7
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d119      	bne.n	80037bc <USB_EPStartXfer+0x4f8>
 8003788:	1d3b      	adds	r3, r7, #4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	657b      	str	r3, [r7, #84]	; 0x54
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379c:	4413      	add	r3, r2
 800379e:	657b      	str	r3, [r7, #84]	; 0x54
 80037a0:	463b      	mov	r3, r7
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	011a      	lsls	r2, r3, #4
 80037a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037aa:	4413      	add	r3, r2
 80037ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037b0:	653b      	str	r3, [r7, #80]	; 0x50
 80037b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80037bc:	463b      	mov	r3, r7
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	891b      	ldrh	r3, [r3, #8]
 80037c2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037c6:	463b      	mov	r3, r7
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6959      	ldr	r1, [r3, #20]
 80037cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80037d6:	1d38      	adds	r0, r7, #4
 80037d8:	6800      	ldr	r0, [r0, #0]
 80037da:	f000 ffd1 	bl	8004780 <USB_WritePMA>
            ep->xfer_buff += len;
 80037de:	463b      	mov	r3, r7
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e8:	441a      	add	r2, r3
 80037ea:	463b      	mov	r3, r7
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80037f0:	463b      	mov	r3, r7
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6a1a      	ldr	r2, [r3, #32]
 80037f6:	463b      	mov	r3, r7
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d909      	bls.n	8003814 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003800:	463b      	mov	r3, r7
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800380a:	1ad2      	subs	r2, r2, r3
 800380c:	463b      	mov	r3, r7
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	621a      	str	r2, [r3, #32]
 8003812:	e008      	b.n	8003826 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003814:	463b      	mov	r3, r7
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800381e:	463b      	mov	r3, r7
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	647b      	str	r3, [r7, #68]	; 0x44
 800382c:	463b      	mov	r3, r7
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d164      	bne.n	8003900 <USB_EPStartXfer+0x63c>
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003844:	b29b      	uxth	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384a:	4413      	add	r3, r2
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384e:	463b      	mov	r3, r7
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	011a      	lsls	r2, r3, #4
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	4413      	add	r3, r2
 800385a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800385e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d112      	bne.n	800388e <USB_EPStartXfer+0x5ca>
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003872:	b29a      	uxth	r2, r3
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003886:	b29a      	uxth	r2, r3
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	801a      	strh	r2, [r3, #0]
 800388c:	e054      	b.n	8003938 <USB_EPStartXfer+0x674>
 800388e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003892:	2b3e      	cmp	r3, #62	; 0x3e
 8003894:	d817      	bhi.n	80038c6 <USB_EPStartXfer+0x602>
 8003896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <USB_EPStartXfer+0x5f2>
 80038ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038b0:	3301      	adds	r3, #1
 80038b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	029b      	lsls	r3, r3, #10
 80038be:	b29a      	uxth	r2, r3
 80038c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	e038      	b.n	8003938 <USB_EPStartXfer+0x674>
 80038c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <USB_EPStartXfer+0x622>
 80038dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038e0:	3b01      	subs	r3, #1
 80038e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	029b      	lsls	r3, r3, #10
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	e01b      	b.n	8003938 <USB_EPStartXfer+0x674>
 8003900:	463b      	mov	r3, r7
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	785b      	ldrb	r3, [r3, #1]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d116      	bne.n	8003938 <USB_EPStartXfer+0x674>
 800390a:	1d3b      	adds	r3, r7, #4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003912:	b29b      	uxth	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003918:	4413      	add	r3, r2
 800391a:	647b      	str	r3, [r7, #68]	; 0x44
 800391c:	463b      	mov	r3, r7
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	011a      	lsls	r2, r3, #4
 8003924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003926:	4413      	add	r3, r2
 8003928:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800392c:	643b      	str	r3, [r7, #64]	; 0x40
 800392e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003932:	b29a      	uxth	r2, r3
 8003934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003936:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003938:	463b      	mov	r3, r7
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	895b      	ldrh	r3, [r3, #10]
 800393e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003942:	463b      	mov	r3, r7
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6959      	ldr	r1, [r3, #20]
 8003948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800394c:	b29b      	uxth	r3, r3
 800394e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003952:	1d38      	adds	r0, r7, #4
 8003954:	6800      	ldr	r0, [r0, #0]
 8003956:	f000 ff13 	bl	8004780 <USB_WritePMA>
 800395a:	e1e2      	b.n	8003d22 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800395c:	463b      	mov	r3, r7
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003966:	1d3b      	adds	r3, r7, #4
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	463b      	mov	r3, r7
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800397c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003980:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	463b      	mov	r3, r7
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800399a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800399e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	663b      	str	r3, [r7, #96]	; 0x60
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039be:	4413      	add	r3, r2
 80039c0:	663b      	str	r3, [r7, #96]	; 0x60
 80039c2:	463b      	mov	r3, r7
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	011a      	lsls	r2, r3, #4
 80039ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039cc:	4413      	add	r3, r2
 80039ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80039de:	463b      	mov	r3, r7
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	891b      	ldrh	r3, [r3, #8]
 80039e4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039e8:	463b      	mov	r3, r7
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6959      	ldr	r1, [r3, #20]
 80039ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80039f8:	1d38      	adds	r0, r7, #4
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	f000 fec0 	bl	8004780 <USB_WritePMA>
 8003a00:	e18f      	b.n	8003d22 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	463b      	mov	r3, r7
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 808f 	beq.w	8003b3c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a24:	463b      	mov	r3, r7
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d164      	bne.n	8003af8 <USB_EPStartXfer+0x834>
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	673b      	str	r3, [r7, #112]	; 0x70
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a42:	4413      	add	r3, r2
 8003a44:	673b      	str	r3, [r7, #112]	; 0x70
 8003a46:	463b      	mov	r3, r7
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	011a      	lsls	r2, r3, #4
 8003a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a50:	4413      	add	r3, r2
 8003a52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d112      	bne.n	8003a86 <USB_EPStartXfer+0x7c2>
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	801a      	strh	r2, [r3, #0]
 8003a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	e054      	b.n	8003b30 <USB_EPStartXfer+0x86c>
 8003a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8003a8c:	d817      	bhi.n	8003abe <USB_EPStartXfer+0x7fa>
 8003a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <USB_EPStartXfer+0x7ea>
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	029b      	lsls	r3, r3, #10
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aba:	801a      	strh	r2, [r3, #0]
 8003abc:	e038      	b.n	8003b30 <USB_EPStartXfer+0x86c>
 8003abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <USB_EPStartXfer+0x81a>
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	029b      	lsls	r3, r3, #10
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af4:	801a      	strh	r2, [r3, #0]
 8003af6:	e01b      	b.n	8003b30 <USB_EPStartXfer+0x86c>
 8003af8:	463b      	mov	r3, r7
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	785b      	ldrb	r3, [r3, #1]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d116      	bne.n	8003b30 <USB_EPStartXfer+0x86c>
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b10:	4413      	add	r3, r2
 8003b12:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b14:	463b      	mov	r3, r7
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	011a      	lsls	r2, r3, #4
 8003b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1e:	4413      	add	r3, r2
 8003b20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b24:	677b      	str	r3, [r7, #116]	; 0x74
 8003b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003b30:	463b      	mov	r3, r7
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	895b      	ldrh	r3, [r3, #10]
 8003b36:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003b3a:	e097      	b.n	8003c6c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d168      	bne.n	8003c18 <USB_EPStartXfer+0x954>
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b4e:	1d3b      	adds	r3, r7, #4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b5e:	4413      	add	r3, r2
 8003b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b64:	463b      	mov	r3, r7
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	011a      	lsls	r2, r3, #4
 8003b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b70:	4413      	add	r3, r2
 8003b72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d112      	bne.n	8003ba6 <USB_EPStartXfer+0x8e2>
 8003b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b8e:	801a      	strh	r2, [r3, #0]
 8003b90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ba2:	801a      	strh	r2, [r3, #0]
 8003ba4:	e05d      	b.n	8003c62 <USB_EPStartXfer+0x99e>
 8003ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003baa:	2b3e      	cmp	r3, #62	; 0x3e
 8003bac:	d817      	bhi.n	8003bde <USB_EPStartXfer+0x91a>
 8003bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <USB_EPStartXfer+0x90a>
 8003bc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bda:	801a      	strh	r2, [r3, #0]
 8003bdc:	e041      	b.n	8003c62 <USB_EPStartXfer+0x99e>
 8003bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <USB_EPStartXfer+0x93a>
 8003bf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	029b      	lsls	r3, r3, #10
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	e024      	b.n	8003c62 <USB_EPStartXfer+0x99e>
 8003c18:	463b      	mov	r3, r7
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d11f      	bne.n	8003c62 <USB_EPStartXfer+0x99e>
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c40:	463b      	mov	r3, r7
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	011a      	lsls	r2, r3, #4
 8003c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003c62:	463b      	mov	r3, r7
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	891b      	ldrh	r3, [r3, #8]
 8003c68:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6959      	ldr	r1, [r3, #20]
 8003c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c7c:	1d38      	adds	r0, r7, #4
 8003c7e:	6800      	ldr	r0, [r0, #0]
 8003c80:	f000 fd7e 	bl	8004780 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003c84:	463b      	mov	r3, r7
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d122      	bne.n	8003cd4 <USB_EPStartXfer+0xa10>
 8003c8e:	1d3b      	adds	r3, r7, #4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	463b      	mov	r3, r7
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	441a      	add	r2, r3
 8003cba:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	8013      	strh	r3, [r2, #0]
 8003cd2:	e026      	b.n	8003d22 <USB_EPStartXfer+0xa5e>
 8003cd4:	463b      	mov	r3, r7
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d121      	bne.n	8003d22 <USB_EPStartXfer+0xa5e>
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	463b      	mov	r3, r7
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	441a      	add	r2, r3
 8003d0a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003d22:	1d3b      	adds	r3, r7, #4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	463b      	mov	r3, r7
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f107 020e 	add.w	r2, r7, #14
 8003d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d40:	8013      	strh	r3, [r2, #0]
 8003d42:	f107 030e 	add.w	r3, r7, #14
 8003d46:	f107 020e 	add.w	r2, r7, #14
 8003d4a:	8812      	ldrh	r2, [r2, #0]
 8003d4c:	f082 0210 	eor.w	r2, r2, #16
 8003d50:	801a      	strh	r2, [r3, #0]
 8003d52:	f107 030e 	add.w	r3, r7, #14
 8003d56:	f107 020e 	add.w	r2, r7, #14
 8003d5a:	8812      	ldrh	r2, [r2, #0]
 8003d5c:	f082 0220 	eor.w	r2, r2, #32
 8003d60:	801a      	strh	r2, [r3, #0]
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	463b      	mov	r3, r7
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	441a      	add	r2, r3
 8003d70:	f107 030e 	add.w	r3, r7, #14
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	8013      	strh	r3, [r2, #0]
 8003d8a:	e3b5      	b.n	80044f8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	7b1b      	ldrb	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 8090 	bne.w	8003eb8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003d98:	463b      	mov	r3, r7
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	463b      	mov	r3, r7
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d90e      	bls.n	8003dc6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8003da8:	463b      	mov	r3, r7
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8003db2:	463b      	mov	r3, r7
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbc:	1ad2      	subs	r2, r2, r3
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	619a      	str	r2, [r3, #24]
 8003dc4:	e008      	b.n	8003dd8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8003dc6:	463b      	mov	r3, r7
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8003dd0:	463b      	mov	r3, r7
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003df0:	4413      	add	r3, r2
 8003df2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003df6:	463b      	mov	r3, r7
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	011a      	lsls	r2, r3, #4
 8003dfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e02:	4413      	add	r3, r2
 8003e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d116      	bne.n	8003e42 <USB_EPStartXfer+0xb7e>
 8003e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	e32c      	b.n	800449c <USB_EPStartXfer+0x11d8>
 8003e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e46:	2b3e      	cmp	r3, #62	; 0x3e
 8003e48:	d818      	bhi.n	8003e7c <USB_EPStartXfer+0xbb8>
 8003e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4e:	085b      	lsrs	r3, r3, #1
 8003e50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <USB_EPStartXfer+0xba6>
 8003e60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e64:	3301      	adds	r3, #1
 8003e66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	029b      	lsls	r3, r3, #10
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e78:	801a      	strh	r2, [r3, #0]
 8003e7a:	e30f      	b.n	800449c <USB_EPStartXfer+0x11d8>
 8003e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <USB_EPStartXfer+0xbd8>
 8003e92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e96:	3b01      	subs	r3, #1
 8003e98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	029b      	lsls	r3, r3, #10
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003eb4:	801a      	strh	r2, [r3, #0]
 8003eb6:	e2f1      	b.n	800449c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8003eb8:	463b      	mov	r3, r7
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	78db      	ldrb	r3, [r3, #3]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	f040 818f 	bne.w	80041e2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	785b      	ldrb	r3, [r3, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d175      	bne.n	8003fba <USB_EPStartXfer+0xcf6>
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eec:	463b      	mov	r3, r7
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	011a      	lsls	r2, r3, #4
 8003ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ef8:	4413      	add	r3, r2
 8003efa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003efe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f02:	463b      	mov	r3, r7
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d116      	bne.n	8003f3a <USB_EPStartXfer+0xc76>
 8003f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f36:	801a      	strh	r2, [r3, #0]
 8003f38:	e065      	b.n	8004006 <USB_EPStartXfer+0xd42>
 8003f3a:	463b      	mov	r3, r7
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b3e      	cmp	r3, #62	; 0x3e
 8003f42:	d81a      	bhi.n	8003f7a <USB_EPStartXfer+0xcb6>
 8003f44:	463b      	mov	r3, r7
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f50:	463b      	mov	r3, r7
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <USB_EPStartXfer+0xca4>
 8003f5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f62:	3301      	adds	r3, #1
 8003f64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	029b      	lsls	r3, r3, #10
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	e045      	b.n	8004006 <USB_EPStartXfer+0xd42>
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f86:	463b      	mov	r3, r7
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <USB_EPStartXfer+0xcda>
 8003f94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	029b      	lsls	r3, r3, #10
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	e025      	b.n	8004006 <USB_EPStartXfer+0xd42>
 8003fba:	463b      	mov	r3, r7
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d120      	bne.n	8004006 <USB_EPStartXfer+0xd42>
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fdc:	4413      	add	r3, r2
 8003fde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	011a      	lsls	r2, r3, #4
 8003fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fee:	4413      	add	r3, r2
 8003ff0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800400e:	463b      	mov	r3, r7
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d175      	bne.n	8004104 <USB_EPStartXfer+0xe40>
 8004018:	1d3b      	adds	r3, r7, #4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004028:	b29b      	uxth	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004030:	4413      	add	r3, r2
 8004032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004036:	463b      	mov	r3, r7
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	011a      	lsls	r2, r3, #4
 800403e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004042:	4413      	add	r3, r2
 8004044:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800404c:	463b      	mov	r3, r7
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d116      	bne.n	8004084 <USB_EPStartXfer+0xdc0>
 8004056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004062:	b29a      	uxth	r2, r3
 8004064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407a:	b29a      	uxth	r2, r3
 800407c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	e061      	b.n	8004148 <USB_EPStartXfer+0xe84>
 8004084:	463b      	mov	r3, r7
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b3e      	cmp	r3, #62	; 0x3e
 800408c:	d81a      	bhi.n	80040c4 <USB_EPStartXfer+0xe00>
 800408e:	463b      	mov	r3, r7
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800409a:	463b      	mov	r3, r7
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <USB_EPStartXfer+0xdee>
 80040a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ac:	3301      	adds	r3, #1
 80040ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	029b      	lsls	r3, r3, #10
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	e041      	b.n	8004148 <USB_EPStartXfer+0xe84>
 80040c4:	463b      	mov	r3, r7
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040d0:	463b      	mov	r3, r7
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <USB_EPStartXfer+0xe24>
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e2:	3b01      	subs	r3, #1
 80040e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004100:	801a      	strh	r2, [r3, #0]
 8004102:	e021      	b.n	8004148 <USB_EPStartXfer+0xe84>
 8004104:	463b      	mov	r3, r7
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d11c      	bne.n	8004148 <USB_EPStartXfer+0xe84>
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800411e:	4413      	add	r3, r2
 8004120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004124:	463b      	mov	r3, r7
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004130:	4413      	add	r3, r2
 8004132:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800413a:	463b      	mov	r3, r7
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	b29a      	uxth	r2, r3
 8004142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004146:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004148:	463b      	mov	r3, r7
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 81a4 	beq.w	800449c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	463b      	mov	r3, r7
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004168:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800416c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <USB_EPStartXfer+0xebc>
 8004174:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10d      	bne.n	800419c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004180:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004188:	2b00      	cmp	r3, #0
 800418a:	f040 8187 	bne.w	800449c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800418e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 8180 	bne.w	800449c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	463b      	mov	r3, r7
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	463b      	mov	r3, r7
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	441a      	add	r2, r3
 80041c8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80041cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041dc:	b29b      	uxth	r3, r3
 80041de:	8013      	strh	r3, [r2, #0]
 80041e0:	e15c      	b.n	800449c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80041e2:	463b      	mov	r3, r7
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	78db      	ldrb	r3, [r3, #3]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	f040 8155 	bne.w	8004498 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80041ee:	463b      	mov	r3, r7
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	463b      	mov	r3, r7
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d90e      	bls.n	800421c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80041fe:	463b      	mov	r3, r7
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004208:	463b      	mov	r3, r7
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004212:	1ad2      	subs	r2, r2, r3
 8004214:	463b      	mov	r3, r7
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	619a      	str	r2, [r3, #24]
 800421a:	e008      	b.n	800422e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800421c:	463b      	mov	r3, r7
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004226:	463b      	mov	r3, r7
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800422e:	463b      	mov	r3, r7
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d16f      	bne.n	8004318 <USB_EPStartXfer+0x1054>
 8004238:	1d3b      	adds	r3, r7, #4
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004250:	4413      	add	r3, r2
 8004252:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004256:	463b      	mov	r3, r7
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	011a      	lsls	r2, r3, #4
 800425e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004262:	4413      	add	r3, r2
 8004264:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800426c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <USB_EPStartXfer+0xfde>
 8004274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004280:	b29a      	uxth	r2, r3
 8004282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004298:	b29a      	uxth	r2, r3
 800429a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800429e:	801a      	strh	r2, [r3, #0]
 80042a0:	e05f      	b.n	8004362 <USB_EPStartXfer+0x109e>
 80042a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a6:	2b3e      	cmp	r3, #62	; 0x3e
 80042a8:	d818      	bhi.n	80042dc <USB_EPStartXfer+0x1018>
 80042aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <USB_EPStartXfer+0x1006>
 80042c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c4:	3301      	adds	r3, #1
 80042c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	029b      	lsls	r3, r3, #10
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	e042      	b.n	8004362 <USB_EPStartXfer+0x109e>
 80042dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <USB_EPStartXfer+0x1038>
 80042f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f6:	3b01      	subs	r3, #1
 80042f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004300:	b29b      	uxth	r3, r3
 8004302:	029b      	lsls	r3, r3, #10
 8004304:	b29b      	uxth	r3, r3
 8004306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430e:	b29a      	uxth	r2, r3
 8004310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e024      	b.n	8004362 <USB_EPStartXfer+0x109e>
 8004318:	463b      	mov	r3, r7
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	785b      	ldrb	r3, [r3, #1]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d11f      	bne.n	8004362 <USB_EPStartXfer+0x109e>
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004332:	b29b      	uxth	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800433a:	4413      	add	r3, r2
 800433c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004340:	463b      	mov	r3, r7
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	011a      	lsls	r2, r3, #4
 8004348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800434c:	4413      	add	r3, r2
 800434e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435a:	b29a      	uxth	r2, r3
 800435c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004360:	801a      	strh	r2, [r3, #0]
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800436a:	463b      	mov	r3, r7
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d16f      	bne.n	8004454 <USB_EPStartXfer+0x1190>
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800437c:	1d3b      	adds	r3, r7, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004384:	b29b      	uxth	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800438c:	4413      	add	r3, r2
 800438e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004392:	463b      	mov	r3, r7
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	011a      	lsls	r2, r3, #4
 800439a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800439e:	4413      	add	r3, r2
 80043a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80043a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d116      	bne.n	80043de <USB_EPStartXfer+0x111a>
 80043b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043bc:	b29a      	uxth	r2, r3
 80043be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043da:	801a      	strh	r2, [r3, #0]
 80043dc:	e05e      	b.n	800449c <USB_EPStartXfer+0x11d8>
 80043de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e2:	2b3e      	cmp	r3, #62	; 0x3e
 80043e4:	d818      	bhi.n	8004418 <USB_EPStartXfer+0x1154>
 80043e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <USB_EPStartXfer+0x1142>
 80043fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004400:	3301      	adds	r3, #1
 8004402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800440a:	b29b      	uxth	r3, r3
 800440c:	029b      	lsls	r3, r3, #10
 800440e:	b29a      	uxth	r2, r3
 8004410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	e041      	b.n	800449c <USB_EPStartXfer+0x11d8>
 8004418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <USB_EPStartXfer+0x1174>
 800442e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004432:	3b01      	subs	r3, #1
 8004434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800443c:	b29b      	uxth	r3, r3
 800443e:	029b      	lsls	r3, r3, #10
 8004440:	b29b      	uxth	r3, r3
 8004442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800444a:	b29a      	uxth	r2, r3
 800444c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	e023      	b.n	800449c <USB_EPStartXfer+0x11d8>
 8004454:	463b      	mov	r3, r7
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	785b      	ldrb	r3, [r3, #1]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d11e      	bne.n	800449c <USB_EPStartXfer+0x11d8>
 800445e:	1d3b      	adds	r3, r7, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004466:	b29b      	uxth	r3, r3
 8004468:	461a      	mov	r2, r3
 800446a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800446e:	4413      	add	r3, r2
 8004470:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004474:	463b      	mov	r3, r7
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	011a      	lsls	r2, r3, #4
 800447c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004480:	4413      	add	r3, r2
 8004482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004486:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800448a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448e:	b29a      	uxth	r2, r3
 8004490:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004494:	801a      	strh	r2, [r3, #0]
 8004496:	e001      	b.n	800449c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e02e      	b.n	80044fa <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800449c:	1d3b      	adds	r3, r7, #4
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	463b      	mov	r3, r7
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80044ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80044be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80044c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80044ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	463b      	mov	r3, r7
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80044e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452c:	81bb      	strh	r3, [r7, #12]
 800452e:	89bb      	ldrh	r3, [r7, #12]
 8004530:	f083 0310 	eor.w	r3, r3, #16
 8004534:	81bb      	strh	r3, [r7, #12]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	89bb      	ldrh	r3, [r7, #12]
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]
 8004556:	e01f      	b.n	8004598 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	81fb      	strh	r3, [r7, #14]
 8004570:	89fb      	ldrh	r3, [r7, #14]
 8004572:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004576:	81fb      	strh	r3, [r7, #14]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	441a      	add	r2, r3
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800458c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004594:	b29b      	uxth	r3, r3
 8004596:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	7b1b      	ldrb	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f040 809d 	bne.w	80046f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d04c      	beq.n	800465a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	823b      	strh	r3, [r7, #16]
 80045ce:	8a3b      	ldrh	r3, [r7, #16]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <USB_EPClearStall+0x6c>
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	81fb      	strh	r3, [r7, #14]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	89fb      	ldrh	r3, [r7, #14]
 80045fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004608:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800460c:	b29b      	uxth	r3, r3
 800460e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	78db      	ldrb	r3, [r3, #3]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d06c      	beq.n	80046f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462e:	81bb      	strh	r3, [r7, #12]
 8004630:	89bb      	ldrh	r3, [r7, #12]
 8004632:	f083 0320 	eor.w	r3, r3, #32
 8004636:	81bb      	strh	r3, [r7, #12]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	89bb      	ldrh	r3, [r7, #12]
 8004644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004654:	b29b      	uxth	r3, r3
 8004656:	8013      	strh	r3, [r2, #0]
 8004658:	e04b      	b.n	80046f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	82fb      	strh	r3, [r7, #22]
 8004668:	8afb      	ldrh	r3, [r7, #22]
 800466a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01b      	beq.n	80046aa <USB_EPClearStall+0x106>
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	82bb      	strh	r3, [r7, #20]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	8abb      	ldrh	r3, [r7, #20]
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	827b      	strh	r3, [r7, #18]
 80046c2:	8a7b      	ldrh	r3, [r7, #18]
 80046c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046c8:	827b      	strh	r3, [r7, #18]
 80046ca:	8a7b      	ldrh	r3, [r7, #18]
 80046cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046d0:	827b      	strh	r3, [r7, #18]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	8a7b      	ldrh	r3, [r7, #18]
 80046de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	460b      	mov	r3, r1
 8004708:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d103      	bne.n	8004718 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr

08004738 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800475a:	b29b      	uxth	r3, r3
 800475c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800475e:	68fb      	ldr	r3, [r7, #12]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr

0800476a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004780:	b480      	push	{r7}
 8004782:	b08d      	sub	sp, #52	; 0x34
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	4611      	mov	r1, r2
 800478c:	461a      	mov	r2, r3
 800478e:	460b      	mov	r3, r1
 8004790:	80fb      	strh	r3, [r7, #6]
 8004792:	4613      	mov	r3, r2
 8004794:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004796:	88bb      	ldrh	r3, [r7, #4]
 8004798:	3301      	adds	r3, #1
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	005a      	lsls	r2, r3, #1
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b8:	e01e      	b.n	80047f8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	3301      	adds	r3, #1
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	3302      	adds	r3, #2
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	3302      	adds	r3, #2
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	3301      	adds	r3, #1
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	3b01      	subs	r3, #1
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1dd      	bne.n	80047ba <USB_WritePMA+0x3a>
  }
}
 80047fe:	bf00      	nop
 8004800:	3734      	adds	r7, #52	; 0x34
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004808:	b480      	push	{r7}
 800480a:	b08b      	sub	sp, #44	; 0x2c
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	4611      	mov	r1, r2
 8004814:	461a      	mov	r2, r3
 8004816:	460b      	mov	r3, r1
 8004818:	80fb      	strh	r3, [r7, #6]
 800481a:	4613      	mov	r3, r2
 800481c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800481e:	88bb      	ldrh	r3, [r7, #4]
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	005a      	lsls	r2, r3, #1
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800483a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
 8004840:	e01b      	b.n	800487a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	3302      	adds	r3, #2
 800484e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	b2da      	uxtb	r2, r3
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	0a1b      	lsrs	r3, r3, #8
 8004862:	b2da      	uxtb	r2, r3
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	3301      	adds	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	3302      	adds	r3, #2
 8004872:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	3b01      	subs	r3, #1
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e0      	bne.n	8004842 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004880:	88bb      	ldrh	r3, [r7, #4]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	701a      	strb	r2, [r3, #0]
  }
}
 800489c:	bf00      	nop
 800489e:	372c      	adds	r7, #44	; 0x2c
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr

080048a6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	460b      	mov	r3, r1
 80048b0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7c1b      	ldrb	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d115      	bne.n	80048ea <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80048be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048c2:	2202      	movs	r2, #2
 80048c4:	2181      	movs	r1, #129	; 0x81
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f001 fe75 	bl	80065b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80048d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d6:	2202      	movs	r2, #2
 80048d8:	2101      	movs	r1, #1
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f001 fe6b 	bl	80065b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80048e8:	e012      	b.n	8004910 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80048ea:	2340      	movs	r3, #64	; 0x40
 80048ec:	2202      	movs	r2, #2
 80048ee:	2181      	movs	r1, #129	; 0x81
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 fe60 	bl	80065b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80048fc:	2340      	movs	r3, #64	; 0x40
 80048fe:	2202      	movs	r2, #2
 8004900:	2101      	movs	r1, #1
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f001 fe57 	bl	80065b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004910:	2308      	movs	r3, #8
 8004912:	2203      	movs	r2, #3
 8004914:	2182      	movs	r1, #130	; 0x82
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f001 fe4d 	bl	80065b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004922:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004926:	f001 ff6d 	bl	8006804 <USBD_static_malloc>
 800492a:	4602      	mov	r2, r0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	e026      	b.n	8004990 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004948:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2200      	movs	r2, #0
 8004958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	7c1b      	ldrb	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004976:	2101      	movs	r1, #1
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 ff0d 	bl	8006798 <USBD_LL_PrepareReceive>
 800497e:	e007      	b.n	8004990 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004986:	2340      	movs	r3, #64	; 0x40
 8004988:	2101      	movs	r1, #1
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f001 ff04 	bl	8006798 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80049aa:	2181      	movs	r1, #129	; 0x81
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f001 fe28 	bl	8006602 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80049b8:	2101      	movs	r1, #1
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f001 fe21 	bl	8006602 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80049c8:	2182      	movs	r1, #130	; 0x82
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f001 fe19 	bl	8006602 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00e      	beq.n	80049fe <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 ff13 	bl	800681c <USBD_static_free>
    pdev->pClassData = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a18:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d039      	beq.n	8004aa6 <USBD_CDC_Setup+0x9e>
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d17c      	bne.n	8004b30 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	88db      	ldrh	r3, [r3, #6]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d029      	beq.n	8004a92 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	b25b      	sxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	da11      	bge.n	8004a6c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004a54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	88d2      	ldrh	r2, [r2, #6]
 8004a5a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004a5c:	6939      	ldr	r1, [r7, #16]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	88db      	ldrh	r3, [r3, #6]
 8004a62:	461a      	mov	r2, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 f9f9 	bl	8005e5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004a6a:	e068      	b.n	8004b3e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	785a      	ldrb	r2, [r3, #1]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	88db      	ldrh	r3, [r3, #6]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004a82:	6939      	ldr	r1, [r7, #16]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	88db      	ldrh	r3, [r3, #6]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f001 fa14 	bl	8005eb8 <USBD_CtlPrepareRx>
      break;
 8004a90:	e055      	b.n	8004b3e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	7850      	ldrb	r0, [r2, #1]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	4798      	blx	r3
      break;
 8004aa4:	e04b      	b.n	8004b3e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b0a      	cmp	r3, #10
 8004aac:	d017      	beq.n	8004ade <USBD_CDC_Setup+0xd6>
 8004aae:	2b0b      	cmp	r3, #11
 8004ab0:	d029      	beq.n	8004b06 <USBD_CDC_Setup+0xfe>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d133      	bne.n	8004b1e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d107      	bne.n	8004ad0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f001 f9c7 	bl	8005e5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ace:	e02e      	b.n	8004b2e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f001 f958 	bl	8005d88 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	75fb      	strb	r3, [r7, #23]
          break;
 8004adc:	e027      	b.n	8004b2e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d107      	bne.n	8004af8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ae8:	f107 030f 	add.w	r3, r7, #15
 8004aec:	2201      	movs	r2, #1
 8004aee:	4619      	mov	r1, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f001 f9b3 	bl	8005e5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004af6:	e01a      	b.n	8004b2e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004af8:	6839      	ldr	r1, [r7, #0]
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f001 f944 	bl	8005d88 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b00:	2302      	movs	r3, #2
 8004b02:	75fb      	strb	r3, [r7, #23]
          break;
 8004b04:	e013      	b.n	8004b2e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d00d      	beq.n	8004b2c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f001 f938 	bl	8005d88 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004b1c:	e006      	b.n	8004b2c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f001 f931 	bl	8005d88 <USBD_CtlError>
          ret = USBD_FAIL;
 8004b26:	2302      	movs	r3, #2
 8004b28:	75fb      	strb	r3, [r7, #23]
          break;
 8004b2a:	e000      	b.n	8004b2e <USBD_CDC_Setup+0x126>
          break;
 8004b2c:	bf00      	nop
      }
      break;
 8004b2e:	e006      	b.n	8004b3e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004b30:	6839      	ldr	r1, [r7, #0]
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 f928 	bl	8005d88 <USBD_CtlError>
      ret = USBD_FAIL;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3c:	bf00      	nop
  }

  return ret;
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b5a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b62:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d03a      	beq.n	8004be4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	331c      	adds	r3, #28
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d029      	beq.n	8004bd8 <USBD_CDC_DataIn+0x90>
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	331c      	adds	r3, #28
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	78f9      	ldrb	r1, [r7, #3]
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4403      	add	r3, r0
 8004ba4:	3338      	adds	r3, #56	; 0x38
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004bac:	fb03 f301 	mul.w	r3, r3, r1
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d110      	bne.n	8004bd8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	331c      	adds	r3, #28
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004bca:	78f9      	ldrb	r1, [r7, #3]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2200      	movs	r2, #0
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f001 fdbe 	bl	8006752 <USBD_LL_Transmit>
 8004bd6:	e003      	b.n	8004be0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f001 fde9 	bl	80067de <USBD_LL_GetRxDataSize>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004c32:	4611      	mov	r1, r2
 8004c34:	4798      	blx	r3

    return USBD_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c52:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d015      	beq.n	8004c8a <USBD_CDC_EP0_RxReady+0x46>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c64:	2bff      	cmp	r3, #255	; 0xff
 8004c66:	d010      	beq.n	8004c8a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004c76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c7e:	b292      	uxth	r2, r2
 8004c80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2243      	movs	r2, #67	; 0x43
 8004ca0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004ca2:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	200000a8 	.word	0x200000a8

08004cb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2243      	movs	r2, #67	; 0x43
 8004cc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004cc2:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000064 	.word	0x20000064

08004cd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2243      	movs	r2, #67	; 0x43
 8004ce0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004ce2:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	200000ec 	.word	0x200000ec

08004cf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	220a      	movs	r2, #10
 8004d00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004d02:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000020 	.word	0x20000020

08004d14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr

08004d40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr

08004d72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01c      	beq.n	8004dec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d115      	bne.n	8004de8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2181      	movs	r1, #129	; 0x81
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 fcb7 	bl	8006752 <USBD_LL_Transmit>

      return USBD_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e002      	b.n	8004dee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d017      	beq.n	8004e40 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	7c1b      	ldrb	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e22:	2101      	movs	r1, #1
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f001 fcb7 	bl	8006798 <USBD_LL_PrepareReceive>
 8004e2a:	e007      	b.n	8004e3c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	2101      	movs	r1, #1
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 fcae 	bl	8006798 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e000      	b.n	8004e42 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	4613      	mov	r3, r2
 8004e56:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e01a      	b.n	8004e98 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	79fa      	ldrb	r2, [r7, #7]
 8004e8e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f001 fb1b 	bl	80064cc <USBD_LL_Init>

  return USBD_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d006      	beq.n	8004ec2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73fb      	strb	r3, [r7, #15]
 8004ec0:	e001      	b.n	8004ec6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f001 fb50 	bl	8006580 <USBD_LL_Start>

  return USBD_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	4611      	mov	r1, r2
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	4611      	mov	r1, r2
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3

  return USBD_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fecb 	bl	8005d10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f88:	461a      	mov	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d00c      	beq.n	8004fb8 <USBD_LL_SetupStage+0x56>
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d302      	bcc.n	8004fa8 <USBD_LL_SetupStage+0x46>
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d010      	beq.n	8004fc8 <USBD_LL_SetupStage+0x66>
 8004fa6:	e017      	b.n	8004fd8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9cb 	bl	800534c <USBD_StdDevReq>
      break;
 8004fb6:	e01a      	b.n	8004fee <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fa2d 	bl	8005420 <USBD_StdItfReq>
      break;
 8004fc6:	e012      	b.n	8004fee <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fa6b 	bl	80054ac <USBD_StdEPReq>
      break;
 8004fd6:	e00a      	b.n	8004fee <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f001 fb2a 	bl	8006640 <USBD_LL_StallEP>
      break;
 8004fec:	bf00      	nop
  }

  return USBD_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	460b      	mov	r3, r1
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005006:	7afb      	ldrb	r3, [r7, #11]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d14b      	bne.n	80050a4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005012:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800501a:	2b03      	cmp	r3, #3
 800501c:	d134      	bne.n	8005088 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d919      	bls.n	800505e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005040:	429a      	cmp	r2, r3
 8005042:	d203      	bcs.n	800504c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005048:	b29b      	uxth	r3, r3
 800504a:	e002      	b.n	8005052 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005050:	b29b      	uxth	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 ff4c 	bl	8005ef4 <USBD_CtlContinueRx>
 800505c:	e038      	b.n	80050d0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005070:	2b03      	cmp	r3, #3
 8005072:	d105      	bne.n	8005080 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 ff49 	bl	8005f18 <USBD_CtlSendStatus>
 8005086:	e023      	b.n	80050d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800508e:	2b05      	cmp	r3, #5
 8005090:	d11e      	bne.n	80050d0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800509a:	2100      	movs	r1, #0
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f001 facf 	bl	8006640 <USBD_LL_StallEP>
 80050a2:	e015      	b.n	80050d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00d      	beq.n	80050cc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d108      	bne.n	80050cc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	7afa      	ldrb	r2, [r7, #11]
 80050c4:	4611      	mov	r1, r2
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	4798      	blx	r3
 80050ca:	e001      	b.n	80050d0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80050cc:	2302      	movs	r3, #2
 80050ce:	e000      	b.n	80050d2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	460b      	mov	r3, r1
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d17f      	bne.n	80051ee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3314      	adds	r3, #20
 80050f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d15c      	bne.n	80051b8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	d915      	bls.n	8005136 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	b29b      	uxth	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 feb6 	bl	8005e94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005128:	2300      	movs	r3, #0
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f001 fb32 	bl	8006798 <USBD_LL_PrepareReceive>
 8005134:	e04e      	b.n	80051d4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	6912      	ldr	r2, [r2, #16]
 800513e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005142:	fb02 f201 	mul.w	r2, r2, r1
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11c      	bne.n	8005186 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005154:	429a      	cmp	r2, r3
 8005156:	d316      	bcc.n	8005186 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005162:	429a      	cmp	r2, r3
 8005164:	d20f      	bcs.n	8005186 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fe92 	bl	8005e94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005178:	2300      	movs	r3, #0
 800517a:	2200      	movs	r2, #0
 800517c:	2100      	movs	r1, #0
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f001 fb0a 	bl	8006798 <USBD_LL_PrepareReceive>
 8005184:	e026      	b.n	80051d4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005198:	2b03      	cmp	r3, #3
 800519a:	d105      	bne.n	80051a8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f001 fa48 	bl	8006640 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fec4 	bl	8005f3e <USBD_CtlReceiveStatus>
 80051b6:	e00d      	b.n	80051d4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d004      	beq.n	80051cc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d103      	bne.n	80051d4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80051cc:	2180      	movs	r1, #128	; 0x80
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f001 fa36 	bl	8006640 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d11d      	bne.n	800521a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff fe83 	bl	8004eea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051ec:	e015      	b.n	800521a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005200:	2b03      	cmp	r3, #3
 8005202:	d108      	bne.n	8005216 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	7afa      	ldrb	r2, [r7, #11]
 800520e:	4611      	mov	r1, r2
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	4798      	blx	r3
 8005214:	e001      	b.n	800521a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005216:	2302      	movs	r3, #2
 8005218:	e000      	b.n	800521c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800522c:	2340      	movs	r3, #64	; 0x40
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f001 f9bf 	bl	80065b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2240      	movs	r2, #64	; 0x40
 8005244:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005248:	2340      	movs	r3, #64	; 0x40
 800524a:	2200      	movs	r2, #0
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f001 f9b1 	bl	80065b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2240      	movs	r2, #64	; 0x40
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6852      	ldr	r2, [r2, #4]
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	4611      	mov	r1, r2
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
  }

  return USBD_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2204      	movs	r2, #4
 80052dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d105      	bne.n	800530a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005324:	2b03      	cmp	r3, #3
 8005326:	d10b      	bne.n	8005340 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005362:	2b20      	cmp	r3, #32
 8005364:	d004      	beq.n	8005370 <USBD_StdDevReq+0x24>
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d002      	beq.n	8005370 <USBD_StdDevReq+0x24>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <USBD_StdDevReq+0x34>
 800536e:	e04c      	b.n	800540a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
      break;
 800537e:	e049      	b.n	8005414 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b09      	cmp	r3, #9
 8005386:	d83a      	bhi.n	80053fe <USBD_StdDevReq+0xb2>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <USBD_StdDevReq+0x44>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053e1 	.word	0x080053e1
 8005394:	080053f5 	.word	0x080053f5
 8005398:	080053ff 	.word	0x080053ff
 800539c:	080053eb 	.word	0x080053eb
 80053a0:	080053ff 	.word	0x080053ff
 80053a4:	080053c3 	.word	0x080053c3
 80053a8:	080053b9 	.word	0x080053b9
 80053ac:	080053ff 	.word	0x080053ff
 80053b0:	080053d7 	.word	0x080053d7
 80053b4:	080053cd 	.word	0x080053cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f9d4 	bl	8005768 <USBD_GetDescriptor>
          break;
 80053c0:	e022      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fb37 	bl	8005a38 <USBD_SetAddress>
          break;
 80053ca:	e01d      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fb74 	bl	8005abc <USBD_SetConfig>
          break;
 80053d4:	e018      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fbfd 	bl	8005bd8 <USBD_GetConfig>
          break;
 80053de:	e013      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fc2c 	bl	8005c40 <USBD_GetStatus>
          break;
 80053e8:	e00e      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fc5a 	bl	8005ca6 <USBD_SetFeature>
          break;
 80053f2:	e009      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fc69 	bl	8005cce <USBD_ClrFeature>
          break;
 80053fc:	e004      	b.n	8005408 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fcc1 	bl	8005d88 <USBD_CtlError>
          break;
 8005406:	bf00      	nop
      }
      break;
 8005408:	e004      	b.n	8005414 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fcbb 	bl	8005d88 <USBD_CtlError>
      break;
 8005412:	bf00      	nop
  }

  return ret;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop

08005420 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005436:	2b20      	cmp	r3, #32
 8005438:	d003      	beq.n	8005442 <USBD_StdItfReq+0x22>
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d001      	beq.n	8005442 <USBD_StdItfReq+0x22>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d12a      	bne.n	8005498 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005448:	3b01      	subs	r3, #1
 800544a:	2b02      	cmp	r3, #2
 800544c:	d81d      	bhi.n	800548a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	889b      	ldrh	r3, [r3, #4]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	d813      	bhi.n	8005480 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
 8005466:	4603      	mov	r3, r0
 8005468:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	88db      	ldrh	r3, [r3, #6]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d110      	bne.n	8005494 <USBD_StdItfReq+0x74>
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10d      	bne.n	8005494 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fd4d 	bl	8005f18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800547e:	e009      	b.n	8005494 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fc80 	bl	8005d88 <USBD_CtlError>
          break;
 8005488:	e004      	b.n	8005494 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fc7b 	bl	8005d88 <USBD_CtlError>
          break;
 8005492:	e000      	b.n	8005496 <USBD_StdItfReq+0x76>
          break;
 8005494:	bf00      	nop
      }
      break;
 8005496:	e004      	b.n	80054a2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fc74 	bl	8005d88 <USBD_CtlError>
      break;
 80054a0:	bf00      	nop
  }

  return USBD_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	889b      	ldrh	r3, [r3, #4]
 80054be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d004      	beq.n	80054d6 <USBD_StdEPReq+0x2a>
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d002      	beq.n	80054d6 <USBD_StdEPReq+0x2a>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <USBD_StdEPReq+0x3a>
 80054d4:	e13d      	b.n	8005752 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
      break;
 80054e4:	e13a      	b.n	800575c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d10a      	bne.n	8005508 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	e12a      	b.n	800575e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d03e      	beq.n	800558e <USBD_StdEPReq+0xe2>
 8005510:	2b03      	cmp	r3, #3
 8005512:	d002      	beq.n	800551a <USBD_StdEPReq+0x6e>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d070      	beq.n	80055fa <USBD_StdEPReq+0x14e>
 8005518:	e115      	b.n	8005746 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005520:	2b02      	cmp	r3, #2
 8005522:	d002      	beq.n	800552a <USBD_StdEPReq+0x7e>
 8005524:	2b03      	cmp	r3, #3
 8005526:	d015      	beq.n	8005554 <USBD_StdEPReq+0xa8>
 8005528:	e02b      	b.n	8005582 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800552a:	7bbb      	ldrb	r3, [r7, #14]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00c      	beq.n	800554a <USBD_StdEPReq+0x9e>
 8005530:	7bbb      	ldrb	r3, [r7, #14]
 8005532:	2b80      	cmp	r3, #128	; 0x80
 8005534:	d009      	beq.n	800554a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 f880 	bl	8006640 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005540:	2180      	movs	r1, #128	; 0x80
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 f87c 	bl	8006640 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005548:	e020      	b.n	800558c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fc1b 	bl	8005d88 <USBD_CtlError>
              break;
 8005552:	e01b      	b.n	800558c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	885b      	ldrh	r3, [r3, #2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10e      	bne.n	800557a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800555c:	7bbb      	ldrb	r3, [r7, #14]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <USBD_StdEPReq+0xce>
 8005562:	7bbb      	ldrb	r3, [r7, #14]
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d008      	beq.n	800557a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	88db      	ldrh	r3, [r3, #6]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005570:	7bbb      	ldrb	r3, [r7, #14]
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 f863 	bl	8006640 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fccc 	bl	8005f18 <USBD_CtlSendStatus>

              break;
 8005580:	e004      	b.n	800558c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fbff 	bl	8005d88 <USBD_CtlError>
              break;
 800558a:	bf00      	nop
          }
          break;
 800558c:	e0e0      	b.n	8005750 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005594:	2b02      	cmp	r3, #2
 8005596:	d002      	beq.n	800559e <USBD_StdEPReq+0xf2>
 8005598:	2b03      	cmp	r3, #3
 800559a:	d015      	beq.n	80055c8 <USBD_StdEPReq+0x11c>
 800559c:	e026      	b.n	80055ec <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800559e:	7bbb      	ldrb	r3, [r7, #14]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00c      	beq.n	80055be <USBD_StdEPReq+0x112>
 80055a4:	7bbb      	ldrb	r3, [r7, #14]
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d009      	beq.n	80055be <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80055aa:	7bbb      	ldrb	r3, [r7, #14]
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 f846 	bl	8006640 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80055b4:	2180      	movs	r1, #128	; 0x80
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f001 f842 	bl	8006640 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80055bc:	e01c      	b.n	80055f8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80055be:	6839      	ldr	r1, [r7, #0]
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fbe1 	bl	8005d88 <USBD_CtlError>
              break;
 80055c6:	e017      	b.n	80055f8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	885b      	ldrh	r3, [r3, #2]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d112      	bne.n	80055f6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80055da:	7bbb      	ldrb	r3, [r7, #14]
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 f84d 	bl	800667e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fc97 	bl	8005f18 <USBD_CtlSendStatus>
              }
              break;
 80055ea:	e004      	b.n	80055f6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fbca 	bl	8005d88 <USBD_CtlError>
              break;
 80055f4:	e000      	b.n	80055f8 <USBD_StdEPReq+0x14c>
              break;
 80055f6:	bf00      	nop
          }
          break;
 80055f8:	e0aa      	b.n	8005750 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005600:	2b02      	cmp	r3, #2
 8005602:	d002      	beq.n	800560a <USBD_StdEPReq+0x15e>
 8005604:	2b03      	cmp	r3, #3
 8005606:	d032      	beq.n	800566e <USBD_StdEPReq+0x1c2>
 8005608:	e097      	b.n	800573a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800560a:	7bbb      	ldrb	r3, [r7, #14]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <USBD_StdEPReq+0x174>
 8005610:	7bbb      	ldrb	r3, [r7, #14]
 8005612:	2b80      	cmp	r3, #128	; 0x80
 8005614:	d004      	beq.n	8005620 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fbb5 	bl	8005d88 <USBD_CtlError>
                break;
 800561e:	e091      	b.n	8005744 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005624:	2b00      	cmp	r3, #0
 8005626:	da0b      	bge.n	8005640 <USBD_StdEPReq+0x194>
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	3310      	adds	r3, #16
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	4413      	add	r3, r2
 800563c:	3304      	adds	r3, #4
 800563e:	e00b      	b.n	8005658 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005640:	7bbb      	ldrb	r3, [r7, #14]
 8005642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4413      	add	r3, r2
 8005656:	3304      	adds	r3, #4
 8005658:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2202      	movs	r2, #2
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fbf8 	bl	8005e5c <USBD_CtlSendData>
              break;
 800566c:	e06a      	b.n	8005744 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800566e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005672:	2b00      	cmp	r3, #0
 8005674:	da11      	bge.n	800569a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005676:	7bbb      	ldrb	r3, [r7, #14]
 8005678:	f003 020f 	and.w	r2, r3, #15
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	3318      	adds	r3, #24
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d117      	bne.n	80056c0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fb78 	bl	8005d88 <USBD_CtlError>
                  break;
 8005698:	e054      	b.n	8005744 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800569a:	7bbb      	ldrb	r3, [r7, #14]
 800569c:	f003 020f 	and.w	r2, r3, #15
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fb65 	bl	8005d88 <USBD_CtlError>
                  break;
 80056be:	e041      	b.n	8005744 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da0b      	bge.n	80056e0 <USBD_StdEPReq+0x234>
 80056c8:	7bbb      	ldrb	r3, [r7, #14]
 80056ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	3310      	adds	r3, #16
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4413      	add	r3, r2
 80056dc:	3304      	adds	r3, #4
 80056de:	e00b      	b.n	80056f8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056e0:	7bbb      	ldrb	r3, [r7, #14]
 80056e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	3304      	adds	r3, #4
 80056f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <USBD_StdEPReq+0x25a>
 8005700:	7bbb      	ldrb	r3, [r7, #14]
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d103      	bne.n	800570e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	e00e      	b.n	800572c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800570e:	7bbb      	ldrb	r3, [r7, #14]
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 ffd2 	bl	80066bc <USBD_LL_IsStallEP>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e002      	b.n	800572c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2202      	movs	r2, #2
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fb92 	bl	8005e5c <USBD_CtlSendData>
              break;
 8005738:	e004      	b.n	8005744 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fb23 	bl	8005d88 <USBD_CtlError>
              break;
 8005742:	bf00      	nop
          }
          break;
 8005744:	e004      	b.n	8005750 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fb1d 	bl	8005d88 <USBD_CtlError>
          break;
 800574e:	bf00      	nop
      }
      break;
 8005750:	e004      	b.n	800575c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fb17 	bl	8005d88 <USBD_CtlError>
      break;
 800575a:	bf00      	nop
  }

  return ret;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	885b      	ldrh	r3, [r3, #2]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	2b06      	cmp	r3, #6
 800578a:	f200 8128 	bhi.w	80059de <USBD_GetDescriptor+0x276>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <USBD_GetDescriptor+0x2c>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057b1 	.word	0x080057b1
 8005798:	080057c9 	.word	0x080057c9
 800579c:	08005809 	.word	0x08005809
 80057a0:	080059df 	.word	0x080059df
 80057a4:	080059df 	.word	0x080059df
 80057a8:	0800597f 	.word	0x0800597f
 80057ac:	080059ab 	.word	0x080059ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	7c12      	ldrb	r2, [r2, #16]
 80057bc:	f107 0108 	add.w	r1, r7, #8
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
 80057c4:	60f8      	str	r0, [r7, #12]
      break;
 80057c6:	e112      	b.n	80059ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	7c1b      	ldrb	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10d      	bne.n	80057ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	f107 0208 	add.w	r2, r7, #8
 80057dc:	4610      	mov	r0, r2
 80057de:	4798      	blx	r3
 80057e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	2202      	movs	r2, #2
 80057e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80057ea:	e100      	b.n	80059ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f107 0208 	add.w	r2, r7, #8
 80057f8:	4610      	mov	r0, r2
 80057fa:	4798      	blx	r3
 80057fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3301      	adds	r3, #1
 8005802:	2202      	movs	r2, #2
 8005804:	701a      	strb	r2, [r3, #0]
      break;
 8005806:	e0f2      	b.n	80059ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	885b      	ldrh	r3, [r3, #2]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b05      	cmp	r3, #5
 8005810:	f200 80ac 	bhi.w	800596c <USBD_GetDescriptor+0x204>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <USBD_GetDescriptor+0xb4>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005835 	.word	0x08005835
 8005820:	08005869 	.word	0x08005869
 8005824:	0800589d 	.word	0x0800589d
 8005828:	080058d1 	.word	0x080058d1
 800582c:	08005905 	.word	0x08005905
 8005830:	08005939 	.word	0x08005939
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00b      	beq.n	8005858 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	7c12      	ldrb	r2, [r2, #16]
 800584c:	f107 0108 	add.w	r1, r7, #8
 8005850:	4610      	mov	r0, r2
 8005852:	4798      	blx	r3
 8005854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005856:	e091      	b.n	800597c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa94 	bl	8005d88 <USBD_CtlError>
            err++;
 8005860:	7afb      	ldrb	r3, [r7, #11]
 8005862:	3301      	adds	r3, #1
 8005864:	72fb      	strb	r3, [r7, #11]
          break;
 8005866:	e089      	b.n	800597c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	7c12      	ldrb	r2, [r2, #16]
 8005880:	f107 0108 	add.w	r1, r7, #8
 8005884:	4610      	mov	r0, r2
 8005886:	4798      	blx	r3
 8005888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800588a:	e077      	b.n	800597c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fa7a 	bl	8005d88 <USBD_CtlError>
            err++;
 8005894:	7afb      	ldrb	r3, [r7, #11]
 8005896:	3301      	adds	r3, #1
 8005898:	72fb      	strb	r3, [r7, #11]
          break;
 800589a:	e06f      	b.n	800597c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	7c12      	ldrb	r2, [r2, #16]
 80058b4:	f107 0108 	add.w	r1, r7, #8
 80058b8:	4610      	mov	r0, r2
 80058ba:	4798      	blx	r3
 80058bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058be:	e05d      	b.n	800597c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa60 	bl	8005d88 <USBD_CtlError>
            err++;
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	3301      	adds	r3, #1
 80058cc:	72fb      	strb	r3, [r7, #11]
          break;
 80058ce:	e055      	b.n	800597c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	7c12      	ldrb	r2, [r2, #16]
 80058e8:	f107 0108 	add.w	r1, r7, #8
 80058ec:	4610      	mov	r0, r2
 80058ee:	4798      	blx	r3
 80058f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058f2:	e043      	b.n	800597c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa46 	bl	8005d88 <USBD_CtlError>
            err++;
 80058fc:	7afb      	ldrb	r3, [r7, #11]
 80058fe:	3301      	adds	r3, #1
 8005900:	72fb      	strb	r3, [r7, #11]
          break;
 8005902:	e03b      	b.n	800597c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	7c12      	ldrb	r2, [r2, #16]
 800591c:	f107 0108 	add.w	r1, r7, #8
 8005920:	4610      	mov	r0, r2
 8005922:	4798      	blx	r3
 8005924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005926:	e029      	b.n	800597c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa2c 	bl	8005d88 <USBD_CtlError>
            err++;
 8005930:	7afb      	ldrb	r3, [r7, #11]
 8005932:	3301      	adds	r3, #1
 8005934:	72fb      	strb	r3, [r7, #11]
          break;
 8005936:	e021      	b.n	800597c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	7c12      	ldrb	r2, [r2, #16]
 8005950:	f107 0108 	add.w	r1, r7, #8
 8005954:	4610      	mov	r0, r2
 8005956:	4798      	blx	r3
 8005958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800595a:	e00f      	b.n	800597c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa12 	bl	8005d88 <USBD_CtlError>
            err++;
 8005964:	7afb      	ldrb	r3, [r7, #11]
 8005966:	3301      	adds	r3, #1
 8005968:	72fb      	strb	r3, [r7, #11]
          break;
 800596a:	e007      	b.n	800597c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa0a 	bl	8005d88 <USBD_CtlError>
          err++;
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	3301      	adds	r3, #1
 8005978:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800597a:	e038      	b.n	80059ee <USBD_GetDescriptor+0x286>
 800597c:	e037      	b.n	80059ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	7c1b      	ldrb	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	f107 0208 	add.w	r2, r7, #8
 8005992:	4610      	mov	r0, r2
 8005994:	4798      	blx	r3
 8005996:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005998:	e029      	b.n	80059ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f9f3 	bl	8005d88 <USBD_CtlError>
        err++;
 80059a2:	7afb      	ldrb	r3, [r7, #11]
 80059a4:	3301      	adds	r3, #1
 80059a6:	72fb      	strb	r3, [r7, #11]
      break;
 80059a8:	e021      	b.n	80059ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	7c1b      	ldrb	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10d      	bne.n	80059ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	f107 0208 	add.w	r2, r7, #8
 80059be:	4610      	mov	r0, r2
 80059c0:	4798      	blx	r3
 80059c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	2207      	movs	r2, #7
 80059ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059cc:	e00f      	b.n	80059ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f9d9 	bl	8005d88 <USBD_CtlError>
        err++;
 80059d6:	7afb      	ldrb	r3, [r7, #11]
 80059d8:	3301      	adds	r3, #1
 80059da:	72fb      	strb	r3, [r7, #11]
      break;
 80059dc:	e007      	b.n	80059ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f9d1 	bl	8005d88 <USBD_CtlError>
      err++;
 80059e6:	7afb      	ldrb	r3, [r7, #11]
 80059e8:	3301      	adds	r3, #1
 80059ea:	72fb      	strb	r3, [r7, #11]
      break;
 80059ec:	bf00      	nop
  }

  if (err != 0U)
 80059ee:	7afb      	ldrb	r3, [r7, #11]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11c      	bne.n	8005a2e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80059f4:	893b      	ldrh	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d011      	beq.n	8005a1e <USBD_GetDescriptor+0x2b6>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	88db      	ldrh	r3, [r3, #6]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	88da      	ldrh	r2, [r3, #6]
 8005a06:	893b      	ldrh	r3, [r7, #8]
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	bf28      	it	cs
 8005a0c:	4613      	movcs	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a12:	893b      	ldrh	r3, [r7, #8]
 8005a14:	461a      	mov	r2, r3
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fa1f 	bl	8005e5c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	88db      	ldrh	r3, [r3, #6]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa76 	bl	8005f18 <USBD_CtlSendStatus>
 8005a2c:	e000      	b.n	8005a30 <USBD_GetDescriptor+0x2c8>
    return;
 8005a2e:	bf00      	nop
    }
  }
}
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop

08005a38 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	889b      	ldrh	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d130      	bne.n	8005aac <USBD_SetAddress+0x74>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	88db      	ldrh	r3, [r3, #6]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d12c      	bne.n	8005aac <USBD_SetAddress+0x74>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	885b      	ldrh	r3, [r3, #2]
 8005a56:	2b7f      	cmp	r3, #127	; 0x7f
 8005a58:	d828      	bhi.n	8005aac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	885b      	ldrh	r3, [r3, #2]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d104      	bne.n	8005a7a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f988 	bl	8005d88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a78:	e01c      	b.n	8005ab4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	7bfa      	ldrb	r2, [r7, #15]
 8005a7e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fe44 	bl	8006714 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa43 	bl	8005f18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa0:	e008      	b.n	8005ab4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aaa:	e003      	b.n	8005ab4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f96a 	bl	8005d88 <USBD_CtlError>
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	885b      	ldrh	r3, [r3, #2]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	4b41      	ldr	r3, [pc, #260]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005ace:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ad0:	4b40      	ldr	r3, [pc, #256]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d904      	bls.n	8005ae2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f954 	bl	8005d88 <USBD_CtlError>
 8005ae0:	e075      	b.n	8005bce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d002      	beq.n	8005af2 <USBD_SetConfig+0x36>
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d023      	beq.n	8005b38 <USBD_SetConfig+0x7c>
 8005af0:	e062      	b.n	8005bb8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005af2:	4b38      	ldr	r3, [pc, #224]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01a      	beq.n	8005b30 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005afa:	4b36      	ldr	r3, [pc, #216]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2203      	movs	r2, #3
 8005b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005b0c:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff f9f3 	bl	8004efe <USBD_SetClassConfig>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d104      	bne.n	8005b28 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f931 	bl	8005d88 <USBD_CtlError>
            return;
 8005b26:	e052      	b.n	8005bce <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f9f5 	bl	8005f18 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005b2e:	e04e      	b.n	8005bce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f9f1 	bl	8005f18 <USBD_CtlSendStatus>
        break;
 8005b36:	e04a      	b.n	8005bce <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005b38:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d112      	bne.n	8005b66 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005b48:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005b52:	4b20      	ldr	r3, [pc, #128]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff f9ef 	bl	8004f3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f9da 	bl	8005f18 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005b64:	e033      	b.n	8005bce <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005b66:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d01d      	beq.n	8005bb0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff f9dd 	bl	8004f3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005b82:	4b14      	ldr	r3, [pc, #80]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005b8c:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff f9b3 	bl	8004efe <USBD_SetClassConfig>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d104      	bne.n	8005ba8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f8f1 	bl	8005d88 <USBD_CtlError>
            return;
 8005ba6:	e012      	b.n	8005bce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f9b5 	bl	8005f18 <USBD_CtlSendStatus>
        break;
 8005bae:	e00e      	b.n	8005bce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f9b1 	bl	8005f18 <USBD_CtlSendStatus>
        break;
 8005bb6:	e00a      	b.n	8005bce <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f8e4 	bl	8005d88 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005bc0:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <USBD_SetConfig+0x118>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff f9b8 	bl	8004f3c <USBD_ClrClassConfig>
        break;
 8005bcc:	bf00      	nop
    }
  }
}
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	200001ac 	.word	0x200001ac

08005bd8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	88db      	ldrh	r3, [r3, #6]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d004      	beq.n	8005bf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f8cb 	bl	8005d88 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005bf2:	e021      	b.n	8005c38 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	db17      	blt.n	8005c2e <USBD_GetConfig+0x56>
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	dd02      	ble.n	8005c08 <USBD_GetConfig+0x30>
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d00b      	beq.n	8005c1e <USBD_GetConfig+0x46>
 8005c06:	e012      	b.n	8005c2e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3308      	adds	r3, #8
 8005c12:	2201      	movs	r2, #1
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f920 	bl	8005e5c <USBD_CtlSendData>
        break;
 8005c1c:	e00c      	b.n	8005c38 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3304      	adds	r3, #4
 8005c22:	2201      	movs	r2, #1
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f918 	bl	8005e5c <USBD_CtlSendData>
        break;
 8005c2c:	e004      	b.n	8005c38 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f8a9 	bl	8005d88 <USBD_CtlError>
        break;
 8005c36:	bf00      	nop
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c50:	3b01      	subs	r3, #1
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d81e      	bhi.n	8005c94 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	88db      	ldrh	r3, [r3, #6]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d004      	beq.n	8005c68 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f891 	bl	8005d88 <USBD_CtlError>
        break;
 8005c66:	e01a      	b.n	8005c9e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f043 0202 	orr.w	r2, r3, #2
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	330c      	adds	r3, #12
 8005c88:	2202      	movs	r2, #2
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f8e5 	bl	8005e5c <USBD_CtlSendData>
      break;
 8005c92:	e004      	b.n	8005c9e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f876 	bl	8005d88 <USBD_CtlError>
      break;
 8005c9c:	bf00      	nop
  }
}
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	885b      	ldrh	r3, [r3, #2]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d106      	bne.n	8005cc6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f929 	bl	8005f18 <USBD_CtlSendStatus>
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d80b      	bhi.n	8005cfc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	885b      	ldrh	r3, [r3, #2]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d10c      	bne.n	8005d06 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f90f 	bl	8005f18 <USBD_CtlSendStatus>
      }
      break;
 8005cfa:	e004      	b.n	8005d06 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f842 	bl	8005d88 <USBD_CtlError>
      break;
 8005d04:	e000      	b.n	8005d08 <USBD_ClrFeature+0x3a>
      break;
 8005d06:	bf00      	nop
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	785a      	ldrb	r2, [r3, #1]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	3303      	adds	r3, #3
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	3305      	adds	r3, #5
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	3306      	adds	r3, #6
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	3307      	adds	r3, #7
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	80da      	strh	r2, [r3, #6]

}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005d92:	2180      	movs	r1, #128	; 0x80
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fc53 	bl	8006640 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fc4f 	bl	8006640 <USBD_LL_StallEP>
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b086      	sub	sp, #24
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d032      	beq.n	8005e26 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f834 	bl	8005e2e <USBD_GetLen>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	3301      	adds	r3, #1
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	75fa      	strb	r2, [r7, #23]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4413      	add	r3, r2
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	7812      	ldrb	r2, [r2, #0]
 8005de4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	75fa      	strb	r2, [r7, #23]
 8005dec:	461a      	mov	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4413      	add	r3, r2
 8005df2:	2203      	movs	r2, #3
 8005df4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005df6:	e012      	b.n	8005e1e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	60fa      	str	r2, [r7, #12]
 8005dfe:	7dfa      	ldrb	r2, [r7, #23]
 8005e00:	1c51      	adds	r1, r2, #1
 8005e02:	75f9      	strb	r1, [r7, #23]
 8005e04:	4611      	mov	r1, r2
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	440a      	add	r2, r1
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	75fa      	strb	r2, [r7, #23]
 8005e14:	461a      	mov	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4413      	add	r3, r2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e8      	bne.n	8005df8 <USBD_GetString+0x4e>
    }
  }
}
 8005e26:	bf00      	nop
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005e3a:	e005      	b.n	8005e48 <USBD_GetLen+0x1a>
  {
    len++;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3301      	adds	r3, #1
 8005e46:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f5      	bne.n	8005e3c <USBD_GetLen+0xe>
  }

  return len;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr

08005e5c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	2100      	movs	r1, #0
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fc64 	bl	8006752 <USBD_LL_Transmit>

  return USBD_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 fc52 	bl	8006752 <USBD_LL_Transmit>

  return USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2203      	movs	r2, #3
 8005eca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005ed6:	88fa      	ldrh	r2, [r7, #6]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fc57 	bl	8006798 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	4613      	mov	r3, r2
 8005f00:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	2100      	movs	r1, #0
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fc45 	bl	8006798 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2204      	movs	r2, #4
 8005f24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fc0f 	bl	8006752 <USBD_LL_Transmit>

  return USBD_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2205      	movs	r2, #5
 8005f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2200      	movs	r2, #0
 8005f52:	2100      	movs	r1, #0
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fc1f 	bl	8006798 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4912      	ldr	r1, [pc, #72]	; (8005fb4 <MX_USB_DEVICE_Init+0x50>)
 8005f6c:	4812      	ldr	r0, [pc, #72]	; (8005fb8 <MX_USB_DEVICE_Init+0x54>)
 8005f6e:	f7fe ff6c 	bl	8004e4a <USBD_Init>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f78:	f7fa f988 	bl	800028c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005f7c:	490f      	ldr	r1, [pc, #60]	; (8005fbc <MX_USB_DEVICE_Init+0x58>)
 8005f7e:	480e      	ldr	r0, [pc, #56]	; (8005fb8 <MX_USB_DEVICE_Init+0x54>)
 8005f80:	f7fe ff8e 	bl	8004ea0 <USBD_RegisterClass>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005f8a:	f7fa f97f 	bl	800028c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005f8e:	490c      	ldr	r1, [pc, #48]	; (8005fc0 <MX_USB_DEVICE_Init+0x5c>)
 8005f90:	4809      	ldr	r0, [pc, #36]	; (8005fb8 <MX_USB_DEVICE_Init+0x54>)
 8005f92:	f7fe febf 	bl	8004d14 <USBD_CDC_RegisterInterface>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005f9c:	f7fa f976 	bl	800028c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005fa0:	4805      	ldr	r0, [pc, #20]	; (8005fb8 <MX_USB_DEVICE_Init+0x54>)
 8005fa2:	f7fe ff96 	bl	8004ed2 <USBD_Start>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005fac:	f7fa f96e 	bl	800028c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005fb0:	bf00      	nop
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000140 	.word	0x20000140
 8005fb8:	200003d4 	.word	0x200003d4
 8005fbc:	2000002c 	.word	0x2000002c
 8005fc0:	20000130 	.word	0x20000130

08005fc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4905      	ldr	r1, [pc, #20]	; (8005fe0 <CDC_Init_FS+0x1c>)
 8005fcc:	4805      	ldr	r0, [pc, #20]	; (8005fe4 <CDC_Init_FS+0x20>)
 8005fce:	f7fe feb7 	bl	8004d40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005fd2:	4905      	ldr	r1, [pc, #20]	; (8005fe8 <CDC_Init_FS+0x24>)
 8005fd4:	4803      	ldr	r0, [pc, #12]	; (8005fe4 <CDC_Init_FS+0x20>)
 8005fd6:	f7fe fecc 	bl	8004d72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005fda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000a80 	.word	0x20000a80
 8005fe4:	200003d4 	.word	0x200003d4
 8005fe8:	20000698 	.word	0x20000698

08005fec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005ff0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr
	...

08005ffc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	6039      	str	r1, [r7, #0]
 8006006:	71fb      	strb	r3, [r7, #7]
 8006008:	4613      	mov	r3, r2
 800600a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	2b23      	cmp	r3, #35	; 0x23
 8006010:	d84a      	bhi.n	80060a8 <CDC_Control_FS+0xac>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <CDC_Control_FS+0x1c>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	080060a9 	.word	0x080060a9
 800601c:	080060a9 	.word	0x080060a9
 8006020:	080060a9 	.word	0x080060a9
 8006024:	080060a9 	.word	0x080060a9
 8006028:	080060a9 	.word	0x080060a9
 800602c:	080060a9 	.word	0x080060a9
 8006030:	080060a9 	.word	0x080060a9
 8006034:	080060a9 	.word	0x080060a9
 8006038:	080060a9 	.word	0x080060a9
 800603c:	080060a9 	.word	0x080060a9
 8006040:	080060a9 	.word	0x080060a9
 8006044:	080060a9 	.word	0x080060a9
 8006048:	080060a9 	.word	0x080060a9
 800604c:	080060a9 	.word	0x080060a9
 8006050:	080060a9 	.word	0x080060a9
 8006054:	080060a9 	.word	0x080060a9
 8006058:	080060a9 	.word	0x080060a9
 800605c:	080060a9 	.word	0x080060a9
 8006060:	080060a9 	.word	0x080060a9
 8006064:	080060a9 	.word	0x080060a9
 8006068:	080060a9 	.word	0x080060a9
 800606c:	080060a9 	.word	0x080060a9
 8006070:	080060a9 	.word	0x080060a9
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060a9 	.word	0x080060a9
 800607c:	080060a9 	.word	0x080060a9
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060a9 	.word	0x080060a9
 800608c:	080060a9 	.word	0x080060a9
 8006090:	080060a9 	.word	0x080060a9
 8006094:	080060a9 	.word	0x080060a9
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060a9 	.word	0x080060a9
 80060a0:	080060a9 	.word	0x080060a9
 80060a4:	080060a9 	.word	0x080060a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80060a8:	bf00      	nop
  }

  return (USBD_OK);
 80060aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop

080060b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4805      	ldr	r0, [pc, #20]	; (80060dc <CDC_Receive_FS+0x24>)
 80060c6:	f7fe fe54 	bl	8004d72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80060ca:	4804      	ldr	r0, [pc, #16]	; (80060dc <CDC_Receive_FS+0x24>)
 80060cc:	f7fe fe93 	bl	8004df6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80060d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	200003d4 	.word	0x200003d4

080060e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80060f0:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <CDC_Transmit_FS+0x48>)
 80060f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006102:	2301      	movs	r3, #1
 8006104:	e00b      	b.n	800611e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006106:	887b      	ldrh	r3, [r7, #2]
 8006108:	461a      	mov	r2, r3
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4806      	ldr	r0, [pc, #24]	; (8006128 <CDC_Transmit_FS+0x48>)
 800610e:	f7fe fe17 	bl	8004d40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006112:	4805      	ldr	r0, [pc, #20]	; (8006128 <CDC_Transmit_FS+0x48>)
 8006114:	f7fe fe40 	bl	8004d98 <USBD_CDC_TransmitPacket>
 8006118:	4603      	mov	r3, r0
 800611a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	200003d4 	.word	0x200003d4

0800612c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	6039      	str	r1, [r7, #0]
 8006136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2212      	movs	r2, #18
 800613c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800613e:	4b03      	ldr	r3, [pc, #12]	; (800614c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	2000015c 	.word	0x2000015c

08006150 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2204      	movs	r2, #4
 8006160:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006162:	4b03      	ldr	r3, [pc, #12]	; (8006170 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20000170 	.word	0x20000170

08006174 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	6039      	str	r1, [r7, #0]
 800617e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d105      	bne.n	8006192 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	4907      	ldr	r1, [pc, #28]	; (80061a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800618a:	4808      	ldr	r0, [pc, #32]	; (80061ac <USBD_FS_ProductStrDescriptor+0x38>)
 800618c:	f7ff fe0d 	bl	8005daa <USBD_GetString>
 8006190:	e004      	b.n	800619c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	4904      	ldr	r1, [pc, #16]	; (80061a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006196:	4805      	ldr	r0, [pc, #20]	; (80061ac <USBD_FS_ProductStrDescriptor+0x38>)
 8006198:	f7ff fe07 	bl	8005daa <USBD_GetString>
  }
  return USBD_StrDesc;
 800619c:	4b02      	ldr	r3, [pc, #8]	; (80061a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000e68 	.word	0x20000e68
 80061ac:	08006920 	.word	0x08006920

080061b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	4904      	ldr	r1, [pc, #16]	; (80061d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80061c0:	4804      	ldr	r0, [pc, #16]	; (80061d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80061c2:	f7ff fdf2 	bl	8005daa <USBD_GetString>
  return USBD_StrDesc;
 80061c6:	4b02      	ldr	r3, [pc, #8]	; (80061d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000e68 	.word	0x20000e68
 80061d4:	08006938 	.word	0x08006938

080061d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	6039      	str	r1, [r7, #0]
 80061e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	221a      	movs	r2, #26
 80061e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80061ea:	f000 f843 	bl	8006274 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80061ee:	4b02      	ldr	r3, [pc, #8]	; (80061f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20000174 	.word	0x20000174

080061fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	6039      	str	r1, [r7, #0]
 8006206:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d105      	bne.n	800621a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	4907      	ldr	r1, [pc, #28]	; (8006230 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006212:	4808      	ldr	r0, [pc, #32]	; (8006234 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006214:	f7ff fdc9 	bl	8005daa <USBD_GetString>
 8006218:	e004      	b.n	8006224 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	4904      	ldr	r1, [pc, #16]	; (8006230 <USBD_FS_ConfigStrDescriptor+0x34>)
 800621e:	4805      	ldr	r0, [pc, #20]	; (8006234 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006220:	f7ff fdc3 	bl	8005daa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006224:	4b02      	ldr	r3, [pc, #8]	; (8006230 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000e68 	.word	0x20000e68
 8006234:	0800694c 	.word	0x0800694c

08006238 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	6039      	str	r1, [r7, #0]
 8006242:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d105      	bne.n	8006256 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	4907      	ldr	r1, [pc, #28]	; (800626c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800624e:	4808      	ldr	r0, [pc, #32]	; (8006270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006250:	f7ff fdab 	bl	8005daa <USBD_GetString>
 8006254:	e004      	b.n	8006260 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4904      	ldr	r1, [pc, #16]	; (800626c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800625a:	4805      	ldr	r0, [pc, #20]	; (8006270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800625c:	f7ff fda5 	bl	8005daa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006260:	4b02      	ldr	r3, [pc, #8]	; (800626c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000e68 	.word	0x20000e68
 8006270:	08006958 	.word	0x08006958

08006274 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800627a:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <Get_SerialNum+0x44>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006280:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <Get_SerialNum+0x48>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006286:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <Get_SerialNum+0x4c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800629a:	2208      	movs	r2, #8
 800629c:	4909      	ldr	r1, [pc, #36]	; (80062c4 <Get_SerialNum+0x50>)
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f814 	bl	80062cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80062a4:	2204      	movs	r2, #4
 80062a6:	4908      	ldr	r1, [pc, #32]	; (80062c8 <Get_SerialNum+0x54>)
 80062a8:	68b8      	ldr	r0, [r7, #8]
 80062aa:	f000 f80f 	bl	80062cc <IntToUnicode>
  }
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	1ffff7e8 	.word	0x1ffff7e8
 80062bc:	1ffff7ec 	.word	0x1ffff7ec
 80062c0:	1ffff7f0 	.word	0x1ffff7f0
 80062c4:	20000176 	.word	0x20000176
 80062c8:	20000186 	.word	0x20000186

080062cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]
 80062e2:	e027      	b.n	8006334 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	0f1b      	lsrs	r3, r3, #28
 80062e8:	2b09      	cmp	r3, #9
 80062ea:	d80b      	bhi.n	8006304 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	0f1b      	lsrs	r3, r3, #28
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	4619      	mov	r1, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	440b      	add	r3, r1
 80062fc:	3230      	adds	r2, #48	; 0x30
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	e00a      	b.n	800631a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	0f1b      	lsrs	r3, r3, #28
 8006308:	b2da      	uxtb	r2, r3
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4619      	mov	r1, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	440b      	add	r3, r1
 8006314:	3237      	adds	r2, #55	; 0x37
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	3301      	adds	r3, #1
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	3301      	adds	r3, #1
 8006332:	75fb      	strb	r3, [r7, #23]
 8006334:	7dfa      	ldrb	r2, [r7, #23]
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	429a      	cmp	r2, r3
 800633a:	d3d3      	bcc.n	80062e4 <IntToUnicode+0x18>
  }
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr
	...

08006348 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a0d      	ldr	r2, [pc, #52]	; (800638c <HAL_PCD_MspInit+0x44>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d113      	bne.n	8006382 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800635a:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <HAL_PCD_MspInit+0x48>)
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <HAL_PCD_MspInit+0x48>)
 8006360:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006364:	61d3      	str	r3, [r2, #28]
 8006366:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <HAL_PCD_MspInit+0x48>)
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006372:	2200      	movs	r2, #0
 8006374:	2100      	movs	r1, #0
 8006376:	2014      	movs	r0, #20
 8006378:	f7fa f989 	bl	800068e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800637c:	2014      	movs	r0, #20
 800637e:	f7fa f9a2 	bl	80006c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40005c00 	.word	0x40005c00
 8006390:	40021000 	.word	0x40021000

08006394 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fe fdd9 	bl	8004f62 <USBD_LL_SetupStage>
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	440b      	add	r3, r1
 80063d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	4619      	mov	r1, r3
 80063e2:	f7fe fe09 	bl	8004ff8 <USBD_LL_DataOutStage>
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006400:	78fa      	ldrb	r2, [r7, #3]
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	440b      	add	r3, r1
 800640e:	333c      	adds	r3, #60	; 0x3c
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	4619      	mov	r1, r3
 8006416:	f7fe fe60 	bl	80050da <USBD_LL_DataInStage>
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe ff70 	bl	8005316 <USBD_LL_SOF>
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006446:	2301      	movs	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d001      	beq.n	8006456 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006452:	f7f9 ff1b 	bl	800028c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800645c:	7bfa      	ldrb	r2, [r7, #15]
 800645e:	4611      	mov	r1, r2
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe ff20 	bl	80052a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe fed9 	bl	8005224 <USBD_LL_Reset>
}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe ff1a 	bl	80052c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006498:	4b04      	ldr	r3, [pc, #16]	; (80064ac <HAL_PCD_SuspendCallback+0x30>)
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	4a03      	ldr	r2, [pc, #12]	; (80064ac <HAL_PCD_SuspendCallback+0x30>)
 800649e:	f043 0306 	orr.w	r3, r3, #6
 80064a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe ff14 	bl	80052ec <USBD_LL_Resume>
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80064d4:	4a28      	ldr	r2, [pc, #160]	; (8006578 <USBD_LL_Init+0xac>)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a26      	ldr	r2, [pc, #152]	; (8006578 <USBD_LL_Init+0xac>)
 80064e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80064e4:	4b24      	ldr	r3, [pc, #144]	; (8006578 <USBD_LL_Init+0xac>)
 80064e6:	4a25      	ldr	r2, [pc, #148]	; (800657c <USBD_LL_Init+0xb0>)
 80064e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80064ea:	4b23      	ldr	r3, [pc, #140]	; (8006578 <USBD_LL_Init+0xac>)
 80064ec:	2208      	movs	r2, #8
 80064ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80064f0:	4b21      	ldr	r3, [pc, #132]	; (8006578 <USBD_LL_Init+0xac>)
 80064f2:	2202      	movs	r2, #2
 80064f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80064f6:	4b20      	ldr	r3, [pc, #128]	; (8006578 <USBD_LL_Init+0xac>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80064fc:	4b1e      	ldr	r3, [pc, #120]	; (8006578 <USBD_LL_Init+0xac>)
 80064fe:	2200      	movs	r2, #0
 8006500:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006502:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <USBD_LL_Init+0xac>)
 8006504:	2200      	movs	r2, #0
 8006506:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006508:	481b      	ldr	r0, [pc, #108]	; (8006578 <USBD_LL_Init+0xac>)
 800650a:	f7fa f8f6 	bl	80006fa <HAL_PCD_Init>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006514:	f7f9 feba 	bl	800028c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800651e:	2318      	movs	r3, #24
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	f7fb fc2a 	bl	8001d7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800652e:	2358      	movs	r3, #88	; 0x58
 8006530:	2200      	movs	r2, #0
 8006532:	2180      	movs	r1, #128	; 0x80
 8006534:	f7fb fc22 	bl	8001d7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800653e:	23c0      	movs	r3, #192	; 0xc0
 8006540:	2200      	movs	r2, #0
 8006542:	2181      	movs	r1, #129	; 0x81
 8006544:	f7fb fc1a 	bl	8001d7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800654e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006552:	2200      	movs	r2, #0
 8006554:	2101      	movs	r1, #1
 8006556:	f7fb fc11 	bl	8001d7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006564:	2200      	movs	r2, #0
 8006566:	2182      	movs	r1, #130	; 0x82
 8006568:	f7fb fc08 	bl	8001d7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20001068 	.word	0x20001068
 800657c:	40005c00 	.word	0x40005c00

08006580 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006596:	4618      	mov	r0, r3
 8006598:	f7fa f9ba 	bl	8000910 <HAL_PCD_Start>
 800659c:	4603      	mov	r3, r0
 800659e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f94e 	bl	8006844 <USBD_Get_USB_Status>
 80065a8:	4603      	mov	r3, r0
 80065aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	4608      	mov	r0, r1
 80065c0:	4611      	mov	r1, r2
 80065c2:	461a      	mov	r2, r3
 80065c4:	4603      	mov	r3, r0
 80065c6:	70fb      	strb	r3, [r7, #3]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70bb      	strb	r3, [r7, #2]
 80065cc:	4613      	mov	r3, r2
 80065ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80065de:	78bb      	ldrb	r3, [r7, #2]
 80065e0:	883a      	ldrh	r2, [r7, #0]
 80065e2:	78f9      	ldrb	r1, [r7, #3]
 80065e4:	f7fa fb34 	bl	8000c50 <HAL_PCD_EP_Open>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 f928 	bl	8006844 <USBD_Get_USB_Status>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f7fa fb7b 	bl	8000d1c <HAL_PCD_EP_Close>
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 f909 	bl	8006844 <USBD_Get_USB_Status>
 8006632:	4603      	mov	r3, r0
 8006634:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006636:	7bbb      	ldrb	r3, [r7, #14]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	4611      	mov	r1, r2
 800665e:	4618      	mov	r0, r3
 8006660:	f7fa fc3b 	bl	8000eda <HAL_PCD_EP_SetStall>
 8006664:	4603      	mov	r3, r0
 8006666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f8ea 	bl	8006844 <USBD_Get_USB_Status>
 8006670:	4603      	mov	r3, r0
 8006672:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006674:	7bbb      	ldrb	r3, [r7, #14]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006698:	78fa      	ldrb	r2, [r7, #3]
 800669a:	4611      	mov	r1, r2
 800669c:	4618      	mov	r0, r3
 800669e:	f7fa fc7c 	bl	8000f9a <HAL_PCD_EP_ClrStall>
 80066a2:	4603      	mov	r3, r0
 80066a4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 f8cb 	bl	8006844 <USBD_Get_USB_Status>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066ce:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80066d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da0c      	bge.n	80066f2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066de:	68f9      	ldr	r1, [r7, #12]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	440b      	add	r3, r1
 80066ec:	3302      	adds	r3, #2
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	e00b      	b.n	800670a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	440b      	add	r3, r1
 8006704:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006708:	781b      	ldrb	r3, [r3, #0]
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr

08006714 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800672e:	78fa      	ldrb	r2, [r7, #3]
 8006730:	4611      	mov	r1, r2
 8006732:	4618      	mov	r0, r3
 8006734:	f7fa fa67 	bl	8000c06 <HAL_PCD_SetAddress>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f880 	bl	8006844 <USBD_Get_USB_Status>
 8006744:	4603      	mov	r3, r0
 8006746:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006748:	7bbb      	ldrb	r3, [r7, #14]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	461a      	mov	r2, r3
 800675e:	460b      	mov	r3, r1
 8006760:	72fb      	strb	r3, [r7, #11]
 8006762:	4613      	mov	r3, r2
 8006764:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006774:	893b      	ldrh	r3, [r7, #8]
 8006776:	7af9      	ldrb	r1, [r7, #11]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	f7fa fb6b 	bl	8000e54 <HAL_PCD_EP_Transmit>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 f85d 	bl	8006844 <USBD_Get_USB_Status>
 800678a:	4603      	mov	r3, r0
 800678c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800678e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	461a      	mov	r2, r3
 80067a4:	460b      	mov	r3, r1
 80067a6:	72fb      	strb	r3, [r7, #11]
 80067a8:	4613      	mov	r3, r2
 80067aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067ba:	893b      	ldrh	r3, [r7, #8]
 80067bc:	7af9      	ldrb	r1, [r7, #11]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	f7fa faf4 	bl	8000dac <HAL_PCD_EP_Receive>
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f83a 	bl	8006844 <USBD_Get_USB_Status>
 80067d0:	4603      	mov	r3, r0
 80067d2:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80067d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067f0:	78fa      	ldrb	r2, [r7, #3]
 80067f2:	4611      	mov	r1, r2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fa fb16 	bl	8000e26 <HAL_PCD_EP_GetRxCount>
 80067fa:	4603      	mov	r3, r0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <USBD_static_malloc+0x14>)
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr
 8006818:	200001b0 	.word	0x200001b0

0800681c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]

}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d817      	bhi.n	8006888 <USBD_Get_USB_Status+0x44>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <USBD_Get_USB_Status+0x1c>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006871 	.word	0x08006871
 8006864:	08006877 	.word	0x08006877
 8006868:	0800687d 	.word	0x0800687d
 800686c:	08006883 	.word	0x08006883
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	73fb      	strb	r3, [r7, #15]
    break;
 8006874:	e00b      	b.n	800688e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006876:	2302      	movs	r3, #2
 8006878:	73fb      	strb	r3, [r7, #15]
    break;
 800687a:	e008      	b.n	800688e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
    break;
 8006880:	e005      	b.n	800688e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006882:	2302      	movs	r3, #2
 8006884:	73fb      	strb	r3, [r7, #15]
    break;
 8006886:	e002      	b.n	800688e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006888:	2302      	movs	r3, #2
 800688a:	73fb      	strb	r3, [r7, #15]
    break;
 800688c:	bf00      	nop
  }
  return usb_status;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop

0800689c <__libc_init_array>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	2500      	movs	r5, #0
 80068a0:	4e0c      	ldr	r6, [pc, #48]	; (80068d4 <__libc_init_array+0x38>)
 80068a2:	4c0d      	ldr	r4, [pc, #52]	; (80068d8 <__libc_init_array+0x3c>)
 80068a4:	1ba4      	subs	r4, r4, r6
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	42a5      	cmp	r5, r4
 80068aa:	d109      	bne.n	80068c0 <__libc_init_array+0x24>
 80068ac:	f000 f822 	bl	80068f4 <_init>
 80068b0:	2500      	movs	r5, #0
 80068b2:	4e0a      	ldr	r6, [pc, #40]	; (80068dc <__libc_init_array+0x40>)
 80068b4:	4c0a      	ldr	r4, [pc, #40]	; (80068e0 <__libc_init_array+0x44>)
 80068b6:	1ba4      	subs	r4, r4, r6
 80068b8:	10a4      	asrs	r4, r4, #2
 80068ba:	42a5      	cmp	r5, r4
 80068bc:	d105      	bne.n	80068ca <__libc_init_array+0x2e>
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068c4:	4798      	blx	r3
 80068c6:	3501      	adds	r5, #1
 80068c8:	e7ee      	b.n	80068a8 <__libc_init_array+0xc>
 80068ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ce:	4798      	blx	r3
 80068d0:	3501      	adds	r5, #1
 80068d2:	e7f2      	b.n	80068ba <__libc_init_array+0x1e>
 80068d4:	08006978 	.word	0x08006978
 80068d8:	08006978 	.word	0x08006978
 80068dc:	08006978 	.word	0x08006978
 80068e0:	0800697c 	.word	0x0800697c

080068e4 <memset>:
 80068e4:	4603      	mov	r3, r0
 80068e6:	4402      	add	r2, r0
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d100      	bne.n	80068ee <memset+0xa>
 80068ec:	4770      	bx	lr
 80068ee:	f803 1b01 	strb.w	r1, [r3], #1
 80068f2:	e7f9      	b.n	80068e8 <memset+0x4>

080068f4 <_init>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr

08006900 <_fini>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr
