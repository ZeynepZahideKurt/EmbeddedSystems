
led-yakma-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdb0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800cf5c  0800cf5c  0001cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d024  0800d024  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  0800d024  0800d024  0001d024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d02c  0800d02c  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d02c  0800d02c  0001d02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d030  0800d030  0001d030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800d034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000229c  20000194  0800d1c8  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002430  0800d1c8  00022430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c886  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004cb1  00000000  00000000  0004ca4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002430  00000000  00000000  00051700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002200  00000000  00000000  00053b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000327ef  00000000  00000000  00055d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023786  00000000  00000000  0008851f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123e20  00000000  00000000  000abca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cfac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bbc  00000000  00000000  001cfb40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000194 	.word	0x20000194
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800cf44 	.word	0x0800cf44

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000198 	.word	0x20000198
 80001e8:	0800cf44 	.word	0x0800cf44

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b598      	push	{r3, r4, r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 fde5 	bl	80020ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f848 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fe16 	bl	8001138 <MX_GPIO_Init>
  MX_ADC1_Init();
 800050c:	f000 f8f6 	bl	80006fc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000510:	f000 f96e 	bl	80007f0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000514:	f000 f9d2 	bl	80008bc <MX_ADC3_Init>
  MX_DCMI_Init();
 8000518:	f000 fa36 	bl	8000988 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 800051c:	f000 fa68 	bl	80009f0 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8000520:	f000 fd5c 	bl	8000fdc <MX_FMC_Init>
  MX_I2C1_Init();
 8000524:	f000 fad0 	bl	8000ac8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000528:	f000 fb0c 	bl	8000b44 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800052c:	f000 fb48 	bl	8000bc0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000530:	f000 fb74 	bl	8000c1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000534:	f000 fba2 	bl	8000c7c <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8000538:	f000 fbd0 	bl	8000cdc <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800053c:	f000 fbfa 	bl	8000d34 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000540:	f000 fca0 	bl	8000e84 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000544:	f000 fcce 	bl	8000ee4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000548:	f000 fd0a 	bl	8000f60 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800054c:	f00b feae 	bl	800c2ac <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CDC_Transmit_FS (data, strlen (data));
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <main+0x94>)
 8000552:	681c      	ldr	r4, [r3, #0]
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <main+0x94>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fe47 	bl	80001ec <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	b29b      	uxth	r3, r3
 8000562:	4619      	mov	r1, r3
 8000564:	4620      	mov	r0, r4
 8000566:	f00b ff5f 	bl	800c428 <CDC_Transmit_FS>
	  CDC_Transmit_FS (data, strlen (data2));
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <main+0x94>)
 800056c:	681c      	ldr	r4, [r3, #0]
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <main+0x98>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fe3a 	bl	80001ec <strlen>
 8000578:	4603      	mov	r3, r0
 800057a:	b29b      	uxth	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	4620      	mov	r0, r4
 8000580:	f00b ff52 	bl	800c428 <CDC_Transmit_FS>
	  	  HAL_Delay(1000);
 8000584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000588:	f001 fe12 	bl	80021b0 <HAL_Delay>
	  CDC_Transmit_FS (data, strlen (data));
 800058c:	e7e0      	b.n	8000550 <main+0x54>
 800058e:	bf00      	nop
 8000590:	20000000 	.word	0x20000000
 8000594:	20000004 	.word	0x20000004

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b0ba      	sub	sp, #232	; 0xe8
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00c fcc4 	bl	800cf34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	228c      	movs	r2, #140	; 0x8c
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f00c fcb6 	bl	800cf34 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005c8:	f004 fb64 	bl	8004c94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005cc:	4b48      	ldr	r3, [pc, #288]	; (80006f0 <SystemClock_Config+0x158>)
 80005ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005d2:	4a47      	ldr	r2, [pc, #284]	; (80006f0 <SystemClock_Config+0x158>)
 80005d4:	f023 0318 	bic.w	r3, r3, #24
 80005d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005dc:	2314      	movs	r3, #20
 80005de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005e2:	2301      	movs	r3, #1
 80005e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80005f4:	2390      	movs	r3, #144	; 0x90
 80005f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000600:	2301      	movs	r3, #1
 8000602:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000606:	2305      	movs	r3, #5
 8000608:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 71;
 800060c:	2347      	movs	r3, #71	; 0x47
 800060e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800061e:	2306      	movs	r3, #6
 8000620:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fc95 	bl	8004f58 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000634:	f000 fef6 	bl	8001424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000644:	2390      	movs	r3, #144	; 0x90
 8000646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000656:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f005 f8a1 	bl	80057a4 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000668:	f000 fedc 	bl	8001424 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <SystemClock_Config+0x15c>)
 800066e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000674:	2300      	movs	r3, #0
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000678:	2300      	movs	r3, #0
 800067a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800067c:	2300      	movs	r3, #0
 800067e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000680:	2300      	movs	r3, #0
 8000682:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000684:	2300      	movs	r3, #0
 8000686:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000688:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800068c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000696:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800069a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800069c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006a0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80006a6:	2305      	movs	r3, #5
 80006a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 80006aa:	2314      	movs	r3, #20
 80006ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemClock_Config+0x160>)
 80006bc:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f005 fa73 	bl	8005bac <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80006cc:	f000 feaa 	bl	8001424 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d4:	f004 fafc 	bl	8004cd0 <HAL_PWREx_ControlVoltageScaling>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80006de:	f000 fea1 	bl	8001424 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006e2:	f006 fa21 	bl	8006b28 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006e6:	bf00      	nop
 80006e8:	37e8      	adds	r7, #232	; 0xe8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	000968e3 	.word	0x000968e3
 80006f8:	01110000 	.word	0x01110000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800071e:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000720:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <MX_ADC1_Init+0xec>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <MX_ADC1_Init+0xe8>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <MX_ADC1_Init+0xe8>)
 800073e:	2204      	movs	r2, #4
 8000740:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <MX_ADC1_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000750:	2201      	movs	r2, #1
 8000752:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0xe8>)
 800075e:	2201      	movs	r2, #1
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ADC1_Init+0xe8>)
 800076a:	2200      	movs	r2, #0
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0xe8>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000784:	4817      	ldr	r0, [pc, #92]	; (80007e4 <MX_ADC1_Init+0xe8>)
 8000786:	f001 fec7 	bl	8002518 <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000790:	f000 fe48 	bl	8001424 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <MX_ADC1_Init+0xe8>)
 80007a0:	f002 fbb8 	bl	8002f14 <HAL_ADCEx_MultiModeConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007aa:	f000 fe3b 	bl	8001424 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_ADC1_Init+0xf0>)
 80007b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b2:	2306      	movs	r3, #6
 80007b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ba:	237f      	movs	r3, #127	; 0x7f
 80007bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007be:	2304      	movs	r3, #4
 80007c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_ADC1_Init+0xe8>)
 80007cc:	f001 fffc 	bl	80027c8 <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007d6:	f000 fe25 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000077c 	.word	0x2000077c
 80007e8:	50040000 	.word	0x50040000
 80007ec:	10c00010 	.word	0x10c00010

080007f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000808:	4a2a      	ldr	r2, [pc, #168]	; (80008b4 <MX_ADC2_Init+0xc4>)
 800080a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_ADC2_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <MX_ADC2_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000826:	2204      	movs	r2, #4
 8000828:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_ADC2_Init+0xc0>)
 800082c:	2200      	movs	r2, #0
 800082e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000832:	2200      	movs	r2, #0
 8000834:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000838:	2201      	movs	r2, #1
 800083a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_ADC2_Init+0xc0>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000846:	2201      	movs	r2, #1
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_ADC2_Init+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000852:	2200      	movs	r2, #0
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_ADC2_Init+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <MX_ADC2_Init+0xc0>)
 800086e:	f001 fe53 	bl	8002518 <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 fdd4 	bl	8001424 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_ADC2_Init+0xc8>)
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000880:	2306      	movs	r3, #6
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000888:	237f      	movs	r3, #127	; 0x7f
 800088a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088c:	2304      	movs	r3, #4
 800088e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_ADC2_Init+0xc0>)
 800089a:	f001 ff95 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80008a4:	f000 fdbe 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200004a4 	.word	0x200004a4
 80008b4:	50040100 	.word	0x50040100
 80008b8:	25b00200 	.word	0x25b00200

080008bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_ADC3_Init+0xc0>)
 80008d4:	4a2a      	ldr	r2, [pc, #168]	; (8000980 <MX_ADC3_Init+0xc4>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_ADC3_Init+0xc0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_ADC3_Init+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_ADC3_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <MX_ADC3_Init+0xc0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_ADC3_Init+0xc0>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_ADC3_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_ADC3_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_ADC3_Init+0xc0>)
 8000904:	2201      	movs	r2, #1
 8000906:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_ADC3_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_ADC3_Init+0xc0>)
 8000912:	2201      	movs	r2, #1
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_ADC3_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_ADC3_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_ADC3_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_ADC3_Init+0xc0>)
 800092c:	2200      	movs	r2, #0
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_ADC3_Init+0xc0>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000938:	4810      	ldr	r0, [pc, #64]	; (800097c <MX_ADC3_Init+0xc0>)
 800093a:	f001 fded 	bl	8002518 <HAL_ADC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 fd6e 	bl	8001424 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_ADC3_Init+0xc8>)
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094c:	2306      	movs	r3, #6
 800094e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000954:	237f      	movs	r3, #127	; 0x7f
 8000956:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000958:	2304      	movs	r3, #4
 800095a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_ADC3_Init+0xc0>)
 8000966:	f001 ff2f 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000970:	f000 fd58 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200007e4 	.word	0x200007e4
 8000980:	50040200 	.word	0x50040200
 8000984:	36902000 	.word	0x36902000

08000988 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_DCMI_Init+0x60>)
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <MX_DCMI_Init+0x64>)
 8000990:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_DCMI_Init+0x60>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_DCMI_Init+0x60>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_DCMI_Init+0x60>)
 80009d6:	f002 fc5b 	bl	8003290 <HAL_DCMI_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80009e0:	f000 fd20 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000084c 	.word	0x2000084c
 80009ec:	50050000 	.word	0x50050000

080009f0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 80009f6:	4a31      	ldr	r2, [pc, #196]	; (8000abc <MX_DFSDM1_Init+0xcc>)
 80009f8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a26:	2204      	movs	r2, #4
 8000a28:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a42:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <MX_DFSDM1_Init+0xc8>)
 8000a44:	f002 fcaa 	bl	800339c <HAL_DFSDM_ChannelInit>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000a4e:	f000 fce9 	bl	8001424 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a54:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <MX_DFSDM1_Init+0xd4>)
 8000a56:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a7c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <MX_DFSDM1_Init+0xd0>)
 8000aa4:	f002 fc7a 	bl	800339c <HAL_DFSDM_ChannelInit>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000aae:	f000 fcb9 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000408 	.word	0x20000408
 8000abc:	40016020 	.word	0x40016020
 8000ac0:	20000adc 	.word	0x20000adc
 8000ac4:	40016040 	.word	0x40016040

08000ac8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_I2C1_Init+0x78>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000ad4:	f640 6214 	movw	r2, #3604	; 0xe14
 8000ad8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000b06:	f002 feff 	bl	8003908 <HAL_I2C_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f000 fc88 	bl	8001424 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000b18:	f002 ff85 	bl	8003a26 <HAL_I2CEx_ConfigAnalogFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b22:	f000 fc7f 	bl	8001424 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_I2C1_Init+0x74>)
 8000b2a:	f002 ffc7 	bl	8003abc <HAL_I2CEx_ConfigDigitalFilter>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b34:	f000 fc76 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000050c 	.word	0x2000050c
 8000b40:	40005400 	.word	0x40005400

08000b44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <MX_I2C2_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b50:	f640 6214 	movw	r2, #3604	; 0xe14
 8000b54:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b82:	f002 fec1 	bl	8003908 <HAL_I2C_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f000 fc4a 	bl	8001424 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b90:	2100      	movs	r1, #0
 8000b92:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b94:	f002 ff47 	bl	8003a26 <HAL_I2CEx_ConfigAnalogFilter>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b9e:	f000 fc41 	bl	8001424 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000ba6:	f002 ff89 	bl	8003abc <HAL_I2CEx_ConfigDigitalFilter>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000bb0:	f000 fc38 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000558 	.word	0x20000558
 8000bbc:	40005800 	.word	0x40005800

08000bc0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <MX_LPUART1_UART_Init+0x54>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MX_LPUART1_UART_Init+0x58>)
 8000bce:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bd6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_LPUART1_UART_Init+0x50>)
 8000bfe:	f007 fa99 	bl	8008134 <HAL_UART_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c08:	f000 fc0c 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000678 	.word	0x20000678
 8000c14:	40008000 	.word	0x40008000
 8000c18:	00033324 	.word	0x00033324

08000c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <MX_USART1_UART_Init+0x5c>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c48:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c4c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c62:	f007 fa67 	bl	8008134 <HAL_UART_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000c6c:	f000 fbda 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200008a4 	.word	0x200008a4
 8000c78:	40013800 	.word	0x40013800

08000c7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <MX_USART2_UART_Init+0x5c>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_USART2_UART_Init+0x58>)
 8000cc0:	f007 fa38 	bl	8008134 <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cca:	f000 fbab 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000a5c 	.word	0x20000a5c
 8000cd8:	40004400 	.word	0x40004400

08000cdc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000ce2:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <MX_QUADSPI_Init+0x54>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000ce8:	22ff      	movs	r2, #255	; 0xff
 8000cea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_QUADSPI_Init+0x50>)
 8000d18:	f004 f850 	bl	8004dbc <HAL_QSPI_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 fb7f 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000b14 	.word	0x20000b14
 8000d30:	a0001000 	.word	0xa0001000

08000d34 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d38:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d3a:	4a4e      	ldr	r2, [pc, #312]	; (8000e74 <MX_SAI1_Init+0x140>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d3e:	4b4c      	ldr	r3, [pc, #304]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d44:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000d4a:	4b49      	ldr	r3, [pc, #292]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d4c:	2240      	movs	r2, #64	; 0x40
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d50:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d56:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d5c:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d6e:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d74:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d76:	4a40      	ldr	r2, [pc, #256]	; (8000e78 <MX_SAI1_Init+0x144>)
 8000d78:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d80:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d86:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d8c:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000d92:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d94:	2208      	movs	r2, #8
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d98:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d9e:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000da4:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000dc8:	4829      	ldr	r0, [pc, #164]	; (8000e70 <MX_SAI1_Init+0x13c>)
 8000dca:	f006 f989 	bl	80070e0 <HAL_SAI_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000dd4:	f000 fb26 	bl	8001424 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000dda:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <MX_SAI1_Init+0x14c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000de6:	2203      	movs	r2, #3
 8000de8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e28:	2208      	movs	r2, #8
 8000e2a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_SAI1_Init+0x148>)
 8000e5e:	f006 f93f 	bl	80070e0 <HAL_SAI_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000e68:	f000 fadc 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200009d8 	.word	0x200009d8
 8000e74:	40015404 	.word	0x40015404
 8000e78:	0002ee00 	.word	0x0002ee00
 8000e7c:	200006f8 	.word	0x200006f8
 8000e80:	40015424 	.word	0x40015424

08000e84 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_SDMMC1_SD_Init+0x58>)
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <MX_SDMMC1_SD_Init+0x5c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_SDMMC1_SD_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_SDMMC1_SD_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_SDMMC1_SD_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_SDMMC1_SD_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_SDMMC1_SD_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_SDMMC1_SD_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000eb2:	480a      	ldr	r0, [pc, #40]	; (8000edc <MX_SDMMC1_SD_Init+0x58>)
 8000eb4:	f006 fab8 	bl	8007428 <HAL_SD_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000ebe:	f000 fab1 	bl	8001424 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000ec2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_SDMMC1_SD_Init+0x58>)
 8000ec8:	f006 fd10 	bl	80078ec <HAL_SD_ConfigWideBusOperation>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8000ed2:	f000 faa7 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200005a4 	.word	0x200005a4
 8000ee0:	40012800 	.word	0x40012800

08000ee4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_SPI1_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000efe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f32:	2207      	movs	r2, #7
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f3e:	2208      	movs	r2, #8
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_SPI1_Init+0x74>)
 8000f44:	f007 f824 	bl	8007f90 <HAL_SPI_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 fa69 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000974 	.word	0x20000974
 8000f5c:	40013000 	.word	0x40013000

08000f60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_SPI2_Init+0x78>)
 8000f68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000f7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f7e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f92:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000fae:	2207      	movs	r2, #7
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000fba:	2208      	movs	r2, #8
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_SPI2_Init+0x74>)
 8000fc0:	f006 ffe6 	bl	8007f90 <HAL_SPI_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 fa2b 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000440 	.word	0x20000440
 8000fd8:	40003800 	.word	0x40003800

08000fdc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00b ffa3 	bl	800cf34 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000fee:	4b4f      	ldr	r3, [pc, #316]	; (800112c <MX_FMC_Init+0x150>)
 8000ff0:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ff4:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000ff6:	4b4d      	ldr	r3, [pc, #308]	; (800112c <MX_FMC_Init+0x150>)
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	; (8001130 <MX_FMC_Init+0x154>)
 8000ffa:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <MX_FMC_Init+0x150>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001002:	4b4a      	ldr	r3, [pc, #296]	; (800112c <MX_FMC_Init+0x150>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001008:	4b48      	ldr	r3, [pc, #288]	; (800112c <MX_FMC_Init+0x150>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800100e:	4b47      	ldr	r3, [pc, #284]	; (800112c <MX_FMC_Init+0x150>)
 8001010:	2210      	movs	r2, #16
 8001012:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001014:	4b45      	ldr	r3, [pc, #276]	; (800112c <MX_FMC_Init+0x150>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800101a:	4b44      	ldr	r3, [pc, #272]	; (800112c <MX_FMC_Init+0x150>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001020:	4b42      	ldr	r3, [pc, #264]	; (800112c <MX_FMC_Init+0x150>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001026:	4b41      	ldr	r3, [pc, #260]	; (800112c <MX_FMC_Init+0x150>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <MX_FMC_Init+0x150>)
 800102e:	2200      	movs	r2, #0
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001032:	4b3e      	ldr	r3, [pc, #248]	; (800112c <MX_FMC_Init+0x150>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001038:	4b3c      	ldr	r3, [pc, #240]	; (800112c <MX_FMC_Init+0x150>)
 800103a:	2200      	movs	r2, #0
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <MX_FMC_Init+0x150>)
 8001040:	2200      	movs	r2, #0
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <MX_FMC_Init+0x150>)
 8001046:	2200      	movs	r2, #0
 8001048:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <MX_FMC_Init+0x150>)
 800104c:	2200      	movs	r2, #0
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001050:	4b36      	ldr	r3, [pc, #216]	; (800112c <MX_FMC_Init+0x150>)
 8001052:	2200      	movs	r2, #0
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001056:	230f      	movs	r3, #15
 8001058:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800105a:	230f      	movs	r3, #15
 800105c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800105e:	23ff      	movs	r3, #255	; 0xff
 8001060:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001062:	230f      	movs	r3, #15
 8001064:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001066:	2310      	movs	r3, #16
 8001068:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800106a:	2311      	movs	r3, #17
 800106c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	482c      	ldr	r0, [pc, #176]	; (800112c <MX_FMC_Init+0x150>)
 800107a:	f007 f813 	bl	80080a4 <HAL_SRAM_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8001084:	f000 f9ce 	bl	8001424 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <MX_FMC_Init+0x158>)
 800108a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800108e:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <MX_FMC_Init+0x158>)
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <MX_FMC_Init+0x154>)
 8001094:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <MX_FMC_Init+0x158>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <MX_FMC_Init+0x158>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80010a2:	4b24      	ldr	r3, [pc, #144]	; (8001134 <MX_FMC_Init+0x158>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <MX_FMC_Init+0x158>)
 80010aa:	2210      	movs	r2, #16
 80010ac:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_FMC_Init+0x158>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_FMC_Init+0x158>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_FMC_Init+0x158>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_FMC_Init+0x158>)
 80010c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_FMC_Init+0x158>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_FMC_Init+0x158>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_FMC_Init+0x158>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_FMC_Init+0x158>)
 80010dc:	2200      	movs	r2, #0
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_FMC_Init+0x158>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_FMC_Init+0x158>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_FMC_Init+0x158>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010f2:	230f      	movs	r3, #15
 80010f4:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80010f6:	230f      	movs	r3, #15
 80010f8:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80010fa:	23ff      	movs	r3, #255	; 0xff
 80010fc:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80010fe:	230f      	movs	r3, #15
 8001100:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001102:	2310      	movs	r3, #16
 8001104:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001106:	2311      	movs	r3, #17
 8001108:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <MX_FMC_Init+0x158>)
 8001116:	f006 ffc5 	bl	80080a4 <HAL_SRAM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001120:	f000 f980 	bl	8001424 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000628 	.word	0x20000628
 8001130:	a0000104 	.word	0xa0000104
 8001134:	20000924 	.word	0x20000924

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800114e:	4bad      	ldr	r3, [pc, #692]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4aac      	ldr	r2, [pc, #688]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4baa      	ldr	r3, [pc, #680]	; (8001404 <MX_GPIO_Init+0x2cc>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001162:	623b      	str	r3, [r7, #32]
 8001164:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	4ba7      	ldr	r3, [pc, #668]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4aa6      	ldr	r2, [pc, #664]	; (8001404 <MX_GPIO_Init+0x2cc>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4ba4      	ldr	r3, [pc, #656]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117e:	4ba1      	ldr	r3, [pc, #644]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4aa0      	ldr	r2, [pc, #640]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b9e      	ldr	r3, [pc, #632]	; (8001404 <MX_GPIO_Init+0x2cc>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b9b      	ldr	r3, [pc, #620]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4a9a      	ldr	r2, [pc, #616]	; (8001404 <MX_GPIO_Init+0x2cc>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4b98      	ldr	r3, [pc, #608]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b95      	ldr	r3, [pc, #596]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4a94      	ldr	r2, [pc, #592]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4b92      	ldr	r3, [pc, #584]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011c6:	4b8f      	ldr	r3, [pc, #572]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a8e      	ldr	r2, [pc, #568]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b8c      	ldr	r3, [pc, #560]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80011de:	f003 fddd 	bl	8004d9c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	4b88      	ldr	r3, [pc, #544]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a87      	ldr	r2, [pc, #540]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b85      	ldr	r3, [pc, #532]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	4b82      	ldr	r3, [pc, #520]	; (8001404 <MX_GPIO_Init+0x2cc>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a81      	ldr	r2, [pc, #516]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001212:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a7b      	ldr	r2, [pc, #492]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b79      	ldr	r3, [pc, #484]	; (8001404 <MX_GPIO_Init+0x2cc>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2101      	movs	r1, #1
 800122e:	4876      	ldr	r0, [pc, #472]	; (8001408 <MX_GPIO_Init+0x2d0>)
 8001230:	f002 fb52 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2143      	movs	r1, #67	; 0x43
 8001238:	4874      	ldr	r0, [pc, #464]	; (800140c <MX_GPIO_Init+0x2d4>)
 800123a:	f002 fb4d 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2140      	movs	r1, #64	; 0x40
 8001242:	4873      	ldr	r0, [pc, #460]	; (8001410 <MX_GPIO_Init+0x2d8>)
 8001244:	f002 fb48 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124e:	4871      	ldr	r0, [pc, #452]	; (8001414 <MX_GPIO_Init+0x2dc>)
 8001250:	f002 fb42 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8001254:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125e:	2302      	movs	r3, #2
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	4867      	ldr	r0, [pc, #412]	; (8001408 <MX_GPIO_Init+0x2d0>)
 800126a:	f002 f9a3 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800126e:	2304      	movs	r3, #4
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001272:	4b69      	ldr	r3, [pc, #420]	; (8001418 <MX_GPIO_Init+0x2e0>)
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	4862      	ldr	r0, [pc, #392]	; (800140c <MX_GPIO_Init+0x2d4>)
 8001282:	f002 f997 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001286:	2301      	movs	r3, #1
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	485a      	ldr	r0, [pc, #360]	; (8001408 <MX_GPIO_Init+0x2d0>)
 800129e:	f002 f989 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80012a2:	2340      	movs	r3, #64	; 0x40
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80012b2:	2303      	movs	r3, #3
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4852      	ldr	r0, [pc, #328]	; (8001408 <MX_GPIO_Init+0x2d0>)
 80012be:	f002 f979 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 80012c2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80012d4:	2303      	movs	r3, #3
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	484b      	ldr	r0, [pc, #300]	; (800140c <MX_GPIO_Init+0x2d4>)
 80012e0:	f002 f968 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80012e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012f6:	2302      	movs	r3, #2
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	4619      	mov	r1, r3
 8001300:	4844      	ldr	r0, [pc, #272]	; (8001414 <MX_GPIO_Init+0x2dc>)
 8001302:	f002 f957 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	483c      	ldr	r0, [pc, #240]	; (800140c <MX_GPIO_Init+0x2d4>)
 800131a:	f002 f94b 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 800131e:	2343      	movs	r3, #67	; 0x43
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800132e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001332:	4619      	mov	r1, r3
 8001334:	4835      	ldr	r0, [pc, #212]	; (800140c <MX_GPIO_Init+0x2d4>)
 8001336:	f002 f93d 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800133a:	2340      	movs	r3, #64	; 0x40
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	482f      	ldr	r0, [pc, #188]	; (8001410 <MX_GPIO_Init+0x2d8>)
 8001352:	f002 f92f 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001356:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <MX_GPIO_Init+0x2e0>)
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	482c      	ldr	r0, [pc, #176]	; (800141c <MX_GPIO_Init+0x2e4>)
 800136c:	f002 f922 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001382:	230e      	movs	r3, #14
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f002 f910 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001394:	2320      	movs	r3, #32
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_GPIO_Init+0x2e0>)
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	481a      	ldr	r0, [pc, #104]	; (8001410 <MX_GPIO_Init+0x2d8>)
 80013a8:	f002 f904 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 80013ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013b6:	2302      	movs	r3, #2
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4817      	ldr	r0, [pc, #92]	; (8001420 <MX_GPIO_Init+0x2e8>)
 80013c2:	f002 f8f7 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 80013c6:	2304      	movs	r3, #4
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	480e      	ldr	r0, [pc, #56]	; (8001414 <MX_GPIO_Init+0x2dc>)
 80013da:	f002 f8eb 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013e4:	2311      	movs	r3, #17
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_GPIO_Init+0x2dc>)
 80013f8:	f002 f8dc 	bl	80035b4 <HAL_GPIO_Init>

}
 80013fc:	bf00      	nop
 80013fe:	3738      	adds	r7, #56	; 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	48002000 	.word	0x48002000
 800140c:	48001c00 	.word	0x48001c00
 8001410:	48000800 	.word	0x48000800
 8001414:	48000400 	.word	0x48000400
 8001418:	10110000 	.word	0x10110000
 800141c:	48001800 	.word	0x48001800
 8001420:	48001400 	.word	0x48001400

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_MspInit+0x44>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	; 0x60
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	; 0x38
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a59      	ldr	r2, [pc, #356]	; (8001600 <HAL_ADC_MspInit+0x184>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12d      	bne.n	80014fa <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800149e:	4b59      	ldr	r3, [pc, #356]	; (8001604 <HAL_ADC_MspInit+0x188>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a57      	ldr	r2, [pc, #348]	; (8001604 <HAL_ADC_MspInit+0x188>)
 80014a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <HAL_ADC_MspInit+0x188>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d10b      	bne.n	80014c8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80014b0:	4b55      	ldr	r3, [pc, #340]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	4a54      	ldr	r2, [pc, #336]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80014b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014bc:	4b52      	ldr	r3, [pc, #328]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c4:	623b      	str	r3, [r7, #32]
 80014c6:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c8:	4b4f      	ldr	r3, [pc, #316]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	4a4e      	ldr	r2, [pc, #312]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d4:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 80014e0:	2318      	movs	r3, #24
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014e4:	230b      	movs	r3, #11
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4846      	ldr	r0, [pc, #280]	; (800160c <HAL_ADC_MspInit+0x190>)
 80014f4:	f002 f85e 	bl	80035b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014f8:	e07e      	b.n	80015f8 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a44      	ldr	r2, [pc, #272]	; (8001610 <HAL_ADC_MspInit+0x194>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d146      	bne.n	8001592 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001504:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_ADC_MspInit+0x188>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a3e      	ldr	r2, [pc, #248]	; (8001604 <HAL_ADC_MspInit+0x188>)
 800150c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <HAL_ADC_MspInit+0x188>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10b      	bne.n	800152e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001516:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a3b      	ldr	r2, [pc, #236]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 800151c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a35      	ldr	r2, [pc, #212]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 800155e:	2303      	movs	r3, #3
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001562:	230b      	movs	r3, #11
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	4826      	ldr	r0, [pc, #152]	; (800160c <HAL_ADC_MspInit+0x190>)
 8001572:	f002 f81f 	bl	80035b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8001576:	2312      	movs	r3, #18
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800157a:	230b      	movs	r3, #11
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158c:	f002 f812 	bl	80035b4 <HAL_GPIO_Init>
}
 8001590:	e032      	b.n	80015f8 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_ADC_MspInit+0x198>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d12d      	bne.n	80015f8 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_ADC_MspInit+0x188>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <HAL_ADC_MspInit+0x188>)
 80015a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <HAL_ADC_MspInit+0x188>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d10b      	bne.n	80015c6 <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80015b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_ADC_MspInit+0x18c>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0320 	and.w	r3, r3, #32
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 80015de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015e4:	230b      	movs	r3, #11
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4809      	ldr	r0, [pc, #36]	; (8001618 <HAL_ADC_MspInit+0x19c>)
 80015f4:	f001 ffde 	bl	80035b4 <HAL_GPIO_Init>
}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	50040000 	.word	0x50040000
 8001604:	200001b0 	.word	0x200001b0
 8001608:	40021000 	.word	0x40021000
 800160c:	48000800 	.word	0x48000800
 8001610:	50040100 	.word	0x50040100
 8001614:	50040200 	.word	0x50040200
 8001618:	48001400 	.word	0x48001400

0800161c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a33      	ldr	r2, [pc, #204]	; (8001708 <HAL_DCMI_MspInit+0xec>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d160      	bne.n	8001700 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a32      	ldr	r2, [pc, #200]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a2c      	ldr	r2, [pc, #176]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a20      	ldr	r2, [pc, #128]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_DCMI_MspInit+0xf0>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 800169e:	f645 7320 	movw	r3, #24352	; 0x5f20
 80016a2:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80016b0:	230a      	movs	r3, #10
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4815      	ldr	r0, [pc, #84]	; (8001710 <HAL_DCMI_MspInit+0xf4>)
 80016bc:	f001 ff7a 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80016c0:	23b0      	movs	r3, #176	; 0xb0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80016d0:	230a      	movs	r3, #10
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <HAL_DCMI_MspInit+0xf8>)
 80016dc:	f001 ff6a 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 80016e0:	2320      	movs	r3, #32
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80016f0:	230a      	movs	r3, #10
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	4807      	ldr	r0, [pc, #28]	; (8001718 <HAL_DCMI_MspInit+0xfc>)
 80016fc:	f001 ff5a 	bl	80035b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	50050000 	.word	0x50050000
 800170c:	40021000 	.word	0x40021000
 8001710:	48001c00 	.word	0x48001c00
 8001714:	48002000 	.word	0x48002000
 8001718:	48001000 	.word	0x48001000

0800171c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001734:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d144      	bne.n	80017c6 <HAL_DFSDM_ChannelMspInit+0xaa>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0xb8>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001746:	6613      	str	r3, [r2, #96]	; 0x60
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0xb8>)
 800174a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0xb8>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0xb8>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8001772:	f043 0302 	orr.w	r3, r3, #2
 8001776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0xb8>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001784:	2384      	movs	r3, #132	; 0x84
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001794:	2306      	movs	r3, #6
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	480e      	ldr	r0, [pc, #56]	; (80017d8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017a0:	f001 ff08 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017b6:	2306      	movs	r3, #6
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4806      	ldr	r0, [pc, #24]	; (80017dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017c2:	f001 fef7 	bl	80035b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001b4 	.word	0x200001b4
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48000800 	.word	0x48000800
 80017dc:	48000400 	.word	0x48000400

080017e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a3d      	ldr	r2, [pc, #244]	; (80018f4 <HAL_I2C_MspInit+0x114>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d129      	bne.n	8001856 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a3c      	ldr	r2, [pc, #240]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800181a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001820:	2312      	movs	r3, #18
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001824:	2301      	movs	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182c:	2304      	movs	r3, #4
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	4831      	ldr	r0, [pc, #196]	; (80018fc <HAL_I2C_MspInit+0x11c>)
 8001838:	f001 febc 	bl	80035b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183c:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 8001842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001854:	e049      	b.n	80018ea <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a29      	ldr	r2, [pc, #164]	; (8001900 <HAL_I2C_MspInit+0x120>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d144      	bne.n	80018ea <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 8001866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186c:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001890:	2310      	movs	r3, #16
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001894:	2312      	movs	r3, #18
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001898:	2301      	movs	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018a0:	2304      	movs	r3, #4
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4816      	ldr	r0, [pc, #88]	; (8001904 <HAL_I2C_MspInit+0x124>)
 80018ac:	f001 fe82 	bl	80035b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80018b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b6:	2312      	movs	r3, #18
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018c2:	2304      	movs	r3, #4
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	480b      	ldr	r0, [pc, #44]	; (80018fc <HAL_I2C_MspInit+0x11c>)
 80018ce:	f001 fe71 	bl	80035b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 80018d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018dc:	6593      	str	r3, [r2, #88]	; 0x58
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_I2C_MspInit+0x118>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
}
 80018ea:	bf00      	nop
 80018ec:	3730      	adds	r7, #48	; 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40005400 	.word	0x40005400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000400 	.word	0x48000400
 8001900:	40005800 	.word	0x40005800
 8001904:	48001c00 	.word	0x48001c00

08001908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b090      	sub	sp, #64	; 0x40
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a64      	ldr	r2, [pc, #400]	; (8001ab8 <HAL_UART_MspInit+0x1b0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12b      	bne.n	8001982 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800192a:	4b64      	ldr	r3, [pc, #400]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	4a63      	ldr	r2, [pc, #396]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001936:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001942:	4b5e      	ldr	r3, [pc, #376]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a5d      	ldr	r2, [pc, #372]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 800195a:	f003 fa1f 	bl	8004d9c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800195e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001970:	2308      	movs	r3, #8
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	4851      	ldr	r0, [pc, #324]	; (8001ac0 <HAL_UART_MspInit+0x1b8>)
 800197c:	f001 fe1a 	bl	80035b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001980:	e096      	b.n	8001ab0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a4f      	ldr	r2, [pc, #316]	; (8001ac4 <HAL_UART_MspInit+0x1bc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d147      	bne.n	8001a1c <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001990:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001996:	6613      	str	r3, [r2, #96]	; 0x60
 8001998:	4b48      	ldr	r3, [pc, #288]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 800199a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a4:	4b45      	ldr	r3, [pc, #276]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a8:	4a44      	ldr	r2, [pc, #272]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019bc:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 80019c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c8:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80019d4:	f003 f9e2 	bl	8004d9c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80019d8:	2340      	movs	r3, #64	; 0x40
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e8:	2307      	movs	r3, #7
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f0:	4619      	mov	r1, r3
 80019f2:	4835      	ldr	r0, [pc, #212]	; (8001ac8 <HAL_UART_MspInit+0x1c0>)
 80019f4:	f001 fdde 	bl	80035b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80019f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a12:	4619      	mov	r1, r3
 8001a14:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <HAL_UART_MspInit+0x1b8>)
 8001a16:	f001 fdcd 	bl	80035b4 <HAL_GPIO_Init>
}
 8001a1a:	e049      	b.n	8001ab0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <HAL_UART_MspInit+0x1c4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d144      	bne.n	8001ab0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	4a24      	ldr	r2, [pc, #144]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	6593      	str	r3, [r2, #88]	; 0x58
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_UART_MspInit+0x1b4>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001a6e:	2340      	movs	r3, #64	; 0x40
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a86:	4619      	mov	r1, r3
 8001a88:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <HAL_UART_MspInit+0x1c8>)
 8001a8a:	f001 fd93 	bl	80035b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f001 fd82 	bl	80035b4 <HAL_GPIO_Init>
}
 8001ab0:	bf00      	nop
 8001ab2:	3740      	adds	r7, #64	; 0x40
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40008000 	.word	0x40008000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48001800 	.word	0x48001800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	40004400 	.word	0x40004400
 8001ad0:	48000c00 	.word	0x48000c00

08001ad4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <HAL_QSPI_MspInit+0xb8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d145      	bne.n	8001b82 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_QSPI_MspInit+0xbc>)
 8001af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afa:	4a25      	ldr	r2, [pc, #148]	; (8001b90 <HAL_QSPI_MspInit+0xbc>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b00:	6513      	str	r3, [r2, #80]	; 0x50
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_QSPI_MspInit+0xbc>)
 8001b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_QSPI_MspInit+0xbc>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_QSPI_MspInit+0xbc>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_QSPI_MspInit+0xbc>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_QSPI_MspInit+0xbc>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_QSPI_MspInit+0xbc>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_QSPI_MspInit+0xbc>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001b3e:	f640 0303 	movw	r3, #2051	; 0x803
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b50:	230a      	movs	r3, #10
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480e      	ldr	r0, [pc, #56]	; (8001b94 <HAL_QSPI_MspInit+0xc0>)
 8001b5c:	f001 fd2a 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001b60:	23c8      	movs	r3, #200	; 0xc8
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b70:	230a      	movs	r3, #10
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7e:	f001 fd19 	bl	80035b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	a0001000 	.word	0xa0001000
 8001b90:	40021000 	.word	0x40021000
 8001b94:	48000400 	.word	0x48000400

08001b98 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <HAL_SD_MspInit+0xb4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d144      	bne.n	8001c44 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001bba:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_SD_MspInit+0xb8>)
 8001bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_SD_MspInit+0xb8>)
 8001bc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_SD_MspInit+0xb8>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_SD_MspInit+0xb8>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <HAL_SD_MspInit+0xb8>)
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <HAL_SD_MspInit+0xb8>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_SD_MspInit+0xb8>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <HAL_SD_MspInit+0xb8>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_SD_MspInit+0xb8>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001c02:	2304      	movs	r3, #4
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c12:	230c      	movs	r3, #12
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <HAL_SD_MspInit+0xbc>)
 8001c1e:	f001 fcc9 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 8001c22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c26:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c34:	230c      	movs	r3, #12
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <HAL_SD_MspInit+0xc0>)
 8001c40:	f001 fcb8 	bl	80035b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40012800 	.word	0x40012800
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000c00 	.word	0x48000c00
 8001c58:	48000800 	.word	0x48000800

08001c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_SPI_MspInit+0x14c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d146      	bne.n	8001d0c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c88:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	4b45      	ldr	r3, [pc, #276]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	4a44      	ldr	r2, [pc, #272]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca2:	4b42      	ldr	r3, [pc, #264]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	4a3e      	ldr	r2, [pc, #248]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cba:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001cc6:	2330      	movs	r3, #48	; 0x30
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4833      	ldr	r0, [pc, #204]	; (8001db0 <HAL_SPI_MspInit+0x154>)
 8001ce2:	f001 fc67 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001ce6:	f248 0320 	movw	r3, #32800	; 0x8020
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d06:	f001 fc55 	bl	80035b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d0a:	e049      	b.n	8001da0 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <HAL_SPI_MspInit+0x158>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d144      	bne.n	8001da0 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6593      	str	r3, [r2, #88]	; 0x58
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_SPI_MspInit+0x150>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001d5e:	2306      	movs	r3, #6
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d6e:	2305      	movs	r3, #5
 8001d70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d76:	4619      	mov	r1, r3
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <HAL_SPI_MspInit+0x15c>)
 8001d7a:	f001 fc1b 	bl	80035b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d90:	2305      	movs	r3, #5
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_SPI_MspInit+0x154>)
 8001d9c:	f001 fc0a 	bl	80035b4 <HAL_GPIO_Init>
}
 8001da0:	bf00      	nop
 8001da2:	3738      	adds	r7, #56	; 0x38
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40013000 	.word	0x40013000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000400 	.word	0x48000400
 8001db4:	40003800 	.word	0x40003800
 8001db8:	48002000 	.word	0x48002000

08001dbc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_FMC_MspInit+0xc4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d14f      	bne.n	8001e78 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8001dd8:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_FMC_MspInit+0xc4>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_FMC_MspInit+0xc8>)
 8001de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de2:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <HAL_FMC_MspInit+0xc8>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6513      	str	r3, [r2, #80]	; 0x50
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_FMC_MspInit+0xc8>)
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 8001df6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001dfa:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e08:	230c      	movs	r3, #12
 8001e0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	481d      	ldr	r0, [pc, #116]	; (8001e88 <HAL_FMC_MspInit+0xcc>)
 8001e12:	f001 fbcf 	bl	80035b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 8001e16:	f240 233f 	movw	r3, #575	; 0x23f
 8001e1a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e28:	230c      	movs	r3, #12
 8001e2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4816      	ldr	r0, [pc, #88]	; (8001e8c <HAL_FMC_MspInit+0xd0>)
 8001e32:	f001 fbbf 	bl	80035b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 8001e36:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001e3a:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e48:	230c      	movs	r3, #12
 8001e4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480f      	ldr	r0, [pc, #60]	; (8001e90 <HAL_FMC_MspInit+0xd4>)
 8001e52:	f001 fbaf 	bl	80035b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 8001e56:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001e5a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e68:	230c      	movs	r3, #12
 8001e6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4808      	ldr	r0, [pc, #32]	; (8001e94 <HAL_FMC_MspInit+0xd8>)
 8001e72:	f001 fb9f 	bl	80035b4 <HAL_GPIO_Init>
 8001e76:	e000      	b.n	8001e7a <HAL_FMC_MspInit+0xbe>
    return;
 8001e78:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200001b8 	.word	0x200001b8
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48001000 	.word	0x48001000
 8001e8c:	48001800 	.word	0x48001800
 8001e90:	48000c00 	.word	0x48000c00
 8001e94:	48001400 	.word	0x48001400

08001e98 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ea0:	f7ff ff8c 	bl	8001dbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <HAL_SAI_MspInit+0xdc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d135      	bne.n	8001f2a <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001ebe:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <HAL_SAI_MspInit+0xe0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001ec6:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_SAI_MspInit+0xe4>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eca:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <HAL_SAI_MspInit+0xe4>)
 8001ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <HAL_SAI_MspInit+0xe4>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_SAI_MspInit+0xe0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_SAI_MspInit+0xe0>)
 8001ee6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001ee8:	2354      	movs	r3, #84	; 0x54
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001ef8:	230d      	movs	r3, #13
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	4824      	ldr	r0, [pc, #144]	; (8001f94 <HAL_SAI_MspInit+0xe8>)
 8001f04:	f001 fb56 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001f1a:	230d      	movs	r3, #13
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	481c      	ldr	r0, [pc, #112]	; (8001f98 <HAL_SAI_MspInit+0xec>)
 8001f26:	f001 fb45 	bl	80035b4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_SAI_MspInit+0xf0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d124      	bne.n	8001f7e <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_SAI_MspInit+0xe0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_SAI_MspInit+0xe4>)
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f40:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <HAL_SAI_MspInit+0xe4>)
 8001f42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f46:	6613      	str	r3, [r2, #96]	; 0x60
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_SAI_MspInit+0xe4>)
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_SAI_MspInit+0xe0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_SAI_MspInit+0xe0>)
 8001f5c:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8001f5e:	2308      	movs	r3, #8
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001f6e:	230d      	movs	r3, #13
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4806      	ldr	r0, [pc, #24]	; (8001f94 <HAL_SAI_MspInit+0xe8>)
 8001f7a:	f001 fb1b 	bl	80035b4 <HAL_GPIO_Init>

    }
}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40015404 	.word	0x40015404
 8001f8c:	200001bc 	.word	0x200001bc
 8001f90:	40021000 	.word	0x40021000
 8001f94:	48001000 	.word	0x48001000
 8001f98:	48000400 	.word	0x48000400
 8001f9c:	40015424 	.word	0x40015424

08001fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <BusFault_Handler+0x4>

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff4:	f000 f8be 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <OTG_FS_IRQHandler+0x10>)
 8002002:	f001 fefa 	bl	8003dfa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20002028 	.word	0x20002028

08002010 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <SystemInit+0x64>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <SystemInit+0x64>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <SystemInit+0x68>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <SystemInit+0x68>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <SystemInit+0x68>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <SystemInit+0x68>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <SystemInit+0x68>)
 800203c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002040:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002044:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <SystemInit+0x68>)
 8002048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800204c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <SystemInit+0x68>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <SystemInit+0x68>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <SystemInit+0x68>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SystemInit+0x64>)
 8002062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002066:	609a      	str	r2, [r3, #8]
#endif
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	40021000 	.word	0x40021000

0800207c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002080:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002082:	e003      	b.n	800208c <LoopCopyDataInit>

08002084 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002086:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002088:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800208a:	3104      	adds	r1, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800208c:	480b      	ldr	r0, [pc, #44]	; (80020bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002090:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002092:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002094:	d3f6      	bcc.n	8002084 <CopyDataInit>
	ldr	r2, =_sbss
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002098:	e002      	b.n	80020a0 <LoopFillZerobss>

0800209a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800209a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800209c:	f842 3b04 	str.w	r3, [r2], #4

080020a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <LoopForever+0x16>)
	cmp	r2, r3
 80020a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020a4:	d3f9      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020a6:	f7ff ffb3 	bl	8002010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f00a ff1f 	bl	800ceec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ae:	f7fe fa25 	bl	80004fc <main>

080020b2 <LoopForever>:

LoopForever:
    b LoopForever
 80020b2:	e7fe      	b.n	80020b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020b4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80020b8:	0800d034 	.word	0x0800d034
	ldr	r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020c0:	20000194 	.word	0x20000194
	ldr	r2, =_sbss
 80020c4:	20000194 	.word	0x20000194
	ldr	r3, = _ebss
 80020c8:	20002430 	.word	0x20002430

080020cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC1_2_IRQHandler>

080020ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f001 f897 	bl	800320c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020de:	2000      	movs	r0, #0
 80020e0:	f000 f80e 	bl	8002100 <HAL_InitTick>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	71fb      	strb	r3, [r7, #7]
 80020ee:	e001      	b.n	80020f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020f0:	f7ff f9a0 	bl	8001434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f4:	79fb      	ldrb	r3, [r7, #7]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_InitTick+0x68>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d022      	beq.n	800215a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_InitTick+0x6c>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_InitTick+0x68>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002120:	fbb1 f3f3 	udiv	r3, r1, r3
 8002124:	fbb2 f3f3 	udiv	r3, r2, r3
 8002128:	4618      	mov	r0, r3
 800212a:	f001 f8a4 	bl	8003276 <HAL_SYSTICK_Config>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10f      	bne.n	8002154 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b0f      	cmp	r3, #15
 8002138:	d809      	bhi.n	800214e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213a:	2200      	movs	r2, #0
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	f04f 30ff 	mov.w	r0, #4294967295
 8002142:	f001 f86e 	bl	8003222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_InitTick+0x70>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e007      	b.n	800215e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	e004      	b.n	800215e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e001      	b.n	800215e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000010 	.word	0x20000010
 800216c:	20000008 	.word	0x20000008
 8002170:	2000000c 	.word	0x2000000c

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_IncTick+0x1c>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_IncTick+0x20>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4413      	add	r3, r2
 8002182:	4a03      	ldr	r2, [pc, #12]	; (8002190 <HAL_IncTick+0x1c>)
 8002184:	6013      	str	r3, [r2, #0]
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	20000b60 	.word	0x20000b60
 8002194:	20000010 	.word	0x20000010

08002198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000b60 	.word	0x20000b60

080021b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff ffee 	bl	8002198 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d004      	beq.n	80021d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_Delay+0x40>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021d4:	bf00      	nop
 80021d6:	f7ff ffdf 	bl	8002198 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d8f7      	bhi.n	80021d6 <HAL_Delay+0x26>
  {
  }
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000010 	.word	0x20000010

080021f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800225c:	b490      	push	{r4, r7}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3360      	adds	r3, #96	; 0x60
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002278:	6822      	ldr	r2, [r4, #0]
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <LL_ADC_SetOffset+0x40>)
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	4313      	orrs	r3, r2
 800228a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800228e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bc90      	pop	{r4, r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	03fff000 	.word	0x03fff000

080022a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022a0:	b490      	push	{r4, r7}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3360      	adds	r3, #96	; 0x60
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc90      	pop	{r4, r7}
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022c8:	b490      	push	{r4, r7}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3360      	adds	r3, #96	; 0x60
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc90      	pop	{r4, r7}
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	615a      	str	r2, [r3, #20]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800231e:	b490      	push	{r4, r7}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3330      	adds	r3, #48	; 0x30
 800232e:	461a      	mov	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	4413      	add	r3, r2
 800233c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800233e:	6822      	ldr	r2, [r4, #0]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	211f      	movs	r1, #31
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	401a      	ands	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	f003 011f 	and.w	r1, r3, #31
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bc90      	pop	{r4, r7}
 800236e:	4770      	bx	lr

08002370 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002370:	b490      	push	{r4, r7}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3314      	adds	r3, #20
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	4413      	add	r3, r2
 800238e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002390:	6822      	ldr	r2, [r4, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	0d1b      	lsrs	r3, r3, #20
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2107      	movs	r1, #7
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	0d1b      	lsrs	r3, r3, #20
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc90      	pop	{r4, r7}
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d8:	43db      	mvns	r3, r3
 80023da:	401a      	ands	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0318 	and.w	r3, r3, #24
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023e4:	40d9      	lsrs	r1, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	400b      	ands	r3, r1
 80023ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ee:	431a      	orrs	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	0007ffff 	.word	0x0007ffff

08002408 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6093      	str	r3, [r2, #8]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800243c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002440:	d101      	bne.n	8002446 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002464:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002468:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002490:	d101      	bne.n	8002496 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <LL_ADC_IsEnabled+0x18>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <LL_ADC_IsEnabled+0x1a>
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d101      	bne.n	80024e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b08      	cmp	r3, #8
 8002502:	d101      	bne.n	8002508 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e137      	b.n	80027a2 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7fe ff9b 	bl	800147c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff67 	bl	800242c <LL_ADC_IsDeepPowerDownEnabled>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff4d 	bl	8002408 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff82 	bl	800247c <LL_ADC_IsInternalRegulatorEnabled>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d113      	bne.n	80025a6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff66 	bl	8002454 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002588:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_ADC_Init+0x294>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	4a88      	ldr	r2, [pc, #544]	; (80027b0 <HAL_ADC_Init+0x298>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002598:	e002      	b.n	80025a0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3b01      	subs	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f9      	bne.n	800259a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff66 	bl	800247c <LL_ADC_IsInternalRegulatorEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff77 	bl	80024ca <LL_ADC_REG_IsConversionOngoing>
 80025dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 80d2 	bne.w	8002790 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 80ce 	bne.w	8002790 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025fc:	f043 0202 	orr.w	r2, r3, #2
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff4b 	bl	80024a4 <LL_ADC_IsEnabled>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d115      	bne.n	8002640 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002614:	4867      	ldr	r0, [pc, #412]	; (80027b4 <HAL_ADC_Init+0x29c>)
 8002616:	f7ff ff45 	bl	80024a4 <LL_ADC_IsEnabled>
 800261a:	4604      	mov	r4, r0
 800261c:	4866      	ldr	r0, [pc, #408]	; (80027b8 <HAL_ADC_Init+0x2a0>)
 800261e:	f7ff ff41 	bl	80024a4 <LL_ADC_IsEnabled>
 8002622:	4603      	mov	r3, r0
 8002624:	431c      	orrs	r4, r3
 8002626:	4865      	ldr	r0, [pc, #404]	; (80027bc <HAL_ADC_Init+0x2a4>)
 8002628:	f7ff ff3c 	bl	80024a4 <LL_ADC_IsEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	4323      	orrs	r3, r4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4619      	mov	r1, r3
 800263a:	4861      	ldr	r0, [pc, #388]	; (80027c0 <HAL_ADC_Init+0x2a8>)
 800263c:	f7ff fdda 	bl	80021f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7e5b      	ldrb	r3, [r3, #25]
 8002644:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800264a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002650:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002656:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d106      	bne.n	800267c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	3b01      	subs	r3, #1
 8002674:	045b      	lsls	r3, r3, #17
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	d009      	beq.n	8002698 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_ADC_Init+0x2ac>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	69b9      	ldr	r1, [r7, #24]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff0a 	bl	80024ca <LL_ADC_REG_IsConversionOngoing>
 80026b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff17 	bl	80024f0 <LL_ADC_INJ_IsConversionOngoing>
 80026c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d140      	bne.n	800274c <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d13d      	bne.n	800274c <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7e1b      	ldrb	r3, [r3, #24]
 80026d8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026da:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026f2:	f023 0306 	bic.w	r3, r3, #6
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	69b9      	ldr	r1, [r7, #24]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002706:	2b01      	cmp	r3, #1
 8002708:	d118      	bne.n	800273c <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002726:	4311      	orrs	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800272c:	430a      	orrs	r2, r1
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	611a      	str	r2, [r3, #16]
 800273a:	e007      	b.n	800274c <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d10c      	bne.n	800276e <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f023 010f 	bic.w	r1, r3, #15
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	1e5a      	subs	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
 800276c:	e007      	b.n	800277e <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 020f 	bic.w	r2, r2, #15
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	659a      	str	r2, [r3, #88]	; 0x58
 800278e:	e007      	b.n	80027a0 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	f043 0210 	orr.w	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd90      	pop	{r4, r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000008 	.word	0x20000008
 80027b0:	053e2d63 	.word	0x053e2d63
 80027b4:	50040000 	.word	0x50040000
 80027b8:	50040100 	.word	0x50040100
 80027bc:	50040200 	.word	0x50040200
 80027c0:	50040300 	.word	0x50040300
 80027c4:	fff0c007 	.word	0xfff0c007

080027c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0a6      	sub	sp, #152	; 0x98
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x22>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e364      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x6ec>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fe67 	bl	80024ca <LL_ADC_REG_IsConversionOngoing>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 8345 	bne.w	8002e8e <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d824      	bhi.n	8002856 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	3b02      	subs	r3, #2
 8002812:	2b03      	cmp	r3, #3
 8002814:	d81b      	bhi.n	800284e <HAL_ADC_ConfigChannel+0x86>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <HAL_ADC_ConfigChannel+0x54>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	0800282d 	.word	0x0800282d
 8002820:	08002835 	.word	0x08002835
 8002824:	0800283d 	.word	0x0800283d
 8002828:	08002845 	.word	0x08002845
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	220c      	movs	r2, #12
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	e011      	b.n	8002858 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2212      	movs	r2, #18
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	e00d      	b.n	8002858 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2218      	movs	r2, #24
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	e009      	b.n	8002858 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	e004      	b.n	8002858 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2206      	movs	r2, #6
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	e000      	b.n	8002858 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002856:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	f7ff fd5a 	bl	800231e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fe2b 	bl	80024ca <LL_ADC_REG_IsConversionOngoing>
 8002874:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fe37 	bl	80024f0 <LL_ADC_INJ_IsConversionOngoing>
 8002882:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 8163 	bne.w	8002b56 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 815e 	bne.w	8002b56 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028a2:	d10f      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2200      	movs	r2, #0
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7ff fd5e 	bl	8002370 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fd1b 	bl	80022f8 <LL_ADC_SetSamplingTimeCommonConfig>
 80028c2:	e00e      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6819      	ldr	r1, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	461a      	mov	r2, r3
 80028d2:	f7ff fd4d 	bl	8002370 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fd0b 	bl	80022f8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	08db      	lsrs	r3, r3, #3
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d00a      	beq.n	800291a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6919      	ldr	r1, [r3, #16]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002914:	f7ff fca2 	bl	800225c <LL_ADC_SetOffset>
 8002918:	e11d      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fcbd 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x17e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fcb2 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	e012      	b.n	800296c <HAL_ADC_ConfigChannel+0x1a4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fca7 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002962:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1bc>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	e00a      	b.n	800299a <HAL_ADC_ConfigChannel+0x1d2>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	429a      	cmp	r2, r3
 800299c:	d106      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fc8e 	bl	80022c8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fc74 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x210>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fc69 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	e010      	b.n	80029fa <HAL_ADC_ConfigChannel+0x232>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fc5e 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x24a>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0e9b      	lsrs	r3, r3, #26
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	e00a      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x260>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fc47 	bl	80022c8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2102      	movs	r1, #2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fc2d 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x29e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2102      	movs	r1, #2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fc22 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	e010      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x2c0>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fc17 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x2d8>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	e00a      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x2ee>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d106      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fc00 	bl	80022c8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2103      	movs	r1, #3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fbe6 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x32c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fbdb 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	f003 021f 	and.w	r2, r3, #31
 8002af2:	e010      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x34e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2103      	movs	r1, #3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fbd0 	bl	80022a0 <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x366>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0e9b      	lsrs	r3, r3, #26
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	e00a      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x37c>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d106      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2103      	movs	r1, #3
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fbb9 	bl	80022c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fca2 	bl	80024a4 <LL_ADC_IsEnabled>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 810c 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	461a      	mov	r2, r3
 8002b76:	f7ff fc23 	bl	80023c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4aae      	ldr	r2, [pc, #696]	; (8002e38 <HAL_ADC_ConfigChannel+0x670>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	f040 80fd 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x3e6>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e9b      	lsrs	r3, r3, #26
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2b09      	cmp	r3, #9
 8002ba4:	bf94      	ite	ls
 8002ba6:	2301      	movls	r3, #1
 8002ba8:	2300      	movhi	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e012      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x40c>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2b09      	cmp	r3, #9
 8002bcc:	bf94      	ite	ls
 8002bce:	2301      	movls	r3, #1
 8002bd0:	2300      	movhi	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d064      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x42c>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	3301      	adds	r3, #1
 8002bec:	069b      	lsls	r3, r3, #26
 8002bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf2:	e00e      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x44a>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	069b      	lsls	r3, r3, #26
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x46a>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0e9b      	lsrs	r3, r3, #26
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	e010      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x48c>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	ea42 0103 	orr.w	r1, r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x4b2>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	051b      	lsls	r3, r3, #20
 8002c78:	e011      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x4d6>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 021f 	and.w	r2, r3, #31
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	e069      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d107      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x4f6>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e9b      	lsrs	r3, r3, #26
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	069b      	lsls	r3, r3, #26
 8002cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cbc:	e00e      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x514>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	61fb      	str	r3, [r7, #28]
  return result;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x534>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	e010      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x556>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	617b      	str	r3, [r7, #20]
  return result;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	ea42 0103 	orr.w	r1, r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x582>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 021f 	and.w	r2, r3, #31
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	3b1e      	subs	r3, #30
 8002d42:	051b      	lsls	r3, r3, #20
 8002d44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d48:	e014      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x5ac>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	60fb      	str	r3, [r7, #12]
  return result;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f003 021f 	and.w	r2, r3, #31
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b1e      	subs	r3, #30
 8002d6e:	051b      	lsls	r3, r3, #20
 8002d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d74:	430b      	orrs	r3, r1
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	6892      	ldr	r2, [r2, #8]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7ff faf8 	bl	8002370 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_ADC_ConfigChannel+0x674>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 808d 	beq.w	8002ea8 <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d8e:	482c      	ldr	r0, [pc, #176]	; (8002e40 <HAL_ADC_ConfigChannel+0x678>)
 8002d90:	f7ff fa56 	bl	8002240 <LL_ADC_GetCommonPathInternalCh>
 8002d94:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <HAL_ADC_ConfigChannel+0x67c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d12b      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x632>
 8002da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d125      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <HAL_ADC_ConfigChannel+0x680>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x5fa>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <HAL_ADC_ConfigChannel+0x684>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d16f      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dca:	4619      	mov	r1, r3
 8002dcc:	481c      	ldr	r0, [pc, #112]	; (8002e40 <HAL_ADC_ConfigChannel+0x678>)
 8002dce:	f7ff fa24 	bl	800221a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002dd2:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <HAL_ADC_ConfigChannel+0x688>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_ADC_ConfigChannel+0x68c>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	099a      	lsrs	r2, r3, #6
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dea:	e002      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f9      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df8:	e053      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <HAL_ADC_ConfigChannel+0x690>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d12b      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x694>
 8002e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d125      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0c      	ldr	r2, [pc, #48]	; (8002e48 <HAL_ADC_ConfigChannel+0x680>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_ADC_ConfigChannel+0x65c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_ADC_ConfigChannel+0x684>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d140      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4804      	ldr	r0, [pc, #16]	; (8002e40 <HAL_ADC_ConfigChannel+0x678>)
 8002e30:	f7ff f9f3 	bl	800221a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e34:	e037      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x6de>
 8002e36:	bf00      	nop
 8002e38:	407f0000 	.word	0x407f0000
 8002e3c:	80080000 	.word	0x80080000
 8002e40:	50040300 	.word	0x50040300
 8002e44:	c7520000 	.word	0xc7520000
 8002e48:	50040000 	.word	0x50040000
 8002e4c:	50040200 	.word	0x50040200
 8002e50:	20000008 	.word	0x20000008
 8002e54:	053e2d63 	.word	0x053e2d63
 8002e58:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_ADC_ConfigChannel+0x6f4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d120      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11a      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <HAL_ADC_ConfigChannel+0x6f8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d115      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e84:	4619      	mov	r1, r3
 8002e86:	480f      	ldr	r0, [pc, #60]	; (8002ec4 <HAL_ADC_ConfigChannel+0x6fc>)
 8002e88:	f7ff f9c7 	bl	800221a <LL_ADC_SetCommonPathInternalCh>
 8002e8c:	e00c      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002ea0:	e002      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ea6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002eb0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3798      	adds	r7, #152	; 0x98
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	80000001 	.word	0x80000001
 8002ec0:	50040000 	.word	0x50040000
 8002ec4:	50040300 	.word	0x50040300

08002ec8 <LL_ADC_IsEnabled>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <LL_ADC_IsEnabled+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_ADC_IsEnabled+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_REG_IsConversionOngoing>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b0a1      	sub	sp, #132	; 0x84
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e08f      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a47      	ldr	r2, [pc, #284]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d102      	bne.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002f44:	4b46      	ldr	r3, [pc, #280]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	e001      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e072      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ffbd 	bl	8002eee <LL_ADC_REG_IsConversionOngoing>
 8002f74:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ffb7 	bl	8002eee <LL_ADC_REG_IsConversionOngoing>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d154      	bne.n	8003030 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d151      	bne.n	8003030 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f8c:	4b35      	ldr	r3, [pc, #212]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f8e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d02c      	beq.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002faa:	035b      	lsls	r3, r3, #13
 8002fac:	430b      	orrs	r3, r1
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb4:	4829      	ldr	r0, [pc, #164]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002fb6:	f7ff ff87 	bl	8002ec8 <LL_ADC_IsEnabled>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	4828      	ldr	r0, [pc, #160]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002fbe:	f7ff ff83 	bl	8002ec8 <LL_ADC_IsEnabled>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	431c      	orrs	r4, r3
 8002fc6:	4828      	ldr	r0, [pc, #160]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fc8:	f7ff ff7e 	bl	8002ec8 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4323      	orrs	r3, r4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d137      	bne.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fdc:	f023 030f 	bic.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	6811      	ldr	r1, [r2, #0]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	431a      	orrs	r2, r3
 8002fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff0:	e028      	b.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ffc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ffe:	4817      	ldr	r0, [pc, #92]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003000:	f7ff ff62 	bl	8002ec8 <LL_ADC_IsEnabled>
 8003004:	4604      	mov	r4, r0
 8003006:	4816      	ldr	r0, [pc, #88]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003008:	f7ff ff5e 	bl	8002ec8 <LL_ADC_IsEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	431c      	orrs	r4, r3
 8003010:	4815      	ldr	r0, [pc, #84]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003012:	f7ff ff59 	bl	8002ec8 <LL_ADC_IsEnabled>
 8003016:	4603      	mov	r3, r0
 8003018:	4323      	orrs	r3, r4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d112      	bne.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800301e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003026:	f023 030f 	bic.w	r3, r3, #15
 800302a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800302c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800302e:	e009      	b.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003042:	e000      	b.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003044:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800304e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003052:	4618      	mov	r0, r3
 8003054:	3784      	adds	r7, #132	; 0x84
 8003056:	46bd      	mov	sp, r7
 8003058:	bd90      	pop	{r4, r7, pc}
 800305a:	bf00      	nop
 800305c:	50040000 	.word	0x50040000
 8003060:	50040100 	.word	0x50040100
 8003064:	50040300 	.word	0x50040300
 8003068:	50040200 	.word	0x50040200

0800306c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003088:	4013      	ands	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	60d3      	str	r3, [r2, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <__NVIC_GetPriorityGrouping+0x18>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	f003 0307 	and.w	r3, r3, #7
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	db0b      	blt.n	80030fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	4907      	ldr	r1, [pc, #28]	; (8003108 <__NVIC_EnableIRQ+0x38>)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2001      	movs	r0, #1
 80030f2:	fa00 f202 	lsl.w	r2, r0, r2
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000e100 	.word	0xe000e100

0800310c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	6039      	str	r1, [r7, #0]
 8003116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311c:	2b00      	cmp	r3, #0
 800311e:	db0a      	blt.n	8003136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	490c      	ldr	r1, [pc, #48]	; (8003158 <__NVIC_SetPriority+0x4c>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	0112      	lsls	r2, r2, #4
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	440b      	add	r3, r1
 8003130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003134:	e00a      	b.n	800314c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4908      	ldr	r1, [pc, #32]	; (800315c <__NVIC_SetPriority+0x50>)
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	3b04      	subs	r3, #4
 8003144:	0112      	lsls	r2, r2, #4
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	440b      	add	r3, r1
 800314a:	761a      	strb	r2, [r3, #24]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000e100 	.word	0xe000e100
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f1c3 0307 	rsb	r3, r3, #7
 800317a:	2b04      	cmp	r3, #4
 800317c:	bf28      	it	cs
 800317e:	2304      	movcs	r3, #4
 8003180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3304      	adds	r3, #4
 8003186:	2b06      	cmp	r3, #6
 8003188:	d902      	bls.n	8003190 <NVIC_EncodePriority+0x30>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3b03      	subs	r3, #3
 800318e:	e000      	b.n	8003192 <NVIC_EncodePriority+0x32>
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	f04f 32ff 	mov.w	r2, #4294967295
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	401a      	ands	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a8:	f04f 31ff 	mov.w	r1, #4294967295
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43d9      	mvns	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	4313      	orrs	r3, r2
         );
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3724      	adds	r7, #36	; 0x24
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d8:	d301      	bcc.n	80031de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031da:	2301      	movs	r3, #1
 80031dc:	e00f      	b.n	80031fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031de:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <SysTick_Config+0x40>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e6:	210f      	movs	r1, #15
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ec:	f7ff ff8e 	bl	800310c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <SysTick_Config+0x40>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f6:	4b04      	ldr	r3, [pc, #16]	; (8003208 <SysTick_Config+0x40>)
 80031f8:	2207      	movs	r2, #7
 80031fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	e000e010 	.word	0xe000e010

0800320c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff ff29 	bl	800306c <__NVIC_SetPriorityGrouping>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003234:	f7ff ff3e 	bl	80030b4 <__NVIC_GetPriorityGrouping>
 8003238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	6978      	ldr	r0, [r7, #20]
 8003240:	f7ff ff8e 	bl	8003160 <NVIC_EncodePriority>
 8003244:	4602      	mov	r2, r0
 8003246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff5d 	bl	800310c <__NVIC_SetPriority>
}
 8003252:	bf00      	nop
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	4603      	mov	r3, r0
 8003262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff31 	bl	80030d0 <__NVIC_EnableIRQ>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ffa2 	bl	80031c8 <SysTick_Config>
 8003284:	4603      	mov	r3, r0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e075      	b.n	800338e <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe f9b0 	bl	800161c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032d2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6819      	ldr	r1, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_DCMI_Init+0x108>)
 80032ee:	400b      	ands	r3, r1
 80032f0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003306:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003312:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800331e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800332a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003336:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b10      	cmp	r3, #16
 8003346:	d112      	bne.n	800336e <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7f1b      	ldrb	r3, [r3, #28]
 800334c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7f5b      	ldrb	r3, [r3, #29]
 8003352:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003354:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7f9b      	ldrb	r3, [r3, #30]
 800335a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800335c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7fdb      	ldrb	r3, [r3, #31]
 8003364:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800336a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800336c:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 021f 	orr.w	r2, r2, #31
 800337c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	ffe0f007 	.word	0xffe0f007

0800339c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0ac      	b.n	8003508 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f8b2 	bl	800351c <DFSDM_GetChannelFromInstance>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b55      	ldr	r3, [pc, #340]	; (8003510 <HAL_DFSDM_ChannelInit+0x174>)
 80033bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e09f      	b.n	8003508 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fe f9a7 	bl	800171c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80033ce:	4b51      	ldr	r3, [pc, #324]	; (8003514 <HAL_DFSDM_ChannelInit+0x178>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a4f      	ldr	r2, [pc, #316]	; (8003514 <HAL_DFSDM_ChannelInit+0x178>)
 80033d6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80033d8:	4b4e      	ldr	r3, [pc, #312]	; (8003514 <HAL_DFSDM_ChannelInit+0x178>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d125      	bne.n	800342c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80033e0:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a4c      	ldr	r2, [pc, #304]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 80033e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ea:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80033ec:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4948      	ldr	r1, [pc, #288]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a46      	ldr	r2, [pc, #280]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 8003400:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003404:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	791b      	ldrb	r3, [r3, #4]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d108      	bne.n	8003420 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800340e:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	493f      	ldr	r1, [pc, #252]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003420:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a3c      	ldr	r2, [pc, #240]	; (8003518 <HAL_DFSDM_ChannelInit+0x17c>)
 8003426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800342a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800343a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800344a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003450:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 020f 	bic.w	r2, r2, #15
 8003468:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003490:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6899      	ldr	r1, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f002 0207 	and.w	r2, r2, #7
 80034bc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034e8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f810 	bl	800351c <DFSDM_GetChannelFromInstance>
 80034fc:	4601      	mov	r1, r0
 80034fe:	4a04      	ldr	r2, [pc, #16]	; (8003510 <HAL_DFSDM_ChannelInit+0x174>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200001c4 	.word	0x200001c4
 8003514:	200001c0 	.word	0x200001c0
 8003518:	40016000 	.word	0x40016000

0800351c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <DFSDM_GetChannelFromInstance+0x7c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d102      	bne.n	8003532 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e02b      	b.n	800358a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <DFSDM_GetChannelFromInstance+0x80>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d102      	bne.n	8003540 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800353a:	2301      	movs	r3, #1
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e024      	b.n	800358a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <DFSDM_GetChannelFromInstance+0x84>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d102      	bne.n	800354e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003548:	2302      	movs	r3, #2
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e01d      	b.n	800358a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <DFSDM_GetChannelFromInstance+0x88>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d102      	bne.n	800355c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003556:	2304      	movs	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e016      	b.n	800358a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <DFSDM_GetChannelFromInstance+0x8c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d102      	bne.n	800356a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003564:	2305      	movs	r3, #5
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e00f      	b.n	800358a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a0f      	ldr	r2, [pc, #60]	; (80035ac <DFSDM_GetChannelFromInstance+0x90>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d102      	bne.n	8003578 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003572:	2306      	movs	r3, #6
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e008      	b.n	800358a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a0d      	ldr	r2, [pc, #52]	; (80035b0 <DFSDM_GetChannelFromInstance+0x94>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d102      	bne.n	8003586 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003580:	2307      	movs	r3, #7
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e001      	b.n	800358a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003586:	2303      	movs	r3, #3
 8003588:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800358a:	68fb      	ldr	r3, [r7, #12]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40016000 	.word	0x40016000
 800359c:	40016020 	.word	0x40016020
 80035a0:	40016040 	.word	0x40016040
 80035a4:	40016080 	.word	0x40016080
 80035a8:	400160a0 	.word	0x400160a0
 80035ac:	400160c0 	.word	0x400160c0
 80035b0:	400160e0 	.word	0x400160e0

080035b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c2:	e166      	b.n	8003892 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8158 	beq.w	800388c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d00b      	beq.n	80035fc <HAL_GPIO_Init+0x48>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d007      	beq.n	80035fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035f0:	2b11      	cmp	r3, #17
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b12      	cmp	r3, #18
 80035fa:	d130      	bne.n	800365e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	2203      	movs	r2, #3
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003632:	2201      	movs	r2, #1
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 0201 	and.w	r2, r3, #1
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0xea>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b12      	cmp	r3, #18
 800369c:	d123      	bne.n	80036e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	08da      	lsrs	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3208      	adds	r2, #8
 80036a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	08da      	lsrs	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3208      	adds	r2, #8
 80036e0:	6939      	ldr	r1, [r7, #16]
 80036e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2203      	movs	r2, #3
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0203 	and.w	r2, r3, #3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80b2 	beq.w	800388c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003728:	4b61      	ldr	r3, [pc, #388]	; (80038b0 <HAL_GPIO_Init+0x2fc>)
 800372a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372c:	4a60      	ldr	r2, [pc, #384]	; (80038b0 <HAL_GPIO_Init+0x2fc>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6613      	str	r3, [r2, #96]	; 0x60
 8003734:	4b5e      	ldr	r3, [pc, #376]	; (80038b0 <HAL_GPIO_Init+0x2fc>)
 8003736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003740:	4a5c      	ldr	r2, [pc, #368]	; (80038b4 <HAL_GPIO_Init+0x300>)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	3302      	adds	r3, #2
 8003748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	220f      	movs	r2, #15
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800376a:	d02b      	beq.n	80037c4 <HAL_GPIO_Init+0x210>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a52      	ldr	r2, [pc, #328]	; (80038b8 <HAL_GPIO_Init+0x304>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d025      	beq.n	80037c0 <HAL_GPIO_Init+0x20c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a51      	ldr	r2, [pc, #324]	; (80038bc <HAL_GPIO_Init+0x308>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d01f      	beq.n	80037bc <HAL_GPIO_Init+0x208>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <HAL_GPIO_Init+0x30c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d019      	beq.n	80037b8 <HAL_GPIO_Init+0x204>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a4f      	ldr	r2, [pc, #316]	; (80038c4 <HAL_GPIO_Init+0x310>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <HAL_GPIO_Init+0x200>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a4e      	ldr	r2, [pc, #312]	; (80038c8 <HAL_GPIO_Init+0x314>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00d      	beq.n	80037b0 <HAL_GPIO_Init+0x1fc>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a4d      	ldr	r2, [pc, #308]	; (80038cc <HAL_GPIO_Init+0x318>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d007      	beq.n	80037ac <HAL_GPIO_Init+0x1f8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a4c      	ldr	r2, [pc, #304]	; (80038d0 <HAL_GPIO_Init+0x31c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_GPIO_Init+0x1f4>
 80037a4:	2307      	movs	r3, #7
 80037a6:	e00e      	b.n	80037c6 <HAL_GPIO_Init+0x212>
 80037a8:	2308      	movs	r3, #8
 80037aa:	e00c      	b.n	80037c6 <HAL_GPIO_Init+0x212>
 80037ac:	2306      	movs	r3, #6
 80037ae:	e00a      	b.n	80037c6 <HAL_GPIO_Init+0x212>
 80037b0:	2305      	movs	r3, #5
 80037b2:	e008      	b.n	80037c6 <HAL_GPIO_Init+0x212>
 80037b4:	2304      	movs	r3, #4
 80037b6:	e006      	b.n	80037c6 <HAL_GPIO_Init+0x212>
 80037b8:	2303      	movs	r3, #3
 80037ba:	e004      	b.n	80037c6 <HAL_GPIO_Init+0x212>
 80037bc:	2302      	movs	r3, #2
 80037be:	e002      	b.n	80037c6 <HAL_GPIO_Init+0x212>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_GPIO_Init+0x212>
 80037c4:	2300      	movs	r3, #0
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	f002 0203 	and.w	r2, r2, #3
 80037cc:	0092      	lsls	r2, r2, #2
 80037ce:	4093      	lsls	r3, r2
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037d6:	4937      	ldr	r1, [pc, #220]	; (80038b4 <HAL_GPIO_Init+0x300>)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037e4:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_GPIO_Init+0x320>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003808:	4a32      	ldr	r2, [pc, #200]	; (80038d4 <HAL_GPIO_Init+0x320>)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800380e:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_GPIO_Init+0x320>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	43db      	mvns	r3, r3
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003832:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <HAL_GPIO_Init+0x320>)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003838:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_GPIO_Init+0x320>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	43db      	mvns	r3, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4013      	ands	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <HAL_GPIO_Init+0x320>)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003862:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <HAL_GPIO_Init+0x320>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003886:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <HAL_GPIO_Init+0x320>)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	3301      	adds	r3, #1
 8003890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	f47f ae91 	bne.w	80035c4 <HAL_GPIO_Init+0x10>
  }
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40010000 	.word	0x40010000
 80038b8:	48000400 	.word	0x48000400
 80038bc:	48000800 	.word	0x48000800
 80038c0:	48000c00 	.word	0x48000c00
 80038c4:	48001000 	.word	0x48001000
 80038c8:	48001400 	.word	0x48001400
 80038cc:	48001800 	.word	0x48001800
 80038d0:	48001c00 	.word	0x48001c00
 80038d4:	40010400 	.word	0x40010400

080038d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
 80038e4:	4613      	mov	r3, r2
 80038e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038e8:	787b      	ldrb	r3, [r7, #1]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038f6:	887a      	ldrh	r2, [r7, #2]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e081      	b.n	8003a1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd ff56 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	; 0x24
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003958:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003968:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	e006      	b.n	8003990 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800398e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d104      	bne.n	80039a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	ea42 0103 	orr.w	r1, r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69d9      	ldr	r1, [r3, #28]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1a      	ldr	r2, [r3, #32]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d138      	bne.n	8003aae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e032      	b.n	8003ab0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2224      	movs	r2, #36	; 0x24
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d139      	bne.n	8003b46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e033      	b.n	8003b48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b56:	b08f      	sub	sp, #60	; 0x3c
 8003b58:	af0a      	add	r7, sp, #40	; 0x28
 8003b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e116      	b.n	8003d94 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f008 fd97 	bl	800c6b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2203      	movs	r2, #3
 8003b8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f005 fe88 	bl	80098ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	687e      	ldr	r6, [r7, #4]
 8003bb2:	466d      	mov	r5, sp
 8003bb4:	f106 0410 	add.w	r4, r6, #16
 8003bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bc8:	1d33      	adds	r3, r6, #4
 8003bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bcc:	6838      	ldr	r0, [r7, #0]
 8003bce:	f005 fd75 	bl	80096bc <USB_CoreInit>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0d7      	b.n	8003d94 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f005 fe76 	bl	80098dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e04a      	b.n	8003c8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	333d      	adds	r3, #61	; 0x3d
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c0a:	7bfa      	ldrb	r2, [r7, #15]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	333c      	adds	r3, #60	; 0x3c
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	b298      	uxth	r0, r3
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	3342      	adds	r3, #66	; 0x42
 8003c32:	4602      	mov	r2, r0
 8003c34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	333f      	adds	r3, #63	; 0x3f
 8003c46:	2200      	movs	r2, #0
 8003c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3344      	adds	r3, #68	; 0x44
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3348      	adds	r3, #72	; 0x48
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c72:	7bfa      	ldrb	r2, [r7, #15]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	3350      	adds	r3, #80	; 0x50
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d3af      	bcc.n	8003bf6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
 8003c9a:	e044      	b.n	8003d26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	3301      	adds	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d3b5      	bcc.n	8003c9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	687e      	ldr	r6, [r7, #4]
 8003d38:	466d      	mov	r5, sp
 8003d3a:	f106 0410 	add.w	r4, r6, #16
 8003d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d4e:	1d33      	adds	r3, r6, #4
 8003d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f005 fdec 	bl	8009930 <USB_DevInit>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e014      	b.n	8003d94 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d102      	bne.n	8003d88 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 ff62 	bl	8004c4c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f006 fd65 	bl	800a85c <USB_DevDisconnect>

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_PCD_Start+0x1c>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e01c      	b.n	8003df2 <HAL_PCD_Start+0x56>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f006 fd27 	bl	800a82c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 fd58 	bl	8009898 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003dfa:	b590      	push	{r4, r7, lr}
 8003dfc:	b08d      	sub	sp, #52	; 0x34
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f006 fdce 	bl	800a9b2 <USB_GetMode>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 838f 	bne.w	800453c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f006 fd32 	bl	800a88c <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8385 	beq.w	800453a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f006 fd29 	bl	800a88c <USB_ReadInterrupts>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d107      	bne.n	8003e54 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f002 0202 	and.w	r2, r2, #2
 8003e52:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f006 fd17 	bl	800a88c <USB_ReadInterrupts>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d161      	bne.n	8003f2c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0210 	bic.w	r2, r2, #16
 8003e76:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 020f 	and.w	r2, r3, #15
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	3304      	adds	r3, #4
 8003e96:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	0c5b      	lsrs	r3, r3, #17
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d124      	bne.n	8003eee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d035      	beq.n	8003f1c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6a38      	ldr	r0, [r7, #32]
 8003ec4:	f006 fb8f 	bl	800a5e6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ed4:	441a      	add	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee6:	441a      	add	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	619a      	str	r2, [r3, #24]
 8003eec:	e016      	b.n	8003f1c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	0c5b      	lsrs	r3, r3, #17
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d110      	bne.n	8003f1c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f00:	2208      	movs	r2, #8
 8003f02:	4619      	mov	r1, r3
 8003f04:	6a38      	ldr	r0, [r7, #32]
 8003f06:	f006 fb6e 	bl	800a5e6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f16:	441a      	add	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0210 	orr.w	r2, r2, #16
 8003f2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f006 fcab 	bl	800a88c <USB_ReadInterrupts>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f40:	d16e      	bne.n	8004020 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f006 fcb1 	bl	800a8b2 <USB_ReadDevAllOutEpInterrupt>
 8003f50:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003f52:	e062      	b.n	800401a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d057      	beq.n	800400e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f006 fcd6 	bl	800a91a <USB_ReadDevOutEPInterrupt>
 8003f6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	461a      	mov	r2, r3
 8003f88:	2301      	movs	r3, #1
 8003f8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fd82 	bl	8004a98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003faa:	461a      	mov	r2, r3
 8003fac:	2308      	movs	r3, #8
 8003fae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fdbe 	bl	8004b34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	461a      	mov	r2, r3
 8003fec:	2320      	movs	r3, #32
 8003fee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	461a      	mov	r2, r3
 8004008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800400c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	3301      	adds	r3, #1
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d199      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f006 fc31 	bl	800a88c <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004030:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004034:	f040 8087 	bne.w	8004146 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f006 fc52 	bl	800a8e6 <USB_ReadDevAllInEpInterrupt>
 8004042:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004048:	e07a      	b.n	8004140 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d06f      	beq.n	8004134 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f006 fc79 	bl	800a956 <USB_ReadDevInEPInterrupt>
 8004064:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d020      	beq.n	80040b2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	2201      	movs	r2, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	43db      	mvns	r3, r3
 800408a:	69f9      	ldr	r1, [r7, #28]
 800408c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004090:	4013      	ands	r3, r2
 8004092:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a0:	461a      	mov	r2, r3
 80040a2:	2301      	movs	r3, #1
 80040a4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f008 fb94 	bl	800c7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c8:	461a      	mov	r2, r3
 80040ca:	2308      	movs	r3, #8
 80040cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e4:	461a      	mov	r2, r3
 80040e6:	2310      	movs	r3, #16
 80040e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	461a      	mov	r2, r3
 8004102:	2340      	movs	r3, #64	; 0x40
 8004104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	461a      	mov	r2, r3
 800411e:	2302      	movs	r3, #2
 8004120:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800412c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fc29 	bl	8004986 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	3301      	adds	r3, #1
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d181      	bne.n	800404a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f006 fb9e 	bl	800a88c <USB_ReadInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415a:	d122      	bne.n	80041a2 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004176:	2b01      	cmp	r3, #1
 8004178:	d108      	bne.n	800418c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004182:	2100      	movs	r1, #0
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f008 fe45 	bl	800ce14 <HAL_PCDEx_LPM_Callback>
 800418a:	e002      	b.n	8004192 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f008 fb91 	bl	800c8b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80041a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f006 fb70 	bl	800a88c <USB_ReadInterrupts>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b6:	d112      	bne.n	80041de <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d102      	bne.n	80041ce <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f008 fb4d 	bl	800c868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80041dc:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f006 fb52 	bl	800a88c <USB_ReadInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f2:	d121      	bne.n	8004238 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004202:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d111      	bne.n	8004232 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	f003 020f 	and.w	r2, r3, #15
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004228:	2101      	movs	r1, #1
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f008 fdf2 	bl	800ce14 <HAL_PCDEx_LPM_Callback>
 8004230:	e002      	b.n	8004238 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f008 fb18 	bl	800c868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f006 fb25 	bl	800a88c <USB_ReadInterrupts>
 8004242:	4603      	mov	r3, r0
 8004244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	f040 80c5 	bne.w	80043da <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2110      	movs	r1, #16
 800426a:	4618      	mov	r0, r3
 800426c:	f005 fcac 	bl	8009bc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004270:	2300      	movs	r3, #0
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004274:	e056      	b.n	8004324 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004282:	461a      	mov	r2, r3
 8004284:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004288:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ba:	0151      	lsls	r1, r2, #5
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	440a      	add	r2, r1
 80042c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d6:	461a      	mov	r2, r3
 80042d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800430e:	0151      	lsls	r1, r2, #5
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	440a      	add	r2, r1
 8004314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004318:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800431c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	3301      	adds	r3, #1
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800432a:	429a      	cmp	r2, r3
 800432c:	d3a3      	bcc.n	8004276 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004340:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435a:	f043 030b 	orr.w	r3, r3, #11
 800435e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004370:	f043 030b 	orr.w	r3, r3, #11
 8004374:	6453      	str	r3, [r2, #68]	; 0x44
 8004376:	e015      	b.n	80043a4 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800438a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800438e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800439e:	f043 030b 	orr.w	r3, r3, #11
 80043a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f006 fb25 	bl	800aa14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80043d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f006 fa54 	bl	800a88c <USB_ReadInterrupts>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ee:	d124      	bne.n	800443a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f006 faea 	bl	800a9ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f005 fc43 	bl	8009c8a <USB_GetDevSpeed>
 8004404:	4603      	mov	r3, r0
 8004406:	461a      	mov	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681c      	ldr	r4, [r3, #0]
 8004410:	f001 fb34 	bl	8005a7c <HAL_RCC_GetHCLKFreq>
 8004414:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	4620      	mov	r0, r4
 8004420:	f005 f99e 	bl	8009760 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f008 fa00 	bl	800c82a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004438:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f006 fa24 	bl	800a88c <USB_ReadInterrupts>
 8004444:	4603      	mov	r3, r0
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b08      	cmp	r3, #8
 800444c:	d10a      	bne.n	8004464 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f008 f9dd 	bl	800c80e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f002 0208 	and.w	r2, r2, #8
 8004462:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f006 fa0f 	bl	800a88c <USB_ReadInterrupts>
 800446e:	4603      	mov	r3, r0
 8004470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004478:	d10f      	bne.n	800449a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	b2db      	uxtb	r3, r3
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f008 fa4f 	bl	800c928 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f006 f9f4 	bl	800a88c <USB_ReadInterrupts>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ae:	d10f      	bne.n	80044d0 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f008 fa22 	bl	800c904 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f006 f9d9 	bl	800a88c <USB_ReadInterrupts>
 80044da:	4603      	mov	r3, r0
 80044dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d10a      	bne.n	80044fc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f008 fa30 	bl	800c94c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f006 f9c3 	bl	800a88c <USB_ReadInterrupts>
 8004506:	4603      	mov	r3, r0
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b04      	cmp	r3, #4
 800450e:	d115      	bne.n	800453c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f008 fa20 	bl	800c968 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
 8004538:	e000      	b.n	800453c <HAL_PCD_IRQHandler+0x742>
      return;
 800453a:	bf00      	nop
    }
  }
}
 800453c:	3734      	adds	r7, #52	; 0x34
 800453e:	46bd      	mov	sp, r7
 8004540:	bd90      	pop	{r4, r7, pc}

08004542 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	460b      	mov	r3, r1
 800454c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_PCD_SetAddress+0x1a>
 8004558:	2302      	movs	r3, #2
 800455a:	e013      	b.n	8004584 <HAL_PCD_SetAddress+0x42>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f006 f933 	bl	800a7e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	4608      	mov	r0, r1
 8004596:	4611      	mov	r1, r2
 8004598:	461a      	mov	r2, r3
 800459a:	4603      	mov	r3, r0
 800459c:	70fb      	strb	r3, [r7, #3]
 800459e:	460b      	mov	r3, r1
 80045a0:	803b      	strh	r3, [r7, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	da0f      	bge.n	80045d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	f003 020f 	and.w	r2, r3, #15
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	3338      	adds	r3, #56	; 0x38
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	3304      	adds	r3, #4
 80045c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	705a      	strb	r2, [r3, #1]
 80045d0:	e00f      	b.n	80045f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	f003 020f 	and.w	r2, r3, #15
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045fe:	883a      	ldrh	r2, [r7, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	78ba      	ldrb	r2, [r7, #2]
 8004608:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800461c:	78bb      	ldrb	r3, [r7, #2]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d102      	bne.n	8004628 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_PCD_EP_Open+0xaa>
 8004632:	2302      	movs	r3, #2
 8004634:	e00e      	b.n	8004654 <HAL_PCD_EP_Open+0xc8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	4618      	mov	r0, r3
 8004646:	f005 fb3f 	bl	8009cc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004652:	7afb      	ldrb	r3, [r7, #11]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da0f      	bge.n	8004690 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	f003 020f 	and.w	r2, r3, #15
 8004676:	4613      	mov	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	3338      	adds	r3, #56	; 0x38
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	705a      	strb	r2, [r3, #1]
 800468e:	e00f      	b.n	80046b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	f003 020f 	and.w	r2, r3, #15
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	3304      	adds	r3, #4
 80046a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_PCD_EP_Close+0x6e>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e00e      	b.n	80046e8 <HAL_PCD_EP_Close+0x8c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	4618      	mov	r0, r3
 80046da:	f005 fb7d 	bl	8009dd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	460b      	mov	r3, r1
 80046fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004700:	7afb      	ldrb	r3, [r7, #11]
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	3304      	adds	r3, #4
 8004718:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004732:	7afb      	ldrb	r3, [r7, #11]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	b2da      	uxtb	r2, r3
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800473e:	7afb      	ldrb	r3, [r7, #11]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6979      	ldr	r1, [r7, #20]
 800474e:	4618      	mov	r0, r3
 8004750:	f005 fdfa 	bl	800a348 <USB_EP0StartXfer>
 8004754:	e005      	b.n	8004762 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6979      	ldr	r1, [r7, #20]
 800475c:	4618      	mov	r0, r3
 800475e:	f005 fc17 	bl	8009f90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	f003 020f 	and.w	r2, r3, #15
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	460b      	mov	r3, r1
 80047aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ac:	7afb      	ldrb	r3, [r7, #11]
 80047ae:	f003 020f 	and.w	r2, r3, #15
 80047b2:	4613      	mov	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	3338      	adds	r3, #56	; 0x38
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	3304      	adds	r3, #4
 80047c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2200      	movs	r2, #0
 80047d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2201      	movs	r2, #1
 80047da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047dc:	7afb      	ldrb	r3, [r7, #11]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047e8:	7afb      	ldrb	r3, [r7, #11]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6979      	ldr	r1, [r7, #20]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f005 fda5 	bl	800a348 <USB_EP0StartXfer>
 80047fe:	e005      	b.n	800480c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6979      	ldr	r1, [r7, #20]
 8004806:	4618      	mov	r0, r3
 8004808:	f005 fbc2 	bl	8009f90 <USB_EPStartXfer>
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d901      	bls.n	8004834 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e04e      	b.n	80048d2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004838:	2b00      	cmp	r3, #0
 800483a:	da0f      	bge.n	800485c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	f003 020f 	and.w	r2, r3, #15
 8004842:	4613      	mov	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	3338      	adds	r3, #56	; 0x38
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	3304      	adds	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	705a      	strb	r2, [r3, #1]
 800485a:	e00d      	b.n	8004878 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	3304      	adds	r3, #4
 8004870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_PCD_EP_SetStall+0x82>
 8004894:	2302      	movs	r3, #2
 8004896:	e01c      	b.n	80048d2 <HAL_PCD_EP_SetStall+0xbc>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68f9      	ldr	r1, [r7, #12]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f005 fec6 	bl	800a638 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f006 f8a6 	bl	800aa14 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 020f 	and.w	r2, r3, #15
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d901      	bls.n	80048f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e042      	b.n	800497e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	da0f      	bge.n	8004920 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	f003 020f 	and.w	r2, r3, #15
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	3338      	adds	r3, #56	; 0x38
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4413      	add	r3, r2
 8004914:	3304      	adds	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	705a      	strb	r2, [r3, #1]
 800491e:	e00f      	b.n	8004940 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	f003 020f 	and.w	r2, r3, #15
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	3304      	adds	r3, #4
 8004938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	b2da      	uxtb	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_PCD_EP_ClrStall+0x86>
 800495c:	2302      	movs	r3, #2
 800495e:	e00e      	b.n	800497e <HAL_PCD_EP_ClrStall+0xa4>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68f9      	ldr	r1, [r7, #12]
 800496e:	4618      	mov	r0, r3
 8004970:	f005 fed0 	bl	800a714 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b088      	sub	sp, #32
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	3338      	adds	r3, #56	; 0x38
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	3304      	adds	r3, #4
 80049ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d901      	bls.n	80049be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e067      	b.n	8004a8e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d902      	bls.n	80049da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3303      	adds	r3, #3
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049e2:	e026      	b.n	8004a32 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d902      	bls.n	8004a00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3303      	adds	r3, #3
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68d9      	ldr	r1, [r3, #12]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	6978      	ldr	r0, [r7, #20]
 8004a16:	f005 fdb5 	bl	800a584 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	441a      	add	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	441a      	add	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d809      	bhi.n	8004a5c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d203      	bcs.n	8004a5c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1c3      	bne.n	80049e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d811      	bhi.n	8004a8c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	2201      	movs	r2, #1
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	6939      	ldr	r1, [r7, #16]
 8004a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a88:	4013      	ands	r3, r2
 8004a8a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	333c      	adds	r3, #60	; 0x3c
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a19      	ldr	r2, [pc, #100]	; (8004b30 <PCD_EP_OutXfrComplete_int+0x98>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d124      	bne.n	8004b18 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aea:	6093      	str	r3, [r2, #8]
 8004aec:	e01a      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b04:	461a      	mov	r2, r3
 8004b06:	2320      	movs	r3, #32
 8004b08:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f007 fe47 	bl	800c7a4 <HAL_PCD_DataOutStageCallback>
 8004b16:	e005      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f007 fe40 	bl	800c7a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	4f54310a 	.word	0x4f54310a

08004b34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	333c      	adds	r3, #60	; 0x3c
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <PCD_EP_OutSetupPacket_int+0x64>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d90e      	bls.n	8004b88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d009      	beq.n	8004b88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b80:	461a      	mov	r2, r3
 8004b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f007 fdf9 	bl	800c780 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	4f54300a 	.word	0x4f54300a

08004b9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bba:	883b      	ldrh	r3, [r7, #0]
 8004bbc:	0419      	lsls	r1, r3, #16
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc8:	e028      	b.n	8004c1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73fb      	strb	r3, [r7, #15]
 8004bdc:	e00d      	b.n	8004bfa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	3340      	adds	r3, #64	; 0x40
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	7bfa      	ldrb	r2, [r7, #15]
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3ec      	bcc.n	8004bde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c04:	883b      	ldrh	r3, [r7, #0]
 8004c06:	0418      	lsls	r0, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6819      	ldr	r1, [r3, #0]
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	4302      	orrs	r2, r0
 8004c14:	3340      	adds	r3, #64	; 0x40
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	f043 0303 	orr.w	r3, r3, #3
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca2:	6013      	str	r3, [r2, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40007000 	.word	0x40007000

08004cb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <HAL_PWREx_GetVoltageRange+0x18>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40007000 	.word	0x40007000

08004cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cde:	d130      	bne.n	8004d42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ce0:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	d038      	beq.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2232      	movs	r2, #50	; 0x32
 8004d04:	fb02 f303 	mul.w	r3, r2, r3
 8004d08:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0c9b      	lsrs	r3, r3, #18
 8004d10:	3301      	adds	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d14:	e002      	b.n	8004d1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d1c:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d28:	d102      	bne.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f2      	bne.n	8004d16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3c:	d110      	bne.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00f      	b.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4e:	d007      	beq.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d58:	4a05      	ldr	r2, [pc, #20]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40007000 	.word	0x40007000
 8004d74:	20000008 	.word	0x20000008
 8004d78:	431bde83 	.word	0x431bde83

08004d7c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d8a:	6053      	str	r3, [r2, #4]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40007000 	.word	0x40007000

08004d9c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4a04      	ldr	r2, [pc, #16]	; (8004db8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004daa:	6053      	str	r3, [r2, #4]
}
 8004dac:	bf00      	nop
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40007000 	.word	0x40007000

08004dbc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004dc4:	f7fd f9e8 	bl	8002198 <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e075      	b.n	8004ec0 <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_QSPI_Init+0x28>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e06d      	b.n	8004ec0 <HAL_QSPI_Init+0x104>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10b      	bne.n	8004e10 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fc fe67 	bl	8001ad4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004e06:	f241 3188 	movw	r1, #5000	; 0x1388
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f85e 	bl	8004ecc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	021a      	lsls	r2, r3, #8
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2120      	movs	r1, #32
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f856 	bl	8004ee8 <QSPI_WaitFlagStateUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004e40:	7afb      	ldrb	r3, [r7, #11]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d137      	bne.n	8004eb6 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e50:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6852      	ldr	r2, [r2, #4]
 8004e58:	0611      	lsls	r1, r2, #24
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68d2      	ldr	r2, [r2, #12]
 8004e5e:	4311      	orrs	r1, r2
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	69d2      	ldr	r2, [r2, #28]
 8004e64:	4311      	orrs	r1, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6a12      	ldr	r2, [r2, #32]
 8004e6a:	4311      	orrs	r1, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <HAL_QSPI_Init+0x10c>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6912      	ldr	r2, [r2, #16]
 8004e82:	0411      	lsls	r1, r2, #16
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6952      	ldr	r2, [r2, #20]
 8004e88:	4311      	orrs	r1, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6992      	ldr	r2, [r2, #24]
 8004e8e:	4311      	orrs	r1, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	ffe0f8fe 	.word	0xffe0f8fe

08004ecc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004ef8:	e01a      	b.n	8004f30 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d016      	beq.n	8004f30 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f02:	f7fd f949 	bl	8002198 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d302      	bcc.n	8004f18 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f043 0201 	orr.w	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e00e      	b.n	8004f4e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d1d6      	bne.n	8004efa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f000 bc16 	b.w	8005798 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f6c:	4ba0      	ldr	r3, [pc, #640]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f76:	4b9e      	ldr	r3, [pc, #632]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80e4 	beq.w	8005156 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x4c>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b0c      	cmp	r3, #12
 8004f98:	f040 808b 	bne.w	80050b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	f040 8087 	bne.w	80050b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fa4:	4b92      	ldr	r3, [pc, #584]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_OscConfig+0x64>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e3ed      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	4b8b      	ldr	r3, [pc, #556]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d004      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x7e>
 8004fcc:	4b88      	ldr	r3, [pc, #544]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fd4:	e005      	b.n	8004fe2 <HAL_RCC_OscConfig+0x8a>
 8004fd6:	4b86      	ldr	r3, [pc, #536]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8004fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d223      	bcs.n	800502e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fd7e 	bl	8005aec <RCC_SetFlashLatencyFromMSIRange>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e3ce      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ffa:	4b7d      	ldr	r3, [pc, #500]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7c      	ldr	r2, [pc, #496]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005000:	f043 0308 	orr.w	r3, r3, #8
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b7a      	ldr	r3, [pc, #488]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4977      	ldr	r1, [pc, #476]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005014:	4313      	orrs	r3, r2
 8005016:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005018:	4b75      	ldr	r3, [pc, #468]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	4972      	ldr	r1, [pc, #456]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005028:	4313      	orrs	r3, r2
 800502a:	604b      	str	r3, [r1, #4]
 800502c:	e025      	b.n	800507a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800502e:	4b70      	ldr	r3, [pc, #448]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6f      	ldr	r2, [pc, #444]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005034:	f043 0308 	orr.w	r3, r3, #8
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b6d      	ldr	r3, [pc, #436]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	496a      	ldr	r1, [pc, #424]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005048:	4313      	orrs	r3, r2
 800504a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800504c:	4b68      	ldr	r3, [pc, #416]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	4965      	ldr	r1, [pc, #404]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 800505c:	4313      	orrs	r3, r2
 800505e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fd3e 	bl	8005aec <RCC_SetFlashLatencyFromMSIRange>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e38e      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800507a:	f000 fc75 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 800507e:	4601      	mov	r1, r0
 8005080:	4b5b      	ldr	r3, [pc, #364]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	4a5a      	ldr	r2, [pc, #360]	; (80051f4 <HAL_RCC_OscConfig+0x29c>)
 800508c:	5cd3      	ldrb	r3, [r2, r3]
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	fa21 f303 	lsr.w	r3, r1, r3
 8005096:	4a58      	ldr	r2, [pc, #352]	; (80051f8 <HAL_RCC_OscConfig+0x2a0>)
 8005098:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800509a:	4b58      	ldr	r3, [pc, #352]	; (80051fc <HAL_RCC_OscConfig+0x2a4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd f82e 	bl	8002100 <HAL_InitTick>
 80050a4:	4603      	mov	r3, r0
 80050a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d052      	beq.n	8005154 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	e372      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d032      	beq.n	8005120 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050ba:	4b4d      	ldr	r3, [pc, #308]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a4c      	ldr	r2, [pc, #304]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050c6:	f7fd f867 	bl	8002198 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050ce:	f7fd f863 	bl	8002198 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e35b      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050e0:	4b43      	ldr	r3, [pc, #268]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ec:	4b40      	ldr	r3, [pc, #256]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3f      	ldr	r2, [pc, #252]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80050f2:	f043 0308 	orr.w	r3, r3, #8
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b3d      	ldr	r3, [pc, #244]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	493a      	ldr	r1, [pc, #232]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800510a:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	4935      	ldr	r1, [pc, #212]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 800511a:	4313      	orrs	r3, r2
 800511c:	604b      	str	r3, [r1, #4]
 800511e:	e01a      	b.n	8005156 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005120:	4b33      	ldr	r3, [pc, #204]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a32      	ldr	r2, [pc, #200]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800512c:	f7fd f834 	bl	8002198 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005134:	f7fd f830 	bl	8002198 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e328      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005146:	4b2a      	ldr	r3, [pc, #168]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <HAL_RCC_OscConfig+0x1dc>
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005154:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d073      	beq.n	800524a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d005      	beq.n	8005174 <HAL_RCC_OscConfig+0x21c>
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d10e      	bne.n	800518c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d10b      	bne.n	800518c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005174:	4b1e      	ldr	r3, [pc, #120]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d063      	beq.n	8005248 <HAL_RCC_OscConfig+0x2f0>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d15f      	bne.n	8005248 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e305      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005194:	d106      	bne.n	80051a4 <HAL_RCC_OscConfig+0x24c>
 8005196:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 800519c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	e01d      	b.n	80051e0 <HAL_RCC_OscConfig+0x288>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCC_OscConfig+0x270>
 80051ae:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a0f      	ldr	r2, [pc, #60]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80051b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80051c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e00b      	b.n	80051e0 <HAL_RCC_OscConfig+0x288>
 80051c8:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80051ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a05      	ldr	r2, [pc, #20]	; (80051f0 <HAL_RCC_OscConfig+0x298>)
 80051da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01b      	beq.n	8005220 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fc ffd6 	bl	8002198 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ee:	e010      	b.n	8005212 <HAL_RCC_OscConfig+0x2ba>
 80051f0:	40021000 	.word	0x40021000
 80051f4:	0800cfdc 	.word	0x0800cfdc
 80051f8:	20000008 	.word	0x20000008
 80051fc:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005200:	f7fc ffca 	bl	8002198 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b64      	cmp	r3, #100	; 0x64
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e2c2      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005212:	4baf      	ldr	r3, [pc, #700]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x2a8>
 800521e:	e014      	b.n	800524a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fc ffba 	bl	8002198 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005228:	f7fc ffb6 	bl	8002198 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b64      	cmp	r3, #100	; 0x64
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e2ae      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800523a:	4ba5      	ldr	r3, [pc, #660]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x2d0>
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d060      	beq.n	8005318 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b04      	cmp	r3, #4
 800525a:	d005      	beq.n	8005268 <HAL_RCC_OscConfig+0x310>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d119      	bne.n	8005296 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d116      	bne.n	8005296 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005268:	4b99      	ldr	r3, [pc, #612]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_RCC_OscConfig+0x328>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e28b      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005280:	4b93      	ldr	r3, [pc, #588]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	4990      	ldr	r1, [pc, #576]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005294:	e040      	b.n	8005318 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d023      	beq.n	80052e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800529e:	4b8c      	ldr	r3, [pc, #560]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a8b      	ldr	r2, [pc, #556]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80052a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052aa:	f7fc ff75 	bl	8002198 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b2:	f7fc ff71 	bl	8002198 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e269      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052c4:	4b82      	ldr	r3, [pc, #520]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d0:	4b7f      	ldr	r3, [pc, #508]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	497c      	ldr	r1, [pc, #496]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]
 80052e4:	e018      	b.n	8005318 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052e6:	4b7a      	ldr	r3, [pc, #488]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a79      	ldr	r2, [pc, #484]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80052ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fc ff51 	bl	8002198 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052fa:	f7fc ff4d 	bl	8002198 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e245      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800530c:	4b70      	ldr	r3, [pc, #448]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d03c      	beq.n	800539e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01c      	beq.n	8005366 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800532c:	4b68      	ldr	r3, [pc, #416]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 800532e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005332:	4a67      	ldr	r2, [pc, #412]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533c:	f7fc ff2c 	bl	8002198 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005344:	f7fc ff28 	bl	8002198 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e220      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005356:	4b5e      	ldr	r3, [pc, #376]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ef      	beq.n	8005344 <HAL_RCC_OscConfig+0x3ec>
 8005364:	e01b      	b.n	800539e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005366:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800536c:	4a58      	ldr	r2, [pc, #352]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005376:	f7fc ff0f 	bl	8002198 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800537e:	f7fc ff0b 	bl	8002198 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e203      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005390:	4b4f      	ldr	r3, [pc, #316]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1ef      	bne.n	800537e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80a6 	beq.w	80054f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ac:	2300      	movs	r3, #0
 80053ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80053b0:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10d      	bne.n	80053d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053bc:	4b44      	ldr	r3, [pc, #272]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	4a43      	ldr	r2, [pc, #268]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80053c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c6:	6593      	str	r3, [r2, #88]	; 0x58
 80053c8:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053d4:	2301      	movs	r3, #1
 80053d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053d8:	4b3e      	ldr	r3, [pc, #248]	; (80054d4 <HAL_RCC_OscConfig+0x57c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d118      	bne.n	8005416 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053e4:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <HAL_RCC_OscConfig+0x57c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a3a      	ldr	r2, [pc, #232]	; (80054d4 <HAL_RCC_OscConfig+0x57c>)
 80053ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053f0:	f7fc fed2 	bl	8002198 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f8:	f7fc fece 	bl	8002198 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e1c6      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800540a:	4b32      	ldr	r3, [pc, #200]	; (80054d4 <HAL_RCC_OscConfig+0x57c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d108      	bne.n	8005430 <HAL_RCC_OscConfig+0x4d8>
 800541e:	4b2c      	ldr	r3, [pc, #176]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800542e:	e024      	b.n	800547a <HAL_RCC_OscConfig+0x522>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b05      	cmp	r3, #5
 8005436:	d110      	bne.n	800545a <HAL_RCC_OscConfig+0x502>
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543e:	4a24      	ldr	r2, [pc, #144]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005440:	f043 0304 	orr.w	r3, r3, #4
 8005444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005448:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005458:	e00f      	b.n	800547a <HAL_RCC_OscConfig+0x522>
 800545a:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800546a:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 8005472:	f023 0304 	bic.w	r3, r3, #4
 8005476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005482:	f7fc fe89 	bl	8002198 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005488:	e00a      	b.n	80054a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548a:	f7fc fe85 	bl	8002198 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	f241 3288 	movw	r2, #5000	; 0x1388
 8005498:	4293      	cmp	r3, r2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e17b      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCC_OscConfig+0x578>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0ed      	beq.n	800548a <HAL_RCC_OscConfig+0x532>
 80054ae:	e01a      	b.n	80054e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fc fe72 	bl	8002198 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054b6:	e00f      	b.n	80054d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fc fe6e 	bl	8002198 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d906      	bls.n	80054d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e164      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054d8:	4ba8      	ldr	r3, [pc, #672]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e8      	bne.n	80054b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054e6:	7ffb      	ldrb	r3, [r7, #31]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d105      	bne.n	80054f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ec:	4ba3      	ldr	r3, [pc, #652]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	4aa2      	ldr	r2, [pc, #648]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80054f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d03c      	beq.n	800557e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01c      	beq.n	8005546 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800550c:	4b9b      	ldr	r3, [pc, #620]	; (800577c <HAL_RCC_OscConfig+0x824>)
 800550e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005512:	4a9a      	ldr	r2, [pc, #616]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7fc fe3c 	bl	8002198 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005524:	f7fc fe38 	bl	8002198 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e130      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005536:	4b91      	ldr	r3, [pc, #580]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ef      	beq.n	8005524 <HAL_RCC_OscConfig+0x5cc>
 8005544:	e01b      	b.n	800557e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005546:	4b8d      	ldr	r3, [pc, #564]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005548:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800554c:	4a8b      	ldr	r2, [pc, #556]	; (800577c <HAL_RCC_OscConfig+0x824>)
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005556:	f7fc fe1f 	bl	8002198 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800555e:	f7fc fe1b 	bl	8002198 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e113      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005570:	4b82      	ldr	r3, [pc, #520]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1ef      	bne.n	800555e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 8107 	beq.w	8005796 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	2b02      	cmp	r3, #2
 800558e:	f040 80cb 	bne.w	8005728 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005592:	4b7a      	ldr	r3, [pc, #488]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f003 0203 	and.w	r2, r3, #3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d12c      	bne.n	8005600 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	3b01      	subs	r3, #1
 80055b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d123      	bne.n	8005600 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d11b      	bne.n	8005600 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d113      	bne.n	8005600 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	085b      	lsrs	r3, r3, #1
 80055e4:	3b01      	subs	r3, #1
 80055e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d109      	bne.n	8005600 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	3b01      	subs	r3, #1
 80055fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d06d      	beq.n	80056dc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d068      	beq.n	80056d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005606:	4b5d      	ldr	r3, [pc, #372]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d105      	bne.n	800561e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005612:	4b5a      	ldr	r3, [pc, #360]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e0ba      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005622:	4b56      	ldr	r3, [pc, #344]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a55      	ldr	r2, [pc, #340]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005628:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800562c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800562e:	f7fc fdb3 	bl	8002198 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005636:	f7fc fdaf 	bl	8002198 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e0a7      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005648:	4b4c      	ldr	r3, [pc, #304]	; (800577c <HAL_RCC_OscConfig+0x824>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1f0      	bne.n	8005636 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005654:	4b49      	ldr	r3, [pc, #292]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	4b49      	ldr	r3, [pc, #292]	; (8005780 <HAL_RCC_OscConfig+0x828>)
 800565a:	4013      	ands	r3, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005664:	3a01      	subs	r2, #1
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	4311      	orrs	r1, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800566e:	0212      	lsls	r2, r2, #8
 8005670:	4311      	orrs	r1, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005676:	0852      	lsrs	r2, r2, #1
 8005678:	3a01      	subs	r2, #1
 800567a:	0552      	lsls	r2, r2, #21
 800567c:	4311      	orrs	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005682:	0852      	lsrs	r2, r2, #1
 8005684:	3a01      	subs	r2, #1
 8005686:	0652      	lsls	r2, r2, #25
 8005688:	4311      	orrs	r1, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800568e:	06d2      	lsls	r2, r2, #27
 8005690:	430a      	orrs	r2, r1
 8005692:	493a      	ldr	r1, [pc, #232]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005694:	4313      	orrs	r3, r2
 8005696:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005698:	4b38      	ldr	r3, [pc, #224]	; (800577c <HAL_RCC_OscConfig+0x824>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a37      	ldr	r2, [pc, #220]	; (800577c <HAL_RCC_OscConfig+0x824>)
 800569e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056a4:	4b35      	ldr	r3, [pc, #212]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	4a34      	ldr	r2, [pc, #208]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80056aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056b0:	f7fc fd72 	bl	8002198 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b8:	f7fc fd6e 	bl	8002198 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e066      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ca:	4b2c      	ldr	r3, [pc, #176]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056d6:	e05e      	b.n	8005796 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e05d      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056dc:	4b27      	ldr	r3, [pc, #156]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d156      	bne.n	8005796 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056e8:	4b24      	ldr	r3, [pc, #144]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a23      	ldr	r2, [pc, #140]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80056ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056f4:	4b21      	ldr	r3, [pc, #132]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a20      	ldr	r2, [pc, #128]	; (800577c <HAL_RCC_OscConfig+0x824>)
 80056fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005700:	f7fc fd4a 	bl	8002198 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005708:	f7fc fd46 	bl	8002198 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e03e      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800571a:	4b18      	ldr	r3, [pc, #96]	; (800577c <HAL_RCC_OscConfig+0x824>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0x7b0>
 8005726:	e036      	b.n	8005796 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d031      	beq.n	8005792 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a12      	ldr	r2, [pc, #72]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005734:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005738:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <HAL_RCC_OscConfig+0x824>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d105      	bne.n	8005752 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005746:	4b0d      	ldr	r3, [pc, #52]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4a0c      	ldr	r2, [pc, #48]	; (800577c <HAL_RCC_OscConfig+0x824>)
 800574c:	f023 0303 	bic.w	r3, r3, #3
 8005750:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005752:	4b0a      	ldr	r3, [pc, #40]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	4a09      	ldr	r2, [pc, #36]	; (800577c <HAL_RCC_OscConfig+0x824>)
 8005758:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800575c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005760:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fc fd19 	bl	8002198 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005768:	e00c      	b.n	8005784 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576a:	f7fc fd15 	bl	8002198 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d905      	bls.n	8005784 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e00d      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
 800577c:	40021000 	.word	0x40021000
 8005780:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_RCC_OscConfig+0x848>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1ec      	bne.n	800576a <HAL_RCC_OscConfig+0x812>
 8005790:	e001      	b.n	8005796 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40021000 	.word	0x40021000

080057a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0c8      	b.n	800594a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057b8:	4b66      	ldr	r3, [pc, #408]	; (8005954 <HAL_RCC_ClockConfig+0x1b0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d910      	bls.n	80057e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c6:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_RCC_ClockConfig+0x1b0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f023 0207 	bic.w	r2, r3, #7
 80057ce:	4961      	ldr	r1, [pc, #388]	; (8005954 <HAL_RCC_ClockConfig+0x1b0>)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d6:	4b5f      	ldr	r3, [pc, #380]	; (8005954 <HAL_RCC_ClockConfig+0x1b0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d001      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0b0      	b.n	800594a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d04c      	beq.n	800588e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d107      	bne.n	800580c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fc:	4b56      	ldr	r3, [pc, #344]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d121      	bne.n	800584c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e09e      	b.n	800594a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d107      	bne.n	8005824 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005814:	4b50      	ldr	r3, [pc, #320]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d115      	bne.n	800584c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e092      	b.n	800594a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800582c:	4b4a      	ldr	r3, [pc, #296]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e086      	b.n	800594a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800583c:	4b46      	ldr	r3, [pc, #280]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e07e      	b.n	800594a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800584c:	4b42      	ldr	r3, [pc, #264]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f023 0203 	bic.w	r2, r3, #3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	493f      	ldr	r1, [pc, #252]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585e:	f7fc fc9b 	bl	8002198 <HAL_GetTick>
 8005862:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005864:	e00a      	b.n	800587c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005866:	f7fc fc97 	bl	8002198 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f241 3288 	movw	r2, #5000	; 0x1388
 8005874:	4293      	cmp	r3, r2
 8005876:	d901      	bls.n	800587c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e066      	b.n	800594a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587c:	4b36      	ldr	r3, [pc, #216]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 020c 	and.w	r2, r3, #12
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	429a      	cmp	r2, r3
 800588c:	d1eb      	bne.n	8005866 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800589a:	4b2f      	ldr	r3, [pc, #188]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	492c      	ldr	r1, [pc, #176]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058ac:	4b29      	ldr	r3, [pc, #164]	; (8005954 <HAL_RCC_ClockConfig+0x1b0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d210      	bcs.n	80058dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ba:	4b26      	ldr	r3, [pc, #152]	; (8005954 <HAL_RCC_ClockConfig+0x1b0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f023 0207 	bic.w	r2, r3, #7
 80058c2:	4924      	ldr	r1, [pc, #144]	; (8005954 <HAL_RCC_ClockConfig+0x1b0>)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ca:	4b22      	ldr	r3, [pc, #136]	; (8005954 <HAL_RCC_ClockConfig+0x1b0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d001      	beq.n	80058dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e036      	b.n	800594a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058e8:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4918      	ldr	r1, [pc, #96]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005906:	4b14      	ldr	r3, [pc, #80]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4910      	ldr	r1, [pc, #64]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800591a:	f000 f825 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 800591e:	4601      	mov	r1, r0
 8005920:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <HAL_RCC_ClockConfig+0x1b4>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	4a0c      	ldr	r2, [pc, #48]	; (800595c <HAL_RCC_ClockConfig+0x1b8>)
 800592c:	5cd3      	ldrb	r3, [r2, r3]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	fa21 f303 	lsr.w	r3, r1, r3
 8005936:	4a0a      	ldr	r2, [pc, #40]	; (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <HAL_RCC_ClockConfig+0x1c0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fc fbde 	bl	8002100 <HAL_InitTick>
 8005944:	4603      	mov	r3, r0
 8005946:	72fb      	strb	r3, [r7, #11]

  return status;
 8005948:	7afb      	ldrb	r3, [r7, #11]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40022000 	.word	0x40022000
 8005958:	40021000 	.word	0x40021000
 800595c:	0800cfdc 	.word	0x0800cfdc
 8005960:	20000008 	.word	0x20000008
 8005964:	2000000c 	.word	0x2000000c

08005968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	; 0x24
 800596c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005976:	4b3d      	ldr	r3, [pc, #244]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005980:	4b3a      	ldr	r3, [pc, #232]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_RCC_GetSysClockFreq+0x34>
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b0c      	cmp	r3, #12
 8005994:	d121      	bne.n	80059da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d11e      	bne.n	80059da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800599c:	4b33      	ldr	r3, [pc, #204]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x104>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059a8:	4b30      	ldr	r3, [pc, #192]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x104>)
 80059aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	e005      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059b8:	4b2c      	ldr	r3, [pc, #176]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x104>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	091b      	lsrs	r3, r3, #4
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059c4:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x108>)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10d      	bne.n	80059f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059d8:	e00a      	b.n	80059f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d102      	bne.n	80059e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059e0:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	e004      	b.n	80059f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059ec:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x110>)
 80059ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d133      	bne.n	8005a5e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059f6:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x104>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d002      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0xa4>
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d003      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0xaa>
 8005a0a:	e005      	b.n	8005a18 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a0e:	617b      	str	r3, [r7, #20]
      break;
 8005a10:	e005      	b.n	8005a1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a12:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a14:	617b      	str	r3, [r7, #20]
      break;
 8005a16:	e002      	b.n	8005a1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	617b      	str	r3, [r7, #20]
      break;
 8005a1c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	3301      	adds	r3, #1
 8005a2a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	0a1b      	lsrs	r3, r3, #8
 8005a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	fb02 f203 	mul.w	r2, r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	0e5b      	lsrs	r3, r3, #25
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	3301      	adds	r3, #1
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3724      	adds	r7, #36	; 0x24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	0800cff4 	.word	0x0800cff4
 8005a74:	00f42400 	.word	0x00f42400
 8005a78:	007a1200 	.word	0x007a1200

08005a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a80:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a82:	681b      	ldr	r3, [r3, #0]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20000008 	.word	0x20000008

08005a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a98:	f7ff fff0 	bl	8005a7c <HAL_RCC_GetHCLKFreq>
 8005a9c:	4601      	mov	r1, r0
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	4a04      	ldr	r2, [pc, #16]	; (8005abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aaa:	5cd3      	ldrb	r3, [r2, r3]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	0800cfec 	.word	0x0800cfec

08005ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ac4:	f7ff ffda 	bl	8005a7c <HAL_RCC_GetHCLKFreq>
 8005ac8:	4601      	mov	r1, r0
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	0adb      	lsrs	r3, r3, #11
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	4a04      	ldr	r2, [pc, #16]	; (8005ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ad6:	5cd3      	ldrb	r3, [r2, r3]
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	0800cfec 	.word	0x0800cfec

08005aec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005af8:	4b2a      	ldr	r3, [pc, #168]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b04:	f7ff f8d6 	bl	8004cb4 <HAL_PWREx_GetVoltageRange>
 8005b08:	6178      	str	r0, [r7, #20]
 8005b0a:	e014      	b.n	8005b36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b0c:	4b25      	ldr	r3, [pc, #148]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b10:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b16:	6593      	str	r3, [r2, #88]	; 0x58
 8005b18:	4b22      	ldr	r3, [pc, #136]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b24:	f7ff f8c6 	bl	8004cb4 <HAL_PWREx_GetVoltageRange>
 8005b28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b2a:	4b1e      	ldr	r3, [pc, #120]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3c:	d10b      	bne.n	8005b56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b80      	cmp	r3, #128	; 0x80
 8005b42:	d919      	bls.n	8005b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2ba0      	cmp	r3, #160	; 0xa0
 8005b48:	d902      	bls.n	8005b50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	e013      	b.n	8005b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b50:	2301      	movs	r3, #1
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	e010      	b.n	8005b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b80      	cmp	r3, #128	; 0x80
 8005b5a:	d902      	bls.n	8005b62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	e00a      	b.n	8005b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b80      	cmp	r3, #128	; 0x80
 8005b66:	d102      	bne.n	8005b6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b68:	2302      	movs	r3, #2
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	e004      	b.n	8005b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b70      	cmp	r3, #112	; 0x70
 8005b72:	d101      	bne.n	8005b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b74:	2301      	movs	r3, #1
 8005b76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f023 0207 	bic.w	r2, r3, #7
 8005b80:	4909      	ldr	r1, [pc, #36]	; (8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b88:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d001      	beq.n	8005b9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	40022000 	.word	0x40022000

08005bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bb8:	2300      	movs	r3, #0
 8005bba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d03f      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd0:	d01c      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd6:	d802      	bhi.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00e      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005bdc:	e01f      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005bde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005be2:	d003      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005be4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005be8:	d01c      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005bea:	e018      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bec:	4b85      	ldr	r3, [pc, #532]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4a84      	ldr	r2, [pc, #528]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bf8:	e015      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 ffa1 	bl	8006b48 <RCCEx_PLLSAI1_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c0a:	e00c      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3320      	adds	r3, #32
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 f888 	bl	8006d28 <RCCEx_PLLSAI2_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c1c:	e003      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	74fb      	strb	r3, [r7, #19]
      break;
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c26:	7cfb      	ldrb	r3, [r7, #19]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c2c:	4b75      	ldr	r3, [pc, #468]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3a:	4972      	ldr	r1, [pc, #456]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005c42:	e001      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c44:	7cfb      	ldrb	r3, [r7, #19]
 8005c46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d03f      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c5c:	d01c      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005c5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c62:	d802      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00e      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005c68:	e01f      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c6e:	d003      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005c70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c74:	d01c      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005c76:	e018      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c78:	4b62      	ldr	r3, [pc, #392]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4a61      	ldr	r2, [pc, #388]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c84:	e015      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 ff5b 	bl	8006b48 <RCCEx_PLLSAI1_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c96:	e00c      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3320      	adds	r3, #32
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f842 	bl	8006d28 <RCCEx_PLLSAI2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ca8:	e003      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	74fb      	strb	r3, [r7, #19]
      break;
 8005cae:	e000      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb2:	7cfb      	ldrb	r3, [r7, #19]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10b      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005cb8:	4b52      	ldr	r3, [pc, #328]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc6:	494f      	ldr	r1, [pc, #316]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005cce:	e001      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80a0 	beq.w	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ce6:	4b47      	ldr	r3, [pc, #284]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00d      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cfc:	4b41      	ldr	r3, [pc, #260]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d00:	4a40      	ldr	r2, [pc, #256]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d06:	6593      	str	r3, [r2, #88]	; 0x58
 8005d08:	4b3e      	ldr	r3, [pc, #248]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d14:	2301      	movs	r3, #1
 8005d16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d18:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a3a      	ldr	r2, [pc, #232]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d24:	f7fc fa38 	bl	8002198 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d2a:	e009      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2c:	f7fc fa34 	bl	8002198 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d902      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	74fb      	strb	r3, [r7, #19]
        break;
 8005d3e:	e005      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d40:	4b31      	ldr	r3, [pc, #196]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0ef      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005d4c:	7cfb      	ldrb	r3, [r7, #19]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d15c      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d52:	4b2c      	ldr	r3, [pc, #176]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01f      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d019      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d70:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d7c:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d82:	4a20      	ldr	r2, [pc, #128]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	4a1c      	ldr	r2, [pc, #112]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d9c:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dae:	f7fc f9f3 	bl	8002198 <HAL_GetTick>
 8005db2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005db4:	e00b      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db6:	f7fc f9ef 	bl	8002198 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d902      	bls.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	74fb      	strb	r3, [r7, #19]
            break;
 8005dcc:	e006      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dce:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0ec      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005ddc:	7cfb      	ldrb	r3, [r7, #19]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10c      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de2:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df2:	4904      	ldr	r1, [pc, #16]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005dfa:	e009      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	74bb      	strb	r3, [r7, #18]
 8005e00:	e006      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005e02:	bf00      	nop
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0c:	7cfb      	ldrb	r3, [r7, #19]
 8005e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e10:	7c7b      	ldrb	r3, [r7, #17]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d105      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e16:	4ba6      	ldr	r3, [pc, #664]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1a:	4aa5      	ldr	r2, [pc, #660]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e2e:	4ba0      	ldr	r3, [pc, #640]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e34:	f023 0203 	bic.w	r2, r3, #3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	499c      	ldr	r1, [pc, #624]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e50:	4b97      	ldr	r3, [pc, #604]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e56:	f023 020c 	bic.w	r2, r3, #12
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	4994      	ldr	r1, [pc, #592]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e72:	4b8f      	ldr	r3, [pc, #572]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	498b      	ldr	r1, [pc, #556]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e94:	4b86      	ldr	r3, [pc, #536]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	4983      	ldr	r1, [pc, #524]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0310 	and.w	r3, r3, #16
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005eb6:	4b7e      	ldr	r3, [pc, #504]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec4:	497a      	ldr	r1, [pc, #488]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ed8:	4b75      	ldr	r3, [pc, #468]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee6:	4972      	ldr	r1, [pc, #456]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005efa:	4b6d      	ldr	r3, [pc, #436]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f08:	4969      	ldr	r1, [pc, #420]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f1c:	4b64      	ldr	r3, [pc, #400]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f2a:	4961      	ldr	r1, [pc, #388]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f3e:	4b5c      	ldr	r3, [pc, #368]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4c:	4958      	ldr	r1, [pc, #352]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f60:	4b53      	ldr	r3, [pc, #332]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	4950      	ldr	r1, [pc, #320]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f82:	4b4b      	ldr	r3, [pc, #300]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	4947      	ldr	r1, [pc, #284]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fa4:	4b42      	ldr	r3, [pc, #264]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005faa:	f023 0203 	bic.w	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb2:	493f      	ldr	r1, [pc, #252]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d028      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fc6:	4b3a      	ldr	r3, [pc, #232]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd4:	4936      	ldr	r1, [pc, #216]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe4:	d106      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe6:	4b32      	ldr	r3, [pc, #200]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	4a31      	ldr	r2, [pc, #196]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ff0:	60d3      	str	r3, [r2, #12]
 8005ff2:	e011      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ffc:	d10c      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	2101      	movs	r1, #1
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fd9f 	bl	8006b48 <RCCEx_PLLSAI1_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800600e:	7cfb      	ldrb	r3, [r7, #19]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8006014:	7cfb      	ldrb	r3, [r7, #19]
 8006016:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d028      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006024:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006032:	491f      	ldr	r1, [pc, #124]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800603e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006042:	d106      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006044:	4b1a      	ldr	r3, [pc, #104]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800604a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800604e:	60d3      	str	r3, [r2, #12]
 8006050:	e011      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006056:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800605a:	d10c      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fd70 	bl	8006b48 <RCCEx_PLLSAI1_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8006072:	7cfb      	ldrb	r3, [r7, #19]
 8006074:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d02a      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006090:	4907      	ldr	r1, [pc, #28]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800609c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a0:	d108      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a2:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	4a02      	ldr	r2, [pc, #8]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ac:	60d3      	str	r3, [r2, #12]
 80060ae:	e013      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80060b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3304      	adds	r3, #4
 80060c2:	2101      	movs	r1, #1
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fd3f 	bl	8006b48 <RCCEx_PLLSAI1_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02f      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060e4:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f2:	4929      	ldr	r1, [pc, #164]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006102:	d10d      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3304      	adds	r3, #4
 8006108:	2102      	movs	r1, #2
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fd1c 	bl	8006b48 <RCCEx_PLLSAI1_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006114:	7cfb      	ldrb	r3, [r7, #19]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d014      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800611a:	7cfb      	ldrb	r3, [r7, #19]
 800611c:	74bb      	strb	r3, [r7, #18]
 800611e:	e011      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006128:	d10c      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3320      	adds	r3, #32
 800612e:	2102      	movs	r1, #2
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fdf9 	bl	8006d28 <RCCEx_PLLSAI2_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800613a:	7cfb      	ldrb	r3, [r7, #19]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8006140:	7cfb      	ldrb	r3, [r7, #19]
 8006142:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006150:	4b11      	ldr	r3, [pc, #68]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006156:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006160:	490d      	ldr	r1, [pc, #52]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006174:	4b08      	ldr	r3, [pc, #32]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006184:	4904      	ldr	r1, [pc, #16]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800618c:	7cbb      	ldrb	r3, [r7, #18]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40021000 	.word	0x40021000

0800619c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061ae:	d137      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80061b0:	4ba9      	ldr	r3, [pc, #676]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ba:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c2:	d014      	beq.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80061c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061c8:	d01e      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 80061ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ce:	d001      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80061d0:	f000 bca0 	b.w	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061d4:	4ba0      	ldr	r3, [pc, #640]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	f040 8493 	bne.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
        frequency = LSE_VALUE;
 80061e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e8:	61fb      	str	r3, [r7, #28]
      break;
 80061ea:	f000 bc8e 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061ee:	4b9a      	ldr	r3, [pc, #616]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80061f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	f040 8488 	bne.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = LSI_VALUE;
 80061fe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006202:	61fb      	str	r3, [r7, #28]
      break;
 8006204:	f000 bc83 	b.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006208:	4b93      	ldr	r3, [pc, #588]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006214:	f040 847d 	bne.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
        frequency = HSE_VALUE / 32U;
 8006218:	4b90      	ldr	r3, [pc, #576]	; (800645c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800621a:	61fb      	str	r3, [r7, #28]
      break;
 800621c:	f000 bc79 	b.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006220:	4b8d      	ldr	r3, [pc, #564]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d023      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006230:	2b03      	cmp	r3, #3
 8006232:	d02e      	beq.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006234:	2b01      	cmp	r3, #1
 8006236:	d139      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006238:	4b87      	ldr	r3, [pc, #540]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b02      	cmp	r3, #2
 8006242:	d116      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006244:	4b84      	ldr	r3, [pc, #528]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8006250:	4b81      	ldr	r3, [pc, #516]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	e005      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800625c:	4b7e      	ldr	r3, [pc, #504]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800625e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	4a7d      	ldr	r2, [pc, #500]	; (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800626a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800626e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006270:	e01f      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	61bb      	str	r3, [r7, #24]
      break;
 8006276:	e01c      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006278:	4b77      	ldr	r3, [pc, #476]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006284:	d102      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8006286:	4b77      	ldr	r3, [pc, #476]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006288:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800628a:	e012      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	61bb      	str	r3, [r7, #24]
      break;
 8006290:	e00f      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006292:	4b71      	ldr	r3, [pc, #452]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800629e:	d102      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 80062a0:	4b71      	ldr	r3, [pc, #452]	; (8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80062a2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80062a4:	e005      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
      break;
 80062aa:	e002      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	61bb      	str	r3, [r7, #24]
      break;
 80062b0:	bf00      	nop
    }

    switch(PeriphClk)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b8:	f000 8384 	beq.w	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80062bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c0:	d828      	bhi.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 80062c2:	2b10      	cmp	r3, #16
 80062c4:	f000 81fb 	beq.w	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d811      	bhi.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	f000 8144 	beq.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d804      	bhi.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	f000 8107 	beq.w	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80062dc:	f000 bc1a 	b.w	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	f000 8184 	beq.w	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	f000 81b5 	beq.w	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
      break;
 80062ec:	f000 bc12 	b.w	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	f000 82dd 	beq.w	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d804      	bhi.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	f000 821e 	beq.w	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
      break;
 8006300:	f000 bc08 	b.w	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8006304:	2b80      	cmp	r3, #128	; 0x80
 8006306:	f000 82f6 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800630a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630e:	f000 8315 	beq.w	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      break;
 8006312:	e3ff      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8006314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006318:	f000 8248 	beq.w	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 800631c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006320:	d811      	bhi.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006326:	d025      	beq.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632c:	d804      	bhi.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800632e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006332:	f000 838d 	beq.w	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
      break;
 8006336:	e3ed      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8006338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633c:	d021      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	d025      	beq.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
      break;
 8006344:	e3e6      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8006346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800634a:	d021      	beq.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800634c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006350:	d808      	bhi.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8006352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006356:	f000 83bc 	beq.w	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800635a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635e:	f000 8296 	beq.w	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
      break;
 8006362:	e3d7      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8006364:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006368:	d012      	beq.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800636a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800636e:	f000 8308 	beq.w	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      break;
 8006372:	e3cf      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006374:	69b9      	ldr	r1, [r7, #24]
 8006376:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800637a:	f000 fdaf 	bl	8006edc <RCCEx_GetSAIxPeriphCLKFreq>
 800637e:	61f8      	str	r0, [r7, #28]
      break;
 8006380:	e3c8      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006382:	69b9      	ldr	r1, [r7, #24]
 8006384:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006388:	f000 fda8 	bl	8006edc <RCCEx_GetSAIxPeriphCLKFreq>
 800638c:	61f8      	str	r0, [r7, #28]
      break;
 800638e:	e3c1      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006390:	4b31      	ldr	r3, [pc, #196]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006396:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800639a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063a2:	d063      	beq.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80063a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063a8:	d803      	bhi.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 808b 	beq.w	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
          break;
 80063b0:	e09a      	b.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        switch(srcclk)
 80063b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b6:	d021      	beq.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80063b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063bc:	d000      	beq.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          break;
 80063be:	e093      	b.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80063c0:	4b25      	ldr	r3, [pc, #148]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	f040 8086 	bne.w	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80063ce:	4b22      	ldr	r3, [pc, #136]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 80063da:	4b1f      	ldr	r3, [pc, #124]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	091b      	lsrs	r3, r3, #4
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	e005      	b.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80063e6:	4b1c      	ldr	r3, [pc, #112]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ec:	0a1b      	lsrs	r3, r3, #8
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	4a1b      	ldr	r2, [pc, #108]	; (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80063f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f8:	61fb      	str	r3, [r7, #28]
          break;
 80063fa:	e06e      	b.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80063fc:	4b16      	ldr	r3, [pc, #88]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006408:	d169      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800640a:	4b13      	ldr	r3, [pc, #76]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006416:	d162      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006422:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	fb02 f203 	mul.w	r2, r2, r3
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	3301      	adds	r3, #1
 8006438:	fbb2 f3f3 	udiv	r3, r2, r3
 800643c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	0d5b      	lsrs	r3, r3, #21
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	3301      	adds	r3, #1
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	61fb      	str	r3, [r7, #28]
          break;
 8006454:	e043      	b.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006456:	bf00      	nop
 8006458:	40021000 	.word	0x40021000
 800645c:	0003d090 	.word	0x0003d090
 8006460:	0800cff4 	.word	0x0800cff4
 8006464:	00f42400 	.word	0x00f42400
 8006468:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800646c:	4bb0      	ldr	r3, [pc, #704]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006478:	d133      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800647a:	4bad      	ldr	r3, [pc, #692]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006486:	d12c      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006488:	4ba9      	ldr	r3, [pc, #676]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	fb02 f203 	mul.w	r2, r2, r3
 800649c:	4ba4      	ldr	r3, [pc, #656]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	091b      	lsrs	r3, r3, #4
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	3301      	adds	r3, #1
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80064ae:	4ba0      	ldr	r3, [pc, #640]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	0d5b      	lsrs	r3, r3, #21
 80064b4:	f003 0303 	and.w	r3, r3, #3
 80064b8:	3301      	adds	r3, #1
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c2:	61fb      	str	r3, [r7, #28]
          break;
 80064c4:	e00d      	b.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80064c6:	4b9a      	ldr	r3, [pc, #616]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80064c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d108      	bne.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
            frequency = HSI48_VALUE;
 80064d4:	4b97      	ldr	r3, [pc, #604]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80064d6:	61fb      	str	r3, [r7, #28]
          break;
 80064d8:	e005      	b.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          break;
 80064da:	bf00      	nop
 80064dc:	e31a      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80064de:	bf00      	nop
 80064e0:	e318      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80064e2:	bf00      	nop
 80064e4:	e316      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80064e6:	bf00      	nop
        break;
 80064e8:	e314      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064ea:	4b91      	ldr	r3, [pc, #580]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d828      	bhi.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006515 	.word	0x08006515
 8006508:	0800651d 	.word	0x0800651d
 800650c:	08006525 	.word	0x08006525
 8006510:	08006539 	.word	0x08006539
          frequency = HAL_RCC_GetPCLK2Freq();
 8006514:	f7ff fad4 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 8006518:	61f8      	str	r0, [r7, #28]
          break;
 800651a:	e01d      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          frequency = HAL_RCC_GetSysClockFreq();
 800651c:	f7ff fa24 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8006520:	61f8      	str	r0, [r7, #28]
          break;
 8006522:	e019      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006524:	4b82      	ldr	r3, [pc, #520]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006530:	d10f      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = HSI_VALUE;
 8006532:	4b81      	ldr	r3, [pc, #516]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006534:	61fb      	str	r3, [r7, #28]
          break;
 8006536:	e00c      	b.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006538:	4b7d      	ldr	r3, [pc, #500]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b02      	cmp	r3, #2
 8006544:	d107      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            frequency = LSE_VALUE;
 8006546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654a:	61fb      	str	r3, [r7, #28]
          break;
 800654c:	e003      	b.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          break;
 800654e:	bf00      	nop
 8006550:	e2e0      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8006552:	bf00      	nop
 8006554:	e2de      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8006556:	bf00      	nop
        break;
 8006558:	e2dc      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800655a:	4b75      	ldr	r3, [pc, #468]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006560:	f003 030c 	and.w	r3, r3, #12
 8006564:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b0c      	cmp	r3, #12
 800656a:	d83a      	bhi.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800656c:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	080065a9 	.word	0x080065a9
 8006578:	080065e3 	.word	0x080065e3
 800657c:	080065e3 	.word	0x080065e3
 8006580:	080065e3 	.word	0x080065e3
 8006584:	080065b1 	.word	0x080065b1
 8006588:	080065e3 	.word	0x080065e3
 800658c:	080065e3 	.word	0x080065e3
 8006590:	080065e3 	.word	0x080065e3
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065e3 	.word	0x080065e3
 800659c:	080065e3 	.word	0x080065e3
 80065a0:	080065e3 	.word	0x080065e3
 80065a4:	080065cd 	.word	0x080065cd
          frequency = HAL_RCC_GetPCLK1Freq();
 80065a8:	f7ff fa74 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 80065ac:	61f8      	str	r0, [r7, #28]
          break;
 80065ae:	e01d      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          frequency = HAL_RCC_GetSysClockFreq();
 80065b0:	f7ff f9da 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 80065b4:	61f8      	str	r0, [r7, #28]
          break;
 80065b6:	e019      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065b8:	4b5d      	ldr	r3, [pc, #372]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c4:	d10f      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = HSI_VALUE;
 80065c6:	4b5c      	ldr	r3, [pc, #368]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065c8:	61fb      	str	r3, [r7, #28]
          break;
 80065ca:	e00c      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065cc:	4b58      	ldr	r3, [pc, #352]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d107      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = LSE_VALUE;
 80065da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065de:	61fb      	str	r3, [r7, #28]
          break;
 80065e0:	e003      	b.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          break;
 80065e2:	bf00      	nop
 80065e4:	e296      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80065e6:	bf00      	nop
 80065e8:	e294      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80065ea:	bf00      	nop
        break;
 80065ec:	e292      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80065ee:	4b50      	ldr	r3, [pc, #320]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065f8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d00d      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006600:	2b10      	cmp	r3, #16
 8006602:	d802      	bhi.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          break;
 8006608:	e024      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
        switch(srcclk)
 800660a:	2b20      	cmp	r3, #32
 800660c:	d00a      	beq.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 800660e:	2b30      	cmp	r3, #48	; 0x30
 8006610:	d012      	beq.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          break;
 8006612:	e01f      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006614:	f7ff fa3e 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8006618:	61f8      	str	r0, [r7, #28]
          break;
 800661a:	e01b      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetSysClockFreq();
 800661c:	f7ff f9a4 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8006620:	61f8      	str	r0, [r7, #28]
          break;
 8006622:	e017      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006624:	4b42      	ldr	r3, [pc, #264]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800662c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006630:	d10d      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = HSI_VALUE;
 8006632:	4b41      	ldr	r3, [pc, #260]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006634:	61fb      	str	r3, [r7, #28]
          break;
 8006636:	e00a      	b.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006638:	4b3d      	ldr	r3, [pc, #244]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b02      	cmp	r3, #2
 8006644:	d105      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
            frequency = LSE_VALUE;
 8006646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800664a:	61fb      	str	r3, [r7, #28]
          break;
 800664c:	e001      	b.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          break;
 800664e:	bf00      	nop
 8006650:	e260      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8006652:	bf00      	nop
        break;
 8006654:	e25e      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006656:	4b36      	ldr	r3, [pc, #216]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006660:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d00d      	beq.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d802      	bhi.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 8006670:	e024      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        switch(srcclk)
 8006672:	2b80      	cmp	r3, #128	; 0x80
 8006674:	d00a      	beq.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 8006676:	2bc0      	cmp	r3, #192	; 0xc0
 8006678:	d012      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          break;
 800667a:	e01f      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetPCLK1Freq();
 800667c:	f7ff fa0a 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8006680:	61f8      	str	r0, [r7, #28]
          break;
 8006682:	e01b      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006684:	f7ff f970 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8006688:	61f8      	str	r0, [r7, #28]
          break;
 800668a:	e017      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800668c:	4b28      	ldr	r3, [pc, #160]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006698:	d10d      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800669a:	4b27      	ldr	r3, [pc, #156]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800669c:	61fb      	str	r3, [r7, #28]
          break;
 800669e:	e00a      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066a0:	4b23      	ldr	r3, [pc, #140]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d105      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80066ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b2:	61fb      	str	r3, [r7, #28]
          break;
 80066b4:	e001      	b.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80066b6:	bf00      	nop
 80066b8:	e22c      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80066ba:	bf00      	nop
        break;
 80066bc:	e22a      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80066be:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d0:	d010      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 80066d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d6:	d802      	bhi.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          break;
 80066dc:	e026      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        switch(srcclk)
 80066de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e2:	d00b      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x560>
 80066e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e8:	d012      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
          break;
 80066ea:	e01f      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066ec:	f7ff f9d2 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 80066f0:	61f8      	str	r0, [r7, #28]
          break;
 80066f2:	e01b      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetSysClockFreq();
 80066f4:	f7ff f938 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 80066f8:	61f8      	str	r0, [r7, #28]
          break;
 80066fa:	e017      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066fc:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006708:	d10d      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = HSI_VALUE;
 800670a:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800670c:	61fb      	str	r3, [r7, #28]
          break;
 800670e:	e00a      	b.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d105      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
            frequency = LSE_VALUE;
 800671e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006722:	61fb      	str	r3, [r7, #28]
          break;
 8006724:	e001      	b.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          break;
 8006726:	bf00      	nop
 8006728:	e1f4      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800672a:	bf00      	nop
        break;
 800672c:	e1f2      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800672e:	bf00      	nop
 8006730:	40021000 	.word	0x40021000
 8006734:	02dc6c00 	.word	0x02dc6c00
 8006738:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800673c:	4bad      	ldr	r3, [pc, #692]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006746:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674e:	d010      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8006750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006754:	d802      	bhi.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          break;
 800675a:	e026      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        switch(srcclk)
 800675c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006760:	d00b      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 8006762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006766:	d012      	beq.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8006768:	e01f      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800676a:	f7ff f993 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 800676e:	61f8      	str	r0, [r7, #28]
          break;
 8006770:	e01b      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006772:	f7ff f8f9 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8006776:	61f8      	str	r0, [r7, #28]
          break;
 8006778:	e017      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800677a:	4b9e      	ldr	r3, [pc, #632]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006786:	d10d      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = HSI_VALUE;
 8006788:	4b9b      	ldr	r3, [pc, #620]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800678a:	61fb      	str	r3, [r7, #28]
          break;
 800678c:	e00a      	b.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800678e:	4b99      	ldr	r3, [pc, #612]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b02      	cmp	r3, #2
 800679a:	d105      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            frequency = LSE_VALUE;
 800679c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a0:	61fb      	str	r3, [r7, #28]
          break;
 80067a2:	e001      	b.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          break;
 80067a4:	bf00      	nop
 80067a6:	e1b5      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80067a8:	bf00      	nop
        break;
 80067aa:	e1b3      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067ac:	4b91      	ldr	r3, [pc, #580]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067b6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067be:	d036      	beq.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80067c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067c4:	d003      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 80067c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ca:	d004      	beq.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
          break;
 80067cc:	e05e      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80067ce:	f7ff f8cb 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 80067d2:	61f8      	str	r0, [r7, #28]
          break;
 80067d4:	e05a      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80067d6:	4b87      	ldr	r3, [pc, #540]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e2:	d150      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 80067e4:	4b83      	ldr	r3, [pc, #524]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d04a      	beq.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80067f0:	4b80      	ldr	r3, [pc, #512]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	0a1b      	lsrs	r3, r3, #8
 80067f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fa:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	fb02 f203 	mul.w	r2, r2, r3
 8006804:	4b7b      	ldr	r3, [pc, #492]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	091b      	lsrs	r3, r3, #4
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	3301      	adds	r3, #1
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006816:	4b77      	ldr	r3, [pc, #476]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	0e5b      	lsrs	r3, r3, #25
 800681c:	f003 0303 	and.w	r3, r3, #3
 8006820:	3301      	adds	r3, #1
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	61fb      	str	r3, [r7, #28]
          break;
 800682c:	e02b      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800682e:	4b71      	ldr	r3, [pc, #452]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800683a:	d126      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800683c:	4b6d      	ldr	r3, [pc, #436]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006848:	4b6a      	ldr	r3, [pc, #424]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006852:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	fb02 f203 	mul.w	r2, r2, r3
 800685c:	4b65      	ldr	r3, [pc, #404]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	091b      	lsrs	r3, r3, #4
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	3301      	adds	r3, #1
 8006868:	fbb2 f3f3 	udiv	r3, r2, r3
 800686c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800686e:	4b61      	ldr	r3, [pc, #388]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	0e5b      	lsrs	r3, r3, #25
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	3301      	adds	r3, #1
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006882:	61fb      	str	r3, [r7, #28]
          break;
 8006884:	e001      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
          break;
 8006886:	bf00      	nop
 8006888:	e144      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800688a:	bf00      	nop
        break;
 800688c:	e142      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800688e:	4b59      	ldr	r3, [pc, #356]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006898:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d103      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK2Freq();
 80068a0:	f7ff f90e 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 80068a4:	61f8      	str	r0, [r7, #28]
        break;
 80068a6:	e135      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80068a8:	f7ff f85e 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 80068ac:	61f8      	str	r0, [r7, #28]
        break;
 80068ae:	e131      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80068b0:	4b50      	ldr	r3, [pc, #320]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068ba:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c2:	d009      	beq.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80068c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c8:	d00a      	beq.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d000      	beq.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
          break;
 80068ce:	e011      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7ff f8e0 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 80068d4:	61f8      	str	r0, [r7, #28]
          break;
 80068d6:	e00d      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetSysClockFreq();
 80068d8:	f7ff f846 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 80068dc:	61f8      	str	r0, [r7, #28]
          break;
 80068de:	e009      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068e0:	4b44      	ldr	r3, [pc, #272]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ec:	d101      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
            frequency = HSI_VALUE;
 80068ee:	4b42      	ldr	r3, [pc, #264]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80068f0:	61fb      	str	r3, [r7, #28]
          break;
 80068f2:	bf00      	nop
        break;
 80068f4:	e10e      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068f6:	4b3f      	ldr	r3, [pc, #252]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80068f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006900:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006908:	d009      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800690a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690e:	d00a      	beq.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d000      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 8006914:	e011      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006916:	f7ff f8bd 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 800691a:	61f8      	str	r0, [r7, #28]
          break;
 800691c:	e00d      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetSysClockFreq();
 800691e:	f7ff f823 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8006922:	61f8      	str	r0, [r7, #28]
          break;
 8006924:	e009      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006926:	4b33      	ldr	r3, [pc, #204]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800692e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006932:	d101      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
            frequency = HSI_VALUE;
 8006934:	4b30      	ldr	r3, [pc, #192]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8006936:	61fb      	str	r3, [r7, #28]
          break;
 8006938:	bf00      	nop
        break;
 800693a:	e0eb      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800693c:	4b2d      	ldr	r3, [pc, #180]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006946:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800694e:	d009      	beq.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8006950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006954:	d00a      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d000      	beq.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
          break;
 800695a:	e011      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800695c:	f7ff f89a 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8006960:	61f8      	str	r0, [r7, #28]
          break;
 8006962:	e00d      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006964:	f7ff f800 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8006968:	61f8      	str	r0, [r7, #28]
          break;
 800696a:	e009      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800696c:	4b21      	ldr	r3, [pc, #132]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006978:	d101      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 800697a:	4b1f      	ldr	r3, [pc, #124]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800697c:	61fb      	str	r3, [r7, #28]
          break;
 800697e:	bf00      	nop
        break;
 8006980:	e0c8      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006982:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8006984:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d008      	beq.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006994:	2b01      	cmp	r3, #1
 8006996:	d302      	bcc.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 8006998:	2b02      	cmp	r3, #2
 800699a:	d008      	beq.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800699c:	e011      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 800699e:	f7ff f879 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 80069a2:	61f8      	str	r0, [r7, #28]
          break;
 80069a4:	e00d      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetSysClockFreq();
 80069a6:	f7fe ffdf 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 80069aa:	61f8      	str	r0, [r7, #28]
          break;
 80069ac:	e009      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069ae:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ba:	d101      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 80069bc:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80069be:	61fb      	str	r3, [r7, #28]
          break;
 80069c0:	bf00      	nop
        break;
 80069c2:	e0a7      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80069c4:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80069ce:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069d6:	d015      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80069d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069dc:	d802      	bhi.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00c      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 80069e2:	e034      	b.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
        switch(srcclk)
 80069e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069e8:	d017      	beq.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80069ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069ee:	d01e      	beq.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          break;
 80069f0:	e02d      	b.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80069f2:	bf00      	nop
 80069f4:	40021000 	.word	0x40021000
 80069f8:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7ff f84a 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8006a00:	61f8      	str	r0, [r7, #28]
          break;
 8006a02:	e024      	b.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a04:	4b46      	ldr	r3, [pc, #280]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8006a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d118      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
              frequency = LSI_VALUE;
 8006a12:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a16:	61fb      	str	r3, [r7, #28]
          break;
 8006a18:	e014      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a1a:	4b41      	ldr	r3, [pc, #260]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a26:	d10f      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
            frequency = HSI_VALUE;
 8006a28:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 8006a2a:	61fb      	str	r3, [r7, #28]
          break;
 8006a2c:	e00c      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a2e:	4b3c      	ldr	r3, [pc, #240]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d107      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
            frequency = LSE_VALUE;
 8006a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a40:	61fb      	str	r3, [r7, #28]
          break;
 8006a42:	e003      	b.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
          break;
 8006a44:	bf00      	nop
 8006a46:	e065      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8006a48:	bf00      	nop
 8006a4a:	e063      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8006a4c:	bf00      	nop
        break;
 8006a4e:	e061      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a50:	4b33      	ldr	r3, [pc, #204]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a5a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a62:	d010      	beq.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a68:	d802      	bhi.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 8006a6e:	e02f      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        switch(srcclk)
 8006a70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a74:	d012      	beq.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 8006a76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a7a:	d019      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 8006a7c:	e028      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a7e:	f7ff f809 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8006a82:	61f8      	str	r0, [r7, #28]
          break;
 8006a84:	e024      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a86:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8006a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d118      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
              frequency = LSI_VALUE;
 8006a94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a98:	61fb      	str	r3, [r7, #28]
          break;
 8006a9a:	e014      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a9c:	4b20      	ldr	r3, [pc, #128]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa8:	d10f      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
            frequency = HSI_VALUE;
 8006aaa:	4b1e      	ldr	r3, [pc, #120]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 8006aac:	61fb      	str	r3, [r7, #28]
          break;
 8006aae:	e00c      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8006ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d107      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	61fb      	str	r3, [r7, #28]
          break;
 8006ac4:	e003      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8006ac6:	bf00      	nop
 8006ac8:	e024      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8006aca:	bf00      	nop
 8006acc:	e022      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8006ace:	bf00      	nop
        break;
 8006ad0:	e020      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006ad2:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006adc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8006ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae8:	d004      	beq.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8006aea:	e00d      	b.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006aec:	f7fe ffd2 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8006af0:	61f8      	str	r0, [r7, #28]
          break;
 8006af2:	e009      	b.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006af4:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b00:	d101      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
            frequency = HSI_VALUE;
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 8006b04:	61fb      	str	r3, [r7, #28]
          break;
 8006b06:	bf00      	nop
        break;
 8006b08:	e004      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 8006b12:	bf00      	nop
    }
  }

  return(frequency);
 8006b14:	69fb      	ldr	r3, [r7, #28]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40021000 	.word	0x40021000
 8006b24:	00f42400 	.word	0x00f42400

08006b28 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a04      	ldr	r2, [pc, #16]	; (8006b44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b32:	f043 0304 	orr.w	r3, r3, #4
 8006b36:	6013      	str	r3, [r2, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40021000 	.word	0x40021000

08006b48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b56:	4b73      	ldr	r3, [pc, #460]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d018      	beq.n	8006b94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b62:	4b70      	ldr	r3, [pc, #448]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f003 0203 	and.w	r2, r3, #3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d10d      	bne.n	8006b8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
       ||
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b7a:	4b6a      	ldr	r3, [pc, #424]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	091b      	lsrs	r3, r3, #4
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
       ||
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d044      	beq.n	8006c18 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	73fb      	strb	r3, [r7, #15]
 8006b92:	e041      	b.n	8006c18 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d00c      	beq.n	8006bb6 <RCCEx_PLLSAI1_Config+0x6e>
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d013      	beq.n	8006bc8 <RCCEx_PLLSAI1_Config+0x80>
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d120      	bne.n	8006be6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ba4:	4b5f      	ldr	r3, [pc, #380]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11d      	bne.n	8006bec <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bb4:	e01a      	b.n	8006bec <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bb6:	4b5b      	ldr	r3, [pc, #364]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d116      	bne.n	8006bf0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bc6:	e013      	b.n	8006bf0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006bc8:	4b56      	ldr	r3, [pc, #344]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10f      	bne.n	8006bf4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bd4:	4b53      	ldr	r3, [pc, #332]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d109      	bne.n	8006bf4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006be4:	e006      	b.n	8006bf4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bea:	e004      	b.n	8006bf6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006bec:	bf00      	nop
 8006bee:	e002      	b.n	8006bf6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006bf0:	bf00      	nop
 8006bf2:	e000      	b.n	8006bf6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006bf4:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10d      	bne.n	8006c18 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006bfc:	4b49      	ldr	r3, [pc, #292]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6819      	ldr	r1, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	430b      	orrs	r3, r1
 8006c12:	4944      	ldr	r1, [pc, #272]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d17c      	bne.n	8006d18 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c1e:	4b41      	ldr	r3, [pc, #260]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a40      	ldr	r2, [pc, #256]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c2a:	f7fb fab5 	bl	8002198 <HAL_GetTick>
 8006c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c30:	e009      	b.n	8006c46 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c32:	f7fb fab1 	bl	8002198 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d902      	bls.n	8006c46 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	73fb      	strb	r3, [r7, #15]
        break;
 8006c44:	e005      	b.n	8006c52 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c46:	4b37      	ldr	r3, [pc, #220]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1ef      	bne.n	8006c32 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d15f      	bne.n	8006d18 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d110      	bne.n	8006c80 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c5e:	4b31      	ldr	r3, [pc, #196]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006c66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6892      	ldr	r2, [r2, #8]
 8006c6e:	0211      	lsls	r1, r2, #8
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	68d2      	ldr	r2, [r2, #12]
 8006c74:	06d2      	lsls	r2, r2, #27
 8006c76:	430a      	orrs	r2, r1
 8006c78:	492a      	ldr	r1, [pc, #168]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	610b      	str	r3, [r1, #16]
 8006c7e:	e027      	b.n	8006cd0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d112      	bne.n	8006cac <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c86:	4b27      	ldr	r3, [pc, #156]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6892      	ldr	r2, [r2, #8]
 8006c96:	0211      	lsls	r1, r2, #8
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6912      	ldr	r2, [r2, #16]
 8006c9c:	0852      	lsrs	r2, r2, #1
 8006c9e:	3a01      	subs	r2, #1
 8006ca0:	0552      	lsls	r2, r2, #21
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	491f      	ldr	r1, [pc, #124]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	610b      	str	r3, [r1, #16]
 8006caa:	e011      	b.n	8006cd0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cac:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006cb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6892      	ldr	r2, [r2, #8]
 8006cbc:	0211      	lsls	r1, r2, #8
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6952      	ldr	r2, [r2, #20]
 8006cc2:	0852      	lsrs	r2, r2, #1
 8006cc4:	3a01      	subs	r2, #1
 8006cc6:	0652      	lsls	r2, r2, #25
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	4916      	ldr	r1, [pc, #88]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cd0:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a13      	ldr	r2, [pc, #76]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fb fa5c 	bl	8002198 <HAL_GetTick>
 8006ce0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ce2:	e009      	b.n	8006cf8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ce4:	f7fb fa58 	bl	8002198 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d902      	bls.n	8006cf8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	73fb      	strb	r3, [r7, #15]
          break;
 8006cf6:	e005      	b.n	8006d04 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0ef      	beq.n	8006ce4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d0a:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	4904      	ldr	r1, [pc, #16]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	40021000 	.word	0x40021000

08006d28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d36:	4b68      	ldr	r3, [pc, #416]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d018      	beq.n	8006d74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d42:	4b65      	ldr	r3, [pc, #404]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0203 	and.w	r2, r3, #3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d10d      	bne.n	8006d6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
       ||
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d5a:	4b5f      	ldr	r3, [pc, #380]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	091b      	lsrs	r3, r3, #4
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
       ||
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d044      	beq.n	8006df8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	e041      	b.n	8006df8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d00c      	beq.n	8006d96 <RCCEx_PLLSAI2_Config+0x6e>
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d013      	beq.n	8006da8 <RCCEx_PLLSAI2_Config+0x80>
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d120      	bne.n	8006dc6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d84:	4b54      	ldr	r3, [pc, #336]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d11d      	bne.n	8006dcc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d94:	e01a      	b.n	8006dcc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d96:	4b50      	ldr	r3, [pc, #320]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d116      	bne.n	8006dd0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da6:	e013      	b.n	8006dd0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006da8:	4b4b      	ldr	r3, [pc, #300]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10f      	bne.n	8006dd4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006db4:	4b48      	ldr	r3, [pc, #288]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d109      	bne.n	8006dd4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006dc4:	e006      	b.n	8006dd4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dca:	e004      	b.n	8006dd6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006dcc:	bf00      	nop
 8006dce:	e002      	b.n	8006dd6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006dd0:	bf00      	nop
 8006dd2:	e000      	b.n	8006dd6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006dd4:	bf00      	nop
    }

    if(status == HAL_OK)
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10d      	bne.n	8006df8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ddc:	4b3e      	ldr	r3, [pc, #248]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6819      	ldr	r1, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	430b      	orrs	r3, r1
 8006df2:	4939      	ldr	r1, [pc, #228]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d166      	bne.n	8006ecc <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006dfe:	4b36      	ldr	r3, [pc, #216]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a35      	ldr	r2, [pc, #212]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0a:	f7fb f9c5 	bl	8002198 <HAL_GetTick>
 8006e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e10:	e009      	b.n	8006e26 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e12:	f7fb f9c1 	bl	8002198 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d902      	bls.n	8006e26 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	73fb      	strb	r3, [r7, #15]
        break;
 8006e24:	e005      	b.n	8006e32 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e26:	4b2c      	ldr	r3, [pc, #176]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1ef      	bne.n	8006e12 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d149      	bne.n	8006ecc <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d110      	bne.n	8006e60 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e3e:	4b26      	ldr	r3, [pc, #152]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006e46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6892      	ldr	r2, [r2, #8]
 8006e4e:	0211      	lsls	r1, r2, #8
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	68d2      	ldr	r2, [r2, #12]
 8006e54:	06d2      	lsls	r2, r2, #27
 8006e56:	430a      	orrs	r2, r1
 8006e58:	491f      	ldr	r1, [pc, #124]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	614b      	str	r3, [r1, #20]
 8006e5e:	e011      	b.n	8006e84 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e60:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6892      	ldr	r2, [r2, #8]
 8006e70:	0211      	lsls	r1, r2, #8
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6912      	ldr	r2, [r2, #16]
 8006e76:	0852      	lsrs	r2, r2, #1
 8006e78:	3a01      	subs	r2, #1
 8006e7a:	0652      	lsls	r2, r2, #25
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	4916      	ldr	r1, [pc, #88]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e84:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e90:	f7fb f982 	bl	8002198 <HAL_GetTick>
 8006e94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e96:	e009      	b.n	8006eac <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e98:	f7fb f97e 	bl	8002198 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d902      	bls.n	8006eac <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	73fb      	strb	r3, [r7, #15]
          break;
 8006eaa:	e005      	b.n	8006eb8 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0ef      	beq.n	8006e98 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ec0:	695a      	ldr	r2, [r3, #20]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	4904      	ldr	r1, [pc, #16]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40021000 	.word	0x40021000

08006edc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b089      	sub	sp, #36	; 0x24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef8:	d10c      	bne.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006efa:	4b77      	ldr	r3, [pc, #476]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f00:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006f04:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f0c:	d112      	bne.n	8006f34 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f0e:	4b73      	ldr	r3, [pc, #460]	; (80070dc <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	e00f      	b.n	8006f34 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1a:	d10b      	bne.n	8006f34 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006f1c:	4b6e      	ldr	r3, [pc, #440]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f22:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006f26:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f2e:	d101      	bne.n	8006f34 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006f30:	4b6a      	ldr	r3, [pc, #424]	; (80070dc <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8006f32:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f040 80c6 	bne.w	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f46:	d003      	beq.n	8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f4e:	d13b      	bne.n	8006fc8 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f50:	4b61      	ldr	r3, [pc, #388]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f5c:	f040 80b3 	bne.w	80070c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8006f60:	4b5d      	ldr	r3, [pc, #372]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80ac 	beq.w	80070c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f6e:	4b5a      	ldr	r3, [pc, #360]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	3301      	adds	r3, #1
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006f82:	4b55      	ldr	r3, [pc, #340]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006f8e:	4b52      	ldr	r3, [pc, #328]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	0edb      	lsrs	r3, r3, #27
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006fa0:	4b4d      	ldr	r3, [pc, #308]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8006fac:	2311      	movs	r3, #17
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e001      	b.n	8006fb6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8006fb2:	2307      	movs	r3, #7
 8006fb4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	fb02 f203 	mul.w	r2, r2, r3
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006fc6:	e07e      	b.n	80070c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d139      	bne.n	8007042 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006fce:	4b42      	ldr	r3, [pc, #264]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fda:	d175      	bne.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8006fdc:	4b3e      	ldr	r3, [pc, #248]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d06f      	beq.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006fe8:	4b3b      	ldr	r3, [pc, #236]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	091b      	lsrs	r3, r3, #4
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffa:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006ffc:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	0a1b      	lsrs	r3, r3, #8
 8007002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007006:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007008:	4b33      	ldr	r3, [pc, #204]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	0edb      	lsrs	r3, r3, #27
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10a      	bne.n	8007030 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800701a:	4b2f      	ldr	r3, [pc, #188]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8007026:	2311      	movs	r3, #17
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e001      	b.n	8007030 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800702c:	2307      	movs	r3, #7
 800702e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	fb02 f203 	mul.w	r2, r2, r3
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	fbb2 f3f3 	udiv	r3, r2, r3
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	e042      	b.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007048:	d003      	beq.n	8007052 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007050:	d13a      	bne.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007052:	4b21      	ldr	r3, [pc, #132]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705e:	d133      	bne.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8007060:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d02d      	beq.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	091b      	lsrs	r3, r3, #4
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	3301      	adds	r3, #1
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007080:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800708c:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	0edb      	lsrs	r3, r3, #27
 8007092:	f003 031f 	and.w	r3, r3, #31
 8007096:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800709e:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 80070aa:	2311      	movs	r3, #17
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e001      	b.n	80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80070b0:	2307      	movs	r3, #7
 80070b2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	fb02 f203 	mul.w	r2, r2, r3
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	e000      	b.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80070c6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80070c8:	69fb      	ldr	r3, [r7, #28]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3724      	adds	r7, #36	; 0x24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40021000 	.word	0x40021000
 80070dc:	001fff68 	.word	0x001fff68

080070e0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e153      	b.n	800739a <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fa fed0 	bl	8001eac <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f957 	bl	80073c0 <SAI_Disable>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e13e      	b.n	800739a <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d007      	beq.n	800713c <HAL_SAI_Init+0x5c>
 800712c:	2b01      	cmp	r3, #1
 800712e:	d302      	bcc.n	8007136 <HAL_SAI_Init+0x56>
 8007130:	2b02      	cmp	r3, #2
 8007132:	d006      	beq.n	8007142 <HAL_SAI_Init+0x62>
 8007134:	e008      	b.n	8007148 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
      break;
 800713a:	e008      	b.n	800714e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800713c:	2310      	movs	r3, #16
 800713e:	61fb      	str	r3, [r7, #28]
      break;
 8007140:	e005      	b.n	800714e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007142:	2320      	movs	r3, #32
 8007144:	61fb      	str	r3, [r7, #28]
      break;
 8007146:	e002      	b.n	800714e <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	61fb      	str	r3, [r7, #28]
      break;
 800714c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b03      	cmp	r3, #3
 8007154:	d81d      	bhi.n	8007192 <HAL_SAI_Init+0xb2>
 8007156:	a201      	add	r2, pc, #4	; (adr r2, 800715c <HAL_SAI_Init+0x7c>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	0800716d 	.word	0x0800716d
 8007160:	08007173 	.word	0x08007173
 8007164:	0800717b 	.word	0x0800717b
 8007168:	08007183 	.word	0x08007183
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
      break;
 8007170:	e012      	b.n	8007198 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007176:	617b      	str	r3, [r7, #20]
      break;
 8007178:	e00e      	b.n	8007198 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800717a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800717e:	617b      	str	r3, [r7, #20]
      break;
 8007180:	e00a      	b.n	8007198 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007186:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	61fb      	str	r3, [r7, #28]
      break;
 8007190:	e002      	b.n	8007198 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]
      break;
 8007196:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a81      	ldr	r2, [pc, #516]	; (80073a4 <HAL_SAI_Init+0x2c4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <HAL_SAI_Init+0xcc>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a80      	ldr	r2, [pc, #512]	; (80073a8 <HAL_SAI_Init+0x2c8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d103      	bne.n	80071b4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80071ac:	4a7f      	ldr	r2, [pc, #508]	; (80073ac <HAL_SAI_Init+0x2cc>)
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	e002      	b.n	80071ba <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80071b4:	4a7e      	ldr	r2, [pc, #504]	; (80073b0 <HAL_SAI_Init+0x2d0>)
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d041      	beq.n	8007246 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a77      	ldr	r2, [pc, #476]	; (80073a4 <HAL_SAI_Init+0x2c4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_SAI_Init+0xf6>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a75      	ldr	r2, [pc, #468]	; (80073a8 <HAL_SAI_Init+0x2c8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d105      	bne.n	80071e2 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80071d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80071da:	f7fe ffdf 	bl	800619c <HAL_RCCEx_GetPeriphCLKFreq>
 80071de:	6138      	str	r0, [r7, #16]
 80071e0:	e004      	b.n	80071ec <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80071e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80071e6:	f7fe ffd9 	bl	800619c <HAL_RCCEx_GetPeriphCLKFreq>
 80071ea:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	461a      	mov	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	025b      	lsls	r3, r3, #9
 80071fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007202:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4a6b      	ldr	r2, [pc, #428]	; (80073b4 <HAL_SAI_Init+0x2d4>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	08da      	lsrs	r2, r3, #3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	4b67      	ldr	r3, [pc, #412]	; (80073b4 <HAL_SAI_Init+0x2d4>)
 8007216:	fba3 2301 	umull	r2, r3, r3, r1
 800721a:	08da      	lsrs	r2, r3, #3
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	1aca      	subs	r2, r1, r3
 8007226:	2a08      	cmp	r2, #8
 8007228:	d904      	bls.n	8007234 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	2b04      	cmp	r3, #4
 800723a:	d104      	bne.n	8007246 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	085a      	lsrs	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_SAI_Init+0x176>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d109      	bne.n	800726a <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_SAI_Init+0x182>
 800725e:	2300      	movs	r3, #0
 8007260:	e001      	b.n	8007266 <HAL_SAI_Init+0x186>
 8007262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	e008      	b.n	800727c <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	2b01      	cmp	r3, #1
 8007270:	d102      	bne.n	8007278 <HAL_SAI_Init+0x198>
 8007272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007276:	e000      	b.n	800727a <HAL_SAI_Init+0x19a>
 8007278:	2300      	movs	r3, #0
 800727a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6819      	ldr	r1, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b4c      	ldr	r3, [pc, #304]	; (80073b8 <HAL_SAI_Init+0x2d8>)
 8007288:	400b      	ands	r3, r1
 800728a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6819      	ldr	r1, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80072a0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	431a      	orrs	r2, r3
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80072b4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072c0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	051b      	lsls	r3, r3, #20
 80072c8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80072e0:	f023 030f 	bic.w	r3, r3, #15
 80072e4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6859      	ldr	r1, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699a      	ldr	r2, [r3, #24]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6899      	ldr	r1, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4b2b      	ldr	r3, [pc, #172]	; (80073bc <HAL_SAI_Init+0x2dc>)
 8007310:	400b      	ands	r3, r1
 8007312:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6899      	ldr	r1, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007324:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800732a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007330:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007336:	3b01      	subs	r3, #1
 8007338:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800733a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68d9      	ldr	r1, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007352:	400b      	ands	r3, r1
 8007354:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68d9      	ldr	r1, [r3, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007364:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800736a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800736c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007372:	3b01      	subs	r3, #1
 8007374:	021b      	lsls	r3, r3, #8
 8007376:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3720      	adds	r7, #32
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40015404 	.word	0x40015404
 80073a8:	40015424 	.word	0x40015424
 80073ac:	40015400 	.word	0x40015400
 80073b0:	40015800 	.word	0x40015800
 80073b4:	cccccccd 	.word	0xcccccccd
 80073b8:	ff05c010 	.word	0xff05c010
 80073bc:	fff88000 	.word	0xfff88000

080073c0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80073c0:	b490      	push	{r4, r7}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80073c8:	4b15      	ldr	r3, [pc, #84]	; (8007420 <SAI_Disable+0x60>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a15      	ldr	r2, [pc, #84]	; (8007424 <SAI_Disable+0x64>)
 80073ce:	fba2 2303 	umull	r2, r3, r2, r3
 80073d2:	0b1b      	lsrs	r3, r3, #12
 80073d4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80073e8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80073ea:	2c00      	cmp	r4, #0
 80073ec:	d10a      	bne.n	8007404 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	73fb      	strb	r3, [r7, #15]
      break;
 8007402:	e007      	b.n	8007414 <SAI_Disable+0x54>
    }
    count--;
 8007404:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1ea      	bne.n	80073ea <SAI_Disable+0x2a>

  return status;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bc90      	pop	{r4, r7}
 800741e:	4770      	bx	lr
 8007420:	20000008 	.word	0x20000008
 8007424:	95cbec1b 	.word	0x95cbec1b

08007428 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e022      	b.n	8007480 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d105      	bne.n	8007452 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7fa fba3 	bl	8001b98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2203      	movs	r2, #3
 8007456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f814 	bl	8007488 <HAL_SD_InitCard>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e00a      	b.n	8007480 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007488:	b5b0      	push	{r4, r5, r7, lr}
 800748a:	b08e      	sub	sp, #56	; 0x38
 800748c:	af04      	add	r7, sp, #16
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007490:	2300      	movs	r3, #0
 8007492:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007498:	2300      	movs	r3, #0
 800749a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80074a4:	2376      	movs	r3, #118	; 0x76
 80074a6:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681d      	ldr	r5, [r3, #0]
 80074ac:	466c      	mov	r4, sp
 80074ae:	f107 0314 	add.w	r3, r7, #20
 80074b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074ba:	f107 0308 	add.w	r3, r7, #8
 80074be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074c0:	4628      	mov	r0, r5
 80074c2:	f001 fc71 	bl	8008da8 <SDMMC_Init>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80074cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e05f      	b.n	8007598 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074e6:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 fc95 	bl	8008e1c <SDMMC_PowerState_ON>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80074f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e049      	b.n	8007598 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007512:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fb4d 	bl	8007bb4 <SD_PowerON>
 800751a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e02e      	b.n	8007598 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa6c 	bl	8007a18 <SD_InitCard>
 8007540:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e01b      	b.n	8007598 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007568:	4618      	mov	r0, r3
 800756a:	f001 fcea 	bl	8008f42 <SDMMC_CmdBlockLength>
 800756e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00f      	beq.n	8007596 <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <HAL_SD_InitCard+0x118>)
 800757c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3728      	adds	r7, #40	; 0x28
 800759c:	46bd      	mov	sp, r7
 800759e:	bdb0      	pop	{r4, r5, r7, pc}
 80075a0:	004005ff 	.word	0x004005ff

080075a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b2:	0f9b      	lsrs	r3, r3, #30
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075be:	0e9b      	lsrs	r3, r3, #26
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d0:	0e1b      	lsrs	r3, r3, #24
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e2:	0c1b      	lsrs	r3, r3, #16
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007604:	0d1b      	lsrs	r3, r3, #20
 8007606:	b29a      	uxth	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	b2da      	uxtb	r2, r3
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007622:	0bdb      	lsrs	r3, r3, #15
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	b2da      	uxtb	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007634:	0b9b      	lsrs	r3, r3, #14
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	b2da      	uxtb	r2, r3
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007646:	0b5b      	lsrs	r3, r3, #13
 8007648:	b2db      	uxtb	r3, r3
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007658:	0b1b      	lsrs	r3, r3, #12
 800765a:	b2db      	uxtb	r3, r3
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	b2da      	uxtb	r2, r3
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2200      	movs	r2, #0
 800766a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007670:	2b00      	cmp	r3, #0
 8007672:	d163      	bne.n	800773c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007678:	009a      	lsls	r2, r3, #2
 800767a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800767e:	4013      	ands	r3, r2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007684:	0f92      	lsrs	r2, r2, #30
 8007686:	431a      	orrs	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007690:	0edb      	lsrs	r3, r3, #27
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f003 0307 	and.w	r3, r3, #7
 8007698:	b2da      	uxtb	r2, r3
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a2:	0e1b      	lsrs	r3, r3, #24
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b4:	0d5b      	lsrs	r3, r3, #21
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c6:	0c9b      	lsrs	r3, r3, #18
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d8:	0bdb      	lsrs	r3, r3, #15
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	7e1b      	ldrb	r3, [r3, #24]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	3302      	adds	r3, #2
 80076fc:	2201      	movs	r2, #1
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007706:	fb02 f203 	mul.w	r2, r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	7a1b      	ldrb	r3, [r3, #8]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 030f 	and.w	r3, r3, #15
 8007718:	2201      	movs	r2, #1
 800771a:	409a      	lsls	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007728:	0a52      	lsrs	r2, r2, #9
 800772a:	fb02 f203 	mul.w	r2, r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007738:	661a      	str	r2, [r3, #96]	; 0x60
 800773a:	e031      	b.n	80077a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007740:	2b01      	cmp	r3, #1
 8007742:	d11d      	bne.n	8007780 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007748:	041b      	lsls	r3, r3, #16
 800774a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007752:	0c1b      	lsrs	r3, r3, #16
 8007754:	431a      	orrs	r2, r3
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	3301      	adds	r3, #1
 8007760:	029a      	lsls	r2, r3, #10
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007774:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	661a      	str	r2, [r3, #96]	; 0x60
 800777e:	e00f      	b.n	80077a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a58      	ldr	r2, [pc, #352]	; (80078e8 <HAL_SD_GetCardCSD+0x344>)
 8007786:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e09d      	b.n	80078dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a4:	0b9b      	lsrs	r3, r3, #14
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077b6:	09db      	lsrs	r3, r3, #7
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d8:	0fdb      	lsrs	r3, r3, #31
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e4:	0f5b      	lsrs	r3, r3, #29
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f6:	0e9b      	lsrs	r3, r3, #26
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007808:	0d9b      	lsrs	r3, r3, #22
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	b2da      	uxtb	r2, r3
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	0d5b      	lsrs	r3, r3, #21
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	b2da      	uxtb	r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	b2da      	uxtb	r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	0bdb      	lsrs	r3, r3, #15
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	b2da      	uxtb	r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785e:	0b9b      	lsrs	r3, r3, #14
 8007860:	b2db      	uxtb	r3, r3
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	b2da      	uxtb	r2, r3
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007872:	0b5b      	lsrs	r3, r3, #13
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	b2da      	uxtb	r2, r3
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007886:	0b1b      	lsrs	r3, r3, #12
 8007888:	b2db      	uxtb	r3, r3
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	b2da      	uxtb	r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789a:	0a9b      	lsrs	r3, r3, #10
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ae:	0a1b      	lsrs	r3, r3, #8
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	004005ff 	.word	0x004005ff

080078ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80078ec:	b5b0      	push	{r4, r5, r7, lr}
 80078ee:	b08e      	sub	sp, #56	; 0x38
 80078f0:	af04      	add	r7, sp, #16
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2203      	movs	r2, #3
 8007900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007908:	2b03      	cmp	r3, #3
 800790a:	d02e      	beq.n	800796a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007912:	d106      	bne.n	8007922 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	639a      	str	r2, [r3, #56]	; 0x38
 8007920:	e029      	b.n	8007976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007928:	d10a      	bne.n	8007940 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f9d0 	bl	8007cd0 <SD_WideBus_Enable>
 8007930:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	639a      	str	r2, [r3, #56]	; 0x38
 800793e:	e01a      	b.n	8007976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10a      	bne.n	800795c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fa0d 	bl	8007d66 <SD_WideBus_Disable>
 800794c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	431a      	orrs	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	639a      	str	r2, [r3, #56]	; 0x38
 800795a:	e00c      	b.n	8007976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007960:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	639a      	str	r2, [r3, #56]	; 0x38
 8007968:	e005      	b.n	8007976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797a:	2b00      	cmp	r3, #0
 800797c:	d007      	beq.n	800798e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a24      	ldr	r2, [pc, #144]	; (8007a14 <HAL_SD_ConfigWideBusOperation+0x128>)
 8007984:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800798c:	e01f      	b.n	80079ce <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681d      	ldr	r5, [r3, #0]
 80079b4:	466c      	mov	r4, sp
 80079b6:	f107 0314 	add.w	r3, r7, #20
 80079ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079c2:	f107 0308 	add.w	r3, r7, #8
 80079c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079c8:	4628      	mov	r0, r5
 80079ca:	f001 f9ed 	bl	8008da8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 fab3 	bl	8008f42 <SDMMC_CmdBlockLength>
 80079dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00c      	beq.n	80079fe <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a0a      	ldr	r2, [pc, #40]	; (8007a14 <HAL_SD_ConfigWideBusOperation+0x128>)
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3728      	adds	r7, #40	; 0x28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bdb0      	pop	{r4, r5, r7, pc}
 8007a12:	bf00      	nop
 8007a14:	004005ff 	.word	0x004005ff

08007a18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a18:	b5b0      	push	{r4, r5, r7, lr}
 8007a1a:	b094      	sub	sp, #80	; 0x50
 8007a1c:	af04      	add	r7, sp, #16
 8007a1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007a20:	2301      	movs	r3, #1
 8007a22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f001 fa06 	bl	8008e3a <SDMMC_GetPowerState>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007a38:	e0b7      	b.n	8007baa <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d02f      	beq.n	8007aa2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 fb85 	bl	8009156 <SDMMC_CmdSendCID>
 8007a4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <SD_InitCard+0x40>
    {
      return errorstate;
 8007a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a56:	e0a8      	b.n	8007baa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 fa30 	bl	8008ec4 <SDMMC_GetResponse>
 8007a64:	4602      	mov	r2, r0
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2104      	movs	r1, #4
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 fa27 	bl	8008ec4 <SDMMC_GetResponse>
 8007a76:	4602      	mov	r2, r0
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2108      	movs	r1, #8
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 fa1e 	bl	8008ec4 <SDMMC_GetResponse>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	210c      	movs	r1, #12
 8007a94:	4618      	mov	r0, r3
 8007a96:	f001 fa15 	bl	8008ec4 <SDMMC_GetResponse>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d00d      	beq.n	8007ac6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f107 020e 	add.w	r2, r7, #14
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fb8b 	bl	80091d0 <SDMMC_CmdSetRelAdd>
 8007aba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <SD_InitCard+0xae>
    {
      return errorstate;
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac4:	e071      	b.n	8007baa <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d036      	beq.n	8007b3c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007ace:	89fb      	ldrh	r3, [r7, #14]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ade:	041b      	lsls	r3, r3, #16
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	f001 fb55 	bl	8009192 <SDMMC_CmdSendCSD>
 8007ae8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af2:	e05a      	b.n	8007baa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2100      	movs	r1, #0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 f9e2 	bl	8008ec4 <SDMMC_GetResponse>
 8007b00:	4602      	mov	r2, r0
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2104      	movs	r1, #4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 f9d9 	bl	8008ec4 <SDMMC_GetResponse>
 8007b12:	4602      	mov	r2, r0
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2108      	movs	r1, #8
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 f9d0 	bl	8008ec4 <SDMMC_GetResponse>
 8007b24:	4602      	mov	r2, r0
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	210c      	movs	r1, #12
 8007b30:	4618      	mov	r0, r3
 8007b32:	f001 f9c7 	bl	8008ec4 <SDMMC_GetResponse>
 8007b36:	4602      	mov	r2, r0
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2104      	movs	r1, #4
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f9be 	bl	8008ec4 <SDMMC_GetResponse>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	0d1a      	lsrs	r2, r3, #20
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007b50:	f107 0310 	add.w	r3, r7, #16
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff fd24 	bl	80075a4 <HAL_SD_GetCardCSD>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b66:	e020      	b.n	8007baa <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6819      	ldr	r1, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b70:	041b      	lsls	r3, r3, #16
 8007b72:	f04f 0400 	mov.w	r4, #0
 8007b76:	461a      	mov	r2, r3
 8007b78:	4623      	mov	r3, r4
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	f001 fa03 	bl	8008f86 <SDMMC_CmdSelDesel>
 8007b80:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <SD_InitCard+0x174>
  {
    return errorstate;
 8007b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8a:	e00e      	b.n	8007baa <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681d      	ldr	r5, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	466c      	mov	r4, sp
 8007b94:	f103 0210 	add.w	r2, r3, #16
 8007b98:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f001 f900 	bl	8008da8 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3740      	adds	r7, #64	; 0x40
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007bb4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f001 f9fd 	bl	8008fcc <SDMMC_CmdGoIdleState>
 8007bd2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <SD_PowerON+0x2a>
  {
    return errorstate;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	e072      	b.n	8007cc4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f001 fa10 	bl	8009008 <SDMMC_CmdOperCond>
 8007be8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00d      	beq.n	8007c0c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 f9e6 	bl	8008fcc <SDMMC_CmdGoIdleState>
 8007c00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	e05b      	b.n	8007cc4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d137      	bne.n	8007c8a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4618      	mov	r0, r3
 8007c22:	f001 fa10 	bl	8009046 <SDMMC_CmdAppCommand>
 8007c26:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d02d      	beq.n	8007c8a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c32:	e047      	b.n	8007cc4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fa03 	bl	8009046 <SDMMC_CmdAppCommand>
 8007c40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <SD_PowerON+0x98>
    {
      return errorstate;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	e03b      	b.n	8007cc4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	491e      	ldr	r1, [pc, #120]	; (8007ccc <SD_PowerON+0x118>)
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 fa19 	bl	800908a <SDMMC_CmdAppOperCommand>
 8007c58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c64:	e02e      	b.n	8007cc4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 f929 	bl	8008ec4 <SDMMC_GetResponse>
 8007c72:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	0fdb      	lsrs	r3, r3, #31
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <SD_PowerON+0xcc>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e000      	b.n	8007c82 <SD_PowerON+0xce>
 8007c80:	2300      	movs	r3, #0
 8007c82:	613b      	str	r3, [r7, #16]

    count++;
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d802      	bhi.n	8007c9a <SD_PowerON+0xe6>
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0cc      	beq.n	8007c34 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d902      	bls.n	8007caa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ca8:	e00c      	b.n	8007cc4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	645a      	str	r2, [r3, #68]	; 0x44
 8007cba:	e002      	b.n	8007cc2 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	c1100000 	.word	0xc1100000

08007cd0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 f8ec 	bl	8008ec4 <SDMMC_GetResponse>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cf6:	d102      	bne.n	8007cfe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007cf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cfc:	e02f      	b.n	8007d5e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007cfe:	f107 030c 	add.w	r3, r7, #12
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f879 	bl	8007dfc <SD_FindSCR>
 8007d0a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	e023      	b.n	8007d5e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01c      	beq.n	8007d5a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d28:	041b      	lsls	r3, r3, #16
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	f001 f98a 	bl	8009046 <SDMMC_CmdAppCommand>
 8007d32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	e00f      	b.n	8007d5e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2102      	movs	r1, #2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 f9c3 	bl	80090d0 <SDMMC_CmdBusWidth>
 8007d4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	e003      	b.n	8007d5e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	e001      	b.n	8007d5e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b086      	sub	sp, #24
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	2300      	movs	r3, #0
 8007d74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 f8a1 	bl	8008ec4 <SDMMC_GetResponse>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d8c:	d102      	bne.n	8007d94 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d92:	e02f      	b.n	8007df4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007d94:	f107 030c 	add.w	r3, r7, #12
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f82e 	bl	8007dfc <SD_FindSCR>
 8007da0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	e023      	b.n	8007df4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d01c      	beq.n	8007df0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbe:	041b      	lsls	r3, r3, #16
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f001 f93f 	bl	8009046 <SDMMC_CmdAppCommand>
 8007dc8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	e00f      	b.n	8007df4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2100      	movs	r1, #0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f001 f978 	bl	80090d0 <SDMMC_CmdBusWidth>
 8007de0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	e003      	b.n	8007df4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e001      	b.n	8007df4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007df0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007dfc:	b590      	push	{r4, r7, lr}
 8007dfe:	b08f      	sub	sp, #60	; 0x3c
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e06:	f7fa f9c7 	bl	8002198 <HAL_GetTick>
 8007e0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007e10:	2300      	movs	r3, #0
 8007e12:	60bb      	str	r3, [r7, #8]
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2108      	movs	r1, #8
 8007e22:	4618      	mov	r0, r3
 8007e24:	f001 f88d 	bl	8008f42 <SDMMC_CmdBlockLength>
 8007e28:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	e0a9      	b.n	8007f88 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3c:	041b      	lsls	r3, r3, #16
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	f001 f900 	bl	8009046 <SDMMC_CmdAppCommand>
 8007e46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	e09a      	b.n	8007f88 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e52:	f04f 33ff 	mov.w	r3, #4294967295
 8007e56:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007e58:	2308      	movs	r3, #8
 8007e5a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007e5c:	2330      	movs	r3, #48	; 0x30
 8007e5e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e60:	2302      	movs	r3, #2
 8007e62:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f107 0210 	add.w	r2, r7, #16
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 f837 	bl	8008eea <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 f947 	bl	8009114 <SDMMC_CmdSendSCR>
 8007e86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d022      	beq.n	8007ed4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	e07a      	b.n	8007f88 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00e      	beq.n	8007ebe <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	f107 0208 	add.w	r2, r7, #8
 8007eac:	18d4      	adds	r4, r2, r3
 8007eae:	4608      	mov	r0, r1
 8007eb0:	f000 ffa7 	bl	8008e02 <SDMMC_ReadFIFO>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	6023      	str	r3, [r4, #0]
      index++;
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eba:	3301      	adds	r3, #1
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ebe:	f7fa f96b 	bl	8002198 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ecc:	d102      	bne.n	8007ed4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ece:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ed2:	e059      	b.n	8007f88 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eda:	f240 432a 	movw	r3, #1066	; 0x42a
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0d6      	beq.n	8007e92 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2208      	movs	r2, #8
 8007ef8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007efa:	2308      	movs	r3, #8
 8007efc:	e044      	b.n	8007f88 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d005      	beq.n	8007f18 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2202      	movs	r2, #2
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	e037      	b.n	8007f88 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d005      	beq.n	8007f32 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007f2e:	2320      	movs	r3, #32
 8007f30:	e02a      	b.n	8007f88 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	061a      	lsls	r2, r3, #24
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f48:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	0a1b      	lsrs	r3, r3, #8
 8007f4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f52:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	0e1b      	lsrs	r3, r3, #24
 8007f58:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	601a      	str	r2, [r3, #0]
    scr++;
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	3304      	adds	r3, #4
 8007f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	061a      	lsls	r2, r3, #24
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f70:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	0a1b      	lsrs	r3, r3, #8
 8007f76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007f7a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	0e1b      	lsrs	r3, r3, #24
 8007f80:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f84:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	373c      	adds	r7, #60	; 0x3c
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd90      	pop	{r4, r7, pc}

08007f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e07c      	b.n	800809c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d106      	bne.n	8007fc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7f9 fe4d 	bl	8001c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fe2:	d902      	bls.n	8007fea <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e002      	b.n	8007ff0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007ff8:	d007      	beq.n	800800a <HAL_SPI_Init+0x7a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008002:	d002      	beq.n	800800a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10b      	bne.n	800802a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800801a:	d903      	bls.n	8008024 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	631a      	str	r2, [r3, #48]	; 0x30
 8008022:	e002      	b.n	800802a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a1b      	ldr	r3, [r3, #32]
 8008054:	ea42 0103 	orr.w	r1, r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	0c1b      	lsrs	r3, r3, #16
 800806a:	f003 0204 	and.w	r2, r3, #4
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	ea42 0103 	orr.w	r1, r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e038      	b.n	800812c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f7f9 fee2 	bl	8001e98 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3308      	adds	r3, #8
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f000 fd4a 	bl	8008b78 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	461a      	mov	r2, r3
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	f000 fdd2 	bl	8008c98 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6858      	ldr	r0, [r3, #4]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	f000 fe19 	bl	8008d38 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	6892      	ldr	r2, [r2, #8]
 800810e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	6892      	ldr	r2, [r2, #8]
 800811a:	f041 0101 	orr.w	r1, r1, #1
 800811e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e040      	b.n	80081c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7f9 fbd6 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2224      	movs	r2, #36	; 0x24
 8008160:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0201 	bic.w	r2, r2, #1
 8008170:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f82c 	bl	80081d0 <UART_SetConfig>
 8008178:	4603      	mov	r3, r0
 800817a:	2b01      	cmp	r3, #1
 800817c:	d101      	bne.n	8008182 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e022      	b.n	80081c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fb92 	bl	80088b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800819e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0201 	orr.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fc19 	bl	80089f8 <UART_CheckIdleState>
 80081c6:	4603      	mov	r3, r0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80081d4:	b08a      	sub	sp, #40	; 0x28
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80081da:	2300      	movs	r3, #0
 80081dc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	4bb8      	ldr	r3, [pc, #736]	; (80084e8 <UART_SetConfig+0x318>)
 8008206:	4013      	ands	r3, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6812      	ldr	r2, [r2, #0]
 800820c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800820e:	430b      	orrs	r3, r1
 8008210:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4aae      	ldr	r2, [pc, #696]	; (80084ec <UART_SetConfig+0x31c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d004      	beq.n	8008242 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823e:	4313      	orrs	r3, r2
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008252:	430a      	orrs	r2, r1
 8008254:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4aa5      	ldr	r2, [pc, #660]	; (80084f0 <UART_SetConfig+0x320>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d126      	bne.n	80082ae <UART_SetConfig+0xde>
 8008260:	4ba4      	ldr	r3, [pc, #656]	; (80084f4 <UART_SetConfig+0x324>)
 8008262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	2b03      	cmp	r3, #3
 800826c:	d81a      	bhi.n	80082a4 <UART_SetConfig+0xd4>
 800826e:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <UART_SetConfig+0xa4>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	08008285 	.word	0x08008285
 8008278:	08008295 	.word	0x08008295
 800827c:	0800828d 	.word	0x0800828d
 8008280:	0800829d 	.word	0x0800829d
 8008284:	2301      	movs	r3, #1
 8008286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800828a:	e105      	b.n	8008498 <UART_SetConfig+0x2c8>
 800828c:	2302      	movs	r3, #2
 800828e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008292:	e101      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008294:	2304      	movs	r3, #4
 8008296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800829a:	e0fd      	b.n	8008498 <UART_SetConfig+0x2c8>
 800829c:	2308      	movs	r3, #8
 800829e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082a2:	e0f9      	b.n	8008498 <UART_SetConfig+0x2c8>
 80082a4:	2310      	movs	r3, #16
 80082a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082aa:	bf00      	nop
 80082ac:	e0f4      	b.n	8008498 <UART_SetConfig+0x2c8>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a91      	ldr	r2, [pc, #580]	; (80084f8 <UART_SetConfig+0x328>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d138      	bne.n	800832a <UART_SetConfig+0x15a>
 80082b8:	4b8e      	ldr	r3, [pc, #568]	; (80084f4 <UART_SetConfig+0x324>)
 80082ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082be:	f003 030c 	and.w	r3, r3, #12
 80082c2:	2b0c      	cmp	r3, #12
 80082c4:	d82c      	bhi.n	8008320 <UART_SetConfig+0x150>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <UART_SetConfig+0xfc>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	08008301 	.word	0x08008301
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008321 	.word	0x08008321
 80082dc:	08008311 	.word	0x08008311
 80082e0:	08008321 	.word	0x08008321
 80082e4:	08008321 	.word	0x08008321
 80082e8:	08008321 	.word	0x08008321
 80082ec:	08008309 	.word	0x08008309
 80082f0:	08008321 	.word	0x08008321
 80082f4:	08008321 	.word	0x08008321
 80082f8:	08008321 	.word	0x08008321
 80082fc:	08008319 	.word	0x08008319
 8008300:	2300      	movs	r3, #0
 8008302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008306:	e0c7      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008308:	2302      	movs	r3, #2
 800830a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800830e:	e0c3      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008316:	e0bf      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800831e:	e0bb      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008326:	bf00      	nop
 8008328:	e0b6      	b.n	8008498 <UART_SetConfig+0x2c8>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a73      	ldr	r2, [pc, #460]	; (80084fc <UART_SetConfig+0x32c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d125      	bne.n	8008380 <UART_SetConfig+0x1b0>
 8008334:	4b6f      	ldr	r3, [pc, #444]	; (80084f4 <UART_SetConfig+0x324>)
 8008336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800833e:	2b10      	cmp	r3, #16
 8008340:	d011      	beq.n	8008366 <UART_SetConfig+0x196>
 8008342:	2b10      	cmp	r3, #16
 8008344:	d802      	bhi.n	800834c <UART_SetConfig+0x17c>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <UART_SetConfig+0x186>
 800834a:	e014      	b.n	8008376 <UART_SetConfig+0x1a6>
 800834c:	2b20      	cmp	r3, #32
 800834e:	d006      	beq.n	800835e <UART_SetConfig+0x18e>
 8008350:	2b30      	cmp	r3, #48	; 0x30
 8008352:	d00c      	beq.n	800836e <UART_SetConfig+0x19e>
 8008354:	e00f      	b.n	8008376 <UART_SetConfig+0x1a6>
 8008356:	2300      	movs	r3, #0
 8008358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800835c:	e09c      	b.n	8008498 <UART_SetConfig+0x2c8>
 800835e:	2302      	movs	r3, #2
 8008360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008364:	e098      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008366:	2304      	movs	r3, #4
 8008368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800836c:	e094      	b.n	8008498 <UART_SetConfig+0x2c8>
 800836e:	2308      	movs	r3, #8
 8008370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008374:	e090      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008376:	2310      	movs	r3, #16
 8008378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800837c:	bf00      	nop
 800837e:	e08b      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a5e      	ldr	r2, [pc, #376]	; (8008500 <UART_SetConfig+0x330>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d125      	bne.n	80083d6 <UART_SetConfig+0x206>
 800838a:	4b5a      	ldr	r3, [pc, #360]	; (80084f4 <UART_SetConfig+0x324>)
 800838c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008390:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	d011      	beq.n	80083bc <UART_SetConfig+0x1ec>
 8008398:	2b40      	cmp	r3, #64	; 0x40
 800839a:	d802      	bhi.n	80083a2 <UART_SetConfig+0x1d2>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <UART_SetConfig+0x1dc>
 80083a0:	e014      	b.n	80083cc <UART_SetConfig+0x1fc>
 80083a2:	2b80      	cmp	r3, #128	; 0x80
 80083a4:	d006      	beq.n	80083b4 <UART_SetConfig+0x1e4>
 80083a6:	2bc0      	cmp	r3, #192	; 0xc0
 80083a8:	d00c      	beq.n	80083c4 <UART_SetConfig+0x1f4>
 80083aa:	e00f      	b.n	80083cc <UART_SetConfig+0x1fc>
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083b2:	e071      	b.n	8008498 <UART_SetConfig+0x2c8>
 80083b4:	2302      	movs	r3, #2
 80083b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ba:	e06d      	b.n	8008498 <UART_SetConfig+0x2c8>
 80083bc:	2304      	movs	r3, #4
 80083be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083c2:	e069      	b.n	8008498 <UART_SetConfig+0x2c8>
 80083c4:	2308      	movs	r3, #8
 80083c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ca:	e065      	b.n	8008498 <UART_SetConfig+0x2c8>
 80083cc:	2310      	movs	r3, #16
 80083ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083d2:	bf00      	nop
 80083d4:	e060      	b.n	8008498 <UART_SetConfig+0x2c8>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a4a      	ldr	r2, [pc, #296]	; (8008504 <UART_SetConfig+0x334>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d129      	bne.n	8008434 <UART_SetConfig+0x264>
 80083e0:	4b44      	ldr	r3, [pc, #272]	; (80084f4 <UART_SetConfig+0x324>)
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ee:	d014      	beq.n	800841a <UART_SetConfig+0x24a>
 80083f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f4:	d802      	bhi.n	80083fc <UART_SetConfig+0x22c>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <UART_SetConfig+0x23a>
 80083fa:	e016      	b.n	800842a <UART_SetConfig+0x25a>
 80083fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008400:	d007      	beq.n	8008412 <UART_SetConfig+0x242>
 8008402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008406:	d00c      	beq.n	8008422 <UART_SetConfig+0x252>
 8008408:	e00f      	b.n	800842a <UART_SetConfig+0x25a>
 800840a:	2300      	movs	r3, #0
 800840c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008410:	e042      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008412:	2302      	movs	r3, #2
 8008414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008418:	e03e      	b.n	8008498 <UART_SetConfig+0x2c8>
 800841a:	2304      	movs	r3, #4
 800841c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008420:	e03a      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008422:	2308      	movs	r3, #8
 8008424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008428:	e036      	b.n	8008498 <UART_SetConfig+0x2c8>
 800842a:	2310      	movs	r3, #16
 800842c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008430:	bf00      	nop
 8008432:	e031      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a2c      	ldr	r2, [pc, #176]	; (80084ec <UART_SetConfig+0x31c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d129      	bne.n	8008492 <UART_SetConfig+0x2c2>
 800843e:	4b2d      	ldr	r3, [pc, #180]	; (80084f4 <UART_SetConfig+0x324>)
 8008440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800844c:	d014      	beq.n	8008478 <UART_SetConfig+0x2a8>
 800844e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008452:	d802      	bhi.n	800845a <UART_SetConfig+0x28a>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <UART_SetConfig+0x298>
 8008458:	e016      	b.n	8008488 <UART_SetConfig+0x2b8>
 800845a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800845e:	d007      	beq.n	8008470 <UART_SetConfig+0x2a0>
 8008460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008464:	d00c      	beq.n	8008480 <UART_SetConfig+0x2b0>
 8008466:	e00f      	b.n	8008488 <UART_SetConfig+0x2b8>
 8008468:	2300      	movs	r3, #0
 800846a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800846e:	e013      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008470:	2302      	movs	r3, #2
 8008472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008476:	e00f      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008478:	2304      	movs	r3, #4
 800847a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800847e:	e00b      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008480:	2308      	movs	r3, #8
 8008482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008486:	e007      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008488:	2310      	movs	r3, #16
 800848a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800848e:	bf00      	nop
 8008490:	e002      	b.n	8008498 <UART_SetConfig+0x2c8>
 8008492:	2310      	movs	r3, #16
 8008494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a13      	ldr	r2, [pc, #76]	; (80084ec <UART_SetConfig+0x31c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	f040 80fe 	bne.w	80086a0 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d837      	bhi.n	800851c <UART_SetConfig+0x34c>
 80084ac:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <UART_SetConfig+0x2e4>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080084d9 	.word	0x080084d9
 80084b8:	0800851d 	.word	0x0800851d
 80084bc:	080084e1 	.word	0x080084e1
 80084c0:	0800851d 	.word	0x0800851d
 80084c4:	0800850d 	.word	0x0800850d
 80084c8:	0800851d 	.word	0x0800851d
 80084cc:	0800851d 	.word	0x0800851d
 80084d0:	0800851d 	.word	0x0800851d
 80084d4:	08008515 	.word	0x08008515
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80084d8:	f7fd fadc 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 80084dc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80084de:	e020      	b.n	8008522 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80084e0:	4b09      	ldr	r3, [pc, #36]	; (8008508 <UART_SetConfig+0x338>)
 80084e2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80084e4:	e01d      	b.n	8008522 <UART_SetConfig+0x352>
 80084e6:	bf00      	nop
 80084e8:	efff69f3 	.word	0xefff69f3
 80084ec:	40008000 	.word	0x40008000
 80084f0:	40013800 	.word	0x40013800
 80084f4:	40021000 	.word	0x40021000
 80084f8:	40004400 	.word	0x40004400
 80084fc:	40004800 	.word	0x40004800
 8008500:	40004c00 	.word	0x40004c00
 8008504:	40005000 	.word	0x40005000
 8008508:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800850c:	f7fd fa2c 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8008510:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008512:	e006      	b.n	8008522 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8008514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008518:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800851a:	e002      	b.n	8008522 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	76fb      	strb	r3, [r7, #27]
        break;
 8008520:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 81b9 	beq.w	800889c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	429a      	cmp	r2, r3
 8008538:	d305      	bcc.n	8008546 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	429a      	cmp	r2, r3
 8008544:	d902      	bls.n	800854c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	76fb      	strb	r3, [r7, #27]
 800854a:	e1a7      	b.n	800889c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800854c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008550:	2b08      	cmp	r3, #8
 8008552:	f200 8092 	bhi.w	800867a <UART_SetConfig+0x4aa>
 8008556:	a201      	add	r2, pc, #4	; (adr r2, 800855c <UART_SetConfig+0x38c>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	08008581 	.word	0x08008581
 8008560:	0800867b 	.word	0x0800867b
 8008564:	080085cf 	.word	0x080085cf
 8008568:	0800867b 	.word	0x0800867b
 800856c:	08008603 	.word	0x08008603
 8008570:	0800867b 	.word	0x0800867b
 8008574:	0800867b 	.word	0x0800867b
 8008578:	0800867b 	.word	0x0800867b
 800857c:	08008651 	.word	0x08008651
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8008580:	f7fd fa88 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8008584:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	4619      	mov	r1, r3
 800858a:	f04f 0200 	mov.w	r2, #0
 800858e:	f04f 0300 	mov.w	r3, #0
 8008592:	f04f 0400 	mov.w	r4, #0
 8008596:	0214      	lsls	r4, r2, #8
 8008598:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800859c:	020b      	lsls	r3, r1, #8
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6852      	ldr	r2, [r2, #4]
 80085a2:	0852      	lsrs	r2, r2, #1
 80085a4:	4611      	mov	r1, r2
 80085a6:	f04f 0200 	mov.w	r2, #0
 80085aa:	eb13 0b01 	adds.w	fp, r3, r1
 80085ae:	eb44 0c02 	adc.w	ip, r4, r2
 80085b2:	4658      	mov	r0, fp
 80085b4:	4661      	mov	r1, ip
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f04f 0400 	mov.w	r4, #0
 80085be:	461a      	mov	r2, r3
 80085c0:	4623      	mov	r3, r4
 80085c2:	f7f7 fe1b 	bl	80001fc <__aeabi_uldivmod>
 80085c6:	4603      	mov	r3, r0
 80085c8:	460c      	mov	r4, r1
 80085ca:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80085cc:	e058      	b.n	8008680 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	085b      	lsrs	r3, r3, #1
 80085d4:	f04f 0400 	mov.w	r4, #0
 80085d8:	49ae      	ldr	r1, [pc, #696]	; (8008894 <UART_SetConfig+0x6c4>)
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	eb13 0b01 	adds.w	fp, r3, r1
 80085e2:	eb44 0c02 	adc.w	ip, r4, r2
 80085e6:	4658      	mov	r0, fp
 80085e8:	4661      	mov	r1, ip
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f04f 0400 	mov.w	r4, #0
 80085f2:	461a      	mov	r2, r3
 80085f4:	4623      	mov	r3, r4
 80085f6:	f7f7 fe01 	bl	80001fc <__aeabi_uldivmod>
 80085fa:	4603      	mov	r3, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008600:	e03e      	b.n	8008680 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8008602:	f7fd f9b1 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8008606:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	4619      	mov	r1, r3
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	f04f 0400 	mov.w	r4, #0
 8008618:	0214      	lsls	r4, r2, #8
 800861a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800861e:	020b      	lsls	r3, r1, #8
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	6852      	ldr	r2, [r2, #4]
 8008624:	0852      	lsrs	r2, r2, #1
 8008626:	4611      	mov	r1, r2
 8008628:	f04f 0200 	mov.w	r2, #0
 800862c:	eb13 0b01 	adds.w	fp, r3, r1
 8008630:	eb44 0c02 	adc.w	ip, r4, r2
 8008634:	4658      	mov	r0, fp
 8008636:	4661      	mov	r1, ip
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f04f 0400 	mov.w	r4, #0
 8008640:	461a      	mov	r2, r3
 8008642:	4623      	mov	r3, r4
 8008644:	f7f7 fdda 	bl	80001fc <__aeabi_uldivmod>
 8008648:	4603      	mov	r3, r0
 800864a:	460c      	mov	r4, r1
 800864c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800864e:	e017      	b.n	8008680 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	f04f 0400 	mov.w	r4, #0
 800865a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800865e:	f144 0100 	adc.w	r1, r4, #0
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f04f 0400 	mov.w	r4, #0
 800866a:	461a      	mov	r2, r3
 800866c:	4623      	mov	r3, r4
 800866e:	f7f7 fdc5 	bl	80001fc <__aeabi_uldivmod>
 8008672:	4603      	mov	r3, r0
 8008674:	460c      	mov	r4, r1
 8008676:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008678:	e002      	b.n	8008680 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	76fb      	strb	r3, [r7, #27]
            break;
 800867e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008686:	d308      	bcc.n	800869a <UART_SetConfig+0x4ca>
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800868e:	d204      	bcs.n	800869a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69fa      	ldr	r2, [r7, #28]
 8008696:	60da      	str	r2, [r3, #12]
 8008698:	e100      	b.n	800889c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	76fb      	strb	r3, [r7, #27]
 800869e:	e0fd      	b.n	800889c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086a8:	f040 8084 	bne.w	80087b4 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80086ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d85f      	bhi.n	8008774 <UART_SetConfig+0x5a4>
 80086b4:	a201      	add	r2, pc, #4	; (adr r2, 80086bc <UART_SetConfig+0x4ec>)
 80086b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ba:	bf00      	nop
 80086bc:	080086e1 	.word	0x080086e1
 80086c0:	08008701 	.word	0x08008701
 80086c4:	08008721 	.word	0x08008721
 80086c8:	08008775 	.word	0x08008775
 80086cc:	0800873d 	.word	0x0800873d
 80086d0:	08008775 	.word	0x08008775
 80086d4:	08008775 	.word	0x08008775
 80086d8:	08008775 	.word	0x08008775
 80086dc:	0800875d 	.word	0x0800875d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086e0:	f7fd f9d8 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 80086e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	005a      	lsls	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	085b      	lsrs	r3, r3, #1
 80086f0:	441a      	add	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80086fe:	e03c      	b.n	800877a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008700:	f7fd f9de 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 8008704:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	005a      	lsls	r2, r3, #1
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	085b      	lsrs	r3, r3, #1
 8008710:	441a      	add	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	fbb2 f3f3 	udiv	r3, r2, r3
 800871a:	b29b      	uxth	r3, r3
 800871c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800871e:	e02c      	b.n	800877a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800872a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	6852      	ldr	r2, [r2, #4]
 8008732:	fbb3 f3f2 	udiv	r3, r3, r2
 8008736:	b29b      	uxth	r3, r3
 8008738:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800873a:	e01e      	b.n	800877a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800873c:	f7fd f914 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8008740:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	005a      	lsls	r2, r3, #1
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	085b      	lsrs	r3, r3, #1
 800874c:	441a      	add	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	fbb2 f3f3 	udiv	r3, r2, r3
 8008756:	b29b      	uxth	r3, r3
 8008758:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800875a:	e00e      	b.n	800877a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	085b      	lsrs	r3, r3, #1
 8008762:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	fbb2 f3f3 	udiv	r3, r2, r3
 800876e:	b29b      	uxth	r3, r3
 8008770:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008772:	e002      	b.n	800877a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	76fb      	strb	r3, [r7, #27]
        break;
 8008778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	2b0f      	cmp	r3, #15
 800877e:	d916      	bls.n	80087ae <UART_SetConfig+0x5de>
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008786:	d212      	bcs.n	80087ae <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	b29b      	uxth	r3, r3
 800878c:	f023 030f 	bic.w	r3, r3, #15
 8008790:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	085b      	lsrs	r3, r3, #1
 8008796:	b29b      	uxth	r3, r3
 8008798:	f003 0307 	and.w	r3, r3, #7
 800879c:	b29a      	uxth	r2, r3
 800879e:	89fb      	ldrh	r3, [r7, #14]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	89fa      	ldrh	r2, [r7, #14]
 80087aa:	60da      	str	r2, [r3, #12]
 80087ac:	e076      	b.n	800889c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	76fb      	strb	r3, [r7, #27]
 80087b2:	e073      	b.n	800889c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80087b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d85c      	bhi.n	8008876 <UART_SetConfig+0x6a6>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <UART_SetConfig+0x5f4>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087e9 	.word	0x080087e9
 80087c8:	08008807 	.word	0x08008807
 80087cc:	08008825 	.word	0x08008825
 80087d0:	08008877 	.word	0x08008877
 80087d4:	08008841 	.word	0x08008841
 80087d8:	08008877 	.word	0x08008877
 80087dc:	08008877 	.word	0x08008877
 80087e0:	08008877 	.word	0x08008877
 80087e4:	0800885f 	.word	0x0800885f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087e8:	f7fd f954 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 80087ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	085a      	lsrs	r2, r3, #1
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	441a      	add	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008800:	b29b      	uxth	r3, r3
 8008802:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008804:	e03a      	b.n	800887c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008806:	f7fd f95b 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 800880a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	085a      	lsrs	r2, r3, #1
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	441a      	add	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	fbb2 f3f3 	udiv	r3, r2, r3
 800881e:	b29b      	uxth	r3, r3
 8008820:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008822:	e02b      	b.n	800887c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	085b      	lsrs	r3, r3, #1
 800882a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800882e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6852      	ldr	r2, [r2, #4]
 8008836:	fbb3 f3f2 	udiv	r3, r3, r2
 800883a:	b29b      	uxth	r3, r3
 800883c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800883e:	e01d      	b.n	800887c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008840:	f7fd f892 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8008844:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	085a      	lsrs	r2, r3, #1
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	441a      	add	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	fbb2 f3f3 	udiv	r3, r2, r3
 8008858:	b29b      	uxth	r3, r3
 800885a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800885c:	e00e      	b.n	800887c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008870:	b29b      	uxth	r3, r3
 8008872:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008874:	e002      	b.n	800887c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	76fb      	strb	r3, [r7, #27]
        break;
 800887a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	2b0f      	cmp	r3, #15
 8008880:	d90a      	bls.n	8008898 <UART_SetConfig+0x6c8>
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008888:	d206      	bcs.n	8008898 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	60da      	str	r2, [r3, #12]
 8008892:	e003      	b.n	800889c <UART_SetConfig+0x6cc>
 8008894:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80088a8:	7efb      	ldrb	r3, [r7, #27]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3728      	adds	r7, #40	; 0x28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080088b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008990:	2b00      	cmp	r3, #0
 8008992:	d01a      	beq.n	80089ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089b2:	d10a      	bne.n	80089ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008a06:	f7f9 fbc7 	bl	8002198 <HAL_GetTick>
 8008a0a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0308 	and.w	r3, r3, #8
 8008a16:	2b08      	cmp	r3, #8
 8008a18:	d10e      	bne.n	8008a38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f82a 	bl	8008a82 <UART_WaitOnFlagUntilTimeout>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e020      	b.n	8008a7a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0304 	and.w	r3, r3, #4
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d10e      	bne.n	8008a64 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f814 	bl	8008a82 <UART_WaitOnFlagUntilTimeout>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e00a      	b.n	8008a7a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a92:	e05d      	b.n	8008b50 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d059      	beq.n	8008b50 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9c:	f7f9 fb7c 	bl	8002198 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d302      	bcc.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d11b      	bne.n	8008aea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ac0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0201 	bic.w	r2, r2, #1
 8008ad0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2220      	movs	r2, #32
 8008adc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e042      	b.n	8008b70 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d02b      	beq.n	8008b50 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b06:	d123      	bne.n	8008b50 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b10:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b20:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0201 	bic.w	r2, r2, #1
 8008b30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2220      	movs	r2, #32
 8008b42:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e00f      	b.n	8008b70 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69da      	ldr	r2, [r3, #28]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	bf0c      	ite	eq
 8008b60:	2301      	moveq	r3, #1
 8008b62:	2300      	movne	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	461a      	mov	r2, r3
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d092      	beq.n	8008a94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	6812      	ldr	r2, [r2, #0]
 8008b90:	f023 0101 	bic.w	r1, r3, #1
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d102      	bne.n	8008ba8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008ba2:	2340      	movs	r3, #64	; 0x40
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e001      	b.n	8008bac <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008bb8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008bbe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008bc4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008bca:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008bd0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008bd6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008bdc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008be2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008be8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8008c10:	4b20      	ldr	r3, [pc, #128]	; (8008c94 <FMC_NORSRAM_Init+0x11c>)
 8008c12:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c1a:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c22:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008c2a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	43db      	mvns	r3, r3
 8008c3a:	ea02 0103 	and.w	r1, r2, r3
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	4319      	orrs	r1, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c54:	d10c      	bne.n	8008c70 <FMC_NORSRAM_Init+0xf8>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d008      	beq.n	8008c70 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d006      	beq.n	8008c86 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c80:	431a      	orrs	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	371c      	adds	r7, #28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	0008fb7f 	.word	0x0008fb7f

08008c98 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cae:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	021b      	lsls	r3, r3, #8
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	041b      	lsls	r3, r3, #16
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	051b      	lsls	r3, r3, #20
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	3b02      	subs	r3, #2
 8008cde:	061b      	lsls	r3, r3, #24
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	3201      	adds	r2, #1
 8008cec:	4319      	orrs	r1, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d00:	d113      	bne.n	8008d2a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d0a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	051b      	lsls	r3, r3, #20
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d4c:	d11d      	bne.n	8008d8a <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d56:	4b13      	ldr	r3, [pc, #76]	; (8008da4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008d58:	4013      	ands	r3, r2
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	6811      	ldr	r1, [r2, #0]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	6852      	ldr	r2, [r2, #4]
 8008d62:	0112      	lsls	r2, r2, #4
 8008d64:	4311      	orrs	r1, r2
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	6892      	ldr	r2, [r2, #8]
 8008d6a:	0212      	lsls	r2, r2, #8
 8008d6c:	4311      	orrs	r1, r2
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	69d2      	ldr	r2, [r2, #28]
 8008d72:	4311      	orrs	r1, r2
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	6912      	ldr	r2, [r2, #16]
 8008d78:	0412      	lsls	r2, r2, #16
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	ea43 0102 	orr.w	r1, r3, r2
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008d88:	e005      	b.n	8008d96 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	cff00000 	.word	0xcff00000

08008da8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008da8:	b084      	sub	sp, #16
 8008daa:	b480      	push	{r7}
 8008dac:	b085      	sub	sp, #20
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	f107 001c 	add.w	r0, r7, #28
 8008db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008dc6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008dca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008dce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008dd2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008dd6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008de6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	b004      	add	sp, #16
 8008e00:	4770      	bx	lr

08008e02 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2203      	movs	r2, #3
 8008e28:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008e2a:	2002      	movs	r0, #2
 8008e2c:	f7f9 f9c0 	bl	80021b0 <HAL_Delay>

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0303 	and.w	r3, r3, #3
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008e74:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008e7a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008e80:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008e90:	f023 030f 	bic.w	r3, r3, #15
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	431a      	orrs	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	b2db      	uxtb	r3, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3314      	adds	r3, #20
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f10:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008f16:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008f1c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0

}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b088      	sub	sp, #32
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008f50:	2310      	movs	r3, #16
 8008f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f54:	2340      	movs	r3, #64	; 0x40
 8008f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f62:	f107 0308 	add.w	r3, r7, #8
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff ff74 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f72:	2110      	movs	r1, #16
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f975 	bl	8009264 <SDMMC_GetCmdResp1>
 8008f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3720      	adds	r7, #32
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b08a      	sub	sp, #40	; 0x28
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f96:	2307      	movs	r3, #7
 8008f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f9a:	2340      	movs	r3, #64	; 0x40
 8008f9c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fa6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fa8:	f107 0310 	add.w	r3, r7, #16
 8008fac:	4619      	mov	r1, r3
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff ff51 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb8:	2107      	movs	r1, #7
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 f952 	bl	8009264 <SDMMC_GetCmdResp1>
 8008fc0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3728      	adds	r7, #40	; 0x28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b088      	sub	sp, #32
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fea:	f107 0308 	add.w	r3, r7, #8
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff ff30 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f90c 	bl	8009214 <SDMMC_GetCmdError>
 8008ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3720      	adds	r7, #32
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009010:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009016:	2308      	movs	r3, #8
 8009018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800901a:	2340      	movs	r3, #64	; 0x40
 800901c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800901e:	2300      	movs	r3, #0
 8009020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009026:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009028:	f107 0308 	add.w	r3, r7, #8
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff ff11 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 faf5 	bl	8009624 <SDMMC_GetCmdResp7>
 800903a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800903c:	69fb      	ldr	r3, [r7, #28]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3720      	adds	r7, #32
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b088      	sub	sp, #32
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009054:	2337      	movs	r3, #55	; 0x37
 8009056:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009058:	2340      	movs	r3, #64	; 0x40
 800905a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009064:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009066:	f107 0308 	add.w	r3, r7, #8
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7ff fef2 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009072:	f241 3288 	movw	r2, #5000	; 0x1388
 8009076:	2137      	movs	r1, #55	; 0x37
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f8f3 	bl	8009264 <SDMMC_GetCmdResp1>
 800907e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009080:	69fb      	ldr	r3, [r7, #28]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b088      	sub	sp, #32
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800909a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800909e:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80090a0:	2329      	movs	r3, #41	; 0x29
 80090a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090a4:	2340      	movs	r3, #64	; 0x40
 80090a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff fecc 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fa02 	bl	80094c8 <SDMMC_GetCmdResp3>
 80090c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090c6:	69fb      	ldr	r3, [r7, #28]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3720      	adds	r7, #32
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80090de:	2306      	movs	r3, #6
 80090e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090e2:	2340      	movs	r3, #64	; 0x40
 80090e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090e6:	2300      	movs	r3, #0
 80090e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090f0:	f107 0308 	add.w	r3, r7, #8
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fead 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80090fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009100:	2106      	movs	r1, #6
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f8ae 	bl	8009264 <SDMMC_GetCmdResp1>
 8009108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910a:	69fb      	ldr	r3, [r7, #28]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009120:	2333      	movs	r3, #51	; 0x33
 8009122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009124:	2340      	movs	r3, #64	; 0x40
 8009126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009128:	2300      	movs	r3, #0
 800912a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800912c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009132:	f107 0308 	add.w	r3, r7, #8
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fe8c 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800913e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009142:	2133      	movs	r1, #51	; 0x33
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f88d 	bl	8009264 <SDMMC_GetCmdResp1>
 800914a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800914c:	69fb      	ldr	r3, [r7, #28]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b088      	sub	sp, #32
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009162:	2302      	movs	r3, #2
 8009164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009166:	23c0      	movs	r3, #192	; 0xc0
 8009168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800916e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009174:	f107 0308 	add.w	r3, r7, #8
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fe6b 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f95b 	bl	800943c <SDMMC_GetCmdResp2>
 8009186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009188:	69fb      	ldr	r3, [r7, #28]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3720      	adds	r7, #32
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b088      	sub	sp, #32
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80091a0:	2309      	movs	r3, #9
 80091a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80091a4:	23c0      	movs	r3, #192	; 0xc0
 80091a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091b2:	f107 0308 	add.w	r3, r7, #8
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff fe4c 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f93c 	bl	800943c <SDMMC_GetCmdResp2>
 80091c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091c6:	69fb      	ldr	r3, [r7, #28]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3720      	adds	r7, #32
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80091de:	2303      	movs	r3, #3
 80091e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091e6:	2300      	movs	r3, #0
 80091e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091f0:	f107 0308 	add.w	r3, r7, #8
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff fe2d 	bl	8008e56 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	2103      	movs	r1, #3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f99b 	bl	800953c <SDMMC_GetCmdResp6>
 8009206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009208:	69fb      	ldr	r3, [r7, #28]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3720      	adds	r7, #32
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009214:	b490      	push	{r4, r7}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800921c:	4b0f      	ldr	r3, [pc, #60]	; (800925c <SDMMC_GetCmdError+0x48>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a0f      	ldr	r2, [pc, #60]	; (8009260 <SDMMC_GetCmdError+0x4c>)
 8009222:	fba2 2303 	umull	r2, r3, r2, r3
 8009226:	0a5b      	lsrs	r3, r3, #9
 8009228:	f241 3288 	movw	r2, #5000	; 0x1388
 800922c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8009230:	4623      	mov	r3, r4
 8009232:	1e5c      	subs	r4, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800923c:	e009      	b.n	8009252 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0f2      	beq.n	8009230 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	22c5      	movs	r2, #197	; 0xc5
 800924e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bc90      	pop	{r4, r7}
 800925a:	4770      	bx	lr
 800925c:	20000008 	.word	0x20000008
 8009260:	10624dd3 	.word	0x10624dd3

08009264 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009264:	b590      	push	{r4, r7, lr}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	460b      	mov	r3, r1
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009272:	4b6f      	ldr	r3, [pc, #444]	; (8009430 <SDMMC_GetCmdResp1+0x1cc>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a6f      	ldr	r2, [pc, #444]	; (8009434 <SDMMC_GetCmdResp1+0x1d0>)
 8009278:	fba2 2303 	umull	r2, r3, r2, r3
 800927c:	0a5b      	lsrs	r3, r3, #9
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8009284:	4623      	mov	r3, r4
 8009286:	1e5c      	subs	r4, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d102      	bne.n	8009292 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800928c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009290:	e0c9      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009296:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0f0      	beq.n	8009284 <SDMMC_GetCmdResp1+0x20>
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1eb      	bne.n	8009284 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2204      	movs	r2, #4
 80092bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092be:	2304      	movs	r3, #4
 80092c0:	e0b1      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d004      	beq.n	80092d8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2201      	movs	r2, #1
 80092d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e0a6      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	22c5      	movs	r2, #197	; 0xc5
 80092dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7ff fde3 	bl	8008eaa <SDMMC_GetCommandResponse>
 80092e4:	4603      	mov	r3, r0
 80092e6:	461a      	mov	r2, r3
 80092e8:	7afb      	ldrb	r3, [r7, #11]
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d001      	beq.n	80092f2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e099      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80092f2:	2100      	movs	r1, #0
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f7ff fde5 	bl	8008ec4 <SDMMC_GetResponse>
 80092fa:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	4b4e      	ldr	r3, [pc, #312]	; (8009438 <SDMMC_GetCmdResp1+0x1d4>)
 8009300:	4013      	ands	r3, r2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009306:	2300      	movs	r3, #0
 8009308:	e08d      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	da02      	bge.n	8009316 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009314:	e087      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009320:	2340      	movs	r3, #64	; 0x40
 8009322:	e080      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800932e:	2380      	movs	r3, #128	; 0x80
 8009330:	e079      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800933c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009340:	e071      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800934c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009350:	e069      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800935c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009360:	e061      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800936c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009370:	e059      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800937c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009380:	e051      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800938c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009390:	e049      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800939c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093a0:	e041      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80093ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093b0:	e039      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80093bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80093c0:	e031      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80093cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093d0:	e029      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80093dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80093e0:	e021      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80093ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093f0:	e019      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80093fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009400:	e011      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800940c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009410:	e009      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f003 0308 	and.w	r3, r3, #8
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800941c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009420:	e001      	b.n	8009426 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009426:	4618      	mov	r0, r3
 8009428:	371c      	adds	r7, #28
 800942a:	46bd      	mov	sp, r7
 800942c:	bd90      	pop	{r4, r7, pc}
 800942e:	bf00      	nop
 8009430:	20000008 	.word	0x20000008
 8009434:	10624dd3 	.word	0x10624dd3
 8009438:	fdffe008 	.word	0xfdffe008

0800943c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800943c:	b490      	push	{r4, r7}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009444:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <SDMMC_GetCmdResp2+0x84>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a1e      	ldr	r2, [pc, #120]	; (80094c4 <SDMMC_GetCmdResp2+0x88>)
 800944a:	fba2 2303 	umull	r2, r3, r2, r3
 800944e:	0a5b      	lsrs	r3, r3, #9
 8009450:	f241 3288 	movw	r2, #5000	; 0x1388
 8009454:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8009458:	4623      	mov	r3, r4
 800945a:	1e5c      	subs	r4, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d102      	bne.n	8009466 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009464:	e026      	b.n	80094b4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0f0      	beq.n	8009458 <SDMMC_GetCmdResp2+0x1c>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1eb      	bne.n	8009458 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	d004      	beq.n	8009496 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2204      	movs	r2, #4
 8009490:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009492:	2304      	movs	r3, #4
 8009494:	e00e      	b.n	80094b4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d004      	beq.n	80094ac <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e003      	b.n	80094b4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	22c5      	movs	r2, #197	; 0xc5
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bc90      	pop	{r4, r7}
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	20000008 	.word	0x20000008
 80094c4:	10624dd3 	.word	0x10624dd3

080094c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80094c8:	b490      	push	{r4, r7}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094d0:	4b18      	ldr	r3, [pc, #96]	; (8009534 <SDMMC_GetCmdResp3+0x6c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a18      	ldr	r2, [pc, #96]	; (8009538 <SDMMC_GetCmdResp3+0x70>)
 80094d6:	fba2 2303 	umull	r2, r3, r2, r3
 80094da:	0a5b      	lsrs	r3, r3, #9
 80094dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80094e4:	4623      	mov	r3, r4
 80094e6:	1e5c      	subs	r4, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094f0:	e01b      	b.n	800952a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0f0      	beq.n	80094e4 <SDMMC_GetCmdResp3+0x1c>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1eb      	bne.n	80094e4 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d004      	beq.n	8009522 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2204      	movs	r2, #4
 800951c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800951e:	2304      	movs	r3, #4
 8009520:	e003      	b.n	800952a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	22c5      	movs	r2, #197	; 0xc5
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bc90      	pop	{r4, r7}
 8009532:	4770      	bx	lr
 8009534:	20000008 	.word	0x20000008
 8009538:	10624dd3 	.word	0x10624dd3

0800953c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800953c:	b590      	push	{r4, r7, lr}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	460b      	mov	r3, r1
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800954a:	4b34      	ldr	r3, [pc, #208]	; (800961c <SDMMC_GetCmdResp6+0xe0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a34      	ldr	r2, [pc, #208]	; (8009620 <SDMMC_GetCmdResp6+0xe4>)
 8009550:	fba2 2303 	umull	r2, r3, r2, r3
 8009554:	0a5b      	lsrs	r3, r3, #9
 8009556:	f241 3288 	movw	r2, #5000	; 0x1388
 800955a:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800955e:	4623      	mov	r3, r4
 8009560:	1e5c      	subs	r4, r3, #1
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009566:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800956a:	e052      	b.n	8009612 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009570:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009578:	2b00      	cmp	r3, #0
 800957a:	d0f0      	beq.n	800955e <SDMMC_GetCmdResp6+0x22>
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1eb      	bne.n	800955e <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	2b00      	cmp	r3, #0
 8009590:	d004      	beq.n	800959c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2204      	movs	r2, #4
 8009596:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009598:	2304      	movs	r3, #4
 800959a:	e03a      	b.n	8009612 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e02f      	b.n	8009612 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7ff fc79 	bl	8008eaa <SDMMC_GetCommandResponse>
 80095b8:	4603      	mov	r3, r0
 80095ba:	461a      	mov	r2, r3
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	4293      	cmp	r3, r2
 80095c0:	d001      	beq.n	80095c6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e025      	b.n	8009612 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	22c5      	movs	r2, #197	; 0xc5
 80095ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80095cc:	2100      	movs	r1, #0
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f7ff fc78 	bl	8008ec4 <SDMMC_GetResponse>
 80095d4:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d106      	bne.n	80095ee <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	0c1b      	lsrs	r3, r3, #16
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	e011      	b.n	8009612 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095fc:	e009      	b.n	8009612 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800960c:	e001      	b.n	8009612 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800960e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009612:	4618      	mov	r0, r3
 8009614:	371c      	adds	r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	bd90      	pop	{r4, r7, pc}
 800961a:	bf00      	nop
 800961c:	20000008 	.word	0x20000008
 8009620:	10624dd3 	.word	0x10624dd3

08009624 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009624:	b490      	push	{r4, r7}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800962c:	4b21      	ldr	r3, [pc, #132]	; (80096b4 <SDMMC_GetCmdResp7+0x90>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a21      	ldr	r2, [pc, #132]	; (80096b8 <SDMMC_GetCmdResp7+0x94>)
 8009632:	fba2 2303 	umull	r2, r3, r2, r3
 8009636:	0a5b      	lsrs	r3, r3, #9
 8009638:	f241 3288 	movw	r2, #5000	; 0x1388
 800963c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8009640:	4623      	mov	r3, r4
 8009642:	1e5c      	subs	r4, r3, #1
 8009644:	2b00      	cmp	r3, #0
 8009646:	d102      	bne.n	800964e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009648:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800964c:	e02c      	b.n	80096a8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009652:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0f0      	beq.n	8009640 <SDMMC_GetCmdResp7+0x1c>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1eb      	bne.n	8009640 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2204      	movs	r2, #4
 8009678:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800967a:	2304      	movs	r3, #4
 800967c:	e014      	b.n	80096a8 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b00      	cmp	r3, #0
 8009688:	d004      	beq.n	8009694 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009690:	2301      	movs	r3, #1
 8009692:	e009      	b.n	80096a8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2240      	movs	r2, #64	; 0x40
 80096a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80096a6:	2300      	movs	r3, #0

}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc90      	pop	{r4, r7}
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000008 	.word	0x20000008
 80096b8:	10624dd3 	.word	0x10624dd3

080096bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096bc:	b084      	sub	sp, #16
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	f107 001c 	add.w	r0, r7, #28
 80096ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d122      	bne.n	800971a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80096e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d105      	bne.n	800970e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 f9c8 	bl	800aaa4 <USB_CoreReset>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
 8009718:	e01a      	b.n	8009750 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 f9bc 	bl	800aaa4 <USB_CoreReset>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	d106      	bne.n	8009744 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	639a      	str	r2, [r3, #56]	; 0x38
 8009742:	e005      	b.n	8009750 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800975c:	b004      	add	sp, #16
 800975e:	4770      	bx	lr

08009760 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	4613      	mov	r3, r2
 800976c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d165      	bne.n	8009840 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4a3e      	ldr	r2, [pc, #248]	; (8009870 <USB_SetTurnaroundTime+0x110>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d906      	bls.n	800978a <USB_SetTurnaroundTime+0x2a>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4a3d      	ldr	r2, [pc, #244]	; (8009874 <USB_SetTurnaroundTime+0x114>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d802      	bhi.n	800978a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009784:	230f      	movs	r3, #15
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e05c      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	4a39      	ldr	r2, [pc, #228]	; (8009874 <USB_SetTurnaroundTime+0x114>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d906      	bls.n	80097a0 <USB_SetTurnaroundTime+0x40>
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	4a38      	ldr	r2, [pc, #224]	; (8009878 <USB_SetTurnaroundTime+0x118>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d802      	bhi.n	80097a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800979a:	230e      	movs	r3, #14
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	e051      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4a35      	ldr	r2, [pc, #212]	; (8009878 <USB_SetTurnaroundTime+0x118>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d906      	bls.n	80097b6 <USB_SetTurnaroundTime+0x56>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	4a34      	ldr	r2, [pc, #208]	; (800987c <USB_SetTurnaroundTime+0x11c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d802      	bhi.n	80097b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80097b0:	230d      	movs	r3, #13
 80097b2:	617b      	str	r3, [r7, #20]
 80097b4:	e046      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4a30      	ldr	r2, [pc, #192]	; (800987c <USB_SetTurnaroundTime+0x11c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d906      	bls.n	80097cc <USB_SetTurnaroundTime+0x6c>
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	4a2f      	ldr	r2, [pc, #188]	; (8009880 <USB_SetTurnaroundTime+0x120>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d802      	bhi.n	80097cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80097c6:	230c      	movs	r3, #12
 80097c8:	617b      	str	r3, [r7, #20]
 80097ca:	e03b      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	4a2c      	ldr	r2, [pc, #176]	; (8009880 <USB_SetTurnaroundTime+0x120>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d906      	bls.n	80097e2 <USB_SetTurnaroundTime+0x82>
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4a2b      	ldr	r2, [pc, #172]	; (8009884 <USB_SetTurnaroundTime+0x124>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d802      	bhi.n	80097e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80097dc:	230b      	movs	r3, #11
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	e030      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	4a27      	ldr	r2, [pc, #156]	; (8009884 <USB_SetTurnaroundTime+0x124>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d906      	bls.n	80097f8 <USB_SetTurnaroundTime+0x98>
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	4a26      	ldr	r2, [pc, #152]	; (8009888 <USB_SetTurnaroundTime+0x128>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d802      	bhi.n	80097f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097f2:	230a      	movs	r3, #10
 80097f4:	617b      	str	r3, [r7, #20]
 80097f6:	e025      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4a23      	ldr	r2, [pc, #140]	; (8009888 <USB_SetTurnaroundTime+0x128>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d906      	bls.n	800980e <USB_SetTurnaroundTime+0xae>
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4a22      	ldr	r2, [pc, #136]	; (800988c <USB_SetTurnaroundTime+0x12c>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d802      	bhi.n	800980e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009808:	2309      	movs	r3, #9
 800980a:	617b      	str	r3, [r7, #20]
 800980c:	e01a      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4a1e      	ldr	r2, [pc, #120]	; (800988c <USB_SetTurnaroundTime+0x12c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d906      	bls.n	8009824 <USB_SetTurnaroundTime+0xc4>
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	4a1d      	ldr	r2, [pc, #116]	; (8009890 <USB_SetTurnaroundTime+0x130>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d802      	bhi.n	8009824 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800981e:	2308      	movs	r3, #8
 8009820:	617b      	str	r3, [r7, #20]
 8009822:	e00f      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4a1a      	ldr	r2, [pc, #104]	; (8009890 <USB_SetTurnaroundTime+0x130>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d906      	bls.n	800983a <USB_SetTurnaroundTime+0xda>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4a19      	ldr	r2, [pc, #100]	; (8009894 <USB_SetTurnaroundTime+0x134>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d802      	bhi.n	800983a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009834:	2307      	movs	r3, #7
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e004      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800983a:	2306      	movs	r3, #6
 800983c:	617b      	str	r3, [r7, #20]
 800983e:	e001      	b.n	8009844 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009840:	2309      	movs	r3, #9
 8009842:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	68da      	ldr	r2, [r3, #12]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	029b      	lsls	r3, r3, #10
 8009858:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800985c:	431a      	orrs	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	371c      	adds	r7, #28
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	00d8acbf 	.word	0x00d8acbf
 8009874:	00e4e1bf 	.word	0x00e4e1bf
 8009878:	00f423ff 	.word	0x00f423ff
 800987c:	0106737f 	.word	0x0106737f
 8009880:	011a499f 	.word	0x011a499f
 8009884:	01312cff 	.word	0x01312cff
 8009888:	014ca43f 	.word	0x014ca43f
 800988c:	016e35ff 	.word	0x016e35ff
 8009890:	01a6ab1f 	.word	0x01a6ab1f
 8009894:	01e847ff 	.word	0x01e847ff

08009898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	f043 0201 	orr.w	r2, r3, #1
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f023 0201 	bic.w	r2, r3, #1
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d106      	bne.n	8009908 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	60da      	str	r2, [r3, #12]
 8009906:	e00b      	b.n	8009920 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d106      	bne.n	800991c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60da      	str	r2, [r3, #12]
 800991a:	e001      	b.n	8009920 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e003      	b.n	8009928 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009920:	2032      	movs	r0, #50	; 0x32
 8009922:	f7f8 fc45 	bl	80021b0 <HAL_Delay>

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009930:	b084      	sub	sp, #16
 8009932:	b580      	push	{r7, lr}
 8009934:	b086      	sub	sp, #24
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800993e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800994a:	2300      	movs	r3, #0
 800994c:	613b      	str	r3, [r7, #16]
 800994e:	e009      	b.n	8009964 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	3340      	adds	r3, #64	; 0x40
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	2200      	movs	r2, #0
 800995c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	3301      	adds	r3, #1
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	2b0e      	cmp	r3, #14
 8009968:	d9f2      	bls.n	8009950 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800996a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d11c      	bne.n	80099aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800997e:	f043 0302 	orr.w	r3, r3, #2
 8009982:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009988:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	e005      	b.n	80099b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099bc:	461a      	mov	r2, r3
 80099be:	2300      	movs	r3, #0
 80099c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c8:	4619      	mov	r1, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d0:	461a      	mov	r2, r3
 80099d2:	680b      	ldr	r3, [r1, #0]
 80099d4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099d6:	2103      	movs	r1, #3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f93d 	bl	8009c58 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099de:	2110      	movs	r1, #16
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f8f1 	bl	8009bc8 <USB_FlushTxFifo>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f90f 	bl	8009c14 <USB_FlushRxFifo>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a06:	461a      	mov	r2, r3
 8009a08:	2300      	movs	r3, #0
 8009a0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a12:	461a      	mov	r2, r3
 8009a14:	2300      	movs	r3, #0
 8009a16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1e:	461a      	mov	r2, r3
 8009a20:	2300      	movs	r3, #0
 8009a22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a24:	2300      	movs	r3, #0
 8009a26:	613b      	str	r3, [r7, #16]
 8009a28:	e043      	b.n	8009ab2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a40:	d118      	bne.n	8009a74 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a54:	461a      	mov	r2, r3
 8009a56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	e013      	b.n	8009a86 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	e008      	b.n	8009a86 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a80:	461a      	mov	r2, r3
 8009a82:	2300      	movs	r3, #0
 8009a84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a92:	461a      	mov	r2, r3
 8009a94:	2300      	movs	r3, #0
 8009a96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009aaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	613b      	str	r3, [r7, #16]
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d3b7      	bcc.n	8009a2a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aba:	2300      	movs	r3, #0
 8009abc:	613b      	str	r3, [r7, #16]
 8009abe:	e043      	b.n	8009b48 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ad6:	d118      	bne.n	8009b0a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aea:	461a      	mov	r2, r3
 8009aec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	e013      	b.n	8009b1c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b00:	461a      	mov	r2, r3
 8009b02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	e008      	b.n	8009b1c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b16:	461a      	mov	r2, r3
 8009b18:	2300      	movs	r3, #0
 8009b1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b28:	461a      	mov	r2, r3
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	3301      	adds	r3, #1
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d3b7      	bcc.n	8009ac0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	f043 0210 	orr.w	r2, r3, #16
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	4b10      	ldr	r3, [pc, #64]	; (8009bc4 <USB_DevInit+0x294>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d005      	beq.n	8009b9c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	f043 0208 	orr.w	r2, r3, #8
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d107      	bne.n	8009bb2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009baa:	f043 0304 	orr.w	r3, r3, #4
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bbe:	b004      	add	sp, #16
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	803c3800 	.word	0x803c3800

08009bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	019b      	lsls	r3, r3, #6
 8009bda:	f043 0220 	orr.w	r2, r3, #32
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4a09      	ldr	r2, [pc, #36]	; (8009c10 <USB_FlushTxFifo+0x48>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d901      	bls.n	8009bf4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e006      	b.n	8009c02 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	f003 0320 	and.w	r3, r3, #32
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d0f0      	beq.n	8009be2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	00030d40 	.word	0x00030d40

08009c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2210      	movs	r2, #16
 8009c24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a09      	ldr	r2, [pc, #36]	; (8009c54 <USB_FlushRxFifo+0x40>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d901      	bls.n	8009c38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e006      	b.n	8009c46 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f003 0310 	and.w	r3, r3, #16
 8009c40:	2b10      	cmp	r3, #16
 8009c42:	d0f0      	beq.n	8009c26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	00030d40 	.word	0x00030d40

08009c58 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	68f9      	ldr	r1, [r7, #12]
 8009c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3714      	adds	r7, #20
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b087      	sub	sp, #28
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f003 0306 	and.w	r3, r3, #6
 8009ca2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d002      	beq.n	8009cb0 <USB_GetDevSpeed+0x26>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b06      	cmp	r3, #6
 8009cae:	d102      	bne.n	8009cb6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	75fb      	strb	r3, [r7, #23]
 8009cb4:	e001      	b.n	8009cba <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009cb6:	230f      	movs	r3, #15
 8009cb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	371c      	adds	r7, #28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	785b      	ldrb	r3, [r3, #1]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d13a      	bne.n	8009d5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cea:	69da      	ldr	r2, [r3, #28]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	68f9      	ldr	r1, [r7, #12]
 8009cfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d02:	4313      	orrs	r3, r2
 8009d04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	015a      	lsls	r2, r3, #5
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d155      	bne.n	8009dc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	78db      	ldrb	r3, [r3, #3]
 8009d36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	059b      	lsls	r3, r3, #22
 8009d3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d40:	4313      	orrs	r3, r2
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	0151      	lsls	r1, r2, #5
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	440a      	add	r2, r1
 8009d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	e036      	b.n	8009dc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d60:	69da      	ldr	r2, [r3, #28]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	f003 030f 	and.w	r3, r3, #15
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d70:	041b      	lsls	r3, r3, #16
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d11a      	bne.n	8009dc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	015a      	lsls	r2, r3, #5
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	4413      	add	r3, r2
 8009d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	78db      	ldrb	r3, [r3, #3]
 8009dac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dae:	430b      	orrs	r3, r1
 8009db0:	4313      	orrs	r3, r2
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	0151      	lsls	r1, r2, #5
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	440a      	add	r2, r1
 8009dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
	...

08009dd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	785b      	ldrb	r3, [r3, #1]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d161      	bne.n	8009eb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e0a:	d11f      	bne.n	8009e4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	0151      	lsls	r1, r2, #5
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	440a      	add	r2, r1
 8009e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	0151      	lsls	r1, r2, #5
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	440a      	add	r2, r1
 8009e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	f003 030f 	and.w	r3, r3, #15
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	43db      	mvns	r3, r3
 8009e66:	68f9      	ldr	r1, [r7, #12]
 8009e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e76:	69da      	ldr	r2, [r3, #28]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	f003 030f 	and.w	r3, r3, #15
 8009e80:	2101      	movs	r1, #1
 8009e82:	fa01 f303 	lsl.w	r3, r1, r3
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	43db      	mvns	r3, r3
 8009e8a:	68f9      	ldr	r1, [r7, #12]
 8009e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e90:	4013      	ands	r3, r2
 8009e92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	0159      	lsls	r1, r3, #5
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	440b      	add	r3, r1
 8009eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4b35      	ldr	r3, [pc, #212]	; (8009f88 <USB_DeactivateEndpoint+0x1b0>)
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	600b      	str	r3, [r1, #0]
 8009eb6:	e060      	b.n	8009f7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ece:	d11f      	bne.n	8009f10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	0151      	lsls	r1, r2, #5
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	440a      	add	r2, r1
 8009ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009eee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	0151      	lsls	r1, r2, #5
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	440a      	add	r2, r1
 8009f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	f003 030f 	and.w	r3, r3, #15
 8009f20:	2101      	movs	r1, #1
 8009f22:	fa01 f303 	lsl.w	r3, r1, r3
 8009f26:	041b      	lsls	r3, r3, #16
 8009f28:	43db      	mvns	r3, r3
 8009f2a:	68f9      	ldr	r1, [r7, #12]
 8009f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f30:	4013      	ands	r3, r2
 8009f32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f3a:	69da      	ldr	r2, [r3, #28]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	2101      	movs	r1, #1
 8009f46:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4a:	041b      	lsls	r3, r3, #16
 8009f4c:	43db      	mvns	r3, r3
 8009f4e:	68f9      	ldr	r1, [r7, #12]
 8009f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f54:	4013      	ands	r3, r2
 8009f56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	0159      	lsls	r1, r3, #5
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	440b      	add	r3, r1
 8009f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f72:	4619      	mov	r1, r3
 8009f74:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <USB_DeactivateEndpoint+0x1b4>)
 8009f76:	4013      	ands	r3, r2
 8009f78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	ec337800 	.word	0xec337800
 8009f8c:	eff37800 	.word	0xeff37800

08009f90 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	785b      	ldrb	r3, [r3, #1]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	f040 810a 	bne.w	800a1c2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d132      	bne.n	800a01c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	0151      	lsls	r1, r2, #5
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	440a      	add	r2, r1
 8009fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	0151      	lsls	r1, r2, #5
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a014:	0cdb      	lsrs	r3, r3, #19
 800a016:	04db      	lsls	r3, r3, #19
 800a018:	6113      	str	r3, [r2, #16]
 800a01a:	e074      	b.n	800a106 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	0151      	lsls	r1, r2, #5
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	440a      	add	r2, r1
 800a032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a036:	0cdb      	lsrs	r3, r3, #19
 800a038:	04db      	lsls	r3, r3, #19
 800a03a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	0151      	lsls	r1, r2, #5
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	440a      	add	r2, r1
 800a052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a056:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a05a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a05e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06c:	691a      	ldr	r2, [r3, #16]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	6959      	ldr	r1, [r3, #20]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	440b      	add	r3, r1
 800a078:	1e59      	subs	r1, r3, #1
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a082:	04d9      	lsls	r1, r3, #19
 800a084:	4baf      	ldr	r3, [pc, #700]	; (800a344 <USB_EPStartXfer+0x3b4>)
 800a086:	400b      	ands	r3, r1
 800a088:	6939      	ldr	r1, [r7, #16]
 800a08a:	0148      	lsls	r0, r1, #5
 800a08c:	6979      	ldr	r1, [r7, #20]
 800a08e:	4401      	add	r1, r0
 800a090:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a094:	4313      	orrs	r3, r2
 800a096:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a4:	691a      	ldr	r2, [r3, #16]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0ae:	6939      	ldr	r1, [r7, #16]
 800a0b0:	0148      	lsls	r0, r1, #5
 800a0b2:	6979      	ldr	r1, [r7, #20]
 800a0b4:	4401      	add	r1, r0
 800a0b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	78db      	ldrb	r3, [r3, #3]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d11f      	bne.n	800a106 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	0151      	lsls	r1, r2, #5
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	440a      	add	r2, r1
 800a0dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a0e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	0151      	lsls	r1, r2, #5
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	440a      	add	r2, r1
 800a0fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a104:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	015a      	lsls	r2, r3, #5
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	0151      	lsls	r1, r2, #5
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	440a      	add	r2, r1
 800a11c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a120:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a124:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	78db      	ldrb	r3, [r3, #3]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d015      	beq.n	800a15a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 8100 	beq.w	800a338 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f003 030f 	and.w	r3, r3, #15
 800a148:	2101      	movs	r1, #1
 800a14a:	fa01 f303 	lsl.w	r3, r1, r3
 800a14e:	6979      	ldr	r1, [r7, #20]
 800a150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a154:	4313      	orrs	r3, r2
 800a156:	634b      	str	r3, [r1, #52]	; 0x34
 800a158:	e0ee      	b.n	800a338 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a166:	2b00      	cmp	r3, #0
 800a168:	d110      	bne.n	800a18c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	0151      	lsls	r1, r2, #5
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	440a      	add	r2, r1
 800a180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	e00f      	b.n	800a1ac <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	015a      	lsls	r2, r3, #5
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	4413      	add	r3, r2
 800a194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	0151      	lsls	r1, r2, #5
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	440a      	add	r2, r1
 800a1a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1aa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	68d9      	ldr	r1, [r3, #12]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781a      	ldrb	r2, [r3, #0]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f9e2 	bl	800a584 <USB_WritePacket>
 800a1c0:	e0ba      	b.n	800a338 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	0151      	lsls	r1, r2, #5
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	440a      	add	r2, r1
 800a1d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1dc:	0cdb      	lsrs	r3, r3, #19
 800a1de:	04db      	lsls	r3, r3, #19
 800a1e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	0151      	lsls	r1, r2, #5
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	440a      	add	r2, r1
 800a1f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a200:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a204:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d123      	bne.n	800a256 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	4413      	add	r3, r2
 800a216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a224:	6939      	ldr	r1, [r7, #16]
 800a226:	0148      	lsls	r0, r1, #5
 800a228:	6979      	ldr	r1, [r7, #20]
 800a22a:	4401      	add	r1, r0
 800a22c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a230:	4313      	orrs	r3, r2
 800a232:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	0151      	lsls	r1, r2, #5
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	440a      	add	r2, r1
 800a24a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a252:	6113      	str	r3, [r2, #16]
 800a254:	e033      	b.n	800a2be <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	695a      	ldr	r2, [r3, #20]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	4413      	add	r3, r2
 800a260:	1e5a      	subs	r2, r3, #1
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26a:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a278:	691a      	ldr	r2, [r3, #16]
 800a27a:	89fb      	ldrh	r3, [r7, #14]
 800a27c:	04d9      	lsls	r1, r3, #19
 800a27e:	4b31      	ldr	r3, [pc, #196]	; (800a344 <USB_EPStartXfer+0x3b4>)
 800a280:	400b      	ands	r3, r1
 800a282:	6939      	ldr	r1, [r7, #16]
 800a284:	0148      	lsls	r0, r1, #5
 800a286:	6979      	ldr	r1, [r7, #20]
 800a288:	4401      	add	r1, r0
 800a28a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a28e:	4313      	orrs	r3, r2
 800a290:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29e:	691a      	ldr	r2, [r3, #16]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	89f9      	ldrh	r1, [r7, #14]
 800a2a6:	fb01 f303 	mul.w	r3, r1, r3
 800a2aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2ae:	6939      	ldr	r1, [r7, #16]
 800a2b0:	0148      	lsls	r0, r1, #5
 800a2b2:	6979      	ldr	r1, [r7, #20]
 800a2b4:	4401      	add	r1, r0
 800a2b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	78db      	ldrb	r3, [r3, #3]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d128      	bne.n	800a318 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d110      	bne.n	800a2f8 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	0151      	lsls	r1, r2, #5
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	e00f      	b.n	800a318 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	0151      	lsls	r1, r2, #5
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	440a      	add	r2, r1
 800a30e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a316:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	0151      	lsls	r1, r2, #5
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	440a      	add	r2, r1
 800a32e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a332:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a336:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	1ff80000 	.word	0x1ff80000

0800a348 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	785b      	ldrb	r3, [r3, #1]
 800a360:	2b01      	cmp	r3, #1
 800a362:	f040 80ab 	bne.w	800a4bc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d132      	bne.n	800a3d4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	0151      	lsls	r1, r2, #5
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	440a      	add	r2, r1
 800a384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a388:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a38c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	0151      	lsls	r1, r2, #5
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	015a      	lsls	r2, r3, #5
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	0151      	lsls	r1, r2, #5
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	440a      	add	r2, r1
 800a3c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3cc:	0cdb      	lsrs	r3, r3, #19
 800a3ce:	04db      	lsls	r3, r3, #19
 800a3d0:	6113      	str	r3, [r2, #16]
 800a3d2:	e04e      	b.n	800a472 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	0151      	lsls	r1, r2, #5
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	440a      	add	r2, r1
 800a3ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ee:	0cdb      	lsrs	r3, r3, #19
 800a3f0:	04db      	lsls	r3, r3, #19
 800a3f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	0151      	lsls	r1, r2, #5
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	440a      	add	r2, r1
 800a40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a40e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a412:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a416:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	695a      	ldr	r2, [r3, #20]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	429a      	cmp	r2, r3
 800a422:	d903      	bls.n	800a42c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	0151      	lsls	r1, r2, #5
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	440a      	add	r2, r1
 800a442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a44a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a458:	691a      	ldr	r2, [r3, #16]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a462:	68b9      	ldr	r1, [r7, #8]
 800a464:	0148      	lsls	r0, r1, #5
 800a466:	68f9      	ldr	r1, [r7, #12]
 800a468:	4401      	add	r1, r0
 800a46a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a46e:	4313      	orrs	r3, r2
 800a470:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	0151      	lsls	r1, r2, #5
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	440a      	add	r2, r1
 800a488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a48c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a490:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d06d      	beq.n	800a576 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	f003 030f 	and.w	r3, r3, #15
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b0:	68f9      	ldr	r1, [r7, #12]
 800a4b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	634b      	str	r3, [r1, #52]	; 0x34
 800a4ba:	e05c      	b.n	800a576 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	0151      	lsls	r1, r2, #5
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	440a      	add	r2, r1
 800a4d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4d6:	0cdb      	lsrs	r3, r3, #19
 800a4d8:	04db      	lsls	r3, r3, #19
 800a4da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	0151      	lsls	r1, r2, #5
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	440a      	add	r2, r1
 800a526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a52a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a52e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53c:	691a      	ldr	r2, [r3, #16]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	0148      	lsls	r0, r1, #5
 800a54a:	68f9      	ldr	r1, [r7, #12]
 800a54c:	4401      	add	r1, r0
 800a54e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a552:	4313      	orrs	r3, r2
 800a554:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	0151      	lsls	r1, r2, #5
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	440a      	add	r2, r1
 800a56c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a574:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800a584:	b480      	push	{r7}
 800a586:	b089      	sub	sp, #36	; 0x24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4611      	mov	r1, r2
 800a590:	461a      	mov	r2, r3
 800a592:	460b      	mov	r3, r1
 800a594:	71fb      	strb	r3, [r7, #7]
 800a596:	4613      	mov	r3, r2
 800a598:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a5a2:	88bb      	ldrh	r3, [r7, #4]
 800a5a4:	3303      	adds	r3, #3
 800a5a6:	089b      	lsrs	r3, r3, #2
 800a5a8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61bb      	str	r3, [r7, #24]
 800a5ae:	e00f      	b.n	800a5d0 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	031a      	lsls	r2, r3, #12
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5bc:	461a      	mov	r2, r3
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	61bb      	str	r3, [r7, #24]
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d3eb      	bcc.n	800a5b0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3724      	adds	r7, #36	; 0x24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b089      	sub	sp, #36	; 0x24
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	3303      	adds	r3, #3
 800a600:	089b      	lsrs	r3, r3, #2
 800a602:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a604:	2300      	movs	r3, #0
 800a606:	61bb      	str	r3, [r7, #24]
 800a608:	e00b      	b.n	800a622 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	601a      	str	r2, [r3, #0]
    pDest++;
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	3304      	adds	r3, #4
 800a61a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	3301      	adds	r3, #1
 800a620:	61bb      	str	r3, [r7, #24]
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	429a      	cmp	r2, r3
 800a628:	d3ef      	bcc.n	800a60a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a62a:	69fb      	ldr	r3, [r7, #28]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3724      	adds	r7, #36	; 0x24
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	785b      	ldrb	r3, [r3, #1]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d12c      	bne.n	800a6ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	db12      	blt.n	800a68c <USB_EPSetStall+0x54>
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00f      	beq.n	800a68c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	0151      	lsls	r1, r2, #5
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	440a      	add	r2, r1
 800a682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a686:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a68a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	e02b      	b.n	800a706 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	db12      	blt.n	800a6e6 <USB_EPSetStall+0xae>
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00f      	beq.n	800a6e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	0151      	lsls	r1, r2, #5
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	440a      	add	r2, r1
 800a6dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	0151      	lsls	r1, r2, #5
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	440a      	add	r2, r1
 800a6fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a704:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	785b      	ldrb	r3, [r3, #1]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d128      	bne.n	800a782 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	0151      	lsls	r1, r2, #5
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	440a      	add	r2, r1
 800a746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a74a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a74e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	78db      	ldrb	r3, [r3, #3]
 800a754:	2b03      	cmp	r3, #3
 800a756:	d003      	beq.n	800a760 <USB_EPClearStall+0x4c>
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	78db      	ldrb	r3, [r3, #3]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d138      	bne.n	800a7d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	0151      	lsls	r1, r2, #5
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	440a      	add	r2, r1
 800a776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a77a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	e027      	b.n	800a7d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	0151      	lsls	r1, r2, #5
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	440a      	add	r2, r1
 800a798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a79c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	78db      	ldrb	r3, [r3, #3]
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d003      	beq.n	800a7b2 <USB_EPClearStall+0x9e>
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	78db      	ldrb	r3, [r3, #3]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d10f      	bne.n	800a7d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	015a      	lsls	r2, r3, #5
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	0151      	lsls	r1, r2, #5
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	440a      	add	r2, r1
 800a7c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a802:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	011b      	lsls	r3, r3, #4
 800a810:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a814:	68f9      	ldr	r1, [r7, #12]
 800a816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a81a:	4313      	orrs	r3, r2
 800a81c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a846:	f023 0302 	bic.w	r3, r3, #2
 800a84a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a84c:	2003      	movs	r0, #3
 800a84e:	f7f7 fcaf 	bl	80021b0 <HAL_Delay>

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a876:	f043 0302 	orr.w	r3, r3, #2
 800a87a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a87c:	2003      	movs	r0, #3
 800a87e:	f7f7 fc97 	bl	80021b0 <HAL_Delay>

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b085      	sub	sp, #20
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	0c1b      	lsrs	r3, r3, #16
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	4013      	ands	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	b29b      	uxth	r3, r3
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a92a:	78fb      	ldrb	r3, [r7, #3]
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4413      	add	r3, r2
 800a932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	4013      	ands	r3, r2
 800a946:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a948:	68bb      	ldr	r3, [r7, #8]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a956:	b480      	push	{r7}
 800a958:	b087      	sub	sp, #28
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a978:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a97a:	78fb      	ldrb	r3, [r7, #3]
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	fa22 f303 	lsr.w	r3, r2, r3
 800a986:	01db      	lsls	r3, r3, #7
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a990:	78fb      	ldrb	r3, [r7, #3]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9a4:	68bb      	ldr	r3, [r7, #8]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	371c      	adds	r7, #28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	f003 0301 	and.w	r3, r3, #1
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a9ec:	f023 0307 	bic.w	r3, r3, #7
 800a9f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	333c      	adds	r3, #60	; 0x3c
 800aa26:	3304      	adds	r3, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	4a1c      	ldr	r2, [pc, #112]	; (800aaa0 <USB_EP0_OutStart+0x8c>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d90a      	bls.n	800aa4a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa44:	d101      	bne.n	800aa4a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	e024      	b.n	800aa94 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa50:	461a      	mov	r2, r3
 800aa52:	2300      	movs	r3, #0
 800aa54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa78:	f043 0318 	orr.w	r3, r3, #24
 800aa7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aa90:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	4f54300a 	.word	0x4f54300a

0800aaa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aaac:	2300      	movs	r3, #0
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3301      	adds	r3, #1
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	4a13      	ldr	r2, [pc, #76]	; (800ab08 <USB_CoreReset+0x64>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d901      	bls.n	800aac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e01b      	b.n	800aafa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	daf2      	bge.n	800aab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aaca:	2300      	movs	r3, #0
 800aacc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	f043 0201 	orr.w	r2, r3, #1
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3301      	adds	r3, #1
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4a09      	ldr	r2, [pc, #36]	; (800ab08 <USB_CoreReset+0x64>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d901      	bls.n	800aaec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e006      	b.n	800aafa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	f003 0301 	and.w	r3, r3, #1
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d0f0      	beq.n	800aada <USB_CoreReset+0x36>

  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	00030d40 	.word	0x00030d40

0800ab0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	7c1b      	ldrb	r3, [r3, #16]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d115      	bne.n	800ab50 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab28:	2202      	movs	r2, #2
 800ab2a:	2181      	movs	r1, #129	; 0x81
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 ffa7 	bl	800ca80 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	2101      	movs	r1, #1
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f001 ff9d 	bl	800ca80 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ab4e:	e012      	b.n	800ab76 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab50:	2340      	movs	r3, #64	; 0x40
 800ab52:	2202      	movs	r2, #2
 800ab54:	2181      	movs	r1, #129	; 0x81
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 ff92 	bl	800ca80 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab62:	2340      	movs	r3, #64	; 0x40
 800ab64:	2202      	movs	r2, #2
 800ab66:	2101      	movs	r1, #1
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f001 ff89 	bl	800ca80 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab76:	2308      	movs	r3, #8
 800ab78:	2203      	movs	r2, #3
 800ab7a:	2182      	movs	r1, #130	; 0x82
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f001 ff7f 	bl	800ca80 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab8c:	f002 f990 	bl	800ceb0 <USBD_static_malloc>
 800ab90:	4602      	mov	r2, r0
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d102      	bne.n	800aba8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800aba2:	2301      	movs	r3, #1
 800aba4:	73fb      	strb	r3, [r7, #15]
 800aba6:	e026      	b.n	800abf6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	7c1b      	ldrb	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d109      	bne.n	800abe6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abdc:	2101      	movs	r1, #1
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f002 f8ca 	bl	800cd78 <USBD_LL_PrepareReceive>
 800abe4:	e007      	b.n	800abf6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abec:	2340      	movs	r3, #64	; 0x40
 800abee:	2101      	movs	r1, #1
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f002 f8c1 	bl	800cd78 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ac10:	2181      	movs	r1, #129	; 0x81
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f001 ff72 	bl	800cafc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ac1e:	2101      	movs	r1, #1
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 ff6b 	bl	800cafc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ac2e:	2182      	movs	r1, #130	; 0x82
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 ff63 	bl	800cafc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00e      	beq.n	800ac64 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac56:	4618      	mov	r0, r3
 800ac58:	f002 f938 	bl	800cecc <USBD_static_free>
    pdev->pClassData = NULL;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b086      	sub	sp, #24
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d039      	beq.n	800ad0c <USBD_CDC_Setup+0x9e>
 800ac98:	2b20      	cmp	r3, #32
 800ac9a:	d17c      	bne.n	800ad96 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	88db      	ldrh	r3, [r3, #6]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d029      	beq.n	800acf8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	b25b      	sxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	da11      	bge.n	800acd2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800acba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	88d2      	ldrh	r2, [r2, #6]
 800acc0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800acc2:	6939      	ldr	r1, [r7, #16]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	88db      	ldrh	r3, [r3, #6]
 800acc8:	461a      	mov	r2, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f001 fa6a 	bl	800c1a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800acd0:	e068      	b.n	800ada4 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	785a      	ldrb	r2, [r3, #1]
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	88db      	ldrh	r3, [r3, #6]
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ace8:	6939      	ldr	r1, [r7, #16]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	88db      	ldrh	r3, [r3, #6]
 800acee:	461a      	mov	r2, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f001 fa85 	bl	800c200 <USBD_CtlPrepareRx>
      break;
 800acf6:	e055      	b.n	800ada4 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	7850      	ldrb	r0, [r2, #1]
 800ad04:	2200      	movs	r2, #0
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	4798      	blx	r3
      break;
 800ad0a:	e04b      	b.n	800ada4 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	785b      	ldrb	r3, [r3, #1]
 800ad10:	2b0a      	cmp	r3, #10
 800ad12:	d017      	beq.n	800ad44 <USBD_CDC_Setup+0xd6>
 800ad14:	2b0b      	cmp	r3, #11
 800ad16:	d029      	beq.n	800ad6c <USBD_CDC_Setup+0xfe>
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d133      	bne.n	800ad84 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d107      	bne.n	800ad36 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ad26:	f107 030c 	add.w	r3, r7, #12
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f001 fa38 	bl	800c1a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad34:	e02e      	b.n	800ad94 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 f9c8 	bl	800c0ce <USBD_CtlError>
            ret = USBD_FAIL;
 800ad3e:	2302      	movs	r3, #2
 800ad40:	75fb      	strb	r3, [r7, #23]
          break;
 800ad42:	e027      	b.n	800ad94 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d107      	bne.n	800ad5e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ad4e:	f107 030f 	add.w	r3, r7, #15
 800ad52:	2201      	movs	r2, #1
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 fa24 	bl	800c1a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad5c:	e01a      	b.n	800ad94 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f001 f9b4 	bl	800c0ce <USBD_CtlError>
            ret = USBD_FAIL;
 800ad66:	2302      	movs	r3, #2
 800ad68:	75fb      	strb	r3, [r7, #23]
          break;
 800ad6a:	e013      	b.n	800ad94 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d00d      	beq.n	800ad92 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f001 f9a8 	bl	800c0ce <USBD_CtlError>
            ret = USBD_FAIL;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ad82:	e006      	b.n	800ad92 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f001 f9a1 	bl	800c0ce <USBD_CtlError>
          ret = USBD_FAIL;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	75fb      	strb	r3, [r7, #23]
          break;
 800ad90:	e000      	b.n	800ad94 <USBD_CDC_Setup+0x126>
          break;
 800ad92:	bf00      	nop
      }
      break;
 800ad94:	e006      	b.n	800ada4 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f001 f998 	bl	800c0ce <USBD_CtlError>
      ret = USBD_FAIL;
 800ad9e:	2302      	movs	r3, #2
 800ada0:	75fb      	strb	r3, [r7, #23]
      break;
 800ada2:	bf00      	nop
  }

  return ret;
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	460b      	mov	r3, r1
 800adb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adc8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add0:	2b00      	cmp	r3, #0
 800add2:	d03a      	beq.n	800ae4a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800add4:	78fa      	ldrb	r2, [r7, #3]
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	331c      	adds	r3, #28
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d029      	beq.n	800ae3e <USBD_CDC_DataIn+0x90>
 800adea:	78fa      	ldrb	r2, [r7, #3]
 800adec:	6879      	ldr	r1, [r7, #4]
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	440b      	add	r3, r1
 800adf8:	331c      	adds	r3, #28
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	78f9      	ldrb	r1, [r7, #3]
 800adfe:	68b8      	ldr	r0, [r7, #8]
 800ae00:	460b      	mov	r3, r1
 800ae02:	00db      	lsls	r3, r3, #3
 800ae04:	1a5b      	subs	r3, r3, r1
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4403      	add	r3, r0
 800ae0a:	3344      	adds	r3, #68	; 0x44
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae12:	fb03 f301 	mul.w	r3, r3, r1
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d110      	bne.n	800ae3e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ae1c:	78fa      	ldrb	r2, [r7, #3]
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	4613      	mov	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	440b      	add	r3, r1
 800ae2a:	331c      	adds	r3, #28
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae30:	78f9      	ldrb	r1, [r7, #3]
 800ae32:	2300      	movs	r3, #0
 800ae34:	2200      	movs	r2, #0
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 ff64 	bl	800cd04 <USBD_LL_Transmit>
 800ae3c:	e003      	b.n	800ae46 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	e000      	b.n	800ae4c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ae4a:	2302      	movs	r3, #2
  }
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae68:	78fb      	ldrb	r3, [r7, #3]
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 ffbd 	bl	800cdec <USBD_LL_GetRxDataSize>
 800ae72:	4602      	mov	r2, r0
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00d      	beq.n	800aea0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ae98:	4611      	mov	r1, r2
 800ae9a:	4798      	blx	r3

    return USBD_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	e000      	b.n	800aea2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800aea0:	2302      	movs	r3, #2
  }
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d015      	beq.n	800aef0 <USBD_CDC_EP0_RxReady+0x46>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aeca:	2bff      	cmp	r3, #255	; 0xff
 800aecc:	d010      	beq.n	800aef0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800aedc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aee4:	b292      	uxth	r2, r2
 800aee6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	22ff      	movs	r2, #255	; 0xff
 800aeec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2243      	movs	r2, #67	; 0x43
 800af08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800af0a:	4b03      	ldr	r3, [pc, #12]	; (800af18 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr
 800af18:	2000009c 	.word	0x2000009c

0800af1c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2243      	movs	r2, #67	; 0x43
 800af28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800af2a:	4b03      	ldr	r3, [pc, #12]	; (800af38 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	20000058 	.word	0x20000058

0800af3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2243      	movs	r2, #67	; 0x43
 800af48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800af4a:	4b03      	ldr	r3, [pc, #12]	; (800af58 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	200000e0 	.word	0x200000e0

0800af5c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	220a      	movs	r2, #10
 800af68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800af6a:	4b03      	ldr	r3, [pc, #12]	; (800af78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr
 800af78:	20000014 	.word	0x20000014

0800af7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800af86:	2302      	movs	r3, #2
 800af88:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d005      	beq.n	800af9c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800afaa:	b480      	push	{r7}
 800afac:	b087      	sub	sp, #28
 800afae:	af00      	add	r7, sp, #0
 800afb0:	60f8      	str	r0, [r7, #12]
 800afb2:	60b9      	str	r1, [r7, #8]
 800afb4:	4613      	mov	r3, r2
 800afb6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afbe:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800afc8:	88fa      	ldrh	r2, [r7, #6]
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	371c      	adds	r7, #28
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800afde:	b480      	push	{r7}
 800afe0:	b085      	sub	sp, #20
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b014:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d01c      	beq.n	800b05a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b026:	2b00      	cmp	r3, #0
 800b028:	d115      	bne.n	800b056 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b048:	b29b      	uxth	r3, r3
 800b04a:	2181      	movs	r1, #129	; 0x81
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 fe59 	bl	800cd04 <USBD_LL_Transmit>

      return USBD_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	e002      	b.n	800b05c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b056:	2301      	movs	r3, #1
 800b058:	e000      	b.n	800b05c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b05a:	2302      	movs	r3, #2
  }
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b072:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d017      	beq.n	800b0ae <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	7c1b      	ldrb	r3, [r3, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d109      	bne.n	800b09a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b08c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b090:	2101      	movs	r1, #1
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f001 fe70 	bl	800cd78 <USBD_LL_PrepareReceive>
 800b098:	e007      	b.n	800b0aa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0a0:	2340      	movs	r3, #64	; 0x40
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 fe67 	bl	800cd78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	e000      	b.n	800b0b0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b0ae:	2302      	movs	r3, #2
  }
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d101      	bne.n	800b0d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	e01a      	b.n	800b106 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	79fa      	ldrb	r2, [r7, #7]
 800b0fc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f001 fc40 	bl	800c984 <USBD_LL_Init>

  return USBD_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b10e:	b480      	push	{r7}
 800b110:	b085      	sub	sp, #20
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d006      	beq.n	800b130 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	73fb      	strb	r3, [r7, #15]
 800b12e:	e001      	b.n	800b134 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b130:	2302      	movs	r3, #2
 800b132:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b134:	7bfb      	ldrb	r3, [r7, #15]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b082      	sub	sp, #8
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f001 fc66 	bl	800ca1c <USBD_LL_Start>

  return USBD_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	460b      	mov	r3, r1
 800b17a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b17c:	2302      	movs	r3, #2
 800b17e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00c      	beq.n	800b1a4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	4611      	mov	r1, r2
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	4798      	blx	r3
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	78fa      	ldrb	r2, [r7, #3]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	4798      	blx	r3

  return USBD_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 ff34 	bl	800c054 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b208:	f003 031f 	and.w	r3, r3, #31
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d00c      	beq.n	800b22a <USBD_LL_SetupStage+0x56>
 800b210:	2b01      	cmp	r3, #1
 800b212:	d302      	bcc.n	800b21a <USBD_LL_SetupStage+0x46>
 800b214:	2b02      	cmp	r3, #2
 800b216:	d010      	beq.n	800b23a <USBD_LL_SetupStage+0x66>
 800b218:	e017      	b.n	800b24a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fa0a 	bl	800b63c <USBD_StdDevReq>
      break;
 800b228:	e01a      	b.n	800b260 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fa6c 	bl	800b710 <USBD_StdItfReq>
      break;
 800b238:	e012      	b.n	800b260 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b240:	4619      	mov	r1, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 faaa 	bl	800b79c <USBD_StdEPReq>
      break;
 800b248:	e00a      	b.n	800b260 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b250:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b254:	b2db      	uxtb	r3, r3
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f001 fc85 	bl	800cb68 <USBD_LL_StallEP>
      break;
 800b25e:	bf00      	nop
  }

  return USBD_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b086      	sub	sp, #24
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	460b      	mov	r3, r1
 800b274:	607a      	str	r2, [r7, #4]
 800b276:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b278:	7afb      	ldrb	r3, [r7, #11]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d14b      	bne.n	800b316 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b284:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d134      	bne.n	800b2fa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	68da      	ldr	r2, [r3, #12]
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d919      	bls.n	800b2d0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	68da      	ldr	r2, [r3, #12]
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	1ad2      	subs	r2, r2, r3
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	68da      	ldr	r2, [r3, #12]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d203      	bcs.n	800b2be <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	e002      	b.n	800b2c4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	6879      	ldr	r1, [r7, #4]
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f000 ffb7 	bl	800c23c <USBD_CtlContinueRx>
 800b2ce:	e038      	b.n	800b342 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2e2:	2b03      	cmp	r3, #3
 800b2e4:	d105      	bne.n	800b2f2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f000 ffb4 	bl	800c260 <USBD_CtlSendStatus>
 800b2f8:	e023      	b.n	800b342 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b300:	2b05      	cmp	r3, #5
 800b302:	d11e      	bne.n	800b342 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b30c:	2100      	movs	r1, #0
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f001 fc2a 	bl	800cb68 <USBD_LL_StallEP>
 800b314:	e015      	b.n	800b342 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00d      	beq.n	800b33e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d108      	bne.n	800b33e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	7afa      	ldrb	r2, [r7, #11]
 800b336:	4611      	mov	r1, r2
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	4798      	blx	r3
 800b33c:	e001      	b.n	800b342 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b33e:	2302      	movs	r3, #2
 800b340:	e000      	b.n	800b344 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	460b      	mov	r3, r1
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b35a:	7afb      	ldrb	r3, [r7, #11]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d17f      	bne.n	800b460 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3314      	adds	r3, #20
 800b364:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d15c      	bne.n	800b42a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	68da      	ldr	r2, [r3, #12]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d915      	bls.n	800b3a8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	68da      	ldr	r2, [r3, #12]
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	1ad2      	subs	r2, r2, r3
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	b29b      	uxth	r3, r3
 800b390:	461a      	mov	r2, r3
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 ff21 	bl	800c1dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b39a:	2300      	movs	r3, #0
 800b39c:	2200      	movs	r2, #0
 800b39e:	2100      	movs	r1, #0
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f001 fce9 	bl	800cd78 <USBD_LL_PrepareReceive>
 800b3a6:	e04e      	b.n	800b446 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	697a      	ldr	r2, [r7, #20]
 800b3ae:	6912      	ldr	r2, [r2, #16]
 800b3b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3b4:	fb02 f201 	mul.w	r2, r2, r1
 800b3b8:	1a9b      	subs	r3, r3, r2
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d11c      	bne.n	800b3f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	689a      	ldr	r2, [r3, #8]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d316      	bcc.n	800b3f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	689a      	ldr	r2, [r3, #8]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d20f      	bcs.n	800b3f8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2100      	movs	r1, #0
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f000 fefd 	bl	800c1dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f001 fcc1 	bl	800cd78 <USBD_LL_PrepareReceive>
 800b3f6:	e026      	b.n	800b446 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00a      	beq.n	800b41a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d105      	bne.n	800b41a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b41a:	2180      	movs	r1, #128	; 0x80
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f001 fba3 	bl	800cb68 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 ff2f 	bl	800c286 <USBD_CtlReceiveStatus>
 800b428:	e00d      	b.n	800b446 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b430:	2b04      	cmp	r3, #4
 800b432:	d004      	beq.n	800b43e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d103      	bne.n	800b446 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b43e:	2180      	movs	r1, #128	; 0x80
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f001 fb91 	bl	800cb68 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d11d      	bne.n	800b48c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff fe82 	bl	800b15a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b45e:	e015      	b.n	800b48c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00d      	beq.n	800b488 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b472:	2b03      	cmp	r3, #3
 800b474:	d108      	bne.n	800b488 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b47c:	695b      	ldr	r3, [r3, #20]
 800b47e:	7afa      	ldrb	r2, [r7, #11]
 800b480:	4611      	mov	r1, r2
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	4798      	blx	r3
 800b486:	e001      	b.n	800b48c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b488:	2302      	movs	r3, #2
 800b48a:	e000      	b.n	800b48e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b49e:	2340      	movs	r3, #64	; 0x40
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f001 faeb 	bl	800ca80 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2240      	movs	r2, #64	; 0x40
 800b4b6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4ba:	2340      	movs	r3, #64	; 0x40
 800b4bc:	2200      	movs	r2, #0
 800b4be:	2180      	movs	r1, #128	; 0x80
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 fadd 	bl	800ca80 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2240      	movs	r2, #64	; 0x40
 800b4d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d009      	beq.n	800b50e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	6852      	ldr	r2, [r2, #4]
 800b506:	b2d2      	uxtb	r2, r2
 800b508:	4611      	mov	r1, r2
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	4798      	blx	r3
  }

  return USBD_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	78fa      	ldrb	r2, [r7, #3]
 800b528:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2204      	movs	r2, #4
 800b550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b562:	b480      	push	{r7}
 800b564:	b083      	sub	sp, #12
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b570:	2b04      	cmp	r3, #4
 800b572:	d105      	bne.n	800b580 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d10b      	bne.n	800b5b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b2:	69db      	ldr	r3, [r3, #28]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b083      	sub	sp, #12
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	6852      	ldr	r2, [r2, #4]
 800b628:	b2d2      	uxtb	r2, r2
 800b62a:	4611      	mov	r1, r2
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	4798      	blx	r3

  return USBD_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
	...

0800b63c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b652:	2b20      	cmp	r3, #32
 800b654:	d004      	beq.n	800b660 <USBD_StdDevReq+0x24>
 800b656:	2b40      	cmp	r3, #64	; 0x40
 800b658:	d002      	beq.n	800b660 <USBD_StdDevReq+0x24>
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d008      	beq.n	800b670 <USBD_StdDevReq+0x34>
 800b65e:	e04c      	b.n	800b6fa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	4798      	blx	r3
      break;
 800b66e:	e049      	b.n	800b704 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	785b      	ldrb	r3, [r3, #1]
 800b674:	2b09      	cmp	r3, #9
 800b676:	d83a      	bhi.n	800b6ee <USBD_StdDevReq+0xb2>
 800b678:	a201      	add	r2, pc, #4	; (adr r2, 800b680 <USBD_StdDevReq+0x44>)
 800b67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67e:	bf00      	nop
 800b680:	0800b6d1 	.word	0x0800b6d1
 800b684:	0800b6e5 	.word	0x0800b6e5
 800b688:	0800b6ef 	.word	0x0800b6ef
 800b68c:	0800b6db 	.word	0x0800b6db
 800b690:	0800b6ef 	.word	0x0800b6ef
 800b694:	0800b6b3 	.word	0x0800b6b3
 800b698:	0800b6a9 	.word	0x0800b6a9
 800b69c:	0800b6ef 	.word	0x0800b6ef
 800b6a0:	0800b6c7 	.word	0x0800b6c7
 800b6a4:	0800b6bd 	.word	0x0800b6bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f9d4 	bl	800ba58 <USBD_GetDescriptor>
          break;
 800b6b0:	e022      	b.n	800b6f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fb61 	bl	800bd7c <USBD_SetAddress>
          break;
 800b6ba:	e01d      	b.n	800b6f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fb9e 	bl	800be00 <USBD_SetConfig>
          break;
 800b6c4:	e018      	b.n	800b6f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fc27 	bl	800bf1c <USBD_GetConfig>
          break;
 800b6ce:	e013      	b.n	800b6f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fc56 	bl	800bf84 <USBD_GetStatus>
          break;
 800b6d8:	e00e      	b.n	800b6f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fc84 	bl	800bfea <USBD_SetFeature>
          break;
 800b6e2:	e009      	b.n	800b6f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fc93 	bl	800c012 <USBD_ClrFeature>
          break;
 800b6ec:	e004      	b.n	800b6f8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fcec 	bl	800c0ce <USBD_CtlError>
          break;
 800b6f6:	bf00      	nop
      }
      break;
 800b6f8:	e004      	b.n	800b704 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fce6 	bl	800c0ce <USBD_CtlError>
      break;
 800b702:	bf00      	nop
  }

  return ret;
 800b704:	7bfb      	ldrb	r3, [r7, #15]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop

0800b710 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b726:	2b20      	cmp	r3, #32
 800b728:	d003      	beq.n	800b732 <USBD_StdItfReq+0x22>
 800b72a:	2b40      	cmp	r3, #64	; 0x40
 800b72c:	d001      	beq.n	800b732 <USBD_StdItfReq+0x22>
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d12a      	bne.n	800b788 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b738:	3b01      	subs	r3, #1
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d81d      	bhi.n	800b77a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	889b      	ldrh	r3, [r3, #4]
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b01      	cmp	r3, #1
 800b746:	d813      	bhi.n	800b770 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	6839      	ldr	r1, [r7, #0]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	4798      	blx	r3
 800b756:	4603      	mov	r3, r0
 800b758:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	88db      	ldrh	r3, [r3, #6]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d110      	bne.n	800b784 <USBD_StdItfReq+0x74>
 800b762:	7bfb      	ldrb	r3, [r7, #15]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10d      	bne.n	800b784 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fd79 	bl	800c260 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b76e:	e009      	b.n	800b784 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800b770:	6839      	ldr	r1, [r7, #0]
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fcab 	bl	800c0ce <USBD_CtlError>
          break;
 800b778:	e004      	b.n	800b784 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 fca6 	bl	800c0ce <USBD_CtlError>
          break;
 800b782:	e000      	b.n	800b786 <USBD_StdItfReq+0x76>
          break;
 800b784:	bf00      	nop
      }
      break;
 800b786:	e004      	b.n	800b792 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fc9f 	bl	800c0ce <USBD_CtlError>
      break;
 800b790:	bf00      	nop
  }

  return USBD_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	889b      	ldrh	r3, [r3, #4]
 800b7ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7b8:	2b20      	cmp	r3, #32
 800b7ba:	d004      	beq.n	800b7c6 <USBD_StdEPReq+0x2a>
 800b7bc:	2b40      	cmp	r3, #64	; 0x40
 800b7be:	d002      	beq.n	800b7c6 <USBD_StdEPReq+0x2a>
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d008      	beq.n	800b7d6 <USBD_StdEPReq+0x3a>
 800b7c4:	e13d      	b.n	800ba42 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	6839      	ldr	r1, [r7, #0]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	4798      	blx	r3
      break;
 800b7d4:	e13a      	b.n	800ba4c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7de:	2b20      	cmp	r3, #32
 800b7e0:	d10a      	bne.n	800b7f8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	4798      	blx	r3
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	e12a      	b.n	800ba4e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	785b      	ldrb	r3, [r3, #1]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d03e      	beq.n	800b87e <USBD_StdEPReq+0xe2>
 800b800:	2b03      	cmp	r3, #3
 800b802:	d002      	beq.n	800b80a <USBD_StdEPReq+0x6e>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d070      	beq.n	800b8ea <USBD_StdEPReq+0x14e>
 800b808:	e115      	b.n	800ba36 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b810:	2b02      	cmp	r3, #2
 800b812:	d002      	beq.n	800b81a <USBD_StdEPReq+0x7e>
 800b814:	2b03      	cmp	r3, #3
 800b816:	d015      	beq.n	800b844 <USBD_StdEPReq+0xa8>
 800b818:	e02b      	b.n	800b872 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00c      	beq.n	800b83a <USBD_StdEPReq+0x9e>
 800b820:	7bbb      	ldrb	r3, [r7, #14]
 800b822:	2b80      	cmp	r3, #128	; 0x80
 800b824:	d009      	beq.n	800b83a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b826:	7bbb      	ldrb	r3, [r7, #14]
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 f99c 	bl	800cb68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b830:	2180      	movs	r1, #128	; 0x80
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f001 f998 	bl	800cb68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b838:	e020      	b.n	800b87c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fc46 	bl	800c0ce <USBD_CtlError>
              break;
 800b842:	e01b      	b.n	800b87c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	885b      	ldrh	r3, [r3, #2]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10e      	bne.n	800b86a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800b84c:	7bbb      	ldrb	r3, [r7, #14]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00b      	beq.n	800b86a <USBD_StdEPReq+0xce>
 800b852:	7bbb      	ldrb	r3, [r7, #14]
 800b854:	2b80      	cmp	r3, #128	; 0x80
 800b856:	d008      	beq.n	800b86a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	88db      	ldrh	r3, [r3, #6]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d104      	bne.n	800b86a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b860:	7bbb      	ldrb	r3, [r7, #14]
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f001 f97f 	bl	800cb68 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fcf8 	bl	800c260 <USBD_CtlSendStatus>

              break;
 800b870:	e004      	b.n	800b87c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fc2a 	bl	800c0ce <USBD_CtlError>
              break;
 800b87a:	bf00      	nop
          }
          break;
 800b87c:	e0e0      	b.n	800ba40 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b884:	2b02      	cmp	r3, #2
 800b886:	d002      	beq.n	800b88e <USBD_StdEPReq+0xf2>
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d015      	beq.n	800b8b8 <USBD_StdEPReq+0x11c>
 800b88c:	e026      	b.n	800b8dc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00c      	beq.n	800b8ae <USBD_StdEPReq+0x112>
 800b894:	7bbb      	ldrb	r3, [r7, #14]
 800b896:	2b80      	cmp	r3, #128	; 0x80
 800b898:	d009      	beq.n	800b8ae <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b89a:	7bbb      	ldrb	r3, [r7, #14]
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f001 f962 	bl	800cb68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8a4:	2180      	movs	r1, #128	; 0x80
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f001 f95e 	bl	800cb68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8ac:	e01c      	b.n	800b8e8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fc0c 	bl	800c0ce <USBD_CtlError>
              break;
 800b8b6:	e017      	b.n	800b8e8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	885b      	ldrh	r3, [r3, #2]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d112      	bne.n	800b8e6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
 800b8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d004      	beq.n	800b8d4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8ca:	7bbb      	ldrb	r3, [r7, #14]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f001 f980 	bl	800cbd4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fcc3 	bl	800c260 <USBD_CtlSendStatus>
              }
              break;
 800b8da:	e004      	b.n	800b8e6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fbf5 	bl	800c0ce <USBD_CtlError>
              break;
 800b8e4:	e000      	b.n	800b8e8 <USBD_StdEPReq+0x14c>
              break;
 800b8e6:	bf00      	nop
          }
          break;
 800b8e8:	e0aa      	b.n	800ba40 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d002      	beq.n	800b8fa <USBD_StdEPReq+0x15e>
 800b8f4:	2b03      	cmp	r3, #3
 800b8f6:	d032      	beq.n	800b95e <USBD_StdEPReq+0x1c2>
 800b8f8:	e097      	b.n	800ba2a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d007      	beq.n	800b910 <USBD_StdEPReq+0x174>
 800b900:	7bbb      	ldrb	r3, [r7, #14]
 800b902:	2b80      	cmp	r3, #128	; 0x80
 800b904:	d004      	beq.n	800b910 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fbe0 	bl	800c0ce <USBD_CtlError>
                break;
 800b90e:	e091      	b.n	800ba34 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b914:	2b00      	cmp	r3, #0
 800b916:	da0b      	bge.n	800b930 <USBD_StdEPReq+0x194>
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b91e:	4613      	mov	r3, r2
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4413      	add	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	3310      	adds	r3, #16
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	4413      	add	r3, r2
 800b92c:	3304      	adds	r3, #4
 800b92e:	e00b      	b.n	800b948 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b930:	7bbb      	ldrb	r3, [r7, #14]
 800b932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	4413      	add	r3, r2
 800b946:	3304      	adds	r3, #4
 800b948:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	2200      	movs	r2, #0
 800b94e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2202      	movs	r2, #2
 800b954:	4619      	mov	r1, r3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fc24 	bl	800c1a4 <USBD_CtlSendData>
              break;
 800b95c:	e06a      	b.n	800ba34 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b95e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b962:	2b00      	cmp	r3, #0
 800b964:	da11      	bge.n	800b98a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b966:	7bbb      	ldrb	r3, [r7, #14]
 800b968:	f003 020f 	and.w	r2, r3, #15
 800b96c:	6879      	ldr	r1, [r7, #4]
 800b96e:	4613      	mov	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	440b      	add	r3, r1
 800b978:	3318      	adds	r3, #24
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d117      	bne.n	800b9b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fba3 	bl	800c0ce <USBD_CtlError>
                  break;
 800b988:	e054      	b.n	800ba34 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b98a:	7bbb      	ldrb	r3, [r7, #14]
 800b98c:	f003 020f 	and.w	r2, r3, #15
 800b990:	6879      	ldr	r1, [r7, #4]
 800b992:	4613      	mov	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	440b      	add	r3, r1
 800b99c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d104      	bne.n	800b9b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800b9a6:	6839      	ldr	r1, [r7, #0]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fb90 	bl	800c0ce <USBD_CtlError>
                  break;
 800b9ae:	e041      	b.n	800ba34 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	da0b      	bge.n	800b9d0 <USBD_StdEPReq+0x234>
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9be:	4613      	mov	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	3310      	adds	r3, #16
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	e00b      	b.n	800b9e8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9d0:	7bbb      	ldrb	r3, [r7, #14]
 800b9d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b9ea:	7bbb      	ldrb	r3, [r7, #14]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <USBD_StdEPReq+0x25a>
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	2b80      	cmp	r3, #128	; 0x80
 800b9f4:	d103      	bne.n	800b9fe <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]
 800b9fc:	e00e      	b.n	800ba1c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f001 f91c 	bl	800cc40 <USBD_LL_IsStallEP>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2201      	movs	r2, #1
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	e002      	b.n	800ba1c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fbbe 	bl	800c1a4 <USBD_CtlSendData>
              break;
 800ba28:	e004      	b.n	800ba34 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fb4e 	bl	800c0ce <USBD_CtlError>
              break;
 800ba32:	bf00      	nop
          }
          break;
 800ba34:	e004      	b.n	800ba40 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fb48 	bl	800c0ce <USBD_CtlError>
          break;
 800ba3e:	bf00      	nop
      }
      break;
 800ba40:	e004      	b.n	800ba4c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fb42 	bl	800c0ce <USBD_CtlError>
      break;
 800ba4a:	bf00      	nop
  }

  return ret;
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	885b      	ldrh	r3, [r3, #2]
 800ba72:	0a1b      	lsrs	r3, r3, #8
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	3b01      	subs	r3, #1
 800ba78:	2b0e      	cmp	r3, #14
 800ba7a:	f200 8152 	bhi.w	800bd22 <USBD_GetDescriptor+0x2ca>
 800ba7e:	a201      	add	r2, pc, #4	; (adr r2, 800ba84 <USBD_GetDescriptor+0x2c>)
 800ba80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba84:	0800baf5 	.word	0x0800baf5
 800ba88:	0800bb0d 	.word	0x0800bb0d
 800ba8c:	0800bb4d 	.word	0x0800bb4d
 800ba90:	0800bd23 	.word	0x0800bd23
 800ba94:	0800bd23 	.word	0x0800bd23
 800ba98:	0800bcc3 	.word	0x0800bcc3
 800ba9c:	0800bcef 	.word	0x0800bcef
 800baa0:	0800bd23 	.word	0x0800bd23
 800baa4:	0800bd23 	.word	0x0800bd23
 800baa8:	0800bd23 	.word	0x0800bd23
 800baac:	0800bd23 	.word	0x0800bd23
 800bab0:	0800bd23 	.word	0x0800bd23
 800bab4:	0800bd23 	.word	0x0800bd23
 800bab8:	0800bd23 	.word	0x0800bd23
 800babc:	0800bac1 	.word	0x0800bac1
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bac6:	69db      	ldr	r3, [r3, #28]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00b      	beq.n	800bae4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bad2:	69db      	ldr	r3, [r3, #28]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	7c12      	ldrb	r2, [r2, #16]
 800bad8:	f107 0108 	add.w	r1, r7, #8
 800badc:	4610      	mov	r0, r2
 800bade:	4798      	blx	r3
 800bae0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bae2:	e126      	b.n	800bd32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 faf1 	bl	800c0ce <USBD_CtlError>
        err++;
 800baec:	7afb      	ldrb	r3, [r7, #11]
 800baee:	3301      	adds	r3, #1
 800baf0:	72fb      	strb	r3, [r7, #11]
      break;
 800baf2:	e11e      	b.n	800bd32 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	7c12      	ldrb	r2, [r2, #16]
 800bb00:	f107 0108 	add.w	r1, r7, #8
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
 800bb08:	60f8      	str	r0, [r7, #12]
      break;
 800bb0a:	e112      	b.n	800bd32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	7c1b      	ldrb	r3, [r3, #16]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10d      	bne.n	800bb30 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1c:	f107 0208 	add.w	r2, r7, #8
 800bb20:	4610      	mov	r0, r2
 800bb22:	4798      	blx	r3
 800bb24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb2e:	e100      	b.n	800bd32 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb38:	f107 0208 	add.w	r2, r7, #8
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4798      	blx	r3
 800bb40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3301      	adds	r3, #1
 800bb46:	2202      	movs	r2, #2
 800bb48:	701a      	strb	r2, [r3, #0]
      break;
 800bb4a:	e0f2      	b.n	800bd32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	885b      	ldrh	r3, [r3, #2]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b05      	cmp	r3, #5
 800bb54:	f200 80ac 	bhi.w	800bcb0 <USBD_GetDescriptor+0x258>
 800bb58:	a201      	add	r2, pc, #4	; (adr r2, 800bb60 <USBD_GetDescriptor+0x108>)
 800bb5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5e:	bf00      	nop
 800bb60:	0800bb79 	.word	0x0800bb79
 800bb64:	0800bbad 	.word	0x0800bbad
 800bb68:	0800bbe1 	.word	0x0800bbe1
 800bb6c:	0800bc15 	.word	0x0800bc15
 800bb70:	0800bc49 	.word	0x0800bc49
 800bb74:	0800bc7d 	.word	0x0800bc7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00b      	beq.n	800bb9c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	7c12      	ldrb	r2, [r2, #16]
 800bb90:	f107 0108 	add.w	r1, r7, #8
 800bb94:	4610      	mov	r0, r2
 800bb96:	4798      	blx	r3
 800bb98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb9a:	e091      	b.n	800bcc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fa95 	bl	800c0ce <USBD_CtlError>
            err++;
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	3301      	adds	r3, #1
 800bba8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbaa:	e089      	b.n	800bcc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00b      	beq.n	800bbd0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	7c12      	ldrb	r2, [r2, #16]
 800bbc4:	f107 0108 	add.w	r1, r7, #8
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
 800bbcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbce:	e077      	b.n	800bcc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fa7b 	bl	800c0ce <USBD_CtlError>
            err++;
 800bbd8:	7afb      	ldrb	r3, [r7, #11]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbde:	e06f      	b.n	800bcc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00b      	beq.n	800bc04 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	7c12      	ldrb	r2, [r2, #16]
 800bbf8:	f107 0108 	add.w	r1, r7, #8
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
 800bc00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc02:	e05d      	b.n	800bcc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fa61 	bl	800c0ce <USBD_CtlError>
            err++;
 800bc0c:	7afb      	ldrb	r3, [r7, #11]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	72fb      	strb	r3, [r7, #11]
          break;
 800bc12:	e055      	b.n	800bcc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	7c12      	ldrb	r2, [r2, #16]
 800bc2c:	f107 0108 	add.w	r1, r7, #8
 800bc30:	4610      	mov	r0, r2
 800bc32:	4798      	blx	r3
 800bc34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc36:	e043      	b.n	800bcc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fa47 	bl	800c0ce <USBD_CtlError>
            err++;
 800bc40:	7afb      	ldrb	r3, [r7, #11]
 800bc42:	3301      	adds	r3, #1
 800bc44:	72fb      	strb	r3, [r7, #11]
          break;
 800bc46:	e03b      	b.n	800bcc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00b      	beq.n	800bc6c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc5a:	695b      	ldr	r3, [r3, #20]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	7c12      	ldrb	r2, [r2, #16]
 800bc60:	f107 0108 	add.w	r1, r7, #8
 800bc64:	4610      	mov	r0, r2
 800bc66:	4798      	blx	r3
 800bc68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc6a:	e029      	b.n	800bcc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fa2d 	bl	800c0ce <USBD_CtlError>
            err++;
 800bc74:	7afb      	ldrb	r3, [r7, #11]
 800bc76:	3301      	adds	r3, #1
 800bc78:	72fb      	strb	r3, [r7, #11]
          break;
 800bc7a:	e021      	b.n	800bcc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00b      	beq.n	800bca0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	7c12      	ldrb	r2, [r2, #16]
 800bc94:	f107 0108 	add.w	r1, r7, #8
 800bc98:	4610      	mov	r0, r2
 800bc9a:	4798      	blx	r3
 800bc9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc9e:	e00f      	b.n	800bcc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fa13 	bl	800c0ce <USBD_CtlError>
            err++;
 800bca8:	7afb      	ldrb	r3, [r7, #11]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	72fb      	strb	r3, [r7, #11]
          break;
 800bcae:	e007      	b.n	800bcc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fa0b 	bl	800c0ce <USBD_CtlError>
          err++;
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bcbe:	e038      	b.n	800bd32 <USBD_GetDescriptor+0x2da>
 800bcc0:	e037      	b.n	800bd32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	7c1b      	ldrb	r3, [r3, #16]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d109      	bne.n	800bcde <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd2:	f107 0208 	add.w	r2, r7, #8
 800bcd6:	4610      	mov	r0, r2
 800bcd8:	4798      	blx	r3
 800bcda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcdc:	e029      	b.n	800bd32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f9f4 	bl	800c0ce <USBD_CtlError>
        err++;
 800bce6:	7afb      	ldrb	r3, [r7, #11]
 800bce8:	3301      	adds	r3, #1
 800bcea:	72fb      	strb	r3, [r7, #11]
      break;
 800bcec:	e021      	b.n	800bd32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	7c1b      	ldrb	r3, [r3, #16]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10d      	bne.n	800bd12 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfe:	f107 0208 	add.w	r2, r7, #8
 800bd02:	4610      	mov	r0, r2
 800bd04:	4798      	blx	r3
 800bd06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	2207      	movs	r2, #7
 800bd0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd10:	e00f      	b.n	800bd32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd12:	6839      	ldr	r1, [r7, #0]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f9da 	bl	800c0ce <USBD_CtlError>
        err++;
 800bd1a:	7afb      	ldrb	r3, [r7, #11]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd20:	e007      	b.n	800bd32 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f9d2 	bl	800c0ce <USBD_CtlError>
      err++;
 800bd2a:	7afb      	ldrb	r3, [r7, #11]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd30:	bf00      	nop
  }

  if (err != 0U)
 800bd32:	7afb      	ldrb	r3, [r7, #11]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d11c      	bne.n	800bd72 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bd38:	893b      	ldrh	r3, [r7, #8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d011      	beq.n	800bd62 <USBD_GetDescriptor+0x30a>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	88db      	ldrh	r3, [r3, #6]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00d      	beq.n	800bd62 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	88da      	ldrh	r2, [r3, #6]
 800bd4a:	893b      	ldrh	r3, [r7, #8]
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	bf28      	it	cs
 800bd50:	4613      	movcs	r3, r2
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd56:	893b      	ldrh	r3, [r7, #8]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	68f9      	ldr	r1, [r7, #12]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fa21 	bl	800c1a4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	88db      	ldrh	r3, [r3, #6]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d104      	bne.n	800bd74 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa78 	bl	800c260 <USBD_CtlSendStatus>
 800bd70:	e000      	b.n	800bd74 <USBD_GetDescriptor+0x31c>
    return;
 800bd72:	bf00      	nop
    }
  }
}
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop

0800bd7c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	889b      	ldrh	r3, [r3, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d130      	bne.n	800bdf0 <USBD_SetAddress+0x74>
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	88db      	ldrh	r3, [r3, #6]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d12c      	bne.n	800bdf0 <USBD_SetAddress+0x74>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	885b      	ldrh	r3, [r3, #2]
 800bd9a:	2b7f      	cmp	r3, #127	; 0x7f
 800bd9c:	d828      	bhi.n	800bdf0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	885b      	ldrh	r3, [r3, #2]
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb0:	2b03      	cmp	r3, #3
 800bdb2:	d104      	bne.n	800bdbe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f989 	bl	800c0ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdbc:	e01c      	b.n	800bdf8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	7bfa      	ldrb	r2, [r7, #15]
 800bdc2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 ff64 	bl	800cc98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fa45 	bl	800c260 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d004      	beq.n	800bde6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2202      	movs	r2, #2
 800bde0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde4:	e008      	b.n	800bdf8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdee:	e003      	b.n	800bdf8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f96b 	bl	800c0ce <USBD_CtlError>
  }
}
 800bdf8:	bf00      	nop
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	885b      	ldrh	r3, [r3, #2]
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	4b41      	ldr	r3, [pc, #260]	; (800bf18 <USBD_SetConfig+0x118>)
 800be12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be14:	4b40      	ldr	r3, [pc, #256]	; (800bf18 <USBD_SetConfig+0x118>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d904      	bls.n	800be26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f955 	bl	800c0ce <USBD_CtlError>
 800be24:	e075      	b.n	800bf12 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d002      	beq.n	800be36 <USBD_SetConfig+0x36>
 800be30:	2b03      	cmp	r3, #3
 800be32:	d023      	beq.n	800be7c <USBD_SetConfig+0x7c>
 800be34:	e062      	b.n	800befc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800be36:	4b38      	ldr	r3, [pc, #224]	; (800bf18 <USBD_SetConfig+0x118>)
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d01a      	beq.n	800be74 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800be3e:	4b36      	ldr	r3, [pc, #216]	; (800bf18 <USBD_SetConfig+0x118>)
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2203      	movs	r2, #3
 800be4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800be50:	4b31      	ldr	r3, [pc, #196]	; (800bf18 <USBD_SetConfig+0x118>)
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff f98a 	bl	800b170 <USBD_SetClassConfig>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d104      	bne.n	800be6c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f932 	bl	800c0ce <USBD_CtlError>
            return;
 800be6a:	e052      	b.n	800bf12 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f9f7 	bl	800c260 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800be72:	e04e      	b.n	800bf12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f9f3 	bl	800c260 <USBD_CtlSendStatus>
        break;
 800be7a:	e04a      	b.n	800bf12 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800be7c:	4b26      	ldr	r3, [pc, #152]	; (800bf18 <USBD_SetConfig+0x118>)
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d112      	bne.n	800beaa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800be8c:	4b22      	ldr	r3, [pc, #136]	; (800bf18 <USBD_SetConfig+0x118>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	461a      	mov	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800be96:	4b20      	ldr	r3, [pc, #128]	; (800bf18 <USBD_SetConfig+0x118>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff f986 	bl	800b1ae <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f9dc 	bl	800c260 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bea8:	e033      	b.n	800bf12 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800beaa:	4b1b      	ldr	r3, [pc, #108]	; (800bf18 <USBD_SetConfig+0x118>)
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	461a      	mov	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d01d      	beq.n	800bef4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff f974 	bl	800b1ae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bec6:	4b14      	ldr	r3, [pc, #80]	; (800bf18 <USBD_SetConfig+0x118>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bed0:	4b11      	ldr	r3, [pc, #68]	; (800bf18 <USBD_SetConfig+0x118>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff f94a 	bl	800b170 <USBD_SetClassConfig>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d104      	bne.n	800beec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f8f2 	bl	800c0ce <USBD_CtlError>
            return;
 800beea:	e012      	b.n	800bf12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f9b7 	bl	800c260 <USBD_CtlSendStatus>
        break;
 800bef2:	e00e      	b.n	800bf12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 f9b3 	bl	800c260 <USBD_CtlSendStatus>
        break;
 800befa:	e00a      	b.n	800bf12 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 f8e5 	bl	800c0ce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bf04:	4b04      	ldr	r3, [pc, #16]	; (800bf18 <USBD_SetConfig+0x118>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff f94f 	bl	800b1ae <USBD_ClrClassConfig>
        break;
 800bf10:	bf00      	nop
    }
  }
}
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	200001e4 	.word	0x200001e4

0800bf1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	88db      	ldrh	r3, [r3, #6]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d004      	beq.n	800bf38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f8cc 	bl	800c0ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf36:	e021      	b.n	800bf7c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	db17      	blt.n	800bf72 <USBD_GetConfig+0x56>
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	dd02      	ble.n	800bf4c <USBD_GetConfig+0x30>
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d00b      	beq.n	800bf62 <USBD_GetConfig+0x46>
 800bf4a:	e012      	b.n	800bf72 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3308      	adds	r3, #8
 800bf56:	2201      	movs	r2, #1
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f922 	bl	800c1a4 <USBD_CtlSendData>
        break;
 800bf60:	e00c      	b.n	800bf7c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3304      	adds	r3, #4
 800bf66:	2201      	movs	r2, #1
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 f91a 	bl	800c1a4 <USBD_CtlSendData>
        break;
 800bf70:	e004      	b.n	800bf7c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f8aa 	bl	800c0ce <USBD_CtlError>
        break;
 800bf7a:	bf00      	nop
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf94:	3b01      	subs	r3, #1
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d81e      	bhi.n	800bfd8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	88db      	ldrh	r3, [r3, #6]
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d004      	beq.n	800bfac <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f892 	bl	800c0ce <USBD_CtlError>
        break;
 800bfaa:	e01a      	b.n	800bfe2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d005      	beq.n	800bfc8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	f043 0202 	orr.w	r2, r3, #2
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	330c      	adds	r3, #12
 800bfcc:	2202      	movs	r2, #2
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f8e7 	bl	800c1a4 <USBD_CtlSendData>
      break;
 800bfd6:	e004      	b.n	800bfe2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f877 	bl	800c0ce <USBD_CtlError>
      break;
 800bfe0:	bf00      	nop
  }
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	885b      	ldrh	r3, [r3, #2]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d106      	bne.n	800c00a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f92b 	bl	800c260 <USBD_CtlSendStatus>
  }
}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c022:	3b01      	subs	r3, #1
 800c024:	2b02      	cmp	r3, #2
 800c026:	d80b      	bhi.n	800c040 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	885b      	ldrh	r3, [r3, #2]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d10c      	bne.n	800c04a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f911 	bl	800c260 <USBD_CtlSendStatus>
      }
      break;
 800c03e:	e004      	b.n	800c04a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f843 	bl	800c0ce <USBD_CtlError>
      break;
 800c048:	e000      	b.n	800c04c <USBD_ClrFeature+0x3a>
      break;
 800c04a:	bf00      	nop
  }
}
 800c04c:	bf00      	nop
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	781a      	ldrb	r2, [r3, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	785a      	ldrb	r2, [r3, #1]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	3302      	adds	r3, #2
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	b29a      	uxth	r2, r3
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	3303      	adds	r3, #3
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	021b      	lsls	r3, r3, #8
 800c080:	b29b      	uxth	r3, r3
 800c082:	4413      	add	r3, r2
 800c084:	b29a      	uxth	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	3304      	adds	r3, #4
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	b29a      	uxth	r2, r3
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	3305      	adds	r3, #5
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	021b      	lsls	r3, r3, #8
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4413      	add	r3, r2
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	3306      	adds	r3, #6
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	3307      	adds	r3, #7
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	021b      	lsls	r3, r3, #8
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	4413      	add	r3, r2
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	80da      	strh	r2, [r3, #6]

}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c0d8:	2180      	movs	r1, #128	; 0x80
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fd44 	bl	800cb68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fd40 	bl	800cb68 <USBD_LL_StallEP>
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d032      	beq.n	800c16c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f000 f834 	bl	800c174 <USBD_GetLen>
 800c10c:	4603      	mov	r3, r0
 800c10e:	3301      	adds	r3, #1
 800c110:	b29b      	uxth	r3, r3
 800c112:	005b      	lsls	r3, r3, #1
 800c114:	b29a      	uxth	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	75fa      	strb	r2, [r7, #23]
 800c120:	461a      	mov	r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	4413      	add	r3, r2
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	7812      	ldrb	r2, [r2, #0]
 800c12a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c12c:	7dfb      	ldrb	r3, [r7, #23]
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	75fa      	strb	r2, [r7, #23]
 800c132:	461a      	mov	r2, r3
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	4413      	add	r3, r2
 800c138:	2203      	movs	r2, #3
 800c13a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c13c:	e012      	b.n	800c164 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	60fa      	str	r2, [r7, #12]
 800c144:	7dfa      	ldrb	r2, [r7, #23]
 800c146:	1c51      	adds	r1, r2, #1
 800c148:	75f9      	strb	r1, [r7, #23]
 800c14a:	4611      	mov	r1, r2
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	440a      	add	r2, r1
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	75fa      	strb	r2, [r7, #23]
 800c15a:	461a      	mov	r2, r3
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	4413      	add	r3, r2
 800c160:	2200      	movs	r2, #0
 800c162:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e8      	bne.n	800c13e <USBD_GetString+0x4e>
    }
  }
}
 800c16c:	bf00      	nop
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c180:	e005      	b.n	800c18e <USBD_GetLen+0x1a>
  {
    len++;
 800c182:	7bfb      	ldrb	r3, [r7, #15]
 800c184:	3301      	adds	r3, #1
 800c186:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3301      	adds	r3, #1
 800c18c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1f5      	bne.n	800c182 <USBD_GetLen+0xe>
  }

  return len;
 800c196:	7bfb      	ldrb	r3, [r7, #15]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c1ba:	88fa      	ldrh	r2, [r7, #6]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c1c0:	88fa      	ldrh	r2, [r7, #6]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1c6:	88fb      	ldrh	r3, [r7, #6]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 fd99 	bl	800cd04 <USBD_LL_Transmit>

  return USBD_OK;
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1ea:	88fb      	ldrh	r3, [r7, #6]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f000 fd87 	bl	800cd04 <USBD_LL_Transmit>

  return USBD_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	4613      	mov	r3, r2
 800c20c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2203      	movs	r2, #3
 800c212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c216:	88fa      	ldrh	r2, [r7, #6]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c21e:	88fa      	ldrh	r2, [r7, #6]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c226:	88fb      	ldrh	r3, [r7, #6]
 800c228:	68ba      	ldr	r2, [r7, #8]
 800c22a:	2100      	movs	r1, #0
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f000 fda3 	bl	800cd78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	4613      	mov	r3, r2
 800c248:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c24a:	88fb      	ldrh	r3, [r7, #6]
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	2100      	movs	r1, #0
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 fd91 	bl	800cd78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2204      	movs	r2, #4
 800c26c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c270:	2300      	movs	r3, #0
 800c272:	2200      	movs	r2, #0
 800c274:	2100      	movs	r1, #0
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fd44 	bl	800cd04 <USBD_LL_Transmit>

  return USBD_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2205      	movs	r2, #5
 800c292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c296:	2300      	movs	r3, #0
 800c298:	2200      	movs	r2, #0
 800c29a:	2100      	movs	r1, #0
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fd6b 	bl	800cd78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4912      	ldr	r1, [pc, #72]	; (800c2fc <MX_USB_DEVICE_Init+0x50>)
 800c2b4:	4812      	ldr	r0, [pc, #72]	; (800c300 <MX_USB_DEVICE_Init+0x54>)
 800c2b6:	f7fe feff 	bl	800b0b8 <USBD_Init>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c2c0:	f7f5 f8b0 	bl	8001424 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c2c4:	490f      	ldr	r1, [pc, #60]	; (800c304 <MX_USB_DEVICE_Init+0x58>)
 800c2c6:	480e      	ldr	r0, [pc, #56]	; (800c300 <MX_USB_DEVICE_Init+0x54>)
 800c2c8:	f7fe ff21 	bl	800b10e <USBD_RegisterClass>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d001      	beq.n	800c2d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c2d2:	f7f5 f8a7 	bl	8001424 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c2d6:	490c      	ldr	r1, [pc, #48]	; (800c308 <MX_USB_DEVICE_Init+0x5c>)
 800c2d8:	4809      	ldr	r0, [pc, #36]	; (800c300 <MX_USB_DEVICE_Init+0x54>)
 800c2da:	f7fe fe4f 	bl	800af7c <USBD_CDC_RegisterInterface>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d001      	beq.n	800c2e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c2e4:	f7f5 f89e 	bl	8001424 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c2e8:	4805      	ldr	r0, [pc, #20]	; (800c300 <MX_USB_DEVICE_Init+0x54>)
 800c2ea:	f7fe ff2a 	bl	800b142 <USBD_Start>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d001      	beq.n	800c2f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c2f4:	f7f5 f896 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c2f8:	bf00      	nop
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	20000134 	.word	0x20000134
 800c300:	20000b64 	.word	0x20000b64
 800c304:	20000020 	.word	0x20000020
 800c308:	20000124 	.word	0x20000124

0800c30c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c310:	2200      	movs	r2, #0
 800c312:	4905      	ldr	r1, [pc, #20]	; (800c328 <CDC_Init_FS+0x1c>)
 800c314:	4805      	ldr	r0, [pc, #20]	; (800c32c <CDC_Init_FS+0x20>)
 800c316:	f7fe fe48 	bl	800afaa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c31a:	4905      	ldr	r1, [pc, #20]	; (800c330 <CDC_Init_FS+0x24>)
 800c31c:	4803      	ldr	r0, [pc, #12]	; (800c32c <CDC_Init_FS+0x20>)
 800c31e:	f7fe fe5e 	bl	800afde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c322:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c324:	4618      	mov	r0, r3
 800c326:	bd80      	pop	{r7, pc}
 800c328:	20001628 	.word	0x20001628
 800c32c:	20000b64 	.word	0x20000b64
 800c330:	20000e28 	.word	0x20000e28

0800c334 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c334:	b480      	push	{r7}
 800c336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c338:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	6039      	str	r1, [r7, #0]
 800c34e:	71fb      	strb	r3, [r7, #7]
 800c350:	4613      	mov	r3, r2
 800c352:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	2b23      	cmp	r3, #35	; 0x23
 800c358:	d84a      	bhi.n	800c3f0 <CDC_Control_FS+0xac>
 800c35a:	a201      	add	r2, pc, #4	; (adr r2, 800c360 <CDC_Control_FS+0x1c>)
 800c35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c360:	0800c3f1 	.word	0x0800c3f1
 800c364:	0800c3f1 	.word	0x0800c3f1
 800c368:	0800c3f1 	.word	0x0800c3f1
 800c36c:	0800c3f1 	.word	0x0800c3f1
 800c370:	0800c3f1 	.word	0x0800c3f1
 800c374:	0800c3f1 	.word	0x0800c3f1
 800c378:	0800c3f1 	.word	0x0800c3f1
 800c37c:	0800c3f1 	.word	0x0800c3f1
 800c380:	0800c3f1 	.word	0x0800c3f1
 800c384:	0800c3f1 	.word	0x0800c3f1
 800c388:	0800c3f1 	.word	0x0800c3f1
 800c38c:	0800c3f1 	.word	0x0800c3f1
 800c390:	0800c3f1 	.word	0x0800c3f1
 800c394:	0800c3f1 	.word	0x0800c3f1
 800c398:	0800c3f1 	.word	0x0800c3f1
 800c39c:	0800c3f1 	.word	0x0800c3f1
 800c3a0:	0800c3f1 	.word	0x0800c3f1
 800c3a4:	0800c3f1 	.word	0x0800c3f1
 800c3a8:	0800c3f1 	.word	0x0800c3f1
 800c3ac:	0800c3f1 	.word	0x0800c3f1
 800c3b0:	0800c3f1 	.word	0x0800c3f1
 800c3b4:	0800c3f1 	.word	0x0800c3f1
 800c3b8:	0800c3f1 	.word	0x0800c3f1
 800c3bc:	0800c3f1 	.word	0x0800c3f1
 800c3c0:	0800c3f1 	.word	0x0800c3f1
 800c3c4:	0800c3f1 	.word	0x0800c3f1
 800c3c8:	0800c3f1 	.word	0x0800c3f1
 800c3cc:	0800c3f1 	.word	0x0800c3f1
 800c3d0:	0800c3f1 	.word	0x0800c3f1
 800c3d4:	0800c3f1 	.word	0x0800c3f1
 800c3d8:	0800c3f1 	.word	0x0800c3f1
 800c3dc:	0800c3f1 	.word	0x0800c3f1
 800c3e0:	0800c3f1 	.word	0x0800c3f1
 800c3e4:	0800c3f1 	.word	0x0800c3f1
 800c3e8:	0800c3f1 	.word	0x0800c3f1
 800c3ec:	0800c3f1 	.word	0x0800c3f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c3f0:	bf00      	nop
  }

  return (USBD_OK);
 800c3f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c40a:	6879      	ldr	r1, [r7, #4]
 800c40c:	4805      	ldr	r0, [pc, #20]	; (800c424 <CDC_Receive_FS+0x24>)
 800c40e:	f7fe fde6 	bl	800afde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c412:	4804      	ldr	r0, [pc, #16]	; (800c424 <CDC_Receive_FS+0x24>)
 800c414:	f7fe fe26 	bl	800b064 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c418:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	20000b64 	.word	0x20000b64

0800c428 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c438:	4b0d      	ldr	r3, [pc, #52]	; (800c470 <CDC_Transmit_FS+0x48>)
 800c43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c43e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e00b      	b.n	800c466 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c44e:	887b      	ldrh	r3, [r7, #2]
 800c450:	461a      	mov	r2, r3
 800c452:	6879      	ldr	r1, [r7, #4]
 800c454:	4806      	ldr	r0, [pc, #24]	; (800c470 <CDC_Transmit_FS+0x48>)
 800c456:	f7fe fda8 	bl	800afaa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c45a:	4805      	ldr	r0, [pc, #20]	; (800c470 <CDC_Transmit_FS+0x48>)
 800c45c:	f7fe fdd3 	bl	800b006 <USBD_CDC_TransmitPacket>
 800c460:	4603      	mov	r3, r0
 800c462:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c464:	7bfb      	ldrb	r3, [r7, #15]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	20000b64 	.word	0x20000b64

0800c474 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2212      	movs	r2, #18
 800c484:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c486:	4b03      	ldr	r3, [pc, #12]	; (800c494 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	20000154 	.word	0x20000154

0800c498 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	6039      	str	r1, [r7, #0]
 800c4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2204      	movs	r2, #4
 800c4a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c4aa:	4b03      	ldr	r3, [pc, #12]	; (800c4b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	20000174 	.word	0x20000174

0800c4bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	6039      	str	r1, [r7, #0]
 800c4c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4c8:	79fb      	ldrb	r3, [r7, #7]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d105      	bne.n	800c4da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	4907      	ldr	r1, [pc, #28]	; (800c4f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4d2:	4808      	ldr	r0, [pc, #32]	; (800c4f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4d4:	f7ff fe0c 	bl	800c0f0 <USBD_GetString>
 800c4d8:	e004      	b.n	800c4e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	4904      	ldr	r1, [pc, #16]	; (800c4f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4de:	4805      	ldr	r0, [pc, #20]	; (800c4f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4e0:	f7ff fe06 	bl	800c0f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4e4:	4b02      	ldr	r3, [pc, #8]	; (800c4f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20001e28 	.word	0x20001e28
 800c4f4:	0800cf94 	.word	0x0800cf94

0800c4f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	6039      	str	r1, [r7, #0]
 800c502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	4904      	ldr	r1, [pc, #16]	; (800c518 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c508:	4804      	ldr	r0, [pc, #16]	; (800c51c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c50a:	f7ff fdf1 	bl	800c0f0 <USBD_GetString>
  return USBD_StrDesc;
 800c50e:	4b02      	ldr	r3, [pc, #8]	; (800c518 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c510:	4618      	mov	r0, r3
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	20001e28 	.word	0x20001e28
 800c51c:	0800cfac 	.word	0x0800cfac

0800c520 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	6039      	str	r1, [r7, #0]
 800c52a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	221a      	movs	r2, #26
 800c530:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c532:	f000 f855 	bl	800c5e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c536:	4b02      	ldr	r3, [pc, #8]	; (800c540 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	20000178 	.word	0x20000178

0800c544 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	4603      	mov	r3, r0
 800c54c:	6039      	str	r1, [r7, #0]
 800c54e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d105      	bne.n	800c562 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	4907      	ldr	r1, [pc, #28]	; (800c578 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c55a:	4808      	ldr	r0, [pc, #32]	; (800c57c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c55c:	f7ff fdc8 	bl	800c0f0 <USBD_GetString>
 800c560:	e004      	b.n	800c56c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c562:	683a      	ldr	r2, [r7, #0]
 800c564:	4904      	ldr	r1, [pc, #16]	; (800c578 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c566:	4805      	ldr	r0, [pc, #20]	; (800c57c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c568:	f7ff fdc2 	bl	800c0f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c56c:	4b02      	ldr	r3, [pc, #8]	; (800c578 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20001e28 	.word	0x20001e28
 800c57c:	0800cfc0 	.word	0x0800cfc0

0800c580 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	4603      	mov	r3, r0
 800c588:	6039      	str	r1, [r7, #0]
 800c58a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c58c:	79fb      	ldrb	r3, [r7, #7]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d105      	bne.n	800c59e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	4907      	ldr	r1, [pc, #28]	; (800c5b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c596:	4808      	ldr	r0, [pc, #32]	; (800c5b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c598:	f7ff fdaa 	bl	800c0f0 <USBD_GetString>
 800c59c:	e004      	b.n	800c5a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	4904      	ldr	r1, [pc, #16]	; (800c5b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5a2:	4805      	ldr	r0, [pc, #20]	; (800c5b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5a4:	f7ff fda4 	bl	800c0f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5a8:	4b02      	ldr	r3, [pc, #8]	; (800c5b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	20001e28 	.word	0x20001e28
 800c5b8:	0800cfcc 	.word	0x0800cfcc

0800c5bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	6039      	str	r1, [r7, #0]
 800c5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	220c      	movs	r2, #12
 800c5cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c5ce:	4b03      	ldr	r3, [pc, #12]	; (800c5dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	20000168 	.word	0x20000168

0800c5e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c5e6:	4b0f      	ldr	r3, [pc, #60]	; (800c624 <Get_SerialNum+0x44>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c5ec:	4b0e      	ldr	r3, [pc, #56]	; (800c628 <Get_SerialNum+0x48>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c5f2:	4b0e      	ldr	r3, [pc, #56]	; (800c62c <Get_SerialNum+0x4c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d009      	beq.n	800c61a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c606:	2208      	movs	r2, #8
 800c608:	4909      	ldr	r1, [pc, #36]	; (800c630 <Get_SerialNum+0x50>)
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f000 f814 	bl	800c638 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c610:	2204      	movs	r2, #4
 800c612:	4908      	ldr	r1, [pc, #32]	; (800c634 <Get_SerialNum+0x54>)
 800c614:	68b8      	ldr	r0, [r7, #8]
 800c616:	f000 f80f 	bl	800c638 <IntToUnicode>
  }
}
 800c61a:	bf00      	nop
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	1fff7590 	.word	0x1fff7590
 800c628:	1fff7594 	.word	0x1fff7594
 800c62c:	1fff7598 	.word	0x1fff7598
 800c630:	2000017a 	.word	0x2000017a
 800c634:	2000018a 	.word	0x2000018a

0800c638 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c638:	b480      	push	{r7}
 800c63a:	b087      	sub	sp, #28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	4613      	mov	r3, r2
 800c644:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c64a:	2300      	movs	r3, #0
 800c64c:	75fb      	strb	r3, [r7, #23]
 800c64e:	e027      	b.n	800c6a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	0f1b      	lsrs	r3, r3, #28
 800c654:	2b09      	cmp	r3, #9
 800c656:	d80b      	bhi.n	800c670 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	0f1b      	lsrs	r3, r3, #28
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	4619      	mov	r1, r3
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	440b      	add	r3, r1
 800c668:	3230      	adds	r2, #48	; 0x30
 800c66a:	b2d2      	uxtb	r2, r2
 800c66c:	701a      	strb	r2, [r3, #0]
 800c66e:	e00a      	b.n	800c686 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	0f1b      	lsrs	r3, r3, #28
 800c674:	b2da      	uxtb	r2, r3
 800c676:	7dfb      	ldrb	r3, [r7, #23]
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	4619      	mov	r1, r3
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	440b      	add	r3, r1
 800c680:	3237      	adds	r2, #55	; 0x37
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	011b      	lsls	r3, r3, #4
 800c68a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c68c:	7dfb      	ldrb	r3, [r7, #23]
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	3301      	adds	r3, #1
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	4413      	add	r3, r2
 800c696:	2200      	movs	r2, #0
 800c698:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	3301      	adds	r3, #1
 800c69e:	75fb      	strb	r3, [r7, #23]
 800c6a0:	7dfa      	ldrb	r2, [r7, #23]
 800c6a2:	79fb      	ldrb	r3, [r7, #7]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d3d3      	bcc.n	800c650 <IntToUnicode+0x18>
  }
}
 800c6a8:	bf00      	nop
 800c6aa:	371c      	adds	r7, #28
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b08a      	sub	sp, #40	; 0x28
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6bc:	f107 0314 	add.w	r3, r7, #20
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	605a      	str	r2, [r3, #4]
 800c6c6:	609a      	str	r2, [r3, #8]
 800c6c8:	60da      	str	r2, [r3, #12]
 800c6ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6d4:	d14e      	bne.n	800c774 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6d6:	4b29      	ldr	r3, [pc, #164]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c6d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6da:	4a28      	ldr	r2, [pc, #160]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c6dc:	f043 0301 	orr.w	r3, r3, #1
 800c6e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c6e2:	4b26      	ldr	r3, [pc, #152]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	613b      	str	r3, [r7, #16]
 800c6ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800c6ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c6f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c700:	230a      	movs	r3, #10
 800c702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c704:	f107 0314 	add.w	r3, r7, #20
 800c708:	4619      	mov	r1, r3
 800c70a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c70e:	f7f6 ff51 	bl	80035b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c712:	4b1a      	ldr	r3, [pc, #104]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c716:	4a19      	ldr	r2, [pc, #100]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c71c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c71e:	4b17      	ldr	r3, [pc, #92]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c726:	60fb      	str	r3, [r7, #12]
 800c728:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c72a:	4b14      	ldr	r3, [pc, #80]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c72e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c732:	2b00      	cmp	r3, #0
 800c734:	d114      	bne.n	800c760 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c736:	4b11      	ldr	r3, [pc, #68]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c73a:	4a10      	ldr	r2, [pc, #64]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c73c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c740:	6593      	str	r3, [r2, #88]	; 0x58
 800c742:	4b0e      	ldr	r3, [pc, #56]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c74a:	60bb      	str	r3, [r7, #8]
 800c74c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800c74e:	f7f8 fb15 	bl	8004d7c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c752:	4b0a      	ldr	r3, [pc, #40]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c756:	4a09      	ldr	r2, [pc, #36]	; (800c77c <HAL_PCD_MspInit+0xc8>)
 800c758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c75c:	6593      	str	r3, [r2, #88]	; 0x58
 800c75e:	e001      	b.n	800c764 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c760:	f7f8 fb0c 	bl	8004d7c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c764:	2200      	movs	r2, #0
 800c766:	2100      	movs	r1, #0
 800c768:	2043      	movs	r0, #67	; 0x43
 800c76a:	f7f6 fd5a 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c76e:	2043      	movs	r0, #67	; 0x43
 800c770:	f7f6 fd73 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c774:	bf00      	nop
 800c776:	3728      	adds	r7, #40	; 0x28
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	40021000 	.word	0x40021000

0800c780 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f7fe fd1c 	bl	800b1d4 <USBD_LL_SetupStage>
}
 800c79c:	bf00      	nop
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c7b6:	78fa      	ldrb	r2, [r7, #3]
 800c7b8:	6879      	ldr	r1, [r7, #4]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	00db      	lsls	r3, r3, #3
 800c7be:	1a9b      	subs	r3, r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	440b      	add	r3, r1
 800c7c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	78fb      	ldrb	r3, [r7, #3]
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	f7fe fd4c 	bl	800b26a <USBD_LL_DataOutStage>
}
 800c7d2:	bf00      	nop
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b082      	sub	sp, #8
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c7ec:	78fa      	ldrb	r2, [r7, #3]
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	1a9b      	subs	r3, r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	440b      	add	r3, r1
 800c7fa:	3348      	adds	r3, #72	; 0x48
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	4619      	mov	r1, r3
 800c802:	f7fe fda3 	bl	800b34c <USBD_LL_DataInStage>
}
 800c806:	bf00      	nop
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b082      	sub	sp, #8
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fe feb6 	bl	800b58e <USBD_LL_SOF>
}
 800c822:	bf00      	nop
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b084      	sub	sp, #16
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c832:	2301      	movs	r3, #1
 800c834:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d001      	beq.n	800c842 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c83e:	f7f4 fdf1 	bl	8001424 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c848:	7bfa      	ldrb	r2, [r7, #15]
 800c84a:	4611      	mov	r1, r2
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fe fe63 	bl	800b518 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fe fe1c 	bl	800b496 <USBD_LL_Reset>
}
 800c85e:	bf00      	nop
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	6812      	ldr	r2, [r2, #0]
 800c87e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c882:	f043 0301 	orr.w	r3, r3, #1
 800c886:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe fe52 	bl	800b538 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a1b      	ldr	r3, [r3, #32]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c89c:	4b04      	ldr	r3, [pc, #16]	; (800c8b0 <HAL_PCD_SuspendCallback+0x48>)
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	4a03      	ldr	r2, [pc, #12]	; (800c8b0 <HAL_PCD_SuspendCallback+0x48>)
 800c8a2:	f043 0306 	orr.w	r3, r3, #6
 800c8a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c8a8:	bf00      	nop
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	e000ed00 	.word	0xe000ed00

0800c8b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	6812      	ldr	r2, [r2, #0]
 800c8ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c8ce:	f023 0301 	bic.w	r3, r3, #1
 800c8d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a1b      	ldr	r3, [r3, #32]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d007      	beq.n	800c8ec <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8dc:	4b08      	ldr	r3, [pc, #32]	; (800c900 <HAL_PCD_ResumeCallback+0x4c>)
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	4a07      	ldr	r2, [pc, #28]	; (800c900 <HAL_PCD_ResumeCallback+0x4c>)
 800c8e2:	f023 0306 	bic.w	r3, r3, #6
 800c8e6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c8e8:	f000 fafa 	bl	800cee0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fe35 	bl	800b562 <USBD_LL_Resume>
}
 800c8f8:	bf00      	nop
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	e000ed00 	.word	0xe000ed00

0800c904 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	460b      	mov	r3, r1
 800c90e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c916:	78fa      	ldrb	r2, [r7, #3]
 800c918:	4611      	mov	r1, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe fe5e 	bl	800b5dc <USBD_LL_IsoOUTIncomplete>
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	460b      	mov	r3, r1
 800c932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c93a:	78fa      	ldrb	r2, [r7, #3]
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fe fe3f 	bl	800b5c2 <USBD_LL_IsoINIncomplete>
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fe fe4b 	bl	800b5f6 <USBD_LL_DevConnected>
}
 800c960:	bf00      	nop
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe fe48 	bl	800b60c <USBD_LL_DevDisconnected>
}
 800c97c:	bf00      	nop
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d13c      	bne.n	800ca0e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c994:	4a20      	ldr	r2, [pc, #128]	; (800ca18 <USBD_LL_Init+0x94>)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a1e      	ldr	r2, [pc, #120]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c9a4:	4b1c      	ldr	r3, [pc, #112]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c9aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c9ac:	4b1a      	ldr	r3, [pc, #104]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9ae:	2206      	movs	r2, #6
 800c9b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c9b2:	4b19      	ldr	r3, [pc, #100]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c9b8:	4b17      	ldr	r3, [pc, #92]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c9be:	4b16      	ldr	r3, [pc, #88]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c9c4:	4b14      	ldr	r3, [pc, #80]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c9ca:	4b13      	ldr	r3, [pc, #76]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c9d0:	4b11      	ldr	r3, [pc, #68]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c9d6:	4b10      	ldr	r3, [pc, #64]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c9dc:	4b0e      	ldr	r3, [pc, #56]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9de:	2200      	movs	r2, #0
 800c9e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c9e2:	480d      	ldr	r0, [pc, #52]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9e4:	f7f7 f8b6 	bl	8003b54 <HAL_PCD_Init>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c9ee:	f7f4 fd19 	bl	8001424 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c9f2:	2180      	movs	r1, #128	; 0x80
 800c9f4:	4808      	ldr	r0, [pc, #32]	; (800ca18 <USBD_LL_Init+0x94>)
 800c9f6:	f7f8 f918 	bl	8004c2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c9fa:	2240      	movs	r2, #64	; 0x40
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	4806      	ldr	r0, [pc, #24]	; (800ca18 <USBD_LL_Init+0x94>)
 800ca00:	f7f8 f8cc 	bl	8004b9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ca04:	2280      	movs	r2, #128	; 0x80
 800ca06:	2101      	movs	r1, #1
 800ca08:	4803      	ldr	r0, [pc, #12]	; (800ca18 <USBD_LL_Init+0x94>)
 800ca0a:	f7f8 f8c7 	bl	8004b9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	20002028 	.word	0x20002028

0800ca1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7f7 f9b2 	bl	8003d9c <HAL_PCD_Start>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ca3c:	7bbb      	ldrb	r3, [r7, #14]
 800ca3e:	2b03      	cmp	r3, #3
 800ca40:	d816      	bhi.n	800ca70 <USBD_LL_Start+0x54>
 800ca42:	a201      	add	r2, pc, #4	; (adr r2, 800ca48 <USBD_LL_Start+0x2c>)
 800ca44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca48:	0800ca59 	.word	0x0800ca59
 800ca4c:	0800ca5f 	.word	0x0800ca5f
 800ca50:	0800ca65 	.word	0x0800ca65
 800ca54:	0800ca6b 	.word	0x0800ca6b
    case HAL_OK :
      usb_status = USBD_OK;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca5c:	e00b      	b.n	800ca76 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca5e:	2302      	movs	r3, #2
 800ca60:	73fb      	strb	r3, [r7, #15]
    break;
 800ca62:	e008      	b.n	800ca76 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca64:	2301      	movs	r3, #1
 800ca66:	73fb      	strb	r3, [r7, #15]
    break;
 800ca68:	e005      	b.n	800ca76 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca6e:	e002      	b.n	800ca76 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ca70:	2302      	movs	r3, #2
 800ca72:	73fb      	strb	r3, [r7, #15]
    break;
 800ca74:	bf00      	nop
  }
  return usb_status;
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	4608      	mov	r0, r1
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	4603      	mov	r3, r0
 800ca90:	70fb      	strb	r3, [r7, #3]
 800ca92:	460b      	mov	r3, r1
 800ca94:	70bb      	strb	r3, [r7, #2]
 800ca96:	4613      	mov	r3, r2
 800ca98:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800caa8:	78bb      	ldrb	r3, [r7, #2]
 800caaa:	883a      	ldrh	r2, [r7, #0]
 800caac:	78f9      	ldrb	r1, [r7, #3]
 800caae:	f7f7 fd6d 	bl	800458c <HAL_PCD_EP_Open>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cab6:	7bbb      	ldrb	r3, [r7, #14]
 800cab8:	2b03      	cmp	r3, #3
 800caba:	d817      	bhi.n	800caec <USBD_LL_OpenEP+0x6c>
 800cabc:	a201      	add	r2, pc, #4	; (adr r2, 800cac4 <USBD_LL_OpenEP+0x44>)
 800cabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac2:	bf00      	nop
 800cac4:	0800cad5 	.word	0x0800cad5
 800cac8:	0800cadb 	.word	0x0800cadb
 800cacc:	0800cae1 	.word	0x0800cae1
 800cad0:	0800cae7 	.word	0x0800cae7
    case HAL_OK :
      usb_status = USBD_OK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	73fb      	strb	r3, [r7, #15]
    break;
 800cad8:	e00b      	b.n	800caf2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cada:	2302      	movs	r3, #2
 800cadc:	73fb      	strb	r3, [r7, #15]
    break;
 800cade:	e008      	b.n	800caf2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cae0:	2301      	movs	r3, #1
 800cae2:	73fb      	strb	r3, [r7, #15]
    break;
 800cae4:	e005      	b.n	800caf2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cae6:	2302      	movs	r3, #2
 800cae8:	73fb      	strb	r3, [r7, #15]
    break;
 800caea:	e002      	b.n	800caf2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800caec:	2302      	movs	r3, #2
 800caee:	73fb      	strb	r3, [r7, #15]
    break;
 800caf0:	bf00      	nop
  }
  return usb_status;
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	460b      	mov	r3, r1
 800cb06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb16:	78fa      	ldrb	r2, [r7, #3]
 800cb18:	4611      	mov	r1, r2
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f7 fd9e 	bl	800465c <HAL_PCD_EP_Close>
 800cb20:	4603      	mov	r3, r0
 800cb22:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800cb24:	7bbb      	ldrb	r3, [r7, #14]
 800cb26:	2b03      	cmp	r3, #3
 800cb28:	d816      	bhi.n	800cb58 <USBD_LL_CloseEP+0x5c>
 800cb2a:	a201      	add	r2, pc, #4	; (adr r2, 800cb30 <USBD_LL_CloseEP+0x34>)
 800cb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb30:	0800cb41 	.word	0x0800cb41
 800cb34:	0800cb47 	.word	0x0800cb47
 800cb38:	0800cb4d 	.word	0x0800cb4d
 800cb3c:	0800cb53 	.word	0x0800cb53
    case HAL_OK :
      usb_status = USBD_OK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	73fb      	strb	r3, [r7, #15]
    break;
 800cb44:	e00b      	b.n	800cb5e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb46:	2302      	movs	r3, #2
 800cb48:	73fb      	strb	r3, [r7, #15]
    break;
 800cb4a:	e008      	b.n	800cb5e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb50:	e005      	b.n	800cb5e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb52:	2302      	movs	r3, #2
 800cb54:	73fb      	strb	r3, [r7, #15]
    break;
 800cb56:	e002      	b.n	800cb5e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cb58:	2302      	movs	r3, #2
 800cb5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5c:	bf00      	nop
  }
  return usb_status;  
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	460b      	mov	r3, r1
 800cb72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb74:	2300      	movs	r3, #0
 800cb76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb82:	78fa      	ldrb	r2, [r7, #3]
 800cb84:	4611      	mov	r1, r2
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7f7 fe45 	bl	8004816 <HAL_PCD_EP_SetStall>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb90:	7bbb      	ldrb	r3, [r7, #14]
 800cb92:	2b03      	cmp	r3, #3
 800cb94:	d816      	bhi.n	800cbc4 <USBD_LL_StallEP+0x5c>
 800cb96:	a201      	add	r2, pc, #4	; (adr r2, 800cb9c <USBD_LL_StallEP+0x34>)
 800cb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb9c:	0800cbad 	.word	0x0800cbad
 800cba0:	0800cbb3 	.word	0x0800cbb3
 800cba4:	0800cbb9 	.word	0x0800cbb9
 800cba8:	0800cbbf 	.word	0x0800cbbf
    case HAL_OK :
      usb_status = USBD_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb0:	e00b      	b.n	800cbca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb6:	e008      	b.n	800cbca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	73fb      	strb	r3, [r7, #15]
    break;
 800cbbc:	e005      	b.n	800cbca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc2:	e002      	b.n	800cbca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc8:	bf00      	nop
  }
  return usb_status;  
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbee:	78fa      	ldrb	r2, [r7, #3]
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7f7 fe71 	bl	80048da <HAL_PCD_EP_ClrStall>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800cbfc:	7bbb      	ldrb	r3, [r7, #14]
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d816      	bhi.n	800cc30 <USBD_LL_ClearStallEP+0x5c>
 800cc02:	a201      	add	r2, pc, #4	; (adr r2, 800cc08 <USBD_LL_ClearStallEP+0x34>)
 800cc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc08:	0800cc19 	.word	0x0800cc19
 800cc0c:	0800cc1f 	.word	0x0800cc1f
 800cc10:	0800cc25 	.word	0x0800cc25
 800cc14:	0800cc2b 	.word	0x0800cc2b
    case HAL_OK :
      usb_status = USBD_OK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc1c:	e00b      	b.n	800cc36 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc1e:	2302      	movs	r3, #2
 800cc20:	73fb      	strb	r3, [r7, #15]
    break;
 800cc22:	e008      	b.n	800cc36 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc24:	2301      	movs	r3, #1
 800cc26:	73fb      	strb	r3, [r7, #15]
    break;
 800cc28:	e005      	b.n	800cc36 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc2e:	e002      	b.n	800cc36 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc30:	2302      	movs	r3, #2
 800cc32:	73fb      	strb	r3, [r7, #15]
    break;
 800cc34:	bf00      	nop
  }
  return usb_status; 
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc52:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800cc54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	da0b      	bge.n	800cc74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800cc5c:	78fb      	ldrb	r3, [r7, #3]
 800cc5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc62:	68f9      	ldr	r1, [r7, #12]
 800cc64:	4613      	mov	r3, r2
 800cc66:	00db      	lsls	r3, r3, #3
 800cc68:	1a9b      	subs	r3, r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	440b      	add	r3, r1
 800cc6e:	333e      	adds	r3, #62	; 0x3e
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	e00b      	b.n	800cc8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800cc74:	78fb      	ldrb	r3, [r7, #3]
 800cc76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc7a:	68f9      	ldr	r1, [r7, #12]
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	1a9b      	subs	r3, r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	440b      	add	r3, r1
 800cc86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3714      	adds	r7, #20
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccb2:	78fa      	ldrb	r2, [r7, #3]
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7f7 fc43 	bl	8004542 <HAL_PCD_SetAddress>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ccc0:	7bbb      	ldrb	r3, [r7, #14]
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d816      	bhi.n	800ccf4 <USBD_LL_SetUSBAddress+0x5c>
 800ccc6:	a201      	add	r2, pc, #4	; (adr r2, 800cccc <USBD_LL_SetUSBAddress+0x34>)
 800ccc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cccc:	0800ccdd 	.word	0x0800ccdd
 800ccd0:	0800cce3 	.word	0x0800cce3
 800ccd4:	0800cce9 	.word	0x0800cce9
 800ccd8:	0800ccef 	.word	0x0800ccef
    case HAL_OK :
      usb_status = USBD_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	73fb      	strb	r3, [r7, #15]
    break;
 800cce0:	e00b      	b.n	800ccfa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cce2:	2302      	movs	r3, #2
 800cce4:	73fb      	strb	r3, [r7, #15]
    break;
 800cce6:	e008      	b.n	800ccfa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cce8:	2301      	movs	r3, #1
 800ccea:	73fb      	strb	r3, [r7, #15]
    break;
 800ccec:	e005      	b.n	800ccfa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccee:	2302      	movs	r3, #2
 800ccf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf2:	e002      	b.n	800ccfa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf8:	bf00      	nop
  }
  return usb_status;  
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	607a      	str	r2, [r7, #4]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	460b      	mov	r3, r1
 800cd12:	72fb      	strb	r3, [r7, #11]
 800cd14:	4613      	mov	r3, r2
 800cd16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd26:	893b      	ldrh	r3, [r7, #8]
 800cd28:	7af9      	ldrb	r1, [r7, #11]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	f7f7 fd36 	bl	800479c <HAL_PCD_EP_Transmit>
 800cd30:	4603      	mov	r3, r0
 800cd32:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800cd34:	7dbb      	ldrb	r3, [r7, #22]
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	d816      	bhi.n	800cd68 <USBD_LL_Transmit+0x64>
 800cd3a:	a201      	add	r2, pc, #4	; (adr r2, 800cd40 <USBD_LL_Transmit+0x3c>)
 800cd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd40:	0800cd51 	.word	0x0800cd51
 800cd44:	0800cd57 	.word	0x0800cd57
 800cd48:	0800cd5d 	.word	0x0800cd5d
 800cd4c:	0800cd63 	.word	0x0800cd63
    case HAL_OK :
      usb_status = USBD_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	75fb      	strb	r3, [r7, #23]
    break;
 800cd54:	e00b      	b.n	800cd6e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd56:	2302      	movs	r3, #2
 800cd58:	75fb      	strb	r3, [r7, #23]
    break;
 800cd5a:	e008      	b.n	800cd6e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	75fb      	strb	r3, [r7, #23]
    break;
 800cd60:	e005      	b.n	800cd6e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd62:	2302      	movs	r3, #2
 800cd64:	75fb      	strb	r3, [r7, #23]
    break;
 800cd66:	e002      	b.n	800cd6e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800cd68:	2302      	movs	r3, #2
 800cd6a:	75fb      	strb	r3, [r7, #23]
    break;
 800cd6c:	bf00      	nop
  }
  return usb_status;    
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3718      	adds	r7, #24
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	607a      	str	r2, [r7, #4]
 800cd82:	461a      	mov	r2, r3
 800cd84:	460b      	mov	r3, r1
 800cd86:	72fb      	strb	r3, [r7, #11]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd9a:	893b      	ldrh	r3, [r7, #8]
 800cd9c:	7af9      	ldrb	r1, [r7, #11]
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	f7f7 fca6 	bl	80046f0 <HAL_PCD_EP_Receive>
 800cda4:	4603      	mov	r3, r0
 800cda6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800cda8:	7dbb      	ldrb	r3, [r7, #22]
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	d816      	bhi.n	800cddc <USBD_LL_PrepareReceive+0x64>
 800cdae:	a201      	add	r2, pc, #4	; (adr r2, 800cdb4 <USBD_LL_PrepareReceive+0x3c>)
 800cdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb4:	0800cdc5 	.word	0x0800cdc5
 800cdb8:	0800cdcb 	.word	0x0800cdcb
 800cdbc:	0800cdd1 	.word	0x0800cdd1
 800cdc0:	0800cdd7 	.word	0x0800cdd7
    case HAL_OK :
      usb_status = USBD_OK;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	75fb      	strb	r3, [r7, #23]
    break;
 800cdc8:	e00b      	b.n	800cde2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdca:	2302      	movs	r3, #2
 800cdcc:	75fb      	strb	r3, [r7, #23]
    break;
 800cdce:	e008      	b.n	800cde2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	75fb      	strb	r3, [r7, #23]
    break;
 800cdd4:	e005      	b.n	800cde2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdd6:	2302      	movs	r3, #2
 800cdd8:	75fb      	strb	r3, [r7, #23]
    break;
 800cdda:	e002      	b.n	800cde2 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800cddc:	2302      	movs	r3, #2
 800cdde:	75fb      	strb	r3, [r7, #23]
    break;
 800cde0:	bf00      	nop
  }
  return usb_status; 
 800cde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdfe:	78fa      	ldrb	r2, [r7, #3]
 800ce00:	4611      	mov	r1, r2
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7f7 fcb2 	bl	800476c <HAL_PCD_EP_GetRxCount>
 800ce08:	4603      	mov	r3, r0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
	...

0800ce14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d002      	beq.n	800ce2c <HAL_PCDEx_LPM_Callback+0x18>
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d01f      	beq.n	800ce6a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800ce2a:	e03b      	b.n	800cea4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6a1b      	ldr	r3, [r3, #32]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d007      	beq.n	800ce44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ce34:	f000 f854 	bl	800cee0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce38:	4b1c      	ldr	r3, [pc, #112]	; (800ceac <HAL_PCDEx_LPM_Callback+0x98>)
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	4a1b      	ldr	r2, [pc, #108]	; (800ceac <HAL_PCDEx_LPM_Callback+0x98>)
 800ce3e:	f023 0306 	bic.w	r3, r3, #6
 800ce42:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	6812      	ldr	r2, [r2, #0]
 800ce52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce56:	f023 0301 	bic.w	r3, r3, #1
 800ce5a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe fb7d 	bl	800b562 <USBD_LL_Resume>
    break;
 800ce68:	e01c      	b.n	800cea4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	6812      	ldr	r2, [r2, #0]
 800ce78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce7c:	f043 0301 	orr.w	r3, r3, #1
 800ce80:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fe fb55 	bl	800b538 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d005      	beq.n	800cea2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce96:	4b05      	ldr	r3, [pc, #20]	; (800ceac <HAL_PCDEx_LPM_Callback+0x98>)
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	4a04      	ldr	r2, [pc, #16]	; (800ceac <HAL_PCDEx_LPM_Callback+0x98>)
 800ce9c:	f043 0306 	orr.w	r3, r3, #6
 800cea0:	6113      	str	r3, [r2, #16]
    break;   
 800cea2:	bf00      	nop
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	e000ed00 	.word	0xe000ed00

0800ceb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ceb8:	4b03      	ldr	r3, [pc, #12]	; (800cec8 <USBD_static_malloc+0x18>)
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	200001e8 	.word	0x200001e8

0800cecc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]

}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cee4:	f7f3 fb58 	bl	8000598 <SystemClock_Config>
}
 800cee8:	bf00      	nop
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <__libc_init_array>:
 800ceec:	b570      	push	{r4, r5, r6, lr}
 800ceee:	4e0d      	ldr	r6, [pc, #52]	; (800cf24 <__libc_init_array+0x38>)
 800cef0:	4c0d      	ldr	r4, [pc, #52]	; (800cf28 <__libc_init_array+0x3c>)
 800cef2:	1ba4      	subs	r4, r4, r6
 800cef4:	10a4      	asrs	r4, r4, #2
 800cef6:	2500      	movs	r5, #0
 800cef8:	42a5      	cmp	r5, r4
 800cefa:	d109      	bne.n	800cf10 <__libc_init_array+0x24>
 800cefc:	4e0b      	ldr	r6, [pc, #44]	; (800cf2c <__libc_init_array+0x40>)
 800cefe:	4c0c      	ldr	r4, [pc, #48]	; (800cf30 <__libc_init_array+0x44>)
 800cf00:	f000 f820 	bl	800cf44 <_init>
 800cf04:	1ba4      	subs	r4, r4, r6
 800cf06:	10a4      	asrs	r4, r4, #2
 800cf08:	2500      	movs	r5, #0
 800cf0a:	42a5      	cmp	r5, r4
 800cf0c:	d105      	bne.n	800cf1a <__libc_init_array+0x2e>
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}
 800cf10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf14:	4798      	blx	r3
 800cf16:	3501      	adds	r5, #1
 800cf18:	e7ee      	b.n	800cef8 <__libc_init_array+0xc>
 800cf1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf1e:	4798      	blx	r3
 800cf20:	3501      	adds	r5, #1
 800cf22:	e7f2      	b.n	800cf0a <__libc_init_array+0x1e>
 800cf24:	0800d02c 	.word	0x0800d02c
 800cf28:	0800d02c 	.word	0x0800d02c
 800cf2c:	0800d02c 	.word	0x0800d02c
 800cf30:	0800d030 	.word	0x0800d030

0800cf34 <memset>:
 800cf34:	4402      	add	r2, r0
 800cf36:	4603      	mov	r3, r0
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d100      	bne.n	800cf3e <memset+0xa>
 800cf3c:	4770      	bx	lr
 800cf3e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf42:	e7f9      	b.n	800cf38 <memset+0x4>

0800cf44 <_init>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	bf00      	nop
 800cf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4a:	bc08      	pop	{r3}
 800cf4c:	469e      	mov	lr, r3
 800cf4e:	4770      	bx	lr

0800cf50 <_fini>:
 800cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf52:	bf00      	nop
 800cf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf56:	bc08      	pop	{r3}
 800cf58:	469e      	mov	lr, r3
 800cf5a:	4770      	bx	lr
