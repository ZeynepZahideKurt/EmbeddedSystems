
stmf303-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000739c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a8  080075a8  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080075a8  080075a8  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075a8  080075a8  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a8  080075a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080075b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  20000190  08007740  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001354  08007740  00021354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119d4  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028d2  00000000  00000000  00031b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e8  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  00034e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f27  00000000  00000000  00035700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f138  00000000  00000000  00057627  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bfc63  00000000  00000000  0006675f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001263c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e0  00000000  00000000  00126440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000190 	.word	0x20000190
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007518 	.word	0x08007518

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000194 	.word	0x20000194
 80001d0:	08007518 	.word	0x08007518

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f940 	bl	800045c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f810 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f86e 	bl	80002c0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001e4:	f006 fcb8 	bl	8006b58 <MX_USB_DEVICE_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /*CDC_Transmit_FS (data, strlen (data));
	  	  CDC_Transmit_FS (data, strlen (data2));*/
	  CDC_Transmit_FS (my_buf, 14);
 80001e8:	210e      	movs	r1, #14
 80001ea:	4804      	ldr	r0, [pc, #16]	; (80001fc <main+0x28>)
 80001ec:	f006 fd7a 	bl	8006ce4 <CDC_Transmit_FS>
	  	  	  HAL_Delay(1000);
 80001f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f4:	f000 f998 	bl	8000528 <HAL_Delay>
	  CDC_Transmit_FS (my_buf, 14);
 80001f8:	e7f6      	b.n	80001e8 <main+0x14>
 80001fa:	bf00      	nop
 80001fc:	20000000 	.word	0x20000000

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b0a6      	sub	sp, #152	; 0x98
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f007 f97a 	bl	8007508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2258      	movs	r2, #88	; 0x58
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f007 f96c 	bl	8007508 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2301      	movs	r3, #1
 8000232:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	2302      	movs	r3, #2
 8000240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800024c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fd6c 	bl	8001d3c <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800026a:	f000 f84d 	bl	8000308 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000284:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000288:	2101      	movs	r1, #1
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fc6c 	bl	8002b68 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000296:	f000 f837 	bl	8000308 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800029a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800029e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002a4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 fe43 	bl	8002f34 <HAL_RCCEx_PeriphCLKConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002b4:	f000 f828 	bl	8000308 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3798      	adds	r7, #152	; 0x98
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_GPIO_Init+0x44>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <MX_GPIO_Init+0x44>)
 80002cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_GPIO_Init+0x44>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_GPIO_Init+0x44>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <MX_GPIO_Init+0x44>)
 80002e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_GPIO_Init+0x44>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]

}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
	...

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <HAL_MspInit+0x44>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a0e      	ldr	r2, [pc, #56]	; (800035c <HAL_MspInit+0x44>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6193      	str	r3, [r2, #24]
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <HAL_MspInit+0x44>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <HAL_MspInit+0x44>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <HAL_MspInit+0x44>)
 800033c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000340:	61d3      	str	r3, [r2, #28]
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_MspInit+0x44>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <MemManage_Handler+0x4>

0800037a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <UsageFault_Handler+0x4>

08000386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b4:	f000 f898 	bl	80004e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003c0:	4802      	ldr	r0, [pc, #8]	; (80003cc <USB_HP_CAN_TX_IRQHandler+0x10>)
 80003c2:	f000 fae8 	bl	8000996 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20001068 	.word	0x20001068

080003d0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003d4:	4802      	ldr	r0, [pc, #8]	; (80003e0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80003d6:	f000 fade 	bl	8000996 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20001068 	.word	0x20001068

080003e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <SystemInit+0x20>)
 80003ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ee:	4a05      	ldr	r2, [pc, #20]	; (8000404 <SystemInit+0x20>)
 80003f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000440 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800040c:	480d      	ldr	r0, [pc, #52]	; (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 800040e:	490e      	ldr	r1, [pc, #56]	; (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000410:	4a0e      	ldr	r2, [pc, #56]	; (800044c <LoopForever+0xe>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000424:	4c0b      	ldr	r4, [pc, #44]	; (8000454 <LoopForever+0x16>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000432:	f7ff ffd7 	bl	80003e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000436:	f007 f843 	bl	80074c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800043a:	f7ff fecb 	bl	80001d4 <main>

0800043e <LoopForever>:

LoopForever:
    b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000440:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800044c:	080075b0 	.word	0x080075b0
  ldr r2, =_sbss
 8000450:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000454:	20001354 	.word	0x20001354

08000458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC1_2_IRQHandler>
	...

0800045c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_Init+0x28>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <HAL_Init+0x28>)
 8000466:	f043 0310 	orr.w	r3, r3, #16
 800046a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800046c:	2003      	movs	r0, #3
 800046e:	f000 f94d 	bl	800070c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000472:	2000      	movs	r0, #0
 8000474:	f000 f808 	bl	8000488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000478:	f7ff ff4e 	bl	8000318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40022000 	.word	0x40022000

08000488 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_InitTick+0x54>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <HAL_InitTick+0x58>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4619      	mov	r1, r3
 800049a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049e:	fbb3 f3f1 	udiv	r3, r3, r1
 80004a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f965 	bl	8000776 <HAL_SYSTICK_Config>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004b2:	2301      	movs	r3, #1
 80004b4:	e00e      	b.n	80004d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2b0f      	cmp	r3, #15
 80004ba:	d80a      	bhi.n	80004d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004bc:	2200      	movs	r2, #0
 80004be:	6879      	ldr	r1, [r7, #4]
 80004c0:	f04f 30ff 	mov.w	r0, #4294967295
 80004c4:	f000 f92d 	bl	8000722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004c8:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <HAL_InitTick+0x5c>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	e000      	b.n	80004d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004d2:	2301      	movs	r3, #1
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000014 	.word	0x20000014
 80004e0:	2000001c 	.word	0x2000001c
 80004e4:	20000018 	.word	0x20000018

080004e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_IncTick+0x20>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <HAL_IncTick+0x24>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4413      	add	r3, r2
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_IncTick+0x24>)
 80004fa:	6013      	str	r3, [r2, #0]
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000001c 	.word	0x2000001c
 800050c:	200003d0 	.word	0x200003d0

08000510 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  return uwTick;  
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <HAL_GetTick+0x14>)
 8000516:	681b      	ldr	r3, [r3, #0]
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200003d0 	.word	0x200003d0

08000528 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000530:	f7ff ffee 	bl	8000510 <HAL_GetTick>
 8000534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000540:	d005      	beq.n	800054e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_Delay+0x40>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	461a      	mov	r2, r3
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4413      	add	r3, r2
 800054c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800054e:	bf00      	nop
 8000550:	f7ff ffde 	bl	8000510 <HAL_GetTick>
 8000554:	4602      	mov	r2, r0
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	429a      	cmp	r2, r3
 800055e:	d8f7      	bhi.n	8000550 <HAL_Delay+0x28>
  {
  }
}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000001c 	.word	0x2000001c

0800056c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f003 0307 	and.w	r3, r3, #7
 800057a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	60d3      	str	r3, [r2, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <__NVIC_GetPriorityGrouping+0x18>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	f003 0307 	and.w	r3, r3, #7
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db0b      	blt.n	80005fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 021f 	and.w	r2, r3, #31
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <__NVIC_EnableIRQ+0x38>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	2001      	movs	r0, #1
 80005f2:	fa00 f202 	lsl.w	r2, r0, r2
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	.word	0xe000e100

0800060c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	db0a      	blt.n	8000636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	490c      	ldr	r1, [pc, #48]	; (8000658 <__NVIC_SetPriority+0x4c>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	0112      	lsls	r2, r2, #4
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	440b      	add	r3, r1
 8000630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000634:	e00a      	b.n	800064c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4908      	ldr	r1, [pc, #32]	; (800065c <__NVIC_SetPriority+0x50>)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	3b04      	subs	r3, #4
 8000644:	0112      	lsls	r2, r2, #4
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	440b      	add	r3, r1
 800064a:	761a      	strb	r2, [r3, #24]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000660:	b480      	push	{r7}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	f1c3 0307 	rsb	r3, r3, #7
 800067a:	2b04      	cmp	r3, #4
 800067c:	bf28      	it	cs
 800067e:	2304      	movcs	r3, #4
 8000680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3304      	adds	r3, #4
 8000686:	2b06      	cmp	r3, #6
 8000688:	d902      	bls.n	8000690 <NVIC_EncodePriority+0x30>
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3b03      	subs	r3, #3
 800068e:	e000      	b.n	8000692 <NVIC_EncodePriority+0x32>
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 32ff 	mov.w	r2, #4294967295
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	43da      	mvns	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	401a      	ands	r2, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	43d9      	mvns	r1, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	4313      	orrs	r3, r2
         );
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3724      	adds	r7, #36	; 0x24
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d8:	d301      	bcc.n	80006de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006da:	2301      	movs	r3, #1
 80006dc:	e00f      	b.n	80006fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <SysTick_Config+0x40>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006e6:	210f      	movs	r1, #15
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	f7ff ff8e 	bl	800060c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <SysTick_Config+0x40>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <SysTick_Config+0x40>)
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	e000e010 	.word	0xe000e010

0800070c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff29 	bl	800056c <__NVIC_SetPriorityGrouping>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b086      	sub	sp, #24
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000734:	f7ff ff3e 	bl	80005b4 <__NVIC_GetPriorityGrouping>
 8000738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	6978      	ldr	r0, [r7, #20]
 8000740:	f7ff ff8e 	bl	8000660 <NVIC_EncodePriority>
 8000744:	4602      	mov	r2, r0
 8000746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff5d 	bl	800060c <__NVIC_SetPriority>
}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	4603      	mov	r3, r0
 8000762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff31 	bl	80005d0 <__NVIC_EnableIRQ>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ffa2 	bl	80006c8 <SysTick_Config>
 8000784:	4603      	mov	r3, r0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800078e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000790:	b08b      	sub	sp, #44	; 0x2c
 8000792:	af06      	add	r7, sp, #24
 8000794:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	e0d0      	b.n	8000942 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d106      	bne.n	80007ba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f006 fbc9 	bl	8006f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2203      	movs	r2, #3
 80007be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 fde9 	bl	800339e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]
 80007d0:	e04c      	b.n	800086c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	440b      	add	r3, r1
 80007e2:	3301      	adds	r3, #1
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	440b      	add	r3, r1
 80007f8:	7bfa      	ldrb	r2, [r7, #15]
 80007fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	b298      	uxth	r0, r3
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	440b      	add	r3, r1
 800080e:	3336      	adds	r3, #54	; 0x36
 8000810:	4602      	mov	r2, r0
 8000812:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	440b      	add	r3, r1
 8000824:	3303      	adds	r3, #3
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	6879      	ldr	r1, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	440b      	add	r3, r1
 8000838:	3338      	adds	r3, #56	; 0x38
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	440b      	add	r3, r1
 800084c:	333c      	adds	r3, #60	; 0x3c
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000852:	7bfa      	ldrb	r2, [r7, #15]
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	440b      	add	r3, r1
 8000860:	3340      	adds	r3, #64	; 0x40
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	3301      	adds	r3, #1
 800086a:	73fb      	strb	r3, [r7, #15]
 800086c:	7bfa      	ldrb	r2, [r7, #15]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	429a      	cmp	r2, r3
 8000874:	d3ad      	bcc.n	80007d2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000876:	2300      	movs	r3, #0
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e044      	b.n	8000906 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800087c:	7bfa      	ldrb	r2, [r7, #15]
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	440b      	add	r3, r1
 800088a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	4613      	mov	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	440b      	add	r3, r1
 80008a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80008a4:	7bfa      	ldrb	r2, [r7, #15]
 80008a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008a8:	7bfa      	ldrb	r2, [r7, #15]
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008be:	7bfa      	ldrb	r2, [r7, #15]
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	440b      	add	r3, r1
 80008cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	440b      	add	r3, r1
 80008e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008ea:	7bfa      	ldrb	r2, [r7, #15]
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	440b      	add	r3, r1
 80008f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	3301      	adds	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	7bfa      	ldrb	r2, [r7, #15]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	d3b5      	bcc.n	800087c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	687e      	ldr	r6, [r7, #4]
 8000918:	466d      	mov	r5, sp
 800091a:	f106 0410 	add.w	r4, r6, #16
 800091e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	602b      	str	r3, [r5, #0]
 8000926:	1d33      	adds	r3, r6, #4
 8000928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800092a:	6838      	ldr	r0, [r7, #0]
 800092c:	f002 fd52 	bl	80033d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2201      	movs	r2, #1
 800093c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800094a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <HAL_PCD_Start+0x16>
 800095c:	2302      	movs	r3, #2
 800095e:	e016      	b.n	800098e <HAL_PCD_Start+0x44>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2201      	movs	r2, #1
 8000964:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fcff 	bl	8003370 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000972:	2101      	movs	r1, #1
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f006 fd6b 	bl	8007450 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f004 fcd8 	bl	8005334 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f004 fcd1 	bl	800534a <USB_ReadInterrupts>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009b2:	d102      	bne.n	80009ba <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 faf6 	bl	8000fa6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 fcc3 	bl	800534a <USB_ReadInterrupts>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009ce:	d112      	bne.n	80009f6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009d8:	b29a      	uxth	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009e2:	b292      	uxth	r2, r2
 80009e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f006 fb32 	bl	8007052 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009ee:	2100      	movs	r1, #0
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f8c7 	bl	8000b84 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 fca5 	bl	800534a <USB_ReadInterrupts>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a0a:	d10b      	bne.n	8000a24 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a1e:	b292      	uxth	r2, r2
 8000a20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 fc8e 	bl	800534a <USB_ReadInterrupts>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a38:	d10b      	bne.n	8000a52 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a4c:	b292      	uxth	r2, r2
 8000a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f004 fc77 	bl	800534a <USB_ReadInterrupts>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a66:	d126      	bne.n	8000ab6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0204 	bic.w	r2, r2, #4
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 0208 	bic.w	r2, r2, #8
 8000a92:	b292      	uxth	r2, r2
 8000a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f006 fb13 	bl	80070c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ab0:	b292      	uxth	r2, r2
 8000ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 fc45 	bl	800534a <USB_ReadInterrupts>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000aca:	d126      	bne.n	8000b1a <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 0208 	orr.w	r2, r2, #8
 8000ade:	b292      	uxth	r2, r2
 8000ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000af6:	b292      	uxth	r2, r2
 8000af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f042 0204 	orr.w	r2, r2, #4
 8000b0e:	b292      	uxth	r2, r2
 8000b10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f006 fabb 	bl	8007090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 fc13 	bl	800534a <USB_ReadInterrupts>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b2e:	d10e      	bne.n	8000b4e <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b42:	b292      	uxth	r2, r2
 8000b44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f006 fa74 	bl	8007036 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 fbf9 	bl	800534a <USB_ReadInterrupts>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b62:	d10b      	bne.n	8000b7c <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b76:	b292      	uxth	r2, r2
 8000b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d101      	bne.n	8000b9e <HAL_PCD_SetAddress+0x1a>
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	e013      	b.n	8000bc6 <HAL_PCD_SetAddress+0x42>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	78fa      	ldrb	r2, [r7, #3]
 8000baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	78fa      	ldrb	r2, [r7, #3]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 fba8 	bl	800530c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	4611      	mov	r1, r2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4603      	mov	r3, r0
 8000bde:	70fb      	strb	r3, [r7, #3]
 8000be0:	460b      	mov	r3, r1
 8000be2:	803b      	strh	r3, [r7, #0]
 8000be4:	4613      	mov	r3, r2
 8000be6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da0e      	bge.n	8000c12 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	705a      	strb	r2, [r3, #1]
 8000c10:	e00e      	b.n	8000c30 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c12:	78fb      	ldrb	r3, [r7, #3]
 8000c14:	f003 0207 	and.w	r2, r3, #7
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c3c:	883a      	ldrh	r2, [r7, #0]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	78ba      	ldrb	r2, [r7, #2]
 8000c46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	785b      	ldrb	r3, [r3, #1]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c5a:	78bb      	ldrb	r3, [r7, #2]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d102      	bne.n	8000c66 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2200      	movs	r2, #0
 8000c64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d101      	bne.n	8000c74 <HAL_PCD_EP_Open+0xa6>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e00e      	b.n	8000c92 <HAL_PCD_EP_Open+0xc4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68f9      	ldr	r1, [r7, #12]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fbc8 	bl	8003418 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000c90:	7afb      	ldrb	r3, [r7, #11]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da0e      	bge.n	8000ccc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	705a      	strb	r2, [r3, #1]
 8000cca:	e00e      	b.n	8000cea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	f003 0207 	and.w	r2, r3, #7
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000cea:	78fb      	ldrb	r3, [r7, #3]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d101      	bne.n	8000d04 <HAL_PCD_EP_Close+0x6a>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e00e      	b.n	8000d22 <HAL_PCD_EP_Close+0x88>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68f9      	ldr	r1, [r7, #12]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 feee 	bl	8003af4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	460b      	mov	r3, r1
 8000d38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	f003 0207 	and.w	r2, r3, #7
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2200      	movs	r2, #0
 8000d68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000d76:	7afb      	ldrb	r3, [r7, #11]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d106      	bne.n	8000d8e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6979      	ldr	r1, [r7, #20]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 f8a1 	bl	8003ece <USB_EPStartXfer>
 8000d8c:	e005      	b.n	8000d9a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6979      	ldr	r1, [r7, #20]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 f89a 	bl	8003ece <USB_EPStartXfer>
  }

  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	f003 0207 	and.w	r2, r3, #7
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	440b      	add	r3, r1
 8000dc2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	460b      	mov	r3, r1
 8000de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000de4:	7afb      	ldrb	r3, [r7, #11]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e20:	7afb      	ldrb	r3, [r7, #11]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d106      	bne.n	8000e44 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6979      	ldr	r1, [r7, #20]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 f846 	bl	8003ece <USB_EPStartXfer>
 8000e42:	e005      	b.n	8000e50 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6979      	ldr	r1, [r7, #20]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 f83f 	bl	8003ece <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	f003 0207 	and.w	r2, r3, #7
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d901      	bls.n	8000e78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e03e      	b.n	8000ef6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	da0e      	bge.n	8000e9e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	705a      	strb	r2, [r3, #1]
 8000e9c:	e00c      	b.n	8000eb8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e9e:	78fa      	ldrb	r2, [r7, #3]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d101      	bne.n	8000ed8 <HAL_PCD_EP_SetStall+0x7e>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e00e      	b.n	8000ef6 <HAL_PCD_EP_SetStall+0x9c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68f9      	ldr	r1, [r7, #12]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 f911 	bl	800510e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	460b      	mov	r3, r1
 8000f08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f0a:	78fb      	ldrb	r3, [r7, #3]
 8000f0c:	f003 020f 	and.w	r2, r3, #15
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d901      	bls.n	8000f1c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e040      	b.n	8000f9e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da0e      	bge.n	8000f42 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	705a      	strb	r2, [r3, #1]
 8000f40:	e00e      	b.n	8000f60 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	f003 0207 	and.w	r2, r3, #7
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2200      	movs	r2, #0
 8000f64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_PCD_EP_ClrStall+0x82>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e00e      	b.n	8000f9e <HAL_PCD_EP_ClrStall+0xa0>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 f90e 	bl	80051b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b08e      	sub	sp, #56	; 0x38
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000fae:	e2d1      	b.n	8001554 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000fba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8000fc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f040 8152 	bne.w	8001274 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d150      	bne.n	800107c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fea:	81fb      	strh	r3, [r7, #14]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3328      	adds	r3, #40	; 0x28
 8001002:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800100c:	b29b      	uxth	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	4413      	add	r3, r2
 800101e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	441a      	add	r2, r3
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800103a:	2100      	movs	r1, #0
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f005 ffe0 	bl	8007002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8282 	beq.w	8001554 <PCD_EP_ISR_Handler+0x5ae>
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	2b00      	cmp	r3, #0
 8001056:	f040 827d 	bne.w	8001554 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001066:	b2da      	uxtb	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b292      	uxth	r2, r2
 800106e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800107a:	e26b      	b.n	8001554 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800108c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800108e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001092:	2b00      	cmp	r3, #0
 8001094:	d032      	beq.n	80010fc <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f004 f98b 	bl	80053ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010e2:	4013      	ands	r3, r2
 80010e4:	823b      	strh	r3, [r7, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	8a3a      	ldrh	r2, [r7, #16]
 80010ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010f0:	b292      	uxth	r2, r2
 80010f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f005 ff57 	bl	8006fa8 <HAL_PCD_SetupStageCallback>
 80010fa:	e22b      	b.n	8001554 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001100:	2b00      	cmp	r3, #0
 8001102:	f280 8227 	bge.w	8001554 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b29a      	uxth	r2, r3
 800110e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001112:	4013      	ands	r3, r2
 8001114:	83bb      	strh	r3, [r7, #28]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	8bba      	ldrh	r2, [r7, #28]
 800111c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001120:	b292      	uxth	r2, r2
 8001122:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800112c:	b29b      	uxth	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	4413      	add	r3, r2
 800113e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d019      	beq.n	8001188 <PCD_EP_ISR_Handler+0x1e2>
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d015      	beq.n	8001188 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	6959      	ldr	r1, [r3, #20]
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800116c:	b29b      	uxth	r3, r3
 800116e:	f004 f93d 	bl	80053ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	441a      	add	r2, r3
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001180:	2100      	movs	r1, #0
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f005 ff22 	bl	8006fcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001196:	b29b      	uxth	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4413      	add	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d112      	bne.n	80011d6 <PCD_EP_ISR_Handler+0x230>
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	801a      	strh	r2, [r3, #0]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	801a      	strh	r2, [r3, #0]
 80011d4:	e02f      	b.n	8001236 <PCD_EP_ISR_Handler+0x290>
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	2b3e      	cmp	r3, #62	; 0x3e
 80011dc:	d813      	bhi.n	8001206 <PCD_EP_ISR_Handler+0x260>
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	085b      	lsrs	r3, r3, #1
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <PCD_EP_ISR_Handler+0x252>
 80011f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f4:	3301      	adds	r3, #1
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
 80011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	b29a      	uxth	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	801a      	strh	r2, [r3, #0]
 8001204:	e017      	b.n	8001236 <PCD_EP_ISR_Handler+0x290>
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <PCD_EP_ISR_Handler+0x27a>
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	3b01      	subs	r3, #1
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	b29b      	uxth	r3, r3
 8001224:	029b      	lsls	r3, r3, #10
 8001226:	b29b      	uxth	r3, r3
 8001228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800122c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001230:	b29a      	uxth	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001246:	827b      	strh	r3, [r7, #18]
 8001248:	8a7b      	ldrh	r3, [r7, #18]
 800124a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800124e:	827b      	strh	r3, [r7, #18]
 8001250:	8a7b      	ldrh	r3, [r7, #18]
 8001252:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001256:	827b      	strh	r3, [r7, #18]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	8a7b      	ldrh	r3, [r7, #18]
 800125e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800126a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126e:	b29b      	uxth	r3, r3
 8001270:	8013      	strh	r3, [r2, #0]
 8001272:	e16f      	b.n	8001554 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001286:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800128a:	2b00      	cmp	r3, #0
 800128c:	f280 80e4 	bge.w	8001458 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012a6:	4013      	ands	r3, r2
 80012a8:	853b      	strh	r3, [r7, #40]	; 0x28
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012be:	b292      	uxth	r2, r2
 80012c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80012c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	7b1b      	ldrb	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d120      	bne.n	8001322 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001304:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001306:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8083 	beq.w	8001414 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	6959      	ldr	r1, [r3, #20]
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	88da      	ldrh	r2, [r3, #6]
 800131a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800131c:	f004 f866 	bl	80053ec <USB_ReadPMA>
 8001320:	e078      	b.n	8001414 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	78db      	ldrb	r3, [r3, #3]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d108      	bne.n	800133c <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800132a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800132c:	461a      	mov	r2, r3
 800132e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f91d 	bl	8001570 <HAL_PCD_EP_DB_Receive>
 8001336:	4603      	mov	r3, r0
 8001338:	86fb      	strh	r3, [r7, #54]	; 0x36
 800133a:	e06b      	b.n	8001414 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001356:	847b      	strh	r3, [r7, #34]	; 0x22
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	441a      	add	r2, r3
 8001366:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800136c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001374:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001378:	b29b      	uxth	r3, r3
 800137a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d01f      	beq.n	80013d6 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800139e:	b29b      	uxth	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4413      	add	r3, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80013bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d028      	beq.n	8001414 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	6959      	ldr	r1, [r3, #20]
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	891a      	ldrh	r2, [r3, #8]
 80013ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013d0:	f004 f80c 	bl	80053ec <USB_ReadPMA>
 80013d4:	e01e      	b.n	8001414 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013de:	b29b      	uxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013fa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80013fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	6959      	ldr	r1, [r3, #20]
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	895a      	ldrh	r2, [r3, #10]
 800140e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001410:	f003 ffec 	bl	80053ec <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	69da      	ldr	r2, [r3, #28]
 8001418:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800141a:	441a      	add	r2, r3
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001426:	441a      	add	r2, r3
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <PCD_EP_ISR_Handler+0x498>
 8001434:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	429a      	cmp	r2, r3
 800143c:	d206      	bcs.n	800144c <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f005 fdc1 	bl	8006fcc <HAL_PCD_DataOutStageCallback>
 800144a:	e005      	b.n	8001458 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fd3b 	bl	8003ece <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001458:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	2b00      	cmp	r3, #0
 8001460:	d078      	beq.n	8001554 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001462:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800148c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001490:	843b      	strh	r3, [r7, #32]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	441a      	add	r2, r3
 80014a0:	8c3b      	ldrh	r3, [r7, #32]
 80014a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d108      	bne.n	80014c8 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d144      	bne.n	8001548 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80014be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d13f      	bne.n	8001548 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ec:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d906      	bls.n	8001506 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	8bfb      	ldrh	r3, [r7, #30]
 80014fe:	1ad2      	subs	r2, r2, r3
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	e002      	b.n	800150c <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d106      	bne.n	8001522 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f005 fd71 	bl	8007002 <HAL_PCD_DataInStageCallback>
 8001520:	e018      	b.n	8001554 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	8bfb      	ldrh	r3, [r7, #30]
 8001528:	441a      	add	r2, r3
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	8bfb      	ldrh	r3, [r7, #30]
 8001534:	441a      	add	r2, r3
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001540:	4618      	mov	r0, r3
 8001542:	f002 fcc4 	bl	8003ece <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001546:	e005      	b.n	8001554 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001548:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800154a:	461a      	mov	r2, r3
 800154c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f917 	bl	8001782 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800155c:	b29b      	uxth	r3, r3
 800155e:	b21b      	sxth	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	f6ff ad25 	blt.w	8000fb0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3738      	adds	r7, #56	; 0x38
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	4613      	mov	r3, r2
 800157c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d07c      	beq.n	8001682 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001590:	b29b      	uxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	8b7b      	ldrh	r3, [r7, #26]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d306      	bcc.n	80015c6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	8b7b      	ldrh	r3, [r7, #26]
 80015be:	1ad2      	subs	r2, r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	619a      	str	r2, [r3, #24]
 80015c4:	e002      	b.n	80015cc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d123      	bne.n	800161c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ee:	833b      	strh	r3, [r7, #24]
 80015f0:	8b3b      	ldrh	r3, [r7, #24]
 80015f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80015f6:	833b      	strh	r3, [r7, #24]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	441a      	add	r2, r3
 8001606:	8b3b      	ldrh	r3, [r7, #24]
 8001608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800160c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	b29b      	uxth	r3, r3
 800161a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01f      	beq.n	8001666 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800163c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	441a      	add	r2, r3
 8001650:	8afb      	ldrh	r3, [r7, #22]
 8001652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800165a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800165e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001662:	b29b      	uxth	r3, r3
 8001664:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001666:	8b7b      	ldrh	r3, [r7, #26]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8085 	beq.w	8001778 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	6959      	ldr	r1, [r3, #20]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	891a      	ldrh	r2, [r3, #8]
 800167a:	8b7b      	ldrh	r3, [r7, #26]
 800167c:	f003 feb6 	bl	80053ec <USB_ReadPMA>
 8001680:	e07a      	b.n	8001778 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	4413      	add	r3, r2
 800169c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	699a      	ldr	r2, [r3, #24]
 80016ac:	8b7b      	ldrh	r3, [r7, #26]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d306      	bcc.n	80016c0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	8b7b      	ldrh	r3, [r7, #26]
 80016b8:	1ad2      	subs	r2, r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	619a      	str	r2, [r3, #24]
 80016be:	e002      	b.n	80016c6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d123      	bne.n	8001716 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e8:	83fb      	strh	r3, [r7, #30]
 80016ea:	8bfb      	ldrh	r3, [r7, #30]
 80016ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80016f0:	83fb      	strh	r3, [r7, #30]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	441a      	add	r2, r3
 8001700:	8bfb      	ldrh	r3, [r7, #30]
 8001702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800170a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001712:	b29b      	uxth	r3, r3
 8001714:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d11f      	bne.n	8001760 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173a:	83bb      	strh	r3, [r7, #28]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	441a      	add	r2, r3
 800174a:	8bbb      	ldrh	r3, [r7, #28]
 800174c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800175c:	b29b      	uxth	r3, r3
 800175e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001760:	8b7b      	ldrh	r3, [r7, #26]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	6959      	ldr	r1, [r3, #20]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	895a      	ldrh	r2, [r3, #10]
 8001772:	8b7b      	ldrh	r3, [r7, #26]
 8001774:	f003 fe3a 	bl	80053ec <USB_ReadPMA>
    }
  }

  return count;
 8001778:	8b7b      	ldrh	r3, [r7, #26]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b092      	sub	sp, #72	; 0x48
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	4613      	mov	r3, r2
 800178e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8130 	beq.w	80019fc <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d906      	bls.n	80017da <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	699a      	ldr	r2, [r3, #24]
 80017d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017d2:	1ad2      	subs	r2, r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	e002      	b.n	80017e0 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d12c      	bne.n	8001842 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f005 fc07 	bl	8007002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 822d 	beq.w	8001c5a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181a:	827b      	strh	r3, [r7, #18]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	441a      	add	r2, r3
 800182a:	8a7b      	ldrh	r3, [r7, #18]
 800182c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	b29b      	uxth	r3, r3
 800183e:	8013      	strh	r3, [r2, #0]
 8001840:	e20b      	b.n	8001c5a <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01f      	beq.n	800188c <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001866:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	441a      	add	r2, r3
 8001876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800187c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001888:	b29b      	uxth	r3, r3
 800188a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001892:	2b01      	cmp	r3, #1
 8001894:	f040 81e1 	bne.w	8001c5a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800189e:	441a      	add	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	69da      	ldr	r2, [r3, #28]
 80018a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018aa:	441a      	add	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d309      	bcc.n	80018d0 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c8:	1ad2      	subs	r2, r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	621a      	str	r2, [r3, #32]
 80018ce:	e014      	b.n	80018fa <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d106      	bne.n	80018e6 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80018d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018e4:	e009      	b.n	80018fa <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d155      	bne.n	80019ae <HAL_PCD_EP_DB_Transmit+0x22c>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	4413      	add	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	00da      	lsls	r2, r3, #3
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	4413      	add	r3, r2
 8001924:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800192c:	2b00      	cmp	r3, #0
 800192e:	d112      	bne.n	8001956 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800193a:	b29a      	uxth	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	801a      	strh	r2, [r3, #0]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800194a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800194e:	b29a      	uxth	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	801a      	strh	r2, [r3, #0]
 8001954:	e047      	b.n	80019e6 <HAL_PCD_EP_DB_Transmit+0x264>
 8001956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001958:	2b3e      	cmp	r3, #62	; 0x3e
 800195a:	d811      	bhi.n	8001980 <HAL_PCD_EP_DB_Transmit+0x1fe>
 800195c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
 8001962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <HAL_PCD_EP_DB_Transmit+0x1f0>
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	3301      	adds	r3, #1
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	b29b      	uxth	r3, r3
 8001976:	029b      	lsls	r3, r3, #10
 8001978:	b29a      	uxth	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	e032      	b.n	80019e6 <HAL_PCD_EP_DB_Transmit+0x264>
 8001980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
 8001986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <HAL_PCD_EP_DB_Transmit+0x214>
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	3b01      	subs	r3, #1
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001998:	b29b      	uxth	r3, r3
 800199a:	029b      	lsls	r3, r3, #10
 800199c:	b29b      	uxth	r3, r3
 800199e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	e01b      	b.n	80019e6 <HAL_PCD_EP_DB_Transmit+0x264>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	785b      	ldrb	r3, [r3, #1]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d117      	bne.n	80019e6 <HAL_PCD_EP_DB_Transmit+0x264>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	623b      	str	r3, [r7, #32]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	4413      	add	r3, r2
 80019cc:	623b      	str	r3, [r7, #32]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	00da      	lsls	r2, r3, #3
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	4413      	add	r3, r2
 80019d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	6959      	ldr	r1, [r3, #20]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	891a      	ldrh	r2, [r3, #8]
 80019f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f003 fcb8 	bl	800536a <USB_WritePMA>
 80019fa:	e12e      	b.n	8001c5a <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a20:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d306      	bcc.n	8001a3a <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a32:	1ad2      	subs	r2, r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	619a      	str	r2, [r3, #24]
 8001a38:	e002      	b.n	8001a40 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d12c      	bne.n	8001aa2 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f005 fad7 	bl	8007002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 80fd 	bne.w	8001c5a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	441a      	add	r2, r3
 8001a8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	8013      	strh	r3, [r2, #0]
 8001aa0:	e0db      	b.n	8001c5a <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d11f      	bne.n	8001aec <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	441a      	add	r2, r3
 8001ad6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	f040 80b1 	bne.w	8001c5a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001afe:	441a      	add	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b0a:	441a      	add	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	6a1a      	ldr	r2, [r3, #32]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d309      	bcc.n	8001b30 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	6a1a      	ldr	r2, [r3, #32]
 8001b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b28:	1ad2      	subs	r2, r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	621a      	str	r2, [r3, #32]
 8001b2e:	e014      	b.n	8001b5a <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d106      	bne.n	8001b46 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8001b38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b44:	e009      	b.n	8001b5a <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	785b      	ldrb	r3, [r3, #1]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d155      	bne.n	8001c14 <HAL_PCD_EP_DB_Transmit+0x492>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7c:	4413      	add	r3, r2
 8001b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	00da      	lsls	r2, r3, #3
 8001b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b88:	4413      	add	r3, r2
 8001b8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d112      	bne.n	8001bbc <HAL_PCD_EP_DB_Transmit+0x43a>
 8001b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	e044      	b.n	8001c46 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8001bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbe:	2b3e      	cmp	r3, #62	; 0x3e
 8001bc0:	d811      	bhi.n	8001be6 <HAL_PCD_EP_DB_Transmit+0x464>
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_PCD_EP_DB_Transmit+0x456>
 8001bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	029b      	lsls	r3, r3, #10
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be2:	801a      	strh	r2, [r3, #0]
 8001be4:	e02f      	b.n	8001c46 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8001be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be8:	095b      	lsrs	r3, r3, #5
 8001bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <HAL_PCD_EP_DB_Transmit+0x47a>
 8001bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c10:	801a      	strh	r2, [r3, #0]
 8001c12:	e018      	b.n	8001c46 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	785b      	ldrb	r3, [r3, #1]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d114      	bne.n	8001c46 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2a:	4413      	add	r3, r2
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	00da      	lsls	r2, r3, #3
 8001c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c36:	4413      	add	r3, r2
 8001c38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	6959      	ldr	r1, [r3, #20]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	895a      	ldrh	r2, [r3, #10]
 8001c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f003 fb88 	bl	800536a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c74:	823b      	strh	r3, [r7, #16]
 8001c76:	8a3b      	ldrh	r3, [r7, #16]
 8001c78:	f083 0310 	eor.w	r3, r3, #16
 8001c7c:	823b      	strh	r3, [r7, #16]
 8001c7e:	8a3b      	ldrh	r3, [r7, #16]
 8001c80:	f083 0320 	eor.w	r3, r3, #32
 8001c84:	823b      	strh	r3, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	441a      	add	r2, r3
 8001c94:	8a3b      	ldrh	r3, [r7, #16]
 8001c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3748      	adds	r7, #72	; 0x48
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	817b      	strh	r3, [r7, #10]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd2:	897b      	ldrh	r3, [r7, #10]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	e009      	b.n	8001cfe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cea:	897a      	ldrh	r2, [r7, #10]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001cfe:	893b      	ldrh	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2200      	movs	r2, #0
 8001d08:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	80da      	strh	r2, [r3, #6]
 8001d12:	e00b      	b.n	8001d2c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2201      	movs	r2, #1
 8001d18:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	f000 bf01 	b.w	8002b58 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8160 	beq.w	8002026 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d66:	4bae      	ldr	r3, [pc, #696]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d00c      	beq.n	8001d8c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d72:	4bab      	ldr	r3, [pc, #684]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d159      	bne.n	8001e32 <HAL_RCC_OscConfig+0xf6>
 8001d7e:	4ba8      	ldr	r3, [pc, #672]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8a:	d152      	bne.n	8001e32 <HAL_RCC_OscConfig+0xf6>
 8001d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001da0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_OscConfig+0x82>
 8001db8:	4b99      	ldr	r3, [pc, #612]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0xae>
 8001dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dda:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001de6:	4b8e      	ldr	r3, [pc, #568]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001df2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001df6:	fa92 f2a2 	rbit	r2, r2
 8001dfa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001dfe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e02:	fab2 f282 	clz	r2, r2
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f042 0220 	orr.w	r2, r2, #32
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f002 021f 	and.w	r2, r2, #31
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8102 	beq.w	8002024 <HAL_RCC_OscConfig+0x2e8>
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 80fc 	bne.w	8002024 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f000 be93 	b.w	8002b58 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x110>
 8001e3e:	4b78      	ldr	r3, [pc, #480]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a77      	ldr	r2, [pc, #476]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e030      	b.n	8001eae <HAL_RCC_OscConfig+0x172>
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x134>
 8001e56:	4b72      	ldr	r3, [pc, #456]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a71      	ldr	r2, [pc, #452]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b6f      	ldr	r3, [pc, #444]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6e      	ldr	r2, [pc, #440]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e01e      	b.n	8001eae <HAL_RCC_OscConfig+0x172>
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x15a>
 8001e7c:	4b68      	ldr	r3, [pc, #416]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a67      	ldr	r2, [pc, #412]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b65      	ldr	r3, [pc, #404]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a64      	ldr	r2, [pc, #400]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0x172>
 8001e96:	4b62      	ldr	r3, [pc, #392]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a61      	ldr	r2, [pc, #388]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b5f      	ldr	r3, [pc, #380]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5e      	ldr	r2, [pc, #376]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d059      	beq.n	8001f6c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fb2a 	bl	8000510 <HAL_GetTick>
 8001ebc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec2:	f7fe fb25 	bl	8000510 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d902      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	f000 be40 	b.w	8002b58 <HAL_RCC_OscConfig+0xe1c>
 8001ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001edc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001eec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d102      	bne.n	8001f0a <HAL_RCC_OscConfig+0x1ce>
 8001f04:	4b46      	ldr	r3, [pc, #280]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x1fa>
 8001f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f26:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f32:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f3a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001f3e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001f42:	fa92 f2a2 	rbit	r2, r2
 8001f46:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001f4a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f4e:	fab2 f282 	clz	r2, r2
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f042 0220 	orr.w	r2, r2, #32
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	f002 021f 	and.w	r2, r2, #31
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0ab      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x186>
 8001f6a:	e05c      	b.n	8002026 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fad0 	bl	8000510 <HAL_GetTick>
 8001f70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f76:	f7fe facb 	bl	8000510 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d902      	bls.n	8001f8c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	f000 bde6 	b.w	8002b58 <HAL_RCC_OscConfig+0xe1c>
 8001f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f90:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001fa0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_OscConfig+0x282>
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x2ae>
 8001fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_RCC_OscConfig+0x2e4>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001ff2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001ffe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ab      	bne.n	8001f76 <HAL_RCC_OscConfig+0x23a>
 800201e:	e002      	b.n	8002026 <HAL_RCC_OscConfig+0x2ea>
 8002020:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8170 	beq.w	8002316 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002036:	4bd0      	ldr	r3, [pc, #832]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002042:	4bcd      	ldr	r3, [pc, #820]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	d16d      	bne.n	800212a <HAL_RCC_OscConfig+0x3ee>
 800204e:	4bca      	ldr	r3, [pc, #808]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205a:	d166      	bne.n	800212a <HAL_RCC_OscConfig+0x3ee>
 800205c:	2302      	movs	r3, #2
 800205e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800206e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d102      	bne.n	800208c <HAL_RCC_OscConfig+0x350>
 8002086:	4bbc      	ldr	r3, [pc, #752]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	e013      	b.n	80020b4 <HAL_RCC_OscConfig+0x378>
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020b0:	4bb1      	ldr	r3, [pc, #708]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	2202      	movs	r2, #2
 80020b6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80020ba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80020c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f042 0220 	orr.w	r2, r2, #32
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <HAL_RCC_OscConfig+0x3ba>
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d002      	beq.n	80020f6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f000 bd31 	b.w	8002b58 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4ba0      	ldr	r3, [pc, #640]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	21f8      	movs	r1, #248	; 0xf8
 8002106:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800210e:	fa91 f1a1 	rbit	r1, r1
 8002112:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002116:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800211a:	fab1 f181 	clz	r1, r1
 800211e:	b2c9      	uxtb	r1, r1
 8002120:	408b      	lsls	r3, r1
 8002122:	4995      	ldr	r1, [pc, #596]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002128:	e0f5      	b.n	8002316 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8085 	beq.w	8002240 <HAL_RCC_OscConfig+0x504>
 8002136:	2301      	movs	r3, #1
 8002138:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002148:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002156:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	461a      	mov	r2, r3
 800215e:	2301      	movs	r3, #1
 8002160:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe f9d5 	bl	8000510 <HAL_GetTick>
 8002166:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216c:	f7fe f9d0 	bl	8000510 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d902      	bls.n	8002182 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	f000 bceb 	b.w	8002b58 <HAL_RCC_OscConfig+0xe1c>
 8002182:	2302      	movs	r3, #2
 8002184:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002194:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_OscConfig+0x476>
 80021ac:	4b72      	ldr	r3, [pc, #456]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	e013      	b.n	80021da <HAL_RCC_OscConfig+0x49e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80021c4:	2302      	movs	r3, #2
 80021c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021d6:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2202      	movs	r2, #2
 80021dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80021e4:	fa92 f2a2 	rbit	r2, r2
 80021e8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80021ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f042 0220 	orr.w	r2, r2, #32
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f002 021f 	and.w	r2, r2, #31
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f202 	lsl.w	r2, r1, r2
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0af      	beq.n	800216c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	21f8      	movs	r1, #248	; 0xf8
 800221c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002224:	fa91 f1a1 	rbit	r1, r1
 8002228:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800222c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002230:	fab1 f181 	clz	r1, r1
 8002234:	b2c9      	uxtb	r1, r1
 8002236:	408b      	lsls	r3, r1
 8002238:	494f      	ldr	r1, [pc, #316]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
 800223e:	e06a      	b.n	8002316 <HAL_RCC_OscConfig+0x5da>
 8002240:	2301      	movs	r3, #1
 8002242:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002252:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002260:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	461a      	mov	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe f950 	bl	8000510 <HAL_GetTick>
 8002270:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002276:	f7fe f94b 	bl	8000510 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d902      	bls.n	800228c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	f000 bc66 	b.w	8002b58 <HAL_RCC_OscConfig+0xe1c>
 800228c:	2302      	movs	r3, #2
 800228e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800229e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d102      	bne.n	80022bc <HAL_RCC_OscConfig+0x580>
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	e013      	b.n	80022e4 <HAL_RCC_OscConfig+0x5a8>
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_OscConfig+0x63c>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2202      	movs	r2, #2
 80022e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80022ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80022ee:	fa92 f2a2 	rbit	r2, r2
 80022f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80022f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f042 0220 	orr.w	r2, r2, #32
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f002 021f 	and.w	r2, r2, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1af      	bne.n	8002276 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80da 	beq.w	80024da <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d069      	beq.n	8002404 <HAL_RCC_OscConfig+0x6c8>
 8002330:	2301      	movs	r3, #1
 8002332:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002342:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_OscConfig+0x640>)
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	461a      	mov	r2, r3
 8002356:	2301      	movs	r3, #1
 8002358:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7fe f8d9 	bl	8000510 <HAL_GetTick>
 800235e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	e00d      	b.n	8002380 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe f8d4 	bl	8000510 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d905      	bls.n	8002380 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e3ef      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
 8002378:	40021000 	.word	0x40021000
 800237c:	10908120 	.word	0x10908120
 8002380:	2302      	movs	r3, #2
 8002382:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c4:	4ba4      	ldr	r3, [pc, #656]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80023c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023cc:	2102      	movs	r1, #2
 80023ce:	6019      	str	r1, [r3, #0]
 80023d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f1a3 	rbit	r1, r3
 80023da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023de:	6019      	str	r1, [r3, #0]
  return result;
 80023e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0b0      	beq.n	8002364 <HAL_RCC_OscConfig+0x628>
 8002402:	e06a      	b.n	80024da <HAL_RCC_OscConfig+0x79e>
 8002404:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800241a:	601a      	str	r2, [r3, #0]
  return result;
 800241c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002420:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	4b8c      	ldr	r3, [pc, #560]	; (800265c <HAL_RCC_OscConfig+0x920>)
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	461a      	mov	r2, r3
 8002432:	2300      	movs	r3, #0
 8002434:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe f86b 	bl	8000510 <HAL_GetTick>
 800243a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243e:	e009      	b.n	8002454 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002440:	f7fe f866 	bl	8000510 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e381      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
 8002454:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002458:	2202      	movs	r2, #2
 800245a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002470:	2202      	movs	r2, #2
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002488:	2202      	movs	r2, #2
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800249a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249c:	4b6e      	ldr	r3, [pc, #440]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 800249e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024a4:	2102      	movs	r1, #2
 80024a6:	6019      	str	r1, [r3, #0]
 80024a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f1a3 	rbit	r1, r3
 80024b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80024b6:	6019      	str	r1, [r3, #0]
  return result;
 80024b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1b2      	bne.n	8002440 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8157 	beq.w	8002798 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d112      	bne.n	8002522 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b56      	ldr	r3, [pc, #344]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a55      	ldr	r2, [pc, #340]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002506:	61d3      	str	r3, [r2, #28]
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b4f      	ldr	r3, [pc, #316]	; (8002660 <HAL_RCC_OscConfig+0x924>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11a      	bne.n	8002564 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252e:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCC_OscConfig+0x924>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_RCC_OscConfig+0x924>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253a:	f7fd ffe9 	bl	8000510 <HAL_GetTick>
 800253e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002542:	e009      	b.n	8002558 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002544:	f7fd ffe4 	bl	8000510 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	; 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e2ff      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCC_OscConfig+0x924>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ef      	beq.n	8002544 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d106      	bne.n	800257c <HAL_RCC_OscConfig+0x840>
 800256e:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a39      	ldr	r2, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6213      	str	r3, [r2, #32]
 800257a:	e02f      	b.n	80025dc <HAL_RCC_OscConfig+0x8a0>
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x864>
 8002586:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a33      	ldr	r2, [pc, #204]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6213      	str	r3, [r2, #32]
 8002592:	4b31      	ldr	r3, [pc, #196]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a30      	ldr	r2, [pc, #192]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6213      	str	r3, [r2, #32]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0x8a0>
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x888>
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6213      	str	r3, [r2, #32]
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4a27      	ldr	r2, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6213      	str	r3, [r2, #32]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0x8a0>
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a23      	ldr	r2, [pc, #140]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4a20      	ldr	r2, [pc, #128]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 80025d6:	f023 0304 	bic.w	r3, r3, #4
 80025da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d06a      	beq.n	80026bc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fd ff93 	bl	8000510 <HAL_GetTick>
 80025ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fd ff8e 	bl	8000510 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e2a7      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
 8002608:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800260c:	2202      	movs	r2, #2
 800260e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fa93 f2a3 	rbit	r2, r3
 800261a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002624:	2202      	movs	r2, #2
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	fa93 f2a3 	rbit	r2, r3
 8002632:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002636:	601a      	str	r2, [r3, #0]
  return result;
 8002638:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800263c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d108      	bne.n	8002664 <HAL_RCC_OscConfig+0x928>
 8002652:	4b01      	ldr	r3, [pc, #4]	; (8002658 <HAL_RCC_OscConfig+0x91c>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	e013      	b.n	8002680 <HAL_RCC_OscConfig+0x944>
 8002658:	40021000 	.word	0x40021000
 800265c:	10908120 	.word	0x10908120
 8002660:	40007000 	.word	0x40007000
 8002664:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002668:	2202      	movs	r2, #2
 800266a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	4bc0      	ldr	r3, [pc, #768]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002684:	2102      	movs	r1, #2
 8002686:	6011      	str	r1, [r2, #0]
 8002688:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	fa92 f1a2 	rbit	r1, r2
 8002692:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002696:	6011      	str	r1, [r2, #0]
  return result;
 8002698:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d09a      	beq.n	80025f0 <HAL_RCC_OscConfig+0x8b4>
 80026ba:	e063      	b.n	8002784 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7fd ff28 	bl	8000510 <HAL_GetTick>
 80026c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	e00b      	b.n	80026de <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fd ff23 	bl	8000510 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e23c      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
 80026de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026fa:	2202      	movs	r2, #2
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800270c:	601a      	str	r2, [r3, #0]
  return result;
 800270e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002712:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d102      	bne.n	800272e <HAL_RCC_OscConfig+0x9f2>
 8002728:	4b95      	ldr	r3, [pc, #596]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	e00d      	b.n	800274a <HAL_RCC_OscConfig+0xa0e>
 800272e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002732:	2202      	movs	r2, #2
 8002734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	4b8e      	ldr	r3, [pc, #568]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800274e:	2102      	movs	r1, #2
 8002750:	6011      	str	r1, [r2, #0]
 8002752:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	fa92 f1a2 	rbit	r1, r2
 800275c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002760:	6011      	str	r1, [r2, #0]
  return result;
 8002762:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1a0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002784:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b7c      	ldr	r3, [pc, #496]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4a7b      	ldr	r2, [pc, #492]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002796:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 81d9 	beq.w	8002b56 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b76      	ldr	r3, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	f000 81a6 	beq.w	8002afe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	f040 811e 	bne.w	80029fa <HAL_RCC_OscConfig+0xcbe>
 80027be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027d6:	601a      	str	r2, [r3, #0]
  return result;
 80027d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	461a      	mov	r2, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fd fe8c 	bl	8000510 <HAL_GetTick>
 80027f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fc:	e009      	b.n	8002812 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fd fe87 	bl	8000510 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1a2      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
 8002812:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800281a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800282a:	601a      	str	r2, [r3, #0]
  return result;
 800282c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002830:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0xb10>
 8002846:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	e01b      	b.n	8002884 <HAL_RCC_OscConfig+0xb48>
 800284c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800286a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002888:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800288c:	6011      	str	r1, [r2, #0]
 800288e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	fa92 f1a2 	rbit	r1, r2
 8002898:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800289c:	6011      	str	r1, [r2, #0]
  return result;
 800289e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	fab2 f282 	clz	r2, r2
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f042 0220 	orr.w	r2, r2, #32
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f002 021f 	and.w	r2, r2, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d19e      	bne.n	80027fe <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c0:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f023 020f 	bic.w	r2, r3, #15
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	492c      	ldr	r1, [pc, #176]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6a19      	ldr	r1, [r3, #32]
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	4925      	ldr	r1, [pc, #148]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
 80028f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002908:	601a      	str	r2, [r3, #0]
  return result;
 800290a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800290e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800291a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	461a      	mov	r2, r3
 8002922:	2301      	movs	r3, #1
 8002924:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fd fdf3 	bl	8000510 <HAL_GetTick>
 800292a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800292e:	e009      	b.n	8002944 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002930:	f7fd fdee 	bl	8000510 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e109      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
 8002944:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800294c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800295c:	601a      	str	r2, [r3, #0]
  return result;
 800295e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002962:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0xc48>
 8002978:	4b01      	ldr	r3, [pc, #4]	; (8002980 <HAL_RCC_OscConfig+0xc44>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	e01e      	b.n	80029bc <HAL_RCC_OscConfig+0xc80>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fa93 f2a3 	rbit	r2, r3
 80029b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0xe28>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029c4:	6011      	str	r1, [r2, #0]
 80029c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fa92 f1a2 	rbit	r1, r2
 80029d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029d4:	6011      	str	r1, [r2, #0]
  return result;
 80029d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	fab2 f282 	clz	r2, r2
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f042 0220 	orr.w	r2, r2, #32
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f002 021f 	and.w	r2, r2, #31
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f202 	lsl.w	r2, r1, r2
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d09b      	beq.n	8002930 <HAL_RCC_OscConfig+0xbf4>
 80029f8:	e0ad      	b.n	8002b56 <HAL_RCC_OscConfig+0xe1a>
 80029fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f2a3 	rbit	r2, r3
 8002a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a12:	601a      	str	r2, [r3, #0]
  return result;
 8002a14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fd fd6e 	bl	8000510 <HAL_GetTick>
 8002a34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a38:	e009      	b.n	8002a4e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fd fd69 	bl	8000510 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e084      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
 8002a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a66:	601a      	str	r2, [r3, #0]
  return result;
 8002a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_OscConfig+0xd4c>
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_RCC_OscConfig+0xe28>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	e01b      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd84>
 8002a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	fa93 f2a3 	rbit	r2, r3
 8002a9c:	f107 0320 	add.w	r3, r7, #32
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f107 0318 	add.w	r3, r7, #24
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <HAL_RCC_OscConfig+0xe28>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f107 0214 	add.w	r2, r7, #20
 8002ac4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ac8:	6011      	str	r1, [r2, #0]
 8002aca:	f107 0214 	add.w	r2, r7, #20
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	fa92 f1a2 	rbit	r1, r2
 8002ad4:	f107 0210 	add.w	r2, r7, #16
 8002ad8:	6011      	str	r1, [r2, #0]
  return result;
 8002ada:	f107 0210 	add.w	r2, r7, #16
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	f002 021f 	and.w	r2, r2, #31
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d19e      	bne.n	8002a3a <HAL_RCC_OscConfig+0xcfe>
 8002afc:	e02b      	b.n	8002b56 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e025      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCC_OscConfig+0xe28>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_RCC_OscConfig+0xe28>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b20:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d111      	bne.n	8002b52 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d108      	bne.n	8002b52 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b09e      	sub	sp, #120	; 0x78
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e162      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b90      	ldr	r3, [pc, #576]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d910      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b8d      	ldr	r3, [pc, #564]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	498b      	ldr	r1, [pc, #556]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e14a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b82      	ldr	r3, [pc, #520]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	497f      	ldr	r1, [pc, #508]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80dc 	beq.w	8002d94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d13c      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xf6>
 8002be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xa6>
 8002c08:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	e00f      	b.n	8002c2e <HAL_RCC_ClockConfig+0xc6>
 8002c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c20:	663b      	str	r3, [r7, #96]	; 0x60
 8002c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c2a:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c32:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c36:	fa92 f2a2 	rbit	r2, r2
 8002c3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c3e:	fab2 f282 	clz	r2, r2
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f042 0220 	orr.w	r2, r2, #32
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f002 021f 	and.w	r2, r2, #31
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d17b      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0f3      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d13c      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x178>
 8002c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x128>
 8002c8a:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e00f      	b.n	8002cb0 <HAL_RCC_ClockConfig+0x148>
 8002c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cac:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb8:	fa92 f2a2 	rbit	r2, r2
 8002cbc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f002 021f 	and.w	r2, r2, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d13a      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b2      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x1a0>
 8002d02:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	e00d      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1bc>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
 8002d14:	2302      	movs	r3, #2
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	2202      	movs	r2, #2
 8002d26:	61ba      	str	r2, [r7, #24]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	fa92 f2a2 	rbit	r2, r2
 8002d2e:	617a      	str	r2, [r7, #20]
  return result;
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	fab2 f282 	clz	r2, r2
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f042 0220 	orr.w	r2, r2, #32
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	f002 021f 	and.w	r2, r2, #31
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e079      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	491a      	ldr	r1, [pc, #104]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d64:	f7fd fbd4 	bl	8000510 <HAL_GetTick>
 8002d68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fd fbd0 	bl	8000510 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e061      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d214      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 0207 	bic.w	r2, r3, #7
 8002daa:	4906      	ldr	r1, [pc, #24]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e040      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	491a      	ldr	r1, [pc, #104]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4912      	ldr	r1, [pc, #72]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e0a:	f000 f829 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4601      	mov	r1, r0
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e18:	22f0      	movs	r2, #240	; 0xf0
 8002e1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	fa92 f2a2 	rbit	r2, r2
 8002e22:	60fa      	str	r2, [r7, #12]
  return result;
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	fab2 f282 	clz	r2, r2
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	40d3      	lsrs	r3, r2
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x2ec>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	fa21 f303 	lsr.w	r3, r1, r3
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <HAL_RCC_ClockConfig+0x2f0>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_RCC_ClockConfig+0x2f4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fb22 	bl	8000488 <HAL_InitTick>
  
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3778      	adds	r7, #120	; 0x78
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08007578 	.word	0x08007578
 8002e58:	20000014 	.word	0x20000014
 8002e5c:	20000018 	.word	0x20000018

08002e60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b08b      	sub	sp, #44	; 0x2c
 8002e64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d002      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x30>
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0x36>
 8002e8e:	e03f      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e92:	623b      	str	r3, [r7, #32]
      break;
 8002e94:	e03f      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ea0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	607a      	str	r2, [r7, #4]
  return result;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	40d3      	lsrs	r3, r2
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	fa92 f2a2 	rbit	r2, r2
 8002ecc:	60fa      	str	r2, [r7, #12]
  return result;
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	40d3      	lsrs	r3, r2
 8002ed8:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ee8:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef8:	e007      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	623b      	str	r3, [r7, #32]
      break;
 8002f0e:	e002      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f12:	623b      	str	r3, [r7, #32]
      break;
 8002f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f16:	6a3b      	ldr	r3, [r7, #32]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	372c      	adds	r7, #44	; 0x2c
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40021000 	.word	0x40021000
 8002f28:	007a1200 	.word	0x007a1200
 8002f2c:	08007588 	.word	0x08007588
 8002f30:	08007598 	.word	0x08007598

08002f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b092      	sub	sp, #72	; 0x48
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80d4 	beq.w	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f58:	4b4e      	ldr	r3, [pc, #312]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10e      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f64:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	61d3      	str	r3, [r2, #28]
 8002f70:	4b48      	ldr	r3, [pc, #288]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	4b45      	ldr	r3, [pc, #276]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d118      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8e:	4b42      	ldr	r3, [pc, #264]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a41      	ldr	r2, [pc, #260]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7fd fab9 	bl	8000510 <HAL_GetTick>
 8002f9e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7fd fab5 	bl	8000510 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b64      	cmp	r3, #100	; 0x64
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1d6      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fc0:	4b34      	ldr	r3, [pc, #208]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8084 	beq.w	80030da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d07c      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	4b26      	ldr	r3, [pc, #152]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	461a      	mov	r2, r3
 800300a:	2301      	movs	r3, #1
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	461a      	mov	r2, r3
 800302e:	2300      	movs	r3, #0
 8003030:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003036:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04b      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fd fa65 	bl	8000510 <HAL_GetTick>
 8003046:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	e00a      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fd fa61 	bl	8000510 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	; 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e180      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003060:	2302      	movs	r3, #2
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
 800306c:	2302      	movs	r3, #2
 800306e:	623b      	str	r3, [r7, #32]
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	61fb      	str	r3, [r7, #28]
  return result;
 8003078:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d108      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800308e:	4b01      	ldr	r3, [pc, #4]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	e00d      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
 800309c:	10908100 	.word	0x10908100
 80030a0:	2302      	movs	r3, #2
 80030a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	4ba0      	ldr	r3, [pc, #640]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2202      	movs	r2, #2
 80030b2:	613a      	str	r2, [r7, #16]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	fa92 f2a2 	rbit	r2, r2
 80030ba:	60fa      	str	r2, [r7, #12]
  return result;
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	fab2 f282 	clz	r2, r2
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0b7      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030da:	4b95      	ldr	r3, [pc, #596]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4992      	ldr	r1, [pc, #584]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f4:	4b8e      	ldr	r3, [pc, #568]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4a8d      	ldr	r2, [pc, #564]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800310c:	4b88      	ldr	r3, [pc, #544]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	f023 0203 	bic.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4985      	ldr	r1, [pc, #532]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800312a:	4b81      	ldr	r3, [pc, #516]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	497e      	ldr	r1, [pc, #504]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003148:	4b79      	ldr	r3, [pc, #484]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	4976      	ldr	r1, [pc, #472]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003166:	4b72      	ldr	r3, [pc, #456]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f023 0210 	bic.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	496f      	ldr	r1, [pc, #444]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003174:	4313      	orrs	r3, r2
 8003176:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003184:	4b6a      	ldr	r3, [pc, #424]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	4967      	ldr	r1, [pc, #412]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f023 0220 	bic.w	r2, r3, #32
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4960      	ldr	r1, [pc, #384]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031c0:	4b5b      	ldr	r3, [pc, #364]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	4958      	ldr	r1, [pc, #352]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031de:	4b54      	ldr	r3, [pc, #336]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	4951      	ldr	r1, [pc, #324]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031fc:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4949      	ldr	r1, [pc, #292]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800321a:	4b45      	ldr	r3, [pc, #276]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4942      	ldr	r1, [pc, #264]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003238:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	493a      	ldr	r1, [pc, #232]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003256:	4b36      	ldr	r3, [pc, #216]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	4933      	ldr	r1, [pc, #204]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003274:	4b2e      	ldr	r3, [pc, #184]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	492b      	ldr	r1, [pc, #172]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003292:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4924      	ldr	r1, [pc, #144]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80032b0:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	491c      	ldr	r1, [pc, #112]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80032ce:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	4915      	ldr	r1, [pc, #84]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80032ec:	4b10      	ldr	r3, [pc, #64]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	490d      	ldr	r1, [pc, #52]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003316:	4906      	ldr	r1, [pc, #24]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003318:	4313      	orrs	r3, r2
 800331a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00c      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003328:	4b01      	ldr	r3, [pc, #4]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333c:	490b      	ldr	r1, [pc, #44]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800333e:	4313      	orrs	r3, r2
 8003340:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335a:	4904      	ldr	r1, [pc, #16]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800335c:	4313      	orrs	r3, r2
 800335e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3748      	adds	r7, #72	; 0x48
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000

08003370 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003380:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003384:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	b29a      	uxth	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80033a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80033aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4013      	ands	r3, r2
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80033d4:	b084      	sub	sp, #16
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	f107 0014 	add.w	r0, r7, #20
 80033e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	b004      	add	sp, #16
 8003414:	4770      	bx	lr
	...

08003418 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003418:	b480      	push	{r7}
 800341a:	b09b      	sub	sp, #108	; 0x6c
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	78db      	ldrb	r3, [r3, #3]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d81f      	bhi.n	800348a <USB_ActivateEndpoint+0x72>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <USB_ActivateEndpoint+0x38>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003461 	.word	0x08003461
 8003454:	0800347d 	.word	0x0800347d
 8003458:	08003493 	.word	0x08003493
 800345c:	0800346f 	.word	0x0800346f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003460:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003468:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800346c:	e012      	b.n	8003494 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800346e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003472:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003476:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800347a:	e00b      	b.n	8003494 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800347c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003484:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003488:	e004      	b.n	8003494 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003490:	e000      	b.n	8003494 <USB_ActivateEndpoint+0x7c>
      break;
 8003492:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	441a      	add	r2, r3
 800349e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80034a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	b21a      	sxth	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b21b      	sxth	r3, r3
 80034d6:	4313      	orrs	r3, r2
 80034d8:	b21b      	sxth	r3, r3
 80034da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	441a      	add	r2, r3
 80034e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80034ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	7b1b      	ldrb	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f040 8149 	bne.w	800379c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8084 	beq.w	800361c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	4413      	add	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	00da      	lsls	r2, r3, #3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	88db      	ldrh	r3, [r3, #6]
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	b29b      	uxth	r3, r3
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	81fb      	strh	r3, [r7, #14]
 8003556:	89fb      	ldrh	r3, [r7, #14]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01b      	beq.n	8003598 <USB_ActivateEndpoint+0x180>
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	81bb      	strh	r3, [r7, #12]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	89bb      	ldrh	r3, [r7, #12]
 8003584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003590:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003594:	b29b      	uxth	r3, r3
 8003596:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	78db      	ldrb	r3, [r3, #3]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d020      	beq.n	80035e2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b6:	813b      	strh	r3, [r7, #8]
 80035b8:	893b      	ldrh	r3, [r7, #8]
 80035ba:	f083 0320 	eor.w	r3, r3, #32
 80035be:	813b      	strh	r3, [r7, #8]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	441a      	add	r2, r3
 80035ca:	893b      	ldrh	r3, [r7, #8]
 80035cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035dc:	b29b      	uxth	r3, r3
 80035de:	8013      	strh	r3, [r2, #0]
 80035e0:	e27f      	b.n	8003ae2 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f8:	817b      	strh	r3, [r7, #10]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	441a      	add	r2, r3
 8003604:	897b      	ldrh	r3, [r7, #10]
 8003606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800360a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800360e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003616:	b29b      	uxth	r3, r3
 8003618:	8013      	strh	r3, [r2, #0]
 800361a:	e262      	b.n	8003ae2 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003626:	b29b      	uxth	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	4413      	add	r3, r2
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	00da      	lsls	r2, r3, #3
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	4413      	add	r3, r2
 800363a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	88db      	ldrh	r3, [r3, #6]
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	b29b      	uxth	r3, r3
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365a:	b29b      	uxth	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	4413      	add	r3, r2
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	00da      	lsls	r2, r3, #3
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	4413      	add	r3, r2
 800366e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d112      	bne.n	80036a2 <USB_ActivateEndpoint+0x28a>
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003686:	b29a      	uxth	r2, r3
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	801a      	strh	r2, [r3, #0]
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369a:	b29a      	uxth	r2, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	801a      	strh	r2, [r3, #0]
 80036a0:	e02f      	b.n	8003702 <USB_ActivateEndpoint+0x2ea>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b3e      	cmp	r3, #62	; 0x3e
 80036a8:	d813      	bhi.n	80036d2 <USB_ActivateEndpoint+0x2ba>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	663b      	str	r3, [r7, #96]	; 0x60
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <USB_ActivateEndpoint+0x2ac>
 80036be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036c0:	3301      	adds	r3, #1
 80036c2:	663b      	str	r3, [r7, #96]	; 0x60
 80036c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	029b      	lsls	r3, r3, #10
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	e017      	b.n	8003702 <USB_ActivateEndpoint+0x2ea>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	663b      	str	r3, [r7, #96]	; 0x60
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <USB_ActivateEndpoint+0x2d4>
 80036e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e8:	3b01      	subs	r3, #1
 80036ea:	663b      	str	r3, [r7, #96]	; 0x60
 80036ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	029b      	lsls	r3, r3, #10
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	83fb      	strh	r3, [r7, #30]
 8003710:	8bfb      	ldrh	r3, [r7, #30]
 8003712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01b      	beq.n	8003752 <USB_ActivateEndpoint+0x33a>
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b29b      	uxth	r3, r3
 8003728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003730:	83bb      	strh	r3, [r7, #28]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	441a      	add	r2, r3
 800373c:	8bbb      	ldrh	r3, [r7, #28]
 800373e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374e:	b29b      	uxth	r3, r3
 8003750:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003768:	837b      	strh	r3, [r7, #26]
 800376a:	8b7b      	ldrh	r3, [r7, #26]
 800376c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003770:	837b      	strh	r3, [r7, #26]
 8003772:	8b7b      	ldrh	r3, [r7, #26]
 8003774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003778:	837b      	strh	r3, [r7, #26]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	441a      	add	r2, r3
 8003784:	8b7b      	ldrh	r3, [r7, #26]
 8003786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800378a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800378e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003796:	b29b      	uxth	r3, r3
 8003798:	8013      	strh	r3, [r2, #0]
 800379a:	e1a2      	b.n	8003ae2 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	441a      	add	r2, r3
 80037c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80037c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80037d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	65bb      	str	r3, [r7, #88]	; 0x58
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e8:	4413      	add	r3, r2
 80037ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	00da      	lsls	r2, r3, #3
 80037f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037fa:	657b      	str	r3, [r7, #84]	; 0x54
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	891b      	ldrh	r3, [r3, #8]
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	b29b      	uxth	r3, r3
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	653b      	str	r3, [r7, #80]	; 0x50
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003816:	b29b      	uxth	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381c:	4413      	add	r3, r2
 800381e:	653b      	str	r3, [r7, #80]	; 0x50
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	00da      	lsls	r2, r3, #3
 8003826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003828:	4413      	add	r3, r2
 800382a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	895b      	ldrh	r3, [r3, #10]
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	b29b      	uxth	r3, r3
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	785b      	ldrb	r3, [r3, #1]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 8091 	bne.w	800396c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003858:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800385a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01b      	beq.n	800389a <USB_ActivateEndpoint+0x482>
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003878:	877b      	strh	r3, [r7, #58]	; 0x3a
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	441a      	add	r2, r3
 8003884:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800388a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800388e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003896:	b29b      	uxth	r3, r3
 8003898:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80038a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01b      	beq.n	80038ea <USB_ActivateEndpoint+0x4d2>
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	441a      	add	r2, r3
 80038d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003900:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003902:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003904:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003908:	86bb      	strh	r3, [r7, #52]	; 0x34
 800390a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800390c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003910:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800391e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392e:	b29b      	uxth	r3, r3
 8003930:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003948:	867b      	strh	r3, [r7, #50]	; 0x32
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	441a      	add	r2, r3
 8003954:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800395a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003966:	b29b      	uxth	r3, r3
 8003968:	8013      	strh	r3, [r2, #0]
 800396a:	e0ba      	b.n	8003ae2 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800397c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01d      	beq.n	80039c4 <USB_ActivateEndpoint+0x5ac>
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	441a      	add	r2, r3
 80039ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80039b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80039d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01d      	beq.n	8003a1c <USB_ActivateEndpoint+0x604>
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	78db      	ldrb	r3, [r3, #3]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d024      	beq.n	8003a6e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003a3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a42:	f083 0320 	eor.w	r3, r3, #32
 8003a46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	441a      	add	r2, r3
 8003a54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	8013      	strh	r3, [r2, #0]
 8003a6c:	e01d      	b.n	8003aaa <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	441a      	add	r2, r3
 8003a92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003ae2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	376c      	adds	r7, #108	; 0x6c
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b08d      	sub	sp, #52	; 0x34
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	7b1b      	ldrb	r3, [r3, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 808e 	bne.w	8003c24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d044      	beq.n	8003b9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	81bb      	strh	r3, [r7, #12]
 8003b1e:	89bb      	ldrh	r3, [r7, #12]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01b      	beq.n	8003b60 <USB_DeactivateEndpoint+0x6c>
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	817b      	strh	r3, [r7, #10]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b76:	813b      	strh	r3, [r7, #8]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	893b      	ldrh	r3, [r7, #8]
 8003b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	8013      	strh	r3, [r2, #0]
 8003b98:	e192      	b.n	8003ec0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	827b      	strh	r3, [r7, #18]
 8003ba8:	8a7b      	ldrh	r3, [r7, #18]
 8003baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01b      	beq.n	8003bea <USB_DeactivateEndpoint+0xf6>
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc8:	823b      	strh	r3, [r7, #16]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	441a      	add	r2, r3
 8003bd4:	8a3b      	ldrh	r3, [r7, #16]
 8003bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c00:	81fb      	strh	r3, [r7, #14]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	441a      	add	r2, r3
 8003c0c:	89fb      	ldrh	r3, [r7, #14]
 8003c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	8013      	strh	r3, [r2, #0]
 8003c22:	e14d      	b.n	8003ec0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 80a5 	bne.w	8003d78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	843b      	strh	r3, [r7, #32]
 8003c3c:	8c3b      	ldrh	r3, [r7, #32]
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01b      	beq.n	8003c7e <USB_DeactivateEndpoint+0x18a>
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5c:	83fb      	strh	r3, [r7, #30]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	441a      	add	r2, r3
 8003c68:	8bfb      	ldrh	r3, [r7, #30]
 8003c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	83bb      	strh	r3, [r7, #28]
 8003c8c:	8bbb      	ldrh	r3, [r7, #28]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01b      	beq.n	8003cce <USB_DeactivateEndpoint+0x1da>
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cac:	837b      	strh	r3, [r7, #26]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	441a      	add	r2, r3
 8003cb8:	8b7b      	ldrh	r3, [r7, #26]
 8003cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce4:	833b      	strh	r3, [r7, #24]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	441a      	add	r2, r3
 8003cf0:	8b3b      	ldrh	r3, [r7, #24]
 8003cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1c:	82fb      	strh	r3, [r7, #22]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	441a      	add	r2, r3
 8003d28:	8afb      	ldrh	r3, [r7, #22]
 8003d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d54:	82bb      	strh	r3, [r7, #20]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	441a      	add	r2, r3
 8003d60:	8abb      	ldrh	r3, [r7, #20]
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]
 8003d76:	e0a3      	b.n	8003ec0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003d86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01b      	beq.n	8003dc8 <USB_DeactivateEndpoint+0x2d4>
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003dd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01b      	beq.n	8003e18 <USB_DeactivateEndpoint+0x324>
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df6:	853b      	strh	r3, [r7, #40]	; 0x28
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	441a      	add	r2, r3
 8003e3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	441a      	add	r2, r3
 8003e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3734      	adds	r7, #52	; 0x34
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b0c4      	sub	sp, #272	; 0x110
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	1d3b      	adds	r3, r7, #4
 8003ed6:	6018      	str	r0, [r3, #0]
 8003ed8:	463b      	mov	r3, r7
 8003eda:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003edc:	463b      	mov	r3, r7
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	f040 8557 	bne.w	8004996 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003ee8:	463b      	mov	r3, r7
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	463b      	mov	r3, r7
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d905      	bls.n	8003f04 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003ef8:	463b      	mov	r3, r7
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003f02:	e004      	b.n	8003f0e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003f04:	463b      	mov	r3, r7
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003f0e:	463b      	mov	r3, r7
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	7b1b      	ldrb	r3, [r3, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d12c      	bne.n	8003f72 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003f18:	463b      	mov	r3, r7
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6959      	ldr	r1, [r3, #20]
 8003f1e:	463b      	mov	r3, r7
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	88da      	ldrh	r2, [r3, #6]
 8003f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	1d38      	adds	r0, r7, #4
 8003f2c:	6800      	ldr	r0, [r0, #0]
 8003f2e:	f001 fa1c 	bl	800536a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	4413      	add	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	00da      	lsls	r2, r3, #3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	4413      	add	r3, r2
 8003f56:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8003f5a:	f107 0310 	add.w	r3, r7, #16
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	f107 0310 	add.w	r3, r7, #16
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	801a      	strh	r2, [r3, #0]
 8003f6e:	f000 bcdd 	b.w	800492c <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003f72:	463b      	mov	r3, r7
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	78db      	ldrb	r3, [r3, #3]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	f040 8347 	bne.w	800460c <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003f7e:	463b      	mov	r3, r7
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6a1a      	ldr	r2, [r3, #32]
 8003f84:	463b      	mov	r3, r7
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	f240 82eb 	bls.w	8004566 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	463b      	mov	r3, r7
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	463b      	mov	r3, r7
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	441a      	add	r2, r3
 8003fbc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003fd4:	463b      	mov	r3, r7
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fde:	1ad2      	subs	r2, r2, r3
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003fe6:	1d3b      	adds	r3, r7, #4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	463b      	mov	r3, r7
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8159 	beq.w	80042b4 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
 8004008:	463b      	mov	r3, r7
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	785b      	ldrb	r3, [r3, #1]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d164      	bne.n	80040dc <USB_EPStartXfer+0x20e>
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004018:	1d3b      	adds	r3, r7, #4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004020:	b29b      	uxth	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	4413      	add	r3, r2
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402a:	463b      	mov	r3, r7
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	00da      	lsls	r2, r3, #3
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	4413      	add	r3, r2
 8004036:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
 800403c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d112      	bne.n	800406a <USB_EPStartXfer+0x19c>
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800404e:	b29a      	uxth	r2, r3
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800405e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004062:	b29a      	uxth	r2, r3
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	801a      	strh	r2, [r3, #0]
 8004068:	e054      	b.n	8004114 <USB_EPStartXfer+0x246>
 800406a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406e:	2b3e      	cmp	r3, #62	; 0x3e
 8004070:	d817      	bhi.n	80040a2 <USB_EPStartXfer+0x1d4>
 8004072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800407c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d004      	beq.n	8004092 <USB_EPStartXfer+0x1c4>
 8004088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800408c:	3301      	adds	r3, #1
 800408e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004096:	b29b      	uxth	r3, r3
 8004098:	029b      	lsls	r3, r3, #10
 800409a:	b29a      	uxth	r2, r3
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	e038      	b.n	8004114 <USB_EPStartXfer+0x246>
 80040a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <USB_EPStartXfer+0x1f4>
 80040b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040bc:	3b01      	subs	r3, #1
 80040be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	e01b      	b.n	8004114 <USB_EPStartXfer+0x246>
 80040dc:	463b      	mov	r3, r7
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d116      	bne.n	8004114 <USB_EPStartXfer+0x246>
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f4:	4413      	add	r3, r2
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
 80040f8:	463b      	mov	r3, r7
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	00da      	lsls	r2, r3, #3
 8004100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004102:	4413      	add	r3, r2
 8004104:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004108:	633b      	str	r3, [r7, #48]	; 0x30
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410e:	b29a      	uxth	r2, r3
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004114:	463b      	mov	r3, r7
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	895b      	ldrh	r3, [r3, #10]
 800411a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800411e:	463b      	mov	r3, r7
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6959      	ldr	r1, [r3, #20]
 8004124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004128:	b29b      	uxth	r3, r3
 800412a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800412e:	1d38      	adds	r0, r7, #4
 8004130:	6800      	ldr	r0, [r0, #0]
 8004132:	f001 f91a 	bl	800536a <USB_WritePMA>
            ep->xfer_buff += len;
 8004136:	463b      	mov	r3, r7
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004140:	441a      	add	r2, r3
 8004142:	463b      	mov	r3, r7
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004148:	463b      	mov	r3, r7
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6a1a      	ldr	r2, [r3, #32]
 800414e:	463b      	mov	r3, r7
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	429a      	cmp	r2, r3
 8004156:	d909      	bls.n	800416c <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004158:	463b      	mov	r3, r7
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	463b      	mov	r3, r7
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	621a      	str	r2, [r3, #32]
 800416a:	e008      	b.n	800417e <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800416c:	463b      	mov	r3, r7
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004176:	463b      	mov	r3, r7
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2200      	movs	r2, #0
 800417c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800417e:	463b      	mov	r3, r7
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d164      	bne.n	8004252 <USB_EPStartXfer+0x384>
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004196:	b29b      	uxth	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	463b      	mov	r3, r7
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	00da      	lsls	r2, r3, #3
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d112      	bne.n	80041e0 <USB_EPStartXfer+0x312>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	801a      	strh	r2, [r3, #0]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d8:	b29a      	uxth	r2, r3
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	e057      	b.n	8004290 <USB_EPStartXfer+0x3c2>
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e4:	2b3e      	cmp	r3, #62	; 0x3e
 80041e6:	d817      	bhi.n	8004218 <USB_EPStartXfer+0x34a>
 80041e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80041f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d004      	beq.n	8004208 <USB_EPStartXfer+0x33a>
 80041fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004202:	3301      	adds	r3, #1
 8004204:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004208:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800420c:	b29b      	uxth	r3, r3
 800420e:	029b      	lsls	r3, r3, #10
 8004210:	b29a      	uxth	r2, r3
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	801a      	strh	r2, [r3, #0]
 8004216:	e03b      	b.n	8004290 <USB_EPStartXfer+0x3c2>
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <USB_EPStartXfer+0x36a>
 800422e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004232:	3b01      	subs	r3, #1
 8004234:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004238:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800423c:	b29b      	uxth	r3, r3
 800423e:	029b      	lsls	r3, r3, #10
 8004240:	b29b      	uxth	r3, r3
 8004242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800424a:	b29a      	uxth	r2, r3
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	e01e      	b.n	8004290 <USB_EPStartXfer+0x3c2>
 8004252:	463b      	mov	r3, r7
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d119      	bne.n	8004290 <USB_EPStartXfer+0x3c2>
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426a:	b29b      	uxth	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	4413      	add	r3, r2
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
 8004274:	463b      	mov	r3, r7
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	00da      	lsls	r2, r3, #3
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	4413      	add	r3, r2
 8004280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004284:	623b      	str	r3, [r7, #32]
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428a:	b29a      	uxth	r2, r3
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004290:	463b      	mov	r3, r7
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	891b      	ldrh	r3, [r3, #8]
 8004296:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800429a:	463b      	mov	r3, r7
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6959      	ldr	r1, [r3, #20]
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80042aa:	1d38      	adds	r0, r7, #4
 80042ac:	6800      	ldr	r0, [r0, #0]
 80042ae:	f001 f85c 	bl	800536a <USB_WritePMA>
 80042b2:	e33b      	b.n	800492c <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042b4:	463b      	mov	r3, r7
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d164      	bne.n	8004388 <USB_EPStartXfer+0x4ba>
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c4:	1d3b      	adds	r3, r7, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d2:	4413      	add	r3, r2
 80042d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d6:	463b      	mov	r3, r7
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	00da      	lsls	r2, r3, #3
 80042de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e0:	4413      	add	r3, r2
 80042e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d112      	bne.n	8004316 <USB_EPStartXfer+0x448>
 80042f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fe:	801a      	strh	r2, [r3, #0]
 8004300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430e:	b29a      	uxth	r2, r3
 8004310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	e057      	b.n	80043c6 <USB_EPStartXfer+0x4f8>
 8004316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431a:	2b3e      	cmp	r3, #62	; 0x3e
 800431c:	d817      	bhi.n	800434e <USB_EPStartXfer+0x480>
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <USB_EPStartXfer+0x470>
 8004334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004338:	3301      	adds	r3, #1
 800433a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800433e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004342:	b29b      	uxth	r3, r3
 8004344:	029b      	lsls	r3, r3, #10
 8004346:	b29a      	uxth	r2, r3
 8004348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	e03b      	b.n	80043c6 <USB_EPStartXfer+0x4f8>
 800434e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <USB_EPStartXfer+0x4a0>
 8004364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004368:	3b01      	subs	r3, #1
 800436a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800436e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004372:	b29b      	uxth	r3, r3
 8004374:	029b      	lsls	r3, r3, #10
 8004376:	b29b      	uxth	r3, r3
 8004378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004380:	b29a      	uxth	r2, r3
 8004382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004384:	801a      	strh	r2, [r3, #0]
 8004386:	e01e      	b.n	80043c6 <USB_EPStartXfer+0x4f8>
 8004388:	463b      	mov	r3, r7
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	785b      	ldrb	r3, [r3, #1]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d119      	bne.n	80043c6 <USB_EPStartXfer+0x4f8>
 8004392:	1d3b      	adds	r3, r7, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	657b      	str	r3, [r7, #84]	; 0x54
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a6:	4413      	add	r3, r2
 80043a8:	657b      	str	r3, [r7, #84]	; 0x54
 80043aa:	463b      	mov	r3, r7
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	00da      	lsls	r2, r3, #3
 80043b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b4:	4413      	add	r3, r2
 80043b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043ba:	653b      	str	r3, [r7, #80]	; 0x50
 80043bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043c6:	463b      	mov	r3, r7
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	891b      	ldrh	r3, [r3, #8]
 80043cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043d0:	463b      	mov	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6959      	ldr	r1, [r3, #20]
 80043d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80043e0:	1d38      	adds	r0, r7, #4
 80043e2:	6800      	ldr	r0, [r0, #0]
 80043e4:	f000 ffc1 	bl	800536a <USB_WritePMA>
            ep->xfer_buff += len;
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f2:	441a      	add	r2, r3
 80043f4:	463b      	mov	r3, r7
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80043fa:	463b      	mov	r3, r7
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	463b      	mov	r3, r7
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	429a      	cmp	r2, r3
 8004408:	d909      	bls.n	800441e <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800440a:	463b      	mov	r3, r7
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a1a      	ldr	r2, [r3, #32]
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004414:	1ad2      	subs	r2, r2, r3
 8004416:	463b      	mov	r3, r7
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	621a      	str	r2, [r3, #32]
 800441c:	e008      	b.n	8004430 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800441e:	463b      	mov	r3, r7
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004428:	463b      	mov	r3, r7
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2200      	movs	r2, #0
 800442e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	647b      	str	r3, [r7, #68]	; 0x44
 8004436:	463b      	mov	r3, r7
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d164      	bne.n	800450a <USB_EPStartXfer+0x63c>
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004454:	4413      	add	r3, r2
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004458:	463b      	mov	r3, r7
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	00da      	lsls	r2, r3, #3
 8004460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004462:	4413      	add	r3, r2
 8004464:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004468:	63bb      	str	r3, [r7, #56]	; 0x38
 800446a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d112      	bne.n	8004498 <USB_EPStartXfer+0x5ca>
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800447c:	b29a      	uxth	r2, r3
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800448c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004490:	b29a      	uxth	r2, r3
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	801a      	strh	r2, [r3, #0]
 8004496:	e054      	b.n	8004542 <USB_EPStartXfer+0x674>
 8004498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449c:	2b3e      	cmp	r3, #62	; 0x3e
 800449e:	d817      	bhi.n	80044d0 <USB_EPStartXfer+0x602>
 80044a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d004      	beq.n	80044c0 <USB_EPStartXfer+0x5f2>
 80044b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044ba:	3301      	adds	r3, #1
 80044bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80044c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	029b      	lsls	r3, r3, #10
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	e038      	b.n	8004542 <USB_EPStartXfer+0x674>
 80044d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80044da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d104      	bne.n	80044f0 <USB_EPStartXfer+0x622>
 80044e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044ea:	3b01      	subs	r3, #1
 80044ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80044f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	029b      	lsls	r3, r3, #10
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004502:	b29a      	uxth	r2, r3
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	801a      	strh	r2, [r3, #0]
 8004508:	e01b      	b.n	8004542 <USB_EPStartXfer+0x674>
 800450a:	463b      	mov	r3, r7
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d116      	bne.n	8004542 <USB_EPStartXfer+0x674>
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451c:	b29b      	uxth	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004522:	4413      	add	r3, r2
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
 8004526:	463b      	mov	r3, r7
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	00da      	lsls	r2, r3, #3
 800452e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004530:	4413      	add	r3, r2
 8004532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004536:	643b      	str	r3, [r7, #64]	; 0x40
 8004538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453c:	b29a      	uxth	r2, r3
 800453e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004540:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004542:	463b      	mov	r3, r7
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	895b      	ldrh	r3, [r3, #10]
 8004548:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800454c:	463b      	mov	r3, r7
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6959      	ldr	r1, [r3, #20]
 8004552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004556:	b29b      	uxth	r3, r3
 8004558:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800455c:	1d38      	adds	r0, r7, #4
 800455e:	6800      	ldr	r0, [r0, #0]
 8004560:	f000 ff03 	bl	800536a <USB_WritePMA>
 8004564:	e1e2      	b.n	800492c <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004566:	463b      	mov	r3, r7
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	463b      	mov	r3, r7
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	463b      	mov	r3, r7
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	441a      	add	r2, r3
 800459c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80045a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045b4:	1d3b      	adds	r3, r7, #4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	663b      	str	r3, [r7, #96]	; 0x60
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045c8:	4413      	add	r3, r2
 80045ca:	663b      	str	r3, [r7, #96]	; 0x60
 80045cc:	463b      	mov	r3, r7
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	00da      	lsls	r2, r3, #3
 80045d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d6:	4413      	add	r3, r2
 80045d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80045e8:	463b      	mov	r3, r7
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	891b      	ldrh	r3, [r3, #8]
 80045ee:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045f2:	463b      	mov	r3, r7
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6959      	ldr	r1, [r3, #20]
 80045f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004602:	1d38      	adds	r0, r7, #4
 8004604:	6800      	ldr	r0, [r0, #0]
 8004606:	f000 feb0 	bl	800536a <USB_WritePMA>
 800460a:	e18f      	b.n	800492c <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	463b      	mov	r3, r7
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 808f 	beq.w	8004746 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004628:	1d3b      	adds	r3, r7, #4
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	67bb      	str	r3, [r7, #120]	; 0x78
 800462e:	463b      	mov	r3, r7
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d164      	bne.n	8004702 <USB_EPStartXfer+0x834>
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	673b      	str	r3, [r7, #112]	; 0x70
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800464c:	4413      	add	r3, r2
 800464e:	673b      	str	r3, [r7, #112]	; 0x70
 8004650:	463b      	mov	r3, r7
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	00da      	lsls	r2, r3, #3
 8004658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800465a:	4413      	add	r3, r2
 800465c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004660:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d112      	bne.n	8004690 <USB_EPStartXfer+0x7c2>
 800466a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004674:	b29a      	uxth	r2, r3
 8004676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004688:	b29a      	uxth	r2, r3
 800468a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468c:	801a      	strh	r2, [r3, #0]
 800468e:	e054      	b.n	800473a <USB_EPStartXfer+0x86c>
 8004690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004694:	2b3e      	cmp	r3, #62	; 0x3e
 8004696:	d817      	bhi.n	80046c8 <USB_EPStartXfer+0x7fa>
 8004698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80046a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <USB_EPStartXfer+0x7ea>
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b2:	3301      	adds	r3, #1
 80046b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	b29b      	uxth	r3, r3
 80046be:	029b      	lsls	r3, r3, #10
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	e038      	b.n	800473a <USB_EPStartXfer+0x86c>
 80046c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80046d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <USB_EPStartXfer+0x81a>
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	3b01      	subs	r3, #1
 80046e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	029b      	lsls	r3, r3, #10
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fe:	801a      	strh	r2, [r3, #0]
 8004700:	e01b      	b.n	800473a <USB_EPStartXfer+0x86c>
 8004702:	463b      	mov	r3, r7
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d116      	bne.n	800473a <USB_EPStartXfer+0x86c>
 800470c:	1d3b      	adds	r3, r7, #4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004714:	b29b      	uxth	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800471a:	4413      	add	r3, r2
 800471c:	67bb      	str	r3, [r7, #120]	; 0x78
 800471e:	463b      	mov	r3, r7
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	00da      	lsls	r2, r3, #3
 8004726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004728:	4413      	add	r3, r2
 800472a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800472e:	677b      	str	r3, [r7, #116]	; 0x74
 8004730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004734:	b29a      	uxth	r2, r3
 8004736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004738:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800473a:	463b      	mov	r3, r7
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	895b      	ldrh	r3, [r3, #10]
 8004740:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004744:	e097      	b.n	8004876 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004746:	463b      	mov	r3, r7
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d168      	bne.n	8004822 <USB_EPStartXfer+0x954>
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004758:	1d3b      	adds	r3, r7, #4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004760:	b29b      	uxth	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004768:	4413      	add	r3, r2
 800476a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800476e:	463b      	mov	r3, r7
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	00da      	lsls	r2, r3, #3
 8004776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800477a:	4413      	add	r3, r2
 800477c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004780:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d112      	bne.n	80047b0 <USB_EPStartXfer+0x8e2>
 800478a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004794:	b29a      	uxth	r2, r3
 8004796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	e05d      	b.n	800486c <USB_EPStartXfer+0x99e>
 80047b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b4:	2b3e      	cmp	r3, #62	; 0x3e
 80047b6:	d817      	bhi.n	80047e8 <USB_EPStartXfer+0x91a>
 80047b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80047c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <USB_EPStartXfer+0x90a>
 80047ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80047d2:	3301      	adds	r3, #1
 80047d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80047d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80047dc:	b29b      	uxth	r3, r3
 80047de:	029b      	lsls	r3, r3, #10
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	e041      	b.n	800486c <USB_EPStartXfer+0x99e>
 80047e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <USB_EPStartXfer+0x93a>
 80047fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004802:	3b01      	subs	r3, #1
 8004804:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004808:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800480c:	b29b      	uxth	r3, r3
 800480e:	029b      	lsls	r3, r3, #10
 8004810:	b29b      	uxth	r3, r3
 8004812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481a:	b29a      	uxth	r2, r3
 800481c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800481e:	801a      	strh	r2, [r3, #0]
 8004820:	e024      	b.n	800486c <USB_EPStartXfer+0x99e>
 8004822:	463b      	mov	r3, r7
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d11f      	bne.n	800486c <USB_EPStartXfer+0x99e>
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004844:	4413      	add	r3, r2
 8004846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800484a:	463b      	mov	r3, r7
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	00da      	lsls	r2, r3, #3
 8004852:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004856:	4413      	add	r3, r2
 8004858:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800485c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004864:	b29a      	uxth	r2, r3
 8004866:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800486a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800486c:	463b      	mov	r3, r7
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	891b      	ldrh	r3, [r3, #8]
 8004872:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004876:	463b      	mov	r3, r7
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6959      	ldr	r1, [r3, #20]
 800487c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004880:	b29b      	uxth	r3, r3
 8004882:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004886:	1d38      	adds	r0, r7, #4
 8004888:	6800      	ldr	r0, [r0, #0]
 800488a:	f000 fd6e 	bl	800536a <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800488e:	463b      	mov	r3, r7
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d122      	bne.n	80048de <USB_EPStartXfer+0xa10>
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	463b      	mov	r3, r7
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	463b      	mov	r3, r7
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80048c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048d8:	b29b      	uxth	r3, r3
 80048da:	8013      	strh	r3, [r2, #0]
 80048dc:	e026      	b.n	800492c <USB_EPStartXfer+0xa5e>
 80048de:	463b      	mov	r3, r7
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d121      	bne.n	800492c <USB_EPStartXfer+0xa5e>
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	463b      	mov	r3, r7
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	463b      	mov	r3, r7
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	441a      	add	r2, r3
 8004914:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004928:	b29b      	uxth	r3, r3
 800492a:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	463b      	mov	r3, r7
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f107 020e 	add.w	r2, r7, #14
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494a:	8013      	strh	r3, [r2, #0]
 800494c:	f107 030e 	add.w	r3, r7, #14
 8004950:	f107 020e 	add.w	r2, r7, #14
 8004954:	8812      	ldrh	r2, [r2, #0]
 8004956:	f082 0210 	eor.w	r2, r2, #16
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	f107 030e 	add.w	r3, r7, #14
 8004960:	f107 020e 	add.w	r2, r7, #14
 8004964:	8812      	ldrh	r2, [r2, #0]
 8004966:	f082 0220 	eor.w	r2, r2, #32
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	463b      	mov	r3, r7
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	f107 030e 	add.w	r3, r7, #14
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004990:	b29b      	uxth	r3, r3
 8004992:	8013      	strh	r3, [r2, #0]
 8004994:	e3b5      	b.n	8005102 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004996:	463b      	mov	r3, r7
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	7b1b      	ldrb	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 8090 	bne.w	8004ac2 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80049a2:	463b      	mov	r3, r7
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	463b      	mov	r3, r7
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d90e      	bls.n	80049d0 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80049b2:	463b      	mov	r3, r7
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80049bc:	463b      	mov	r3, r7
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c6:	1ad2      	subs	r2, r2, r3
 80049c8:	463b      	mov	r3, r7
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	619a      	str	r2, [r3, #24]
 80049ce:	e008      	b.n	80049e2 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80049d0:	463b      	mov	r3, r7
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80049da:	463b      	mov	r3, r7
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049fa:	4413      	add	r3, r2
 80049fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a00:	463b      	mov	r3, r7
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	00da      	lsls	r2, r3, #3
 8004a08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d116      	bne.n	8004a4c <USB_EPStartXfer+0xb7e>
 8004a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	e32c      	b.n	80050a6 <USB_EPStartXfer+0x11d8>
 8004a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a50:	2b3e      	cmp	r3, #62	; 0x3e
 8004a52:	d818      	bhi.n	8004a86 <USB_EPStartXfer+0xbb8>
 8004a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d004      	beq.n	8004a74 <USB_EPStartXfer+0xba6>
 8004a6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	029b      	lsls	r3, r3, #10
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	e30f      	b.n	80050a6 <USB_EPStartXfer+0x11d8>
 8004a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <USB_EPStartXfer+0xbd8>
 8004a9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004aa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	029b      	lsls	r3, r3, #10
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	e2f1      	b.n	80050a6 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	78db      	ldrb	r3, [r3, #3]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f040 818f 	bne.w	8004dec <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004ace:	463b      	mov	r3, r7
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	785b      	ldrb	r3, [r3, #1]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d175      	bne.n	8004bc4 <USB_EPStartXfer+0xcf6>
 8004ad8:	1d3b      	adds	r3, r7, #4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ae0:	1d3b      	adds	r3, r7, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004af0:	4413      	add	r3, r2
 8004af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004af6:	463b      	mov	r3, r7
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	00da      	lsls	r2, r3, #3
 8004afe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b02:	4413      	add	r3, r2
 8004b04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d116      	bne.n	8004b44 <USB_EPStartXfer+0xc76>
 8004b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b28:	801a      	strh	r2, [r3, #0]
 8004b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	e065      	b.n	8004c10 <USB_EPStartXfer+0xd42>
 8004b44:	463b      	mov	r3, r7
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b4c:	d81a      	bhi.n	8004b84 <USB_EPStartXfer+0xcb6>
 8004b4e:	463b      	mov	r3, r7
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <USB_EPStartXfer+0xca4>
 8004b68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	029b      	lsls	r3, r3, #10
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	e045      	b.n	8004c10 <USB_EPStartXfer+0xd42>
 8004b84:	463b      	mov	r3, r7
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b90:	463b      	mov	r3, r7
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <USB_EPStartXfer+0xcda>
 8004b9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	e025      	b.n	8004c10 <USB_EPStartXfer+0xd42>
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d120      	bne.n	8004c10 <USB_EPStartXfer+0xd42>
 8004bce:	1d3b      	adds	r3, r7, #4
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd6:	1d3b      	adds	r3, r7, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004be6:	4413      	add	r3, r2
 8004be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bec:	463b      	mov	r3, r7
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	00da      	lsls	r2, r3, #3
 8004bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c02:	463b      	mov	r3, r7
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	1d3b      	adds	r3, r7, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c18:	463b      	mov	r3, r7
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	785b      	ldrb	r3, [r3, #1]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d175      	bne.n	8004d0e <USB_EPStartXfer+0xe40>
 8004c22:	1d3b      	adds	r3, r7, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c40:	463b      	mov	r3, r7
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	00da      	lsls	r2, r3, #3
 8004c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c56:	463b      	mov	r3, r7
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d116      	bne.n	8004c8e <USB_EPStartXfer+0xdc0>
 8004c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c8a:	801a      	strh	r2, [r3, #0]
 8004c8c:	e061      	b.n	8004d52 <USB_EPStartXfer+0xe84>
 8004c8e:	463b      	mov	r3, r7
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b3e      	cmp	r3, #62	; 0x3e
 8004c96:	d81a      	bhi.n	8004cce <USB_EPStartXfer+0xe00>
 8004c98:	463b      	mov	r3, r7
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <USB_EPStartXfer+0xdee>
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	029b      	lsls	r3, r3, #10
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	e041      	b.n	8004d52 <USB_EPStartXfer+0xe84>
 8004cce:	463b      	mov	r3, r7
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cda:	463b      	mov	r3, r7
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <USB_EPStartXfer+0xe24>
 8004ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cec:	3b01      	subs	r3, #1
 8004cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	029b      	lsls	r3, r3, #10
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	e021      	b.n	8004d52 <USB_EPStartXfer+0xe84>
 8004d0e:	463b      	mov	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d11c      	bne.n	8004d52 <USB_EPStartXfer+0xe84>
 8004d18:	1d3b      	adds	r3, r7, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d28:	4413      	add	r3, r2
 8004d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d2e:	463b      	mov	r3, r7
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	00da      	lsls	r2, r3, #3
 8004d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d50:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004d52:	463b      	mov	r3, r7
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 81a4 	beq.w	80050a6 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004d5e:	1d3b      	adds	r3, r7, #4
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	463b      	mov	r3, r7
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004d72:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <USB_EPStartXfer+0xebc>
 8004d7e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10d      	bne.n	8004da6 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004d8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 8187 	bne.w	80050a6 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004d98:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f040 8180 	bne.w	80050a6 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	463b      	mov	r3, r7
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004dc4:	1d3b      	adds	r3, r7, #4
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	463b      	mov	r3, r7
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	441a      	add	r2, r3
 8004dd2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]
 8004dea:	e15c      	b.n	80050a6 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	78db      	ldrb	r3, [r3, #3]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	f040 8155 	bne.w	80050a2 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004df8:	463b      	mov	r3, r7
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	463b      	mov	r3, r7
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d90e      	bls.n	8004e26 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004e08:	463b      	mov	r3, r7
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004e12:	463b      	mov	r3, r7
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	463b      	mov	r3, r7
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	619a      	str	r2, [r3, #24]
 8004e24:	e008      	b.n	8004e38 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004e26:	463b      	mov	r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004e30:	463b      	mov	r3, r7
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004e38:	463b      	mov	r3, r7
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	785b      	ldrb	r3, [r3, #1]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d16f      	bne.n	8004f22 <USB_EPStartXfer+0x1054>
 8004e42:	1d3b      	adds	r3, r7, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e4a:	1d3b      	adds	r3, r7, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e60:	463b      	mov	r3, r7
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	00da      	lsls	r2, r3, #3
 8004e68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d116      	bne.n	8004eac <USB_EPStartXfer+0xfde>
 8004e7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ea8:	801a      	strh	r2, [r3, #0]
 8004eaa:	e05f      	b.n	8004f6c <USB_EPStartXfer+0x109e>
 8004eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb2:	d818      	bhi.n	8004ee6 <USB_EPStartXfer+0x1018>
 8004eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <USB_EPStartXfer+0x1006>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	029b      	lsls	r3, r3, #10
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	e042      	b.n	8004f6c <USB_EPStartXfer+0x109e>
 8004ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <USB_EPStartXfer+0x1038>
 8004efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f00:	3b01      	subs	r3, #1
 8004f02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	029b      	lsls	r3, r3, #10
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f1e:	801a      	strh	r2, [r3, #0]
 8004f20:	e024      	b.n	8004f6c <USB_EPStartXfer+0x109e>
 8004f22:	463b      	mov	r3, r7
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d11f      	bne.n	8004f6c <USB_EPStartXfer+0x109e>
 8004f2c:	1d3b      	adds	r3, r7, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f44:	4413      	add	r3, r2
 8004f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	00da      	lsls	r2, r3, #3
 8004f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f56:	4413      	add	r3, r2
 8004f58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f6a:	801a      	strh	r2, [r3, #0]
 8004f6c:	1d3b      	adds	r3, r7, #4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f74:	463b      	mov	r3, r7
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d16f      	bne.n	800505e <USB_EPStartXfer+0x1190>
 8004f7e:	1d3b      	adds	r3, r7, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f96:	4413      	add	r3, r2
 8004f98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	00da      	lsls	r2, r3, #3
 8004fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fa8:	4413      	add	r3, r2
 8004faa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <USB_EPStartXfer+0x111a>
 8004fba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	e05e      	b.n	80050a6 <USB_EPStartXfer+0x11d8>
 8004fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fec:	2b3e      	cmp	r3, #62	; 0x3e
 8004fee:	d818      	bhi.n	8005022 <USB_EPStartXfer+0x1154>
 8004ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d004      	beq.n	8005010 <USB_EPStartXfer+0x1142>
 8005006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800500a:	3301      	adds	r3, #1
 800500c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005014:	b29b      	uxth	r3, r3
 8005016:	029b      	lsls	r3, r3, #10
 8005018:	b29a      	uxth	r2, r3
 800501a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	e041      	b.n	80050a6 <USB_EPStartXfer+0x11d8>
 8005022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800502c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <USB_EPStartXfer+0x1174>
 8005038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503c:	3b01      	subs	r3, #1
 800503e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005046:	b29b      	uxth	r3, r3
 8005048:	029b      	lsls	r3, r3, #10
 800504a:	b29b      	uxth	r3, r3
 800504c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005054:	b29a      	uxth	r2, r3
 8005056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	e023      	b.n	80050a6 <USB_EPStartXfer+0x11d8>
 800505e:	463b      	mov	r3, r7
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	785b      	ldrb	r3, [r3, #1]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d11e      	bne.n	80050a6 <USB_EPStartXfer+0x11d8>
 8005068:	1d3b      	adds	r3, r7, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005070:	b29b      	uxth	r3, r3
 8005072:	461a      	mov	r2, r3
 8005074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005078:	4413      	add	r3, r2
 800507a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800507e:	463b      	mov	r3, r7
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	00da      	lsls	r2, r3, #3
 8005086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800508a:	4413      	add	r3, r2
 800508c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005090:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005098:	b29a      	uxth	r2, r3
 800509a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800509e:	801a      	strh	r2, [r3, #0]
 80050a0:	e001      	b.n	80050a6 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e02e      	b.n	8005104 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050a6:	1d3b      	adds	r3, r7, #4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80050c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80050c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050cc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80050d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80050d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050d8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80050dc:	1d3b      	adds	r3, r7, #4
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	463b      	mov	r3, r7
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80050ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fe:	b29b      	uxth	r3, r3
 8005100:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d020      	beq.n	8005162 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005136:	81bb      	strh	r3, [r7, #12]
 8005138:	89bb      	ldrh	r3, [r7, #12]
 800513a:	f083 0310 	eor.w	r3, r3, #16
 800513e:	81bb      	strh	r3, [r7, #12]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	89bb      	ldrh	r3, [r7, #12]
 800514c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515c:	b29b      	uxth	r3, r3
 800515e:	8013      	strh	r3, [r2, #0]
 8005160:	e01f      	b.n	80051a2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005178:	81fb      	strh	r3, [r7, #14]
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005180:	81fb      	strh	r3, [r7, #14]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	89fb      	ldrh	r3, [r7, #14]
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	7b1b      	ldrb	r3, [r3, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 809d 	bne.w	80052fe <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d04c      	beq.n	8005266 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	823b      	strh	r3, [r7, #16]
 80051da:	8a3b      	ldrh	r3, [r7, #16]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01b      	beq.n	800521c <USB_EPClearStall+0x6c>
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	81fb      	strh	r3, [r7, #14]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	89fb      	ldrh	r3, [r7, #14]
 8005208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005218:	b29b      	uxth	r3, r3
 800521a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	78db      	ldrb	r3, [r3, #3]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d06c      	beq.n	80052fe <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523a:	81bb      	strh	r3, [r7, #12]
 800523c:	89bb      	ldrh	r3, [r7, #12]
 800523e:	f083 0320 	eor.w	r3, r3, #32
 8005242:	81bb      	strh	r3, [r7, #12]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	89bb      	ldrh	r3, [r7, #12]
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]
 8005264:	e04b      	b.n	80052fe <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	82fb      	strh	r3, [r7, #22]
 8005274:	8afb      	ldrh	r3, [r7, #22]
 8005276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01b      	beq.n	80052b6 <USB_EPClearStall+0x106>
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005294:	82bb      	strh	r3, [r7, #20]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	8abb      	ldrh	r3, [r7, #20]
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	827b      	strh	r3, [r7, #18]
 80052ce:	8a7b      	ldrh	r3, [r7, #18]
 80052d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052d4:	827b      	strh	r3, [r7, #18]
 80052d6:	8a7b      	ldrh	r3, [r7, #18]
 80052d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052dc:	827b      	strh	r3, [r7, #18]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8a7b      	ldrh	r3, [r7, #18]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d103      	bne.n	8005326 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2280      	movs	r2, #128	; 0x80
 8005322:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005358:	b29b      	uxth	r3, r3
 800535a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800536a:	b480      	push	{r7}
 800536c:	b08d      	sub	sp, #52	; 0x34
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	4611      	mov	r1, r2
 8005376:	461a      	mov	r2, r3
 8005378:	460b      	mov	r3, r1
 800537a:	80fb      	strh	r3, [r7, #6]
 800537c:	4613      	mov	r3, r2
 800537e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005380:	88bb      	ldrh	r3, [r7, #4]
 8005382:	3301      	adds	r3, #1
 8005384:	085b      	lsrs	r3, r3, #1
 8005386:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a0:	e01b      	b.n	80053da <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	3301      	adds	r3, #1
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	3302      	adds	r3, #2
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	3301      	adds	r3, #1
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	3b01      	subs	r3, #1
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e0      	bne.n	80053a2 <USB_WritePMA+0x38>
  }
}
 80053e0:	bf00      	nop
 80053e2:	3734      	adds	r7, #52	; 0x34
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b08b      	sub	sp, #44	; 0x2c
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	460b      	mov	r3, r1
 80053fc:	80fb      	strh	r3, [r7, #6]
 80053fe:	4613      	mov	r3, r2
 8005400:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005402:	88bb      	ldrh	r3, [r7, #4]
 8005404:	085b      	lsrs	r3, r3, #1
 8005406:	b29b      	uxth	r3, r3
 8005408:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
 8005422:	e018      	b.n	8005456 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	3302      	adds	r3, #2
 8005430:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3301      	adds	r3, #1
 800543e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	b2da      	uxtb	r2, r3
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3301      	adds	r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	3b01      	subs	r3, #1
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e3      	bne.n	8005424 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800545c:	88bb      	ldrh	r3, [r7, #4]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	701a      	strb	r2, [r3, #0]
  }
}
 8005478:	bf00      	nop
 800547a:	372c      	adds	r7, #44	; 0x2c
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	7c1b      	ldrb	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d115      	bne.n	80054c8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800549c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054a0:	2202      	movs	r2, #2
 80054a2:	2181      	movs	r1, #129	; 0x81
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 fe92 	bl	80071ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054b4:	2202      	movs	r2, #2
 80054b6:	2101      	movs	r1, #1
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 fe88 	bl	80071ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80054c6:	e012      	b.n	80054ee <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054c8:	2340      	movs	r3, #64	; 0x40
 80054ca:	2202      	movs	r2, #2
 80054cc:	2181      	movs	r1, #129	; 0x81
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f001 fe7d 	bl	80071ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054da:	2340      	movs	r3, #64	; 0x40
 80054dc:	2202      	movs	r2, #2
 80054de:	2101      	movs	r1, #1
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 fe74 	bl	80071ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054ee:	2308      	movs	r3, #8
 80054f0:	2203      	movs	r2, #3
 80054f2:	2182      	movs	r1, #130	; 0x82
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 fe6a 	bl	80071ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005500:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005504:	f001 ff8c 	bl	8007420 <USBD_static_malloc>
 8005508:	4602      	mov	r2, r0
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
 800551e:	e026      	b.n	800556e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005526:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2200      	movs	r2, #0
 8005536:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	7c1b      	ldrb	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005554:	2101      	movs	r1, #1
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 ff2b 	bl	80073b2 <USBD_LL_PrepareReceive>
 800555c:	e007      	b.n	800556e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005564:	2340      	movs	r3, #64	; 0x40
 8005566:	2101      	movs	r1, #1
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 ff22 	bl	80073b2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005588:	2181      	movs	r1, #129	; 0x81
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 fe45 	bl	800721a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005596:	2101      	movs	r1, #1
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fe3e 	bl	800721a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055a6:	2182      	movs	r1, #130	; 0x82
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f001 fe36 	bl	800721a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00e      	beq.n	80055dc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 ff34 	bl	800743c <USBD_static_free>
    pdev->pClassData = NULL;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800560c:	2b00      	cmp	r3, #0
 800560e:	d039      	beq.n	8005684 <USBD_CDC_Setup+0x9e>
 8005610:	2b20      	cmp	r3, #32
 8005612:	d17c      	bne.n	800570e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	88db      	ldrh	r3, [r3, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d029      	beq.n	8005670 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	b25b      	sxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	da11      	bge.n	800564a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005632:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	88d2      	ldrh	r2, [r2, #6]
 8005638:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800563a:	6939      	ldr	r1, [r7, #16]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	88db      	ldrh	r3, [r3, #6]
 8005640:	461a      	mov	r2, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fa04 	bl	8006a50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005648:	e068      	b.n	800571c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	785a      	ldrb	r2, [r3, #1]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	88db      	ldrh	r3, [r3, #6]
 8005658:	b2da      	uxtb	r2, r3
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005660:	6939      	ldr	r1, [r7, #16]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	88db      	ldrh	r3, [r3, #6]
 8005666:	461a      	mov	r2, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 fa1f 	bl	8006aac <USBD_CtlPrepareRx>
      break;
 800566e:	e055      	b.n	800571c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	7850      	ldrb	r0, [r2, #1]
 800567c:	2200      	movs	r2, #0
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	4798      	blx	r3
      break;
 8005682:	e04b      	b.n	800571c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b0a      	cmp	r3, #10
 800568a:	d017      	beq.n	80056bc <USBD_CDC_Setup+0xd6>
 800568c:	2b0b      	cmp	r3, #11
 800568e:	d029      	beq.n	80056e4 <USBD_CDC_Setup+0xfe>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d133      	bne.n	80056fc <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569a:	2b03      	cmp	r3, #3
 800569c:	d107      	bne.n	80056ae <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800569e:	f107 030c 	add.w	r3, r7, #12
 80056a2:	2202      	movs	r2, #2
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 f9d2 	bl	8006a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056ac:	e02e      	b.n	800570c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f001 f962 	bl	800697a <USBD_CtlError>
            ret = USBD_FAIL;
 80056b6:	2302      	movs	r3, #2
 80056b8:	75fb      	strb	r3, [r7, #23]
          break;
 80056ba:	e027      	b.n	800570c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d107      	bne.n	80056d6 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80056c6:	f107 030f 	add.w	r3, r7, #15
 80056ca:	2201      	movs	r2, #1
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 f9be 	bl	8006a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056d4:	e01a      	b.n	800570c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 f94e 	bl	800697a <USBD_CtlError>
            ret = USBD_FAIL;
 80056de:	2302      	movs	r3, #2
 80056e0:	75fb      	strb	r3, [r7, #23]
          break;
 80056e2:	e013      	b.n	800570c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d00d      	beq.n	800570a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80056ee:	6839      	ldr	r1, [r7, #0]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 f942 	bl	800697a <USBD_CtlError>
            ret = USBD_FAIL;
 80056f6:	2302      	movs	r3, #2
 80056f8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056fa:	e006      	b.n	800570a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 f93b 	bl	800697a <USBD_CtlError>
          ret = USBD_FAIL;
 8005704:	2302      	movs	r3, #2
 8005706:	75fb      	strb	r3, [r7, #23]
          break;
 8005708:	e000      	b.n	800570c <USBD_CDC_Setup+0x126>
          break;
 800570a:	bf00      	nop
      }
      break;
 800570c:	e006      	b.n	800571c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 f932 	bl	800697a <USBD_CtlError>
      ret = USBD_FAIL;
 8005716:	2302      	movs	r3, #2
 8005718:	75fb      	strb	r3, [r7, #23]
      break;
 800571a:	bf00      	nop
  }

  return ret;
 800571c:	7dfb      	ldrb	r3, [r7, #23]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005738:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005740:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d03a      	beq.n	80057c2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	331c      	adds	r3, #28
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d029      	beq.n	80057b6 <USBD_CDC_DataIn+0x90>
 8005762:	78fa      	ldrb	r2, [r7, #3]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	331c      	adds	r3, #28
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	78f9      	ldrb	r1, [r7, #3]
 8005776:	68b8      	ldr	r0, [r7, #8]
 8005778:	460b      	mov	r3, r1
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4403      	add	r3, r0
 8005782:	3338      	adds	r3, #56	; 0x38
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	fbb2 f1f3 	udiv	r1, r2, r3
 800578a:	fb03 f301 	mul.w	r3, r3, r1
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d110      	bne.n	80057b6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	331c      	adds	r3, #28
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057a8:	78f9      	ldrb	r1, [r7, #3]
 80057aa:	2300      	movs	r3, #0
 80057ac:	2200      	movs	r2, #0
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fddc 	bl	800736c <USBD_LL_Transmit>
 80057b4:	e003      	b.n	80057be <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057de:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 fe07 	bl	80073f8 <USBD_LL_GetRxDataSize>
 80057ea:	4602      	mov	r2, r0
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00d      	beq.n	8005818 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005810:	4611      	mov	r1, r2
 8005812:	4798      	blx	r3

    return USBD_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	e000      	b.n	800581a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005830:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005838:	2b00      	cmp	r3, #0
 800583a:	d015      	beq.n	8005868 <USBD_CDC_EP0_RxReady+0x46>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005842:	2bff      	cmp	r3, #255	; 0xff
 8005844:	d010      	beq.n	8005868 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005854:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800585c:	b292      	uxth	r2, r2
 800585e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	22ff      	movs	r2, #255	; 0xff
 8005864:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2243      	movs	r2, #67	; 0x43
 8005880:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005882:	4b03      	ldr	r3, [pc, #12]	; (8005890 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	200000a8 	.word	0x200000a8

08005894 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2243      	movs	r2, #67	; 0x43
 80058a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80058a2:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000064 	.word	0x20000064

080058b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2243      	movs	r2, #67	; 0x43
 80058c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80058c2:	4b03      	ldr	r3, [pc, #12]	; (80058d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	200000ec 	.word	0x200000ec

080058d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	220a      	movs	r2, #10
 80058e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80058e2:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	20000020 	.word	0x20000020

080058f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80058fe:	2302      	movs	r3, #2
 8005900:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005922:	b480      	push	{r7}
 8005924:	b087      	sub	sp, #28
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005936:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005940:	88fa      	ldrh	r2, [r7, #6]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005966:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01c      	beq.n	80059d2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d115      	bne.n	80059ce <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2181      	movs	r1, #129	; 0x81
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 fcd1 	bl	800736c <USBD_LL_Transmit>

      return USBD_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e002      	b.n	80059d4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80059d2:	2302      	movs	r3, #2
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d017      	beq.n	8005a26 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7c1b      	ldrb	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a08:	2101      	movs	r1, #1
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 fcd1 	bl	80073b2 <USBD_LL_PrepareReceive>
 8005a10:	e007      	b.n	8005a22 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a18:	2340      	movs	r3, #64	; 0x40
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 fcc8 	bl	80073b2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e000      	b.n	8005a28 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005a26:	2302      	movs	r3, #2
  }
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a44:	2302      	movs	r3, #2
 8005a46:	e01a      	b.n	8005a7e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	79fa      	ldrb	r2, [r7, #7]
 8005a74:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f001 fb32 	bl	80070e0 <USBD_LL_Init>

  return USBD_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]
 8005aa6:	e001      	b.n	8005aac <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fb68 	bl	8007198 <USBD_LL_Start>

  return USBD_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005af4:	2302      	movs	r3, #2
 8005af6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00c      	beq.n	8005b1c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	78fa      	ldrb	r2, [r7, #3]
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3

  return USBD_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fece 	bl	8006900 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d00c      	beq.n	8005ba2 <USBD_LL_SetupStage+0x56>
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d302      	bcc.n	8005b92 <USBD_LL_SetupStage+0x46>
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d010      	beq.n	8005bb2 <USBD_LL_SetupStage+0x66>
 8005b90:	e017      	b.n	8005bc2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f9ce 	bl	8005f3c <USBD_StdDevReq>
      break;
 8005ba0:	e01a      	b.n	8005bd8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa30 	bl	8006010 <USBD_StdItfReq>
      break;
 8005bb0:	e012      	b.n	8005bd8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa6e 	bl	800609c <USBD_StdEPReq>
      break;
 8005bc0:	e00a      	b.n	8005bd8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005bc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 fb41 	bl	8007258 <USBD_LL_StallEP>
      break;
 8005bd6:	bf00      	nop
  }

  return USBD_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	460b      	mov	r3, r1
 8005bec:	607a      	str	r2, [r7, #4]
 8005bee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005bf0:	7afb      	ldrb	r3, [r7, #11]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d14b      	bne.n	8005c8e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005bfc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d134      	bne.n	8005c72 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d919      	bls.n	8005c48 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	1ad2      	subs	r2, r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d203      	bcs.n	8005c36 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	e002      	b.n	8005c3c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 ff51 	bl	8006ae8 <USBD_CtlContinueRx>
 8005c46:	e038      	b.n	8005cba <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d105      	bne.n	8005c6a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 ff4e 	bl	8006b0c <USBD_CtlSendStatus>
 8005c70:	e023      	b.n	8005cba <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	d11e      	bne.n	8005cba <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005c84:	2100      	movs	r1, #0
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f001 fae6 	bl	8007258 <USBD_LL_StallEP>
 8005c8c:	e015      	b.n	8005cba <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00d      	beq.n	8005cb6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d108      	bne.n	8005cb6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	7afa      	ldrb	r2, [r7, #11]
 8005cae:	4611      	mov	r1, r2
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	4798      	blx	r3
 8005cb4:	e001      	b.n	8005cba <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e000      	b.n	8005cbc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005cd2:	7afb      	ldrb	r3, [r7, #11]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d17f      	bne.n	8005dd8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3314      	adds	r3, #20
 8005cdc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d15c      	bne.n	8005da2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d915      	bls.n	8005d20 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	1ad2      	subs	r2, r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 febb 	bl	8006a88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d12:	2300      	movs	r3, #0
 8005d14:	2200      	movs	r2, #0
 8005d16:	2100      	movs	r1, #0
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f001 fb4a 	bl	80073b2 <USBD_LL_PrepareReceive>
 8005d1e:	e04e      	b.n	8005dbe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	6912      	ldr	r2, [r2, #16]
 8005d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d2c:	fb02 f201 	mul.w	r2, r2, r1
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d11c      	bne.n	8005d70 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d316      	bcc.n	8005d70 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d20f      	bcs.n	8005d70 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d50:	2200      	movs	r2, #0
 8005d52:	2100      	movs	r1, #0
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 fe97 	bl	8006a88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d62:	2300      	movs	r3, #0
 8005d64:	2200      	movs	r2, #0
 8005d66:	2100      	movs	r1, #0
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f001 fb22 	bl	80073b2 <USBD_LL_PrepareReceive>
 8005d6e:	e026      	b.n	8005dbe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d105      	bne.n	8005d92 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005d92:	2180      	movs	r1, #128	; 0x80
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f001 fa5f 	bl	8007258 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fec9 	bl	8006b32 <USBD_CtlReceiveStatus>
 8005da0:	e00d      	b.n	8005dbe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d004      	beq.n	8005db6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005db6:	2180      	movs	r1, #128	; 0x80
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f001 fa4d 	bl	8007258 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d11d      	bne.n	8005e04 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7ff fe82 	bl	8005ad2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005dd6:	e015      	b.n	8005e04 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00d      	beq.n	8005e00 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d108      	bne.n	8005e00 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	7afa      	ldrb	r2, [r7, #11]
 8005df8:	4611      	mov	r1, r2
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	4798      	blx	r3
 8005dfe:	e001      	b.n	8005e04 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e00:	2302      	movs	r3, #2
 8005e02:	e000      	b.n	8005e06 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f001 f9d6 	bl	80071ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2240      	movs	r2, #64	; 0x40
 8005e2e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e32:	2340      	movs	r3, #64	; 0x40
 8005e34:	2200      	movs	r2, #0
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 f9c8 	bl	80071ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2240      	movs	r2, #64	; 0x40
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6852      	ldr	r2, [r2, #4]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	4611      	mov	r1, r2
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
  }

  return USBD_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d105      	bne.n	8005ef8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d10b      	bne.n	8005f30 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d004      	beq.n	8005f60 <USBD_StdDevReq+0x24>
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d002      	beq.n	8005f60 <USBD_StdDevReq+0x24>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <USBD_StdDevReq+0x34>
 8005f5e:	e04c      	b.n	8005ffa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
      break;
 8005f6e:	e049      	b.n	8006004 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b09      	cmp	r3, #9
 8005f76:	d83a      	bhi.n	8005fee <USBD_StdDevReq+0xb2>
 8005f78:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <USBD_StdDevReq+0x44>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fe5 	.word	0x08005fe5
 8005f88:	08005fef 	.word	0x08005fef
 8005f8c:	08005fdb 	.word	0x08005fdb
 8005f90:	08005fef 	.word	0x08005fef
 8005f94:	08005fb3 	.word	0x08005fb3
 8005f98:	08005fa9 	.word	0x08005fa9
 8005f9c:	08005fef 	.word	0x08005fef
 8005fa0:	08005fc7 	.word	0x08005fc7
 8005fa4:	08005fbd 	.word	0x08005fbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f9d4 	bl	8006358 <USBD_GetDescriptor>
          break;
 8005fb0:	e022      	b.n	8005ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fb37 	bl	8006628 <USBD_SetAddress>
          break;
 8005fba:	e01d      	b.n	8005ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fb74 	bl	80066ac <USBD_SetConfig>
          break;
 8005fc4:	e018      	b.n	8005ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fbfd 	bl	80067c8 <USBD_GetConfig>
          break;
 8005fce:	e013      	b.n	8005ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fc2c 	bl	8006830 <USBD_GetStatus>
          break;
 8005fd8:	e00e      	b.n	8005ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fc5a 	bl	8006896 <USBD_SetFeature>
          break;
 8005fe2:	e009      	b.n	8005ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fc69 	bl	80068be <USBD_ClrFeature>
          break;
 8005fec:	e004      	b.n	8005ff8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fcc2 	bl	800697a <USBD_CtlError>
          break;
 8005ff6:	bf00      	nop
      }
      break;
 8005ff8:	e004      	b.n	8006004 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fcbc 	bl	800697a <USBD_CtlError>
      break;
 8006002:	bf00      	nop
  }

  return ret;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop

08006010 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006026:	2b20      	cmp	r3, #32
 8006028:	d003      	beq.n	8006032 <USBD_StdItfReq+0x22>
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d001      	beq.n	8006032 <USBD_StdItfReq+0x22>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d12a      	bne.n	8006088 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006038:	3b01      	subs	r3, #1
 800603a:	2b02      	cmp	r3, #2
 800603c:	d81d      	bhi.n	800607a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	889b      	ldrh	r3, [r3, #4]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	d813      	bhi.n	8006070 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
 8006056:	4603      	mov	r3, r0
 8006058:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	88db      	ldrh	r3, [r3, #6]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d110      	bne.n	8006084 <USBD_StdItfReq+0x74>
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10d      	bne.n	8006084 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fd4f 	bl	8006b0c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800606e:	e009      	b.n	8006084 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fc81 	bl	800697a <USBD_CtlError>
          break;
 8006078:	e004      	b.n	8006084 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fc7c 	bl	800697a <USBD_CtlError>
          break;
 8006082:	e000      	b.n	8006086 <USBD_StdItfReq+0x76>
          break;
 8006084:	bf00      	nop
      }
      break;
 8006086:	e004      	b.n	8006092 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fc75 	bl	800697a <USBD_CtlError>
      break;
 8006090:	bf00      	nop
  }

  return USBD_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	889b      	ldrh	r3, [r3, #4]
 80060ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d004      	beq.n	80060c6 <USBD_StdEPReq+0x2a>
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d002      	beq.n	80060c6 <USBD_StdEPReq+0x2a>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <USBD_StdEPReq+0x3a>
 80060c4:	e13d      	b.n	8006342 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
      break;
 80060d4:	e13a      	b.n	800634c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d10a      	bne.n	80060f8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	e12a      	b.n	800634e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d03e      	beq.n	800617e <USBD_StdEPReq+0xe2>
 8006100:	2b03      	cmp	r3, #3
 8006102:	d002      	beq.n	800610a <USBD_StdEPReq+0x6e>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d070      	beq.n	80061ea <USBD_StdEPReq+0x14e>
 8006108:	e115      	b.n	8006336 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006110:	2b02      	cmp	r3, #2
 8006112:	d002      	beq.n	800611a <USBD_StdEPReq+0x7e>
 8006114:	2b03      	cmp	r3, #3
 8006116:	d015      	beq.n	8006144 <USBD_StdEPReq+0xa8>
 8006118:	e02b      	b.n	8006172 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00c      	beq.n	800613a <USBD_StdEPReq+0x9e>
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d009      	beq.n	800613a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006126:	7bbb      	ldrb	r3, [r7, #14]
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 f894 	bl	8007258 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006130:	2180      	movs	r1, #128	; 0x80
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 f890 	bl	8007258 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006138:	e020      	b.n	800617c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fc1c 	bl	800697a <USBD_CtlError>
              break;
 8006142:	e01b      	b.n	800617c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	885b      	ldrh	r3, [r3, #2]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10e      	bne.n	800616a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800614c:	7bbb      	ldrb	r3, [r7, #14]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <USBD_StdEPReq+0xce>
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d008      	beq.n	800616a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	88db      	ldrh	r3, [r3, #6]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 f877 	bl	8007258 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fcce 	bl	8006b0c <USBD_CtlSendStatus>

              break;
 8006170:	e004      	b.n	800617c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fc00 	bl	800697a <USBD_CtlError>
              break;
 800617a:	bf00      	nop
          }
          break;
 800617c:	e0e0      	b.n	8006340 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006184:	2b02      	cmp	r3, #2
 8006186:	d002      	beq.n	800618e <USBD_StdEPReq+0xf2>
 8006188:	2b03      	cmp	r3, #3
 800618a:	d015      	beq.n	80061b8 <USBD_StdEPReq+0x11c>
 800618c:	e026      	b.n	80061dc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00c      	beq.n	80061ae <USBD_StdEPReq+0x112>
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	2b80      	cmp	r3, #128	; 0x80
 8006198:	d009      	beq.n	80061ae <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 f85a 	bl	8007258 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80061a4:	2180      	movs	r1, #128	; 0x80
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 f856 	bl	8007258 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061ac:	e01c      	b.n	80061e8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fbe2 	bl	800697a <USBD_CtlError>
              break;
 80061b6:	e017      	b.n	80061e8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	885b      	ldrh	r3, [r3, #2]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d112      	bne.n	80061e6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061c0:	7bbb      	ldrb	r3, [r7, #14]
 80061c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d004      	beq.n	80061d4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 f861 	bl	8007296 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fc99 	bl	8006b0c <USBD_CtlSendStatus>
              }
              break;
 80061da:	e004      	b.n	80061e6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fbcb 	bl	800697a <USBD_CtlError>
              break;
 80061e4:	e000      	b.n	80061e8 <USBD_StdEPReq+0x14c>
              break;
 80061e6:	bf00      	nop
          }
          break;
 80061e8:	e0aa      	b.n	8006340 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d002      	beq.n	80061fa <USBD_StdEPReq+0x15e>
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d032      	beq.n	800625e <USBD_StdEPReq+0x1c2>
 80061f8:	e097      	b.n	800632a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <USBD_StdEPReq+0x174>
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	2b80      	cmp	r3, #128	; 0x80
 8006204:	d004      	beq.n	8006210 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fbb6 	bl	800697a <USBD_CtlError>
                break;
 800620e:	e091      	b.n	8006334 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006214:	2b00      	cmp	r3, #0
 8006216:	da0b      	bge.n	8006230 <USBD_StdEPReq+0x194>
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	3310      	adds	r3, #16
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	4413      	add	r3, r2
 800622c:	3304      	adds	r3, #4
 800622e:	e00b      	b.n	8006248 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4413      	add	r3, r2
 8006246:	3304      	adds	r3, #4
 8006248:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2202      	movs	r2, #2
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fbfa 	bl	8006a50 <USBD_CtlSendData>
              break;
 800625c:	e06a      	b.n	8006334 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800625e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006262:	2b00      	cmp	r3, #0
 8006264:	da11      	bge.n	800628a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	3318      	adds	r3, #24
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d117      	bne.n	80062b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fb79 	bl	800697a <USBD_CtlError>
                  break;
 8006288:	e054      	b.n	8006334 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d104      	bne.n	80062b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fb66 	bl	800697a <USBD_CtlError>
                  break;
 80062ae:	e041      	b.n	8006334 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	da0b      	bge.n	80062d0 <USBD_StdEPReq+0x234>
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	3310      	adds	r3, #16
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4413      	add	r3, r2
 80062cc:	3304      	adds	r3, #4
 80062ce:	e00b      	b.n	80062e8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	4413      	add	r3, r2
 80062e6:	3304      	adds	r3, #4
 80062e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <USBD_StdEPReq+0x25a>
 80062f0:	7bbb      	ldrb	r3, [r7, #14]
 80062f2:	2b80      	cmp	r3, #128	; 0x80
 80062f4:	d103      	bne.n	80062fe <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e00e      	b.n	800631c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 ffe6 	bl	80072d4 <USBD_LL_IsStallEP>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2201      	movs	r2, #1
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e002      	b.n	800631c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2202      	movs	r2, #2
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fb94 	bl	8006a50 <USBD_CtlSendData>
              break;
 8006328:	e004      	b.n	8006334 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fb24 	bl	800697a <USBD_CtlError>
              break;
 8006332:	bf00      	nop
          }
          break;
 8006334:	e004      	b.n	8006340 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fb1e 	bl	800697a <USBD_CtlError>
          break;
 800633e:	bf00      	nop
      }
      break;
 8006340:	e004      	b.n	800634c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fb18 	bl	800697a <USBD_CtlError>
      break;
 800634a:	bf00      	nop
  }

  return ret;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	885b      	ldrh	r3, [r3, #2]
 8006372:	0a1b      	lsrs	r3, r3, #8
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	2b06      	cmp	r3, #6
 800637a:	f200 8128 	bhi.w	80065ce <USBD_GetDescriptor+0x276>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <USBD_GetDescriptor+0x2c>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	080063a1 	.word	0x080063a1
 8006388:	080063b9 	.word	0x080063b9
 800638c:	080063f9 	.word	0x080063f9
 8006390:	080065cf 	.word	0x080065cf
 8006394:	080065cf 	.word	0x080065cf
 8006398:	0800656f 	.word	0x0800656f
 800639c:	0800659b 	.word	0x0800659b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	7c12      	ldrb	r2, [r2, #16]
 80063ac:	f107 0108 	add.w	r1, r7, #8
 80063b0:	4610      	mov	r0, r2
 80063b2:	4798      	blx	r3
 80063b4:	60f8      	str	r0, [r7, #12]
      break;
 80063b6:	e112      	b.n	80065de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	7c1b      	ldrb	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10d      	bne.n	80063dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	f107 0208 	add.w	r2, r7, #8
 80063cc:	4610      	mov	r0, r2
 80063ce:	4798      	blx	r3
 80063d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3301      	adds	r3, #1
 80063d6:	2202      	movs	r2, #2
 80063d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063da:	e100      	b.n	80065de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	f107 0208 	add.w	r2, r7, #8
 80063e8:	4610      	mov	r0, r2
 80063ea:	4798      	blx	r3
 80063ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3301      	adds	r3, #1
 80063f2:	2202      	movs	r2, #2
 80063f4:	701a      	strb	r2, [r3, #0]
      break;
 80063f6:	e0f2      	b.n	80065de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	885b      	ldrh	r3, [r3, #2]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b05      	cmp	r3, #5
 8006400:	f200 80ac 	bhi.w	800655c <USBD_GetDescriptor+0x204>
 8006404:	a201      	add	r2, pc, #4	; (adr r2, 800640c <USBD_GetDescriptor+0xb4>)
 8006406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640a:	bf00      	nop
 800640c:	08006425 	.word	0x08006425
 8006410:	08006459 	.word	0x08006459
 8006414:	0800648d 	.word	0x0800648d
 8006418:	080064c1 	.word	0x080064c1
 800641c:	080064f5 	.word	0x080064f5
 8006420:	08006529 	.word	0x08006529
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	7c12      	ldrb	r2, [r2, #16]
 800643c:	f107 0108 	add.w	r1, r7, #8
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
 8006444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006446:	e091      	b.n	800656c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa95 	bl	800697a <USBD_CtlError>
            err++;
 8006450:	7afb      	ldrb	r3, [r7, #11]
 8006452:	3301      	adds	r3, #1
 8006454:	72fb      	strb	r3, [r7, #11]
          break;
 8006456:	e089      	b.n	800656c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00b      	beq.n	800647c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	7c12      	ldrb	r2, [r2, #16]
 8006470:	f107 0108 	add.w	r1, r7, #8
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
 8006478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800647a:	e077      	b.n	800656c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa7b 	bl	800697a <USBD_CtlError>
            err++;
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	3301      	adds	r3, #1
 8006488:	72fb      	strb	r3, [r7, #11]
          break;
 800648a:	e06f      	b.n	800656c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	7c12      	ldrb	r2, [r2, #16]
 80064a4:	f107 0108 	add.w	r1, r7, #8
 80064a8:	4610      	mov	r0, r2
 80064aa:	4798      	blx	r3
 80064ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ae:	e05d      	b.n	800656c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa61 	bl	800697a <USBD_CtlError>
            err++;
 80064b8:	7afb      	ldrb	r3, [r7, #11]
 80064ba:	3301      	adds	r3, #1
 80064bc:	72fb      	strb	r3, [r7, #11]
          break;
 80064be:	e055      	b.n	800656c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00b      	beq.n	80064e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	7c12      	ldrb	r2, [r2, #16]
 80064d8:	f107 0108 	add.w	r1, r7, #8
 80064dc:	4610      	mov	r0, r2
 80064de:	4798      	blx	r3
 80064e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064e2:	e043      	b.n	800656c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fa47 	bl	800697a <USBD_CtlError>
            err++;
 80064ec:	7afb      	ldrb	r3, [r7, #11]
 80064ee:	3301      	adds	r3, #1
 80064f0:	72fb      	strb	r3, [r7, #11]
          break;
 80064f2:	e03b      	b.n	800656c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	7c12      	ldrb	r2, [r2, #16]
 800650c:	f107 0108 	add.w	r1, r7, #8
 8006510:	4610      	mov	r0, r2
 8006512:	4798      	blx	r3
 8006514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006516:	e029      	b.n	800656c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa2d 	bl	800697a <USBD_CtlError>
            err++;
 8006520:	7afb      	ldrb	r3, [r7, #11]
 8006522:	3301      	adds	r3, #1
 8006524:	72fb      	strb	r3, [r7, #11]
          break;
 8006526:	e021      	b.n	800656c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	7c12      	ldrb	r2, [r2, #16]
 8006540:	f107 0108 	add.w	r1, r7, #8
 8006544:	4610      	mov	r0, r2
 8006546:	4798      	blx	r3
 8006548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800654a:	e00f      	b.n	800656c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa13 	bl	800697a <USBD_CtlError>
            err++;
 8006554:	7afb      	ldrb	r3, [r7, #11]
 8006556:	3301      	adds	r3, #1
 8006558:	72fb      	strb	r3, [r7, #11]
          break;
 800655a:	e007      	b.n	800656c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa0b 	bl	800697a <USBD_CtlError>
          err++;
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	3301      	adds	r3, #1
 8006568:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800656a:	e038      	b.n	80065de <USBD_GetDescriptor+0x286>
 800656c:	e037      	b.n	80065de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	7c1b      	ldrb	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657e:	f107 0208 	add.w	r2, r7, #8
 8006582:	4610      	mov	r0, r2
 8006584:	4798      	blx	r3
 8006586:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006588:	e029      	b.n	80065de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f9f4 	bl	800697a <USBD_CtlError>
        err++;
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	3301      	adds	r3, #1
 8006596:	72fb      	strb	r3, [r7, #11]
      break;
 8006598:	e021      	b.n	80065de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	7c1b      	ldrb	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10d      	bne.n	80065be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	f107 0208 	add.w	r2, r7, #8
 80065ae:	4610      	mov	r0, r2
 80065b0:	4798      	blx	r3
 80065b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3301      	adds	r3, #1
 80065b8:	2207      	movs	r2, #7
 80065ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065bc:	e00f      	b.n	80065de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f9da 	bl	800697a <USBD_CtlError>
        err++;
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	3301      	adds	r3, #1
 80065ca:	72fb      	strb	r3, [r7, #11]
      break;
 80065cc:	e007      	b.n	80065de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f9d2 	bl	800697a <USBD_CtlError>
      err++;
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	3301      	adds	r3, #1
 80065da:	72fb      	strb	r3, [r7, #11]
      break;
 80065dc:	bf00      	nop
  }

  if (err != 0U)
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11c      	bne.n	800661e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80065e4:	893b      	ldrh	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d011      	beq.n	800660e <USBD_GetDescriptor+0x2b6>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	88db      	ldrh	r3, [r3, #6]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	88da      	ldrh	r2, [r3, #6]
 80065f6:	893b      	ldrh	r3, [r7, #8]
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bf28      	it	cs
 80065fc:	4613      	movcs	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006602:	893b      	ldrh	r3, [r7, #8]
 8006604:	461a      	mov	r2, r3
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fa21 	bl	8006a50 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	88db      	ldrh	r3, [r3, #6]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d104      	bne.n	8006620 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa78 	bl	8006b0c <USBD_CtlSendStatus>
 800661c:	e000      	b.n	8006620 <USBD_GetDescriptor+0x2c8>
    return;
 800661e:	bf00      	nop
    }
  }
}
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop

08006628 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	889b      	ldrh	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d130      	bne.n	800669c <USBD_SetAddress+0x74>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	88db      	ldrh	r3, [r3, #6]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d12c      	bne.n	800669c <USBD_SetAddress+0x74>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	885b      	ldrh	r3, [r3, #2]
 8006646:	2b7f      	cmp	r3, #127	; 0x7f
 8006648:	d828      	bhi.n	800669c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	885b      	ldrh	r3, [r3, #2]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006654:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665c:	2b03      	cmp	r3, #3
 800665e:	d104      	bne.n	800666a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f989 	bl	800697a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006668:	e01c      	b.n	80066a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	7bfa      	ldrb	r2, [r7, #15]
 800666e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fe59 	bl	800732e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fa45 	bl	8006b0c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006690:	e008      	b.n	80066a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800669a:	e003      	b.n	80066a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f96b 	bl	800697a <USBD_CtlError>
  }
}
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	885b      	ldrh	r3, [r3, #2]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	4b41      	ldr	r3, [pc, #260]	; (80067c4 <USBD_SetConfig+0x118>)
 80066be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066c0:	4b40      	ldr	r3, [pc, #256]	; (80067c4 <USBD_SetConfig+0x118>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d904      	bls.n	80066d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f955 	bl	800697a <USBD_CtlError>
 80066d0:	e075      	b.n	80067be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d002      	beq.n	80066e2 <USBD_SetConfig+0x36>
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d023      	beq.n	8006728 <USBD_SetConfig+0x7c>
 80066e0:	e062      	b.n	80067a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80066e2:	4b38      	ldr	r3, [pc, #224]	; (80067c4 <USBD_SetConfig+0x118>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01a      	beq.n	8006720 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80066ea:	4b36      	ldr	r3, [pc, #216]	; (80067c4 <USBD_SetConfig+0x118>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2203      	movs	r2, #3
 80066f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80066fc:	4b31      	ldr	r3, [pc, #196]	; (80067c4 <USBD_SetConfig+0x118>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff f9f0 	bl	8005ae8 <USBD_SetClassConfig>
 8006708:	4603      	mov	r3, r0
 800670a:	2b02      	cmp	r3, #2
 800670c:	d104      	bne.n	8006718 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f932 	bl	800697a <USBD_CtlError>
            return;
 8006716:	e052      	b.n	80067be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f9f7 	bl	8006b0c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800671e:	e04e      	b.n	80067be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f9f3 	bl	8006b0c <USBD_CtlSendStatus>
        break;
 8006726:	e04a      	b.n	80067be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006728:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <USBD_SetConfig+0x118>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d112      	bne.n	8006756 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006738:	4b22      	ldr	r3, [pc, #136]	; (80067c4 <USBD_SetConfig+0x118>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006742:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <USBD_SetConfig+0x118>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff f9ec 	bl	8005b26 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9dc 	bl	8006b0c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006754:	e033      	b.n	80067be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006756:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <USBD_SetConfig+0x118>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d01d      	beq.n	80067a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff f9da 	bl	8005b26 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006772:	4b14      	ldr	r3, [pc, #80]	; (80067c4 <USBD_SetConfig+0x118>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800677c:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <USBD_SetConfig+0x118>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff f9b0 	bl	8005ae8 <USBD_SetClassConfig>
 8006788:	4603      	mov	r3, r0
 800678a:	2b02      	cmp	r3, #2
 800678c:	d104      	bne.n	8006798 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f8f2 	bl	800697a <USBD_CtlError>
            return;
 8006796:	e012      	b.n	80067be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f9b7 	bl	8006b0c <USBD_CtlSendStatus>
        break;
 800679e:	e00e      	b.n	80067be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f9b3 	bl	8006b0c <USBD_CtlSendStatus>
        break;
 80067a6:	e00a      	b.n	80067be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f8e5 	bl	800697a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80067b0:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <USBD_SetConfig+0x118>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff f9b5 	bl	8005b26 <USBD_ClrClassConfig>
        break;
 80067bc:	bf00      	nop
    }
  }
}
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	200001ac 	.word	0x200001ac

080067c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	88db      	ldrh	r3, [r3, #6]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d004      	beq.n	80067e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f8cc 	bl	800697a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067e2:	e021      	b.n	8006828 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	db17      	blt.n	800681e <USBD_GetConfig+0x56>
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	dd02      	ble.n	80067f8 <USBD_GetConfig+0x30>
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d00b      	beq.n	800680e <USBD_GetConfig+0x46>
 80067f6:	e012      	b.n	800681e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3308      	adds	r3, #8
 8006802:	2201      	movs	r2, #1
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f922 	bl	8006a50 <USBD_CtlSendData>
        break;
 800680c:	e00c      	b.n	8006828 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3304      	adds	r3, #4
 8006812:	2201      	movs	r2, #1
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f91a 	bl	8006a50 <USBD_CtlSendData>
        break;
 800681c:	e004      	b.n	8006828 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f8aa 	bl	800697a <USBD_CtlError>
        break;
 8006826:	bf00      	nop
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006840:	3b01      	subs	r3, #1
 8006842:	2b02      	cmp	r3, #2
 8006844:	d81e      	bhi.n	8006884 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	88db      	ldrh	r3, [r3, #6]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d004      	beq.n	8006858 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f892 	bl	800697a <USBD_CtlError>
        break;
 8006856:	e01a      	b.n	800688e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f043 0202 	orr.w	r2, r3, #2
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	330c      	adds	r3, #12
 8006878:	2202      	movs	r2, #2
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f8e7 	bl	8006a50 <USBD_CtlSendData>
      break;
 8006882:	e004      	b.n	800688e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f877 	bl	800697a <USBD_CtlError>
      break;
 800688c:	bf00      	nop
  }
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	885b      	ldrh	r3, [r3, #2]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d106      	bne.n	80068b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f92b 	bl	8006b0c <USBD_CtlSendStatus>
  }
}
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ce:	3b01      	subs	r3, #1
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d80b      	bhi.n	80068ec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	885b      	ldrh	r3, [r3, #2]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d10c      	bne.n	80068f6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f911 	bl	8006b0c <USBD_CtlSendStatus>
      }
      break;
 80068ea:	e004      	b.n	80068f6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f843 	bl	800697a <USBD_CtlError>
      break;
 80068f4:	e000      	b.n	80068f8 <USBD_ClrFeature+0x3a>
      break;
 80068f6:	bf00      	nop
  }
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781a      	ldrb	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785a      	ldrb	r2, [r3, #1]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	3302      	adds	r3, #2
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	b29a      	uxth	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	3303      	adds	r3, #3
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	b29b      	uxth	r3, r3
 800692e:	4413      	add	r3, r2
 8006930:	b29a      	uxth	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	3304      	adds	r3, #4
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	b29a      	uxth	r2, r3
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	3305      	adds	r3, #5
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	b29b      	uxth	r3, r3
 800694a:	4413      	add	r3, r2
 800694c:	b29a      	uxth	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	3306      	adds	r3, #6
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	b29a      	uxth	r2, r3
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	3307      	adds	r3, #7
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	b29b      	uxth	r3, r3
 8006966:	4413      	add	r3, r2
 8006968:	b29a      	uxth	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	80da      	strh	r2, [r3, #6]

}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b082      	sub	sp, #8
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006984:	2180      	movs	r1, #128	; 0x80
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fc66 	bl	8007258 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800698c:	2100      	movs	r1, #0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fc62 	bl	8007258 <USBD_LL_StallEP>
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d032      	beq.n	8006a18 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f834 	bl	8006a20 <USBD_GetLen>
 80069b8:	4603      	mov	r3, r0
 80069ba:	3301      	adds	r3, #1
 80069bc:	b29b      	uxth	r3, r3
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	75fa      	strb	r2, [r7, #23]
 80069cc:	461a      	mov	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	7812      	ldrb	r2, [r2, #0]
 80069d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	75fa      	strb	r2, [r7, #23]
 80069de:	461a      	mov	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4413      	add	r3, r2
 80069e4:	2203      	movs	r2, #3
 80069e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80069e8:	e012      	b.n	8006a10 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	60fa      	str	r2, [r7, #12]
 80069f0:	7dfa      	ldrb	r2, [r7, #23]
 80069f2:	1c51      	adds	r1, r2, #1
 80069f4:	75f9      	strb	r1, [r7, #23]
 80069f6:	4611      	mov	r1, r2
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	440a      	add	r2, r1
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	75fa      	strb	r2, [r7, #23]
 8006a06:	461a      	mov	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e8      	bne.n	80069ea <USBD_GetString+0x4e>
    }
  }
}
 8006a18:	bf00      	nop
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006a2c:	e005      	b.n	8006a3a <USBD_GetLen+0x1a>
  {
    len++;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3301      	adds	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3301      	adds	r3, #1
 8006a38:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f5      	bne.n	8006a2e <USBD_GetLen+0xe>
  }

  return len;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a66:	88fa      	ldrh	r2, [r7, #6]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006a6c:	88fa      	ldrh	r2, [r7, #6]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	2100      	movs	r1, #0
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fc77 	bl	800736c <USBD_LL_Transmit>

  return USBD_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fc65 	bl	800736c <USBD_LL_Transmit>

  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2203      	movs	r2, #3
 8006abe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fc6a 	bl	80073b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	2100      	movs	r1, #0
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fc58 	bl	80073b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2204      	movs	r2, #4
 8006b18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2100      	movs	r1, #0
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fc22 	bl	800736c <USBD_LL_Transmit>

  return USBD_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2205      	movs	r2, #5
 8006b3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b42:	2300      	movs	r3, #0
 8006b44:	2200      	movs	r2, #0
 8006b46:	2100      	movs	r1, #0
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fc32 	bl	80073b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4912      	ldr	r1, [pc, #72]	; (8006ba8 <MX_USB_DEVICE_Init+0x50>)
 8006b60:	4812      	ldr	r0, [pc, #72]	; (8006bac <MX_USB_DEVICE_Init+0x54>)
 8006b62:	f7fe ff65 	bl	8005a30 <USBD_Init>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b6c:	f7f9 fbcc 	bl	8000308 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b70:	490f      	ldr	r1, [pc, #60]	; (8006bb0 <MX_USB_DEVICE_Init+0x58>)
 8006b72:	480e      	ldr	r0, [pc, #56]	; (8006bac <MX_USB_DEVICE_Init+0x54>)
 8006b74:	f7fe ff87 	bl	8005a86 <USBD_RegisterClass>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b7e:	f7f9 fbc3 	bl	8000308 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b82:	490c      	ldr	r1, [pc, #48]	; (8006bb4 <MX_USB_DEVICE_Init+0x5c>)
 8006b84:	4809      	ldr	r0, [pc, #36]	; (8006bac <MX_USB_DEVICE_Init+0x54>)
 8006b86:	f7fe feb5 	bl	80058f4 <USBD_CDC_RegisterInterface>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b90:	f7f9 fbba 	bl	8000308 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b94:	4805      	ldr	r0, [pc, #20]	; (8006bac <MX_USB_DEVICE_Init+0x54>)
 8006b96:	f7fe ff90 	bl	8005aba <USBD_Start>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ba0:	f7f9 fbb2 	bl	8000308 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ba4:	bf00      	nop
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20000140 	.word	0x20000140
 8006bac:	200003d4 	.word	0x200003d4
 8006bb0:	2000002c 	.word	0x2000002c
 8006bb4:	20000130 	.word	0x20000130

08006bb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4905      	ldr	r1, [pc, #20]	; (8006bd4 <CDC_Init_FS+0x1c>)
 8006bc0:	4805      	ldr	r0, [pc, #20]	; (8006bd8 <CDC_Init_FS+0x20>)
 8006bc2:	f7fe feae 	bl	8005922 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bc6:	4905      	ldr	r1, [pc, #20]	; (8006bdc <CDC_Init_FS+0x24>)
 8006bc8:	4803      	ldr	r0, [pc, #12]	; (8006bd8 <CDC_Init_FS+0x20>)
 8006bca:	f7fe fec4 	bl	8005956 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006bce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000a80 	.word	0x20000a80
 8006bd8:	200003d4 	.word	0x200003d4
 8006bdc:	20000698 	.word	0x20000698

08006be0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006be4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	6039      	str	r1, [r7, #0]
 8006bfa:	71fb      	strb	r3, [r7, #7]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	2b23      	cmp	r3, #35	; 0x23
 8006c04:	d84a      	bhi.n	8006c9c <CDC_Control_FS+0xac>
 8006c06:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <CDC_Control_FS+0x1c>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c9d 	.word	0x08006c9d
 8006c10:	08006c9d 	.word	0x08006c9d
 8006c14:	08006c9d 	.word	0x08006c9d
 8006c18:	08006c9d 	.word	0x08006c9d
 8006c1c:	08006c9d 	.word	0x08006c9d
 8006c20:	08006c9d 	.word	0x08006c9d
 8006c24:	08006c9d 	.word	0x08006c9d
 8006c28:	08006c9d 	.word	0x08006c9d
 8006c2c:	08006c9d 	.word	0x08006c9d
 8006c30:	08006c9d 	.word	0x08006c9d
 8006c34:	08006c9d 	.word	0x08006c9d
 8006c38:	08006c9d 	.word	0x08006c9d
 8006c3c:	08006c9d 	.word	0x08006c9d
 8006c40:	08006c9d 	.word	0x08006c9d
 8006c44:	08006c9d 	.word	0x08006c9d
 8006c48:	08006c9d 	.word	0x08006c9d
 8006c4c:	08006c9d 	.word	0x08006c9d
 8006c50:	08006c9d 	.word	0x08006c9d
 8006c54:	08006c9d 	.word	0x08006c9d
 8006c58:	08006c9d 	.word	0x08006c9d
 8006c5c:	08006c9d 	.word	0x08006c9d
 8006c60:	08006c9d 	.word	0x08006c9d
 8006c64:	08006c9d 	.word	0x08006c9d
 8006c68:	08006c9d 	.word	0x08006c9d
 8006c6c:	08006c9d 	.word	0x08006c9d
 8006c70:	08006c9d 	.word	0x08006c9d
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006c9d 	.word	0x08006c9d
 8006c7c:	08006c9d 	.word	0x08006c9d
 8006c80:	08006c9d 	.word	0x08006c9d
 8006c84:	08006c9d 	.word	0x08006c9d
 8006c88:	08006c9d 	.word	0x08006c9d
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006c9d 	.word	0x08006c9d
 8006c94:	08006c9d 	.word	0x08006c9d
 8006c98:	08006c9d 	.word	0x08006c9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c9c:	bf00      	nop
  }

  return (USBD_OK);
 8006c9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4809      	ldr	r0, [pc, #36]	; (8006ce0 <CDC_Receive_FS+0x34>)
 8006cba:	f7fe fe4c 	bl	8005956 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cbe:	4808      	ldr	r0, [pc, #32]	; (8006ce0 <CDC_Receive_FS+0x34>)
 8006cc0:	f7fe fe8c 	bl	80059dc <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	81fb      	strh	r3, [r7, #14]
    CDC_Transmit_FS (Buf, len);
 8006cca:	89fb      	ldrh	r3, [r7, #14]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f808 	bl	8006ce4 <CDC_Transmit_FS>
  return (USBD_OK);
 8006cd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	200003d4 	.word	0x200003d4

08006ce4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006cf4:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <CDC_Transmit_FS+0x48>)
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e00b      	b.n	8006d22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006d0a:	887b      	ldrh	r3, [r7, #2]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4806      	ldr	r0, [pc, #24]	; (8006d2c <CDC_Transmit_FS+0x48>)
 8006d12:	f7fe fe06 	bl	8005922 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006d16:	4805      	ldr	r0, [pc, #20]	; (8006d2c <CDC_Transmit_FS+0x48>)
 8006d18:	f7fe fe31 	bl	800597e <USBD_CDC_TransmitPacket>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200003d4 	.word	0x200003d4

08006d30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	6039      	str	r1, [r7, #0]
 8006d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2212      	movs	r2, #18
 8006d40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d42:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	2000015c 	.word	0x2000015c

08006d54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	6039      	str	r1, [r7, #0]
 8006d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2204      	movs	r2, #4
 8006d64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d66:	4b03      	ldr	r3, [pc, #12]	; (8006d74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	20000170 	.word	0x20000170

08006d78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	6039      	str	r1, [r7, #0]
 8006d82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d105      	bne.n	8006d96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	4907      	ldr	r1, [pc, #28]	; (8006dac <USBD_FS_ProductStrDescriptor+0x34>)
 8006d8e:	4808      	ldr	r0, [pc, #32]	; (8006db0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d90:	f7ff fe04 	bl	800699c <USBD_GetString>
 8006d94:	e004      	b.n	8006da0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	4904      	ldr	r1, [pc, #16]	; (8006dac <USBD_FS_ProductStrDescriptor+0x34>)
 8006d9a:	4805      	ldr	r0, [pc, #20]	; (8006db0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d9c:	f7ff fdfe 	bl	800699c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006da0:	4b02      	ldr	r3, [pc, #8]	; (8006dac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000e68 	.word	0x20000e68
 8006db0:	08007530 	.word	0x08007530

08006db4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	6039      	str	r1, [r7, #0]
 8006dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	4904      	ldr	r1, [pc, #16]	; (8006dd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006dc4:	4804      	ldr	r0, [pc, #16]	; (8006dd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006dc6:	f7ff fde9 	bl	800699c <USBD_GetString>
  return USBD_StrDesc;
 8006dca:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20000e68 	.word	0x20000e68
 8006dd8:	08007548 	.word	0x08007548

08006ddc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	221a      	movs	r2, #26
 8006dec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006dee:	f000 f843 	bl	8006e78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006df2:	4b02      	ldr	r3, [pc, #8]	; (8006dfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000174 	.word	0x20000174

08006e00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d105      	bne.n	8006e1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	4907      	ldr	r1, [pc, #28]	; (8006e34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e16:	4808      	ldr	r0, [pc, #32]	; (8006e38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e18:	f7ff fdc0 	bl	800699c <USBD_GetString>
 8006e1c:	e004      	b.n	8006e28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	4904      	ldr	r1, [pc, #16]	; (8006e34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e22:	4805      	ldr	r0, [pc, #20]	; (8006e38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e24:	f7ff fdba 	bl	800699c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e28:	4b02      	ldr	r3, [pc, #8]	; (8006e34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000e68 	.word	0x20000e68
 8006e38:	0800755c 	.word	0x0800755c

08006e3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d105      	bne.n	8006e5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	4907      	ldr	r1, [pc, #28]	; (8006e70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e52:	4808      	ldr	r0, [pc, #32]	; (8006e74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e54:	f7ff fda2 	bl	800699c <USBD_GetString>
 8006e58:	e004      	b.n	8006e64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	4904      	ldr	r1, [pc, #16]	; (8006e70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e5e:	4805      	ldr	r0, [pc, #20]	; (8006e74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e60:	f7ff fd9c 	bl	800699c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e64:	4b02      	ldr	r3, [pc, #8]	; (8006e70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000e68 	.word	0x20000e68
 8006e74:	08007568 	.word	0x08007568

08006e78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <Get_SerialNum+0x44>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e84:	4b0e      	ldr	r3, [pc, #56]	; (8006ec0 <Get_SerialNum+0x48>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e8a:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <Get_SerialNum+0x4c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4413      	add	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	4909      	ldr	r1, [pc, #36]	; (8006ec8 <Get_SerialNum+0x50>)
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f814 	bl	8006ed0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ea8:	2204      	movs	r2, #4
 8006eaa:	4908      	ldr	r1, [pc, #32]	; (8006ecc <Get_SerialNum+0x54>)
 8006eac:	68b8      	ldr	r0, [r7, #8]
 8006eae:	f000 f80f 	bl	8006ed0 <IntToUnicode>
  }
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	1ffff7ac 	.word	0x1ffff7ac
 8006ec0:	1ffff7b0 	.word	0x1ffff7b0
 8006ec4:	1ffff7b4 	.word	0x1ffff7b4
 8006ec8:	20000176 	.word	0x20000176
 8006ecc:	20000186 	.word	0x20000186

08006ed0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
 8006ee6:	e027      	b.n	8006f38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	0f1b      	lsrs	r3, r3, #28
 8006eec:	2b09      	cmp	r3, #9
 8006eee:	d80b      	bhi.n	8006f08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	0f1b      	lsrs	r3, r3, #28
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	4619      	mov	r1, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	440b      	add	r3, r1
 8006f00:	3230      	adds	r2, #48	; 0x30
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	e00a      	b.n	8006f1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	0f1b      	lsrs	r3, r3, #28
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	4619      	mov	r1, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	440b      	add	r3, r1
 8006f18:	3237      	adds	r2, #55	; 0x37
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	3301      	adds	r3, #1
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	3301      	adds	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]
 8006f38:	7dfa      	ldrb	r2, [r7, #23]
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d3d3      	bcc.n	8006ee8 <IntToUnicode+0x18>
  }
}
 8006f40:	bf00      	nop
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a11      	ldr	r2, [pc, #68]	; (8006fa0 <HAL_PCD_MspInit+0x54>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d11b      	bne.n	8006f96 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006f5e:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <HAL_PCD_MspInit+0x58>)
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	4a10      	ldr	r2, [pc, #64]	; (8006fa4 <HAL_PCD_MspInit+0x58>)
 8006f64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f68:	61d3      	str	r3, [r2, #28]
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <HAL_PCD_MspInit+0x58>)
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8006f76:	2200      	movs	r2, #0
 8006f78:	2100      	movs	r1, #0
 8006f7a:	2013      	movs	r0, #19
 8006f7c:	f7f9 fbd1 	bl	8000722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8006f80:	2013      	movs	r0, #19
 8006f82:	f7f9 fbea 	bl	800075a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8006f86:	2200      	movs	r2, #0
 8006f88:	2100      	movs	r1, #0
 8006f8a:	2014      	movs	r0, #20
 8006f8c:	f7f9 fbc9 	bl	8000722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8006f90:	2014      	movs	r0, #20
 8006f92:	f7f9 fbe2 	bl	800075a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40005c00 	.word	0x40005c00
 8006fa4:	40021000 	.word	0x40021000

08006fa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f7fe fdc4 	bl	8005b4c <USBD_LL_SetupStage>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	440b      	add	r3, r1
 8006fec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f7fe fdf4 	bl	8005be2 <USBD_LL_DataOutStage>
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	4613      	mov	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	440b      	add	r3, r1
 8007022:	333c      	adds	r3, #60	; 0x3c
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	78fb      	ldrb	r3, [r7, #3]
 8007028:	4619      	mov	r1, r3
 800702a:	f7fe fe4b 	bl	8005cc4 <USBD_LL_DataInStage>
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe ff5e 	bl	8005f06 <USBD_LL_SOF>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800705a:	2301      	movs	r3, #1
 800705c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d001      	beq.n	800706a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007066:	f7f9 f94f 	bl	8000308 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007070:	7bfa      	ldrb	r2, [r7, #15]
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe ff0b 	bl	8005e90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe fec4 	bl	8005e0e <USBD_LL_Reset>
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe ff06 	bl	8005eb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070ac:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <HAL_PCD_SuspendCallback+0x30>)
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	4a03      	ldr	r2, [pc, #12]	; (80070c0 <HAL_PCD_SuspendCallback+0x30>)
 80070b2:	f043 0306 	orr.w	r3, r3, #6
 80070b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe ff01 	bl	8005eda <USBD_LL_Resume>
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80070e8:	4a29      	ldr	r2, [pc, #164]	; (8007190 <USBD_LL_Init+0xb0>)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a27      	ldr	r2, [pc, #156]	; (8007190 <USBD_LL_Init+0xb0>)
 80070f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80070f8:	4b25      	ldr	r3, [pc, #148]	; (8007190 <USBD_LL_Init+0xb0>)
 80070fa:	4a26      	ldr	r2, [pc, #152]	; (8007194 <USBD_LL_Init+0xb4>)
 80070fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80070fe:	4b24      	ldr	r3, [pc, #144]	; (8007190 <USBD_LL_Init+0xb0>)
 8007100:	2208      	movs	r2, #8
 8007102:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007104:	4b22      	ldr	r3, [pc, #136]	; (8007190 <USBD_LL_Init+0xb0>)
 8007106:	2202      	movs	r2, #2
 8007108:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800710a:	4b21      	ldr	r3, [pc, #132]	; (8007190 <USBD_LL_Init+0xb0>)
 800710c:	2202      	movs	r2, #2
 800710e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007110:	4b1f      	ldr	r3, [pc, #124]	; (8007190 <USBD_LL_Init+0xb0>)
 8007112:	2200      	movs	r2, #0
 8007114:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007116:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <USBD_LL_Init+0xb0>)
 8007118:	2200      	movs	r2, #0
 800711a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800711c:	4b1c      	ldr	r3, [pc, #112]	; (8007190 <USBD_LL_Init+0xb0>)
 800711e:	2200      	movs	r2, #0
 8007120:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007122:	481b      	ldr	r0, [pc, #108]	; (8007190 <USBD_LL_Init+0xb0>)
 8007124:	f7f9 fb33 	bl	800078e <HAL_PCD_Init>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 800712e:	f7f9 f8eb 	bl	8000308 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007138:	2318      	movs	r3, #24
 800713a:	2200      	movs	r2, #0
 800713c:	2100      	movs	r1, #0
 800713e:	f7fa fdb9 	bl	8001cb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007148:	2358      	movs	r3, #88	; 0x58
 800714a:	2200      	movs	r2, #0
 800714c:	2180      	movs	r1, #128	; 0x80
 800714e:	f7fa fdb1 	bl	8001cb4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007158:	23c0      	movs	r3, #192	; 0xc0
 800715a:	2200      	movs	r2, #0
 800715c:	2181      	movs	r1, #129	; 0x81
 800715e:	f7fa fda9 	bl	8001cb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007168:	f44f 7388 	mov.w	r3, #272	; 0x110
 800716c:	2200      	movs	r2, #0
 800716e:	2101      	movs	r1, #1
 8007170:	f7fa fda0 	bl	8001cb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800717a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800717e:	2200      	movs	r2, #0
 8007180:	2182      	movs	r1, #130	; 0x82
 8007182:	f7fa fd97 	bl	8001cb4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20001068 	.word	0x20001068
 8007194:	40005c00 	.word	0x40005c00

08007198 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7f9 fbcb 	bl	800094a <HAL_PCD_Start>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f954 	bl	8007468 <USBD_Get_USB_Status>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	4608      	mov	r0, r1
 80071d8:	4611      	mov	r1, r2
 80071da:	461a      	mov	r2, r3
 80071dc:	4603      	mov	r3, r0
 80071de:	70fb      	strb	r3, [r7, #3]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70bb      	strb	r3, [r7, #2]
 80071e4:	4613      	mov	r3, r2
 80071e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071f6:	78bb      	ldrb	r3, [r7, #2]
 80071f8:	883a      	ldrh	r2, [r7, #0]
 80071fa:	78f9      	ldrb	r1, [r7, #3]
 80071fc:	f7f9 fce7 	bl	8000bce <HAL_PCD_EP_Open>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	4618      	mov	r0, r3
 8007208:	f000 f92e 	bl	8007468 <USBD_Get_USB_Status>
 800720c:	4603      	mov	r3, r0
 800720e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007210:	7bbb      	ldrb	r3, [r7, #14]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	4611      	mov	r1, r2
 8007238:	4618      	mov	r0, r3
 800723a:	f7f9 fd2e 	bl	8000c9a <HAL_PCD_EP_Close>
 800723e:	4603      	mov	r3, r0
 8007240:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 f90f 	bl	8007468 <USBD_Get_USB_Status>
 800724a:	4603      	mov	r3, r0
 800724c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800724e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007272:	78fa      	ldrb	r2, [r7, #3]
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f7f9 fdef 	bl	8000e5a <HAL_PCD_EP_SetStall>
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 f8f0 	bl	8007468 <USBD_Get_USB_Status>
 8007288:	4603      	mov	r3, r0
 800728a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800728c:	7bbb      	ldrb	r3, [r7, #14]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	460b      	mov	r3, r1
 80072a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072b0:	78fa      	ldrb	r2, [r7, #3]
 80072b2:	4611      	mov	r1, r2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7f9 fe22 	bl	8000efe <HAL_PCD_EP_ClrStall>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 f8d1 	bl	8007468 <USBD_Get_USB_Status>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072e6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80072e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	da0c      	bge.n	800730a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	440b      	add	r3, r1
 8007304:	3302      	adds	r3, #2
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	e00b      	b.n	8007322 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	440b      	add	r3, r1
 800731c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007320:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	4611      	mov	r1, r2
 800734c:	4618      	mov	r0, r3
 800734e:	f7f9 fc19 	bl	8000b84 <HAL_PCD_SetAddress>
 8007352:	4603      	mov	r3, r0
 8007354:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	4618      	mov	r0, r3
 800735a:	f000 f885 	bl	8007468 <USBD_Get_USB_Status>
 800735e:	4603      	mov	r3, r0
 8007360:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007362:	7bbb      	ldrb	r3, [r7, #14]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	461a      	mov	r2, r3
 8007378:	460b      	mov	r3, r1
 800737a:	72fb      	strb	r3, [r7, #11]
 800737c:	4613      	mov	r3, r2
 800737e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800738e:	893b      	ldrh	r3, [r7, #8]
 8007390:	7af9      	ldrb	r1, [r7, #11]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	f7f9 fd1e 	bl	8000dd4 <HAL_PCD_EP_Transmit>
 8007398:	4603      	mov	r3, r0
 800739a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 f862 	bl	8007468 <USBD_Get_USB_Status>
 80073a4:	4603      	mov	r3, r0
 80073a6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80073a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b086      	sub	sp, #24
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	461a      	mov	r2, r3
 80073be:	460b      	mov	r3, r1
 80073c0:	72fb      	strb	r3, [r7, #11]
 80073c2:	4613      	mov	r3, r2
 80073c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073d4:	893b      	ldrh	r3, [r7, #8]
 80073d6:	7af9      	ldrb	r1, [r7, #11]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	f7f9 fca6 	bl	8000d2a <HAL_PCD_EP_Receive>
 80073de:	4603      	mov	r3, r0
 80073e0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 f83f 	bl	8007468 <USBD_Get_USB_Status>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80073ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800740a:	78fa      	ldrb	r2, [r7, #3]
 800740c:	4611      	mov	r1, r2
 800740e:	4618      	mov	r0, r3
 8007410:	f7f9 fcc8 	bl	8000da4 <HAL_PCD_EP_GetRxCount>
 8007414:	4603      	mov	r3, r0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007428:	4b03      	ldr	r3, [pc, #12]	; (8007438 <USBD_static_malloc+0x18>)
}
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	200001b0 	.word	0x200001b0

0800743c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]

}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d817      	bhi.n	80074ac <USBD_Get_USB_Status+0x44>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <USBD_Get_USB_Status+0x1c>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	08007495 	.word	0x08007495
 8007488:	0800749b 	.word	0x0800749b
 800748c:	080074a1 	.word	0x080074a1
 8007490:	080074a7 	.word	0x080074a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
    break;
 8007498:	e00b      	b.n	80074b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800749a:	2302      	movs	r3, #2
 800749c:	73fb      	strb	r3, [r7, #15]
    break;
 800749e:	e008      	b.n	80074b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
    break;
 80074a4:	e005      	b.n	80074b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074a6:	2302      	movs	r3, #2
 80074a8:	73fb      	strb	r3, [r7, #15]
    break;
 80074aa:	e002      	b.n	80074b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80074ac:	2302      	movs	r3, #2
 80074ae:	73fb      	strb	r3, [r7, #15]
    break;
 80074b0:	bf00      	nop
  }
  return usb_status;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <__libc_init_array>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	4e0d      	ldr	r6, [pc, #52]	; (80074f8 <__libc_init_array+0x38>)
 80074c4:	4c0d      	ldr	r4, [pc, #52]	; (80074fc <__libc_init_array+0x3c>)
 80074c6:	1ba4      	subs	r4, r4, r6
 80074c8:	10a4      	asrs	r4, r4, #2
 80074ca:	2500      	movs	r5, #0
 80074cc:	42a5      	cmp	r5, r4
 80074ce:	d109      	bne.n	80074e4 <__libc_init_array+0x24>
 80074d0:	4e0b      	ldr	r6, [pc, #44]	; (8007500 <__libc_init_array+0x40>)
 80074d2:	4c0c      	ldr	r4, [pc, #48]	; (8007504 <__libc_init_array+0x44>)
 80074d4:	f000 f820 	bl	8007518 <_init>
 80074d8:	1ba4      	subs	r4, r4, r6
 80074da:	10a4      	asrs	r4, r4, #2
 80074dc:	2500      	movs	r5, #0
 80074de:	42a5      	cmp	r5, r4
 80074e0:	d105      	bne.n	80074ee <__libc_init_array+0x2e>
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074e8:	4798      	blx	r3
 80074ea:	3501      	adds	r5, #1
 80074ec:	e7ee      	b.n	80074cc <__libc_init_array+0xc>
 80074ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074f2:	4798      	blx	r3
 80074f4:	3501      	adds	r5, #1
 80074f6:	e7f2      	b.n	80074de <__libc_init_array+0x1e>
 80074f8:	080075a8 	.word	0x080075a8
 80074fc:	080075a8 	.word	0x080075a8
 8007500:	080075a8 	.word	0x080075a8
 8007504:	080075ac 	.word	0x080075ac

08007508 <memset>:
 8007508:	4402      	add	r2, r0
 800750a:	4603      	mov	r3, r0
 800750c:	4293      	cmp	r3, r2
 800750e:	d100      	bne.n	8007512 <memset+0xa>
 8007510:	4770      	bx	lr
 8007512:	f803 1b01 	strb.w	r1, [r3], #1
 8007516:	e7f9      	b.n	800750c <memset+0x4>

08007518 <_init>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	bf00      	nop
 800751c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751e:	bc08      	pop	{r3}
 8007520:	469e      	mov	lr, r3
 8007522:	4770      	bx	lr

08007524 <_fini>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	bf00      	nop
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr
