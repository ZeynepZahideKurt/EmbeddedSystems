// LED will blink when in config mode
/*
  GPIO 0 12k-13k direnç ve butonla ve EN( Resetleme butonu-12k 13k direnç tak )programlama moduna geç. önce I0 butonuna basıp sonra EN butonuna basarsan programlama moduna geçer
  GPIO1 (TX) / GPIO3 (RX) ile program at
  GPIO2 bi tane led tak wifii ye bağlandığınında ışığı söner
  GPIO15 bir buton tak wifiiye bağlanma oradaki butonla eepromdaki kullanıcı adı şifreyi değiştir
  GPIO21 SDA / GPIO22 SCL 3.3 volt

  SPI   MOSI    MISO    CLK     CS
  VSPI  GPIO 23 GPIO 19 GPIO 18 GPIO 5
  HSPI  GPIO 13 GPIO 12 GPIO 14 GPIO 15
*/

#include <WiFiManager.h> // https://github.com/tzapu/WiFiManager
#include <Ticker.h>
#include "time.h"
Ticker ticker;

#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <stdio.h>
#include <string.h>

#include <Wire.h>
#define Addr 0x44

#define I2C_SDA 21
#define I2C_SCL 22

#define SCREEN_CS_Pin 18
#define SCREEN_RST_Pin 5
#define SCREEN_A0_Pin 17
#define SCREEN_SCL_Pin 16
#define  SCREEN_SDA_Pin 4
#define NOP __asm__ __volatile__ ("nop\n\t")

const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 3600;
int Krish_day;
int Krish_month;
int Krish_year;
int Krish_hour;
int Krish_min;
int Krish_sec;
char inByte;
int c=1;
int kontrolcircle = 0;
int kontrolsayi;
int kontrol1 = 0;

uint8_t counter, page, column;
uint16_t screenTempI, screenTempI2;
char arr[20];
char displayArr[40];

typedef enum {
  LEFT = 0, CENTER = 1, RIGHT = 2, RIGHT_UP = 3, CENTER_UP = 4, CENTER_LEFT = 5
} LOCATION;
typedef enum {
  INSTRUCTION = 0, DATA = 1
} TRANSMODE;


#ifndef LED_BUILTIN
#define LED_BUILTIN 2 // ESP32 DOES NOT DEFINE LED_BUILTIN
#endif

unsigned long simdikizaman, eskizaman, simdikizaman2, eskizaman2, simdikizaman3, eskizaman3;

int LED = LED_BUILTIN;

float cTemp;
float humidity;
const uint8_t KOYUBIR[16] = {0x18, 0x24, 0x42, 0x42, 0x81, 0x81,    0xA1,  0xBD, 0xA5,   0x81, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00 };
const uint8_t KOYUIKI[16] = {0x18, 0x24, 0x42, 0x42, 0x81, 0x81,    0xDD,  0xD5, 0xF5,    0x81, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00 };
const uint8_t KOYUUC[16] = {0x18, 0x24, 0x42, 0x42, 0x81, 0x81,     0xFD,  0xD5, 0xD5,   0x81, 0x42, 0x42, 0x24, 0x18 , 0x00, 0x00};
const uint8_t KOYUDORT[16] = {0x18, 0x24, 0x42, 0x42, 0x81, 0x81,   0xFD,  0x91, 0x8D,    0x81, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00 };
const uint8_t KOYUBES[16] = {0x18, 0x24, 0x42, 0x42, 0x81, 0x81,    0xF5, 0xD5, 0xDD,     0x81, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00 };
const uint8_t KOYUALTI[16] = {0x18, 0x24, 0x42, 0x42, 0x81, 0x81,   0xF5, 0xD5, 0xFD,    0x81, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00 };


const uint8_t ACIKBIR[16] = {0x18, 0x3C, 0x7E, 0x7E, 0xFF, 0xDF, 0xC3, 0xDB, 0xFF, 0xFF, 0x7E, 0x7E , 0x3C , 0x28, 0x00, 0x00 };
const uint8_t ACIKIKI[16] = {0x18, 0x3C, 0x7E, 0x7E, 0xFF, 0xA3, 0xAB, 0x8B, 0xFF, 0xFF, 0x7E, 0x7E , 0x3C , 0x28, 0x00, 0x00 };
const uint8_t ACIKUC[16] = {0x18, 0x3C, 0x7E, 0x7E, 0xFF, 0x83, 0xAB, 0xAB, 0xFF, 0xFF, 0x7E, 0x7E , 0x3C , 0x28, 0x00, 0x00} ;
const uint8_t ACIKDORT[16] = {0x18, 0x3C, 0x7E, 0x7E, 0xFF, 0x83, 0xDF, 0xE3, 0xFF, 0xFF, 0x7E, 0x7E , 0x3C , 0x28, 0x00, 0x00 };
const uint8_t ACIKBES[16] = {0x18, 0x3C, 0x7E, 0x7E, 0xFF, 0x8B, 0xAB, 0xA3, 0xFF, 0xFF, 0x7E, 0x7E , 0x3C , 0x28, 0x00, 0x00 };
const uint8_t ACIKALTI[16] = {0x18, 0x3C, 0x7E, 0x7E, 0xFF, 0x8B, 0xAB, 0x83, 0xFF, 0xFF, 0x7E, 0x7E , 0x3C , 0x28, 0x00, 0x00};

const uint8_t charArray[64][10] = { { 1, 0x00 }, /*   */
  { 1, 0xbf }, /* ! */
  { 3, 0x07, 0x00, 0x07 }, /* " */
  { 7, 0x04, 0x27, 0x3c, 0xe7, 0x3c, 0xe7, 0xbf }, /* # */
  { 5, 0x24, 0x54, 0xfe, 0x76, 0xc9 }, /* $ */
  { 5, 0b01100010, 0b01100100, 0b00001000, 0b00010011, 0b00100011 }, /* % */
  { 7, 0x80, 0x58, 0x60, 0x96, 0x89, 0x89, 0x76 }, /* & */
  { 1, 0x07 }, /* ' */
  { 3, 0x81, 0x66, 0x18 }, /* ( */
  { 3, 0x18, 0x66, 0x81 }, /* ) */
  { 5, 0x28, 0x10, 0x7c, 0x10, 0x28 }, /* * */
  { 7, 0x08, 0x08, 0x08, 0x7e, 0x08, 0x08, 0x08 }, /* + */
  { 2, 0x70, 0x80 }, /* , */
  { 3, 0b00001000, 0b00001000, 0b00001000 }, /* - */
  { 1, 0x40 }, /* . */
  { 4, 0x03, 0x0c, 0x30, 0xc0 }, /* / */
  { 5, 0b00111110, 0b01000001, 0b01000001, 0b01000001, 0b00111110 }, /* 0 */
  { 5, 0b00000000, 0b01000000, 0b01111111, 0b01000010, 0b00000000 }, /* 1 */
  { 5, 0b01000110, 0b01001001, 0b01010001, 0b01100001, 0b01000010 }, /* 2 */
  { 5, 0b00110110, 0b01001001, 0b01001001, 0b01000001, 0b00100010 }, /* 3 */
  { 5, 0b00010000, 0b01111111, 0b00010010, 0b00010100, 0b00011000 }, /* 4 */
  { 5, 0b00111001, 0b01000101, 0b01000101, 0b01000101, 0b00100111 }, /* 5 */
  { 5, 0b00110000, 0b01001001, 0b01001001, 0b01001010, 0b00111100 }, /* 6 */
  { 5, 0b00000011, 0b00000101, 0b00001001, 0b01110001, 0b00000001 }, /* 7 */
  { 5, 0b00110110, 0b01001001, 0b01001001, 0b01001001, 0b00110110 }, /* 8 */
  { 5, 0b00011110, 0b00101001, 0b01001001, 0b01001001, 0b00000110 }, /* 9 */
  { 1, 0b00100100 }, /* : */
  { 2, 0x76, 0xec }, /* ; */
  { 8, 0x08, 0x08, 0x08, 0x08, 0x2a, 0x3e, 0x1c, 0x08 }, /* < *//* left arrow */
  { 7, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28 }, /* = */
  { 8, 0x08, 0x1c, 0x3e, 0x2a, 0x08, 0x08, 0x08, 0x08 }, /* > *//* right arrow */
  { 4, 0x06, 0x09, 0xb1, 0x01 }, /* ? */
  { 8, 0x1e, 0x21, 0x9d, 0xa5, 0xa5, 0x99, 0x42, 0x3c }, /* @ */
  { 5, 0b01111110, 0b00001001, 0b00001001, 0b00001001, 0b01111110 }, /* A */
  { 5, 0b00110110, 0b01001001, 0b01001001, 0b01001001, 0b01111111 }, /* B */
  { 5, 0b00100010, 0b01000001, 0b01000001, 0b01000001, 0b00111110 }, /* C */
  { 5, 0b00011100, 0b00100010, 0b01000001, 0b01000001, 0b01111111 }, /* D */
  { 5, 0b01000001, 0b01001001, 0b01001001, 0b01001001, 0b01111111 }, /* E */
  { 5, 0b00000001, 0b00001001, 0b00001001, 0b00001001, 0b01111111 }, /* F */
  { 5, 0b01111010, 0b01001001, 0b01001001, 0b01000001, 0b00111110 }, /* G */
  { 5, 0b01111111, 0b00001000, 0b00001000, 0b00001000, 0b01111111 }, /* H */
  { 5, 0b00000000, 0b01000001, 0b01111111, 0b01000001, 0b00000000 }, /* I */
  { 5, 0b00000001, 0b00111111, 0b01000001, 0b01000000, 0b00100000 }, /* J */
  { 5, 0b01000001, 0b00100010, 0b00010100, 0b00001000, 0b01111111 }, /* K */
  { 5, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01111111 }, /* L */
  { 5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111 }, /* M */
  { 5, 0b01111111, 0b00010000, 0b00001000, 0b00000100, 0b01111111 }, /* N */
  { 5, 0b00111110, 0b01000001, 0b01000001, 0b01000001, 0b00111110 }, /* O */
  { 5, 0b00000110, 0b00001001, 0b00001001, 0b00001001, 0b01111111 }, /* P */
  { 5, 0b01011110, 0b00100001, 0b01010001, 0b01000001, 0b00111110 }, /* Q */
  { 5, 0b01000110, 0b00101001, 0b00011001, 0b00001001, 0b01111111 }, /* R */
  { 5, 0b00110001, 0b01001001, 0b01001001, 0b01001001, 0b01000110 }, /* S */
  { 5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001 }, /* T */
  { 5, 0b00111111, 0b01000000, 0b01000000, 0b01000000, 0b00111111 }, /* U */
  { 5, 0b00011111, 0b00100000, 0b01000000, 0b00100000, 0b00011111 }, /* V */
  { 5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111 }, /* W */
  { 5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011 }, /* X */
  { 5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111 }, /* Y */
  { 5, 0b01000011, 0b01000101, 0b01001001, 0b01010001, 0b01100001 }, /* Z */
  { 3, 0x81, 0x81, 0xff }, /* [ */
  { 4, 0xc0, 0x30, 0x0c, 0x03 }, /* \ */
  { 3, 0xff, 0x81, 0x81 }, /* ] */
  { 5, 0x30, 0x60, 0xff, 0x60, 0x30 }, /* ^ *//* down arrow */
  { 7, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 } /* _ */
};

const uint8_t logoArray[1024] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
                                  0x80, 0xC0, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0x3C, 0x3C, 0x7C, 0xFE,
                                  0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                  0x03, 0x03, 0x07, 0xFE, 0xFE, 0xFE, 0x06, 0x0C, 0x0C, 0x0C, 0x18, 0x18,
                                  0x30, 0x30, 0x60, 0xE0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
                                  0x80, 0xC0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xFF, 0xFF, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF,
                                  0xFF, 0xFF, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0x00, 0x00,
                                  0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x1C, 0x38, 0x70, 0xC0, 0x80, 0x80, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB0, 0x10,
                                  0xB0, 0x10, 0xB0, 0x10, 0xB0, 0x10, 0xB0, 0x10, 0xB0, 0xE0, 0xC0, 0xC0,
                                  0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0x60, 0x70, 0x30,
                                  0x30, 0xD8, 0xF8, 0xFC, 0xFC, 0x0E, 0x07, 0x03, 0x01, 0x03, 0xFF, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF,
                                  0xFF, 0xFC, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
                                  0xFF, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0x7C, 0x38,
                                  0x18, 0x30, 0x30, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0,
                                  0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0x70, 0x10, 0xB0, 0x10, 0xB0, 0x10, 0xB0,
                                  0x10, 0xB0, 0x10, 0xB0, 0xE0, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
                                  0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFE, 0xF8, 0xF0, 0xC0, 0x03, 0x07,
                                  0x1F, 0x3F, 0x1F, 0x07, 0x01, 0xC0, 0xF0, 0xFC, 0xFF, 0xFF, 0x7F, 0x0F,
                                  0x00, 0x00, 0xC0, 0xE0, 0x80, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00,
                                  0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
                                  0x1F, 0x1F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
                                  0xFF, 0xFF, 0x3F, 0x0F, 0x07, 0x01, 0x80, 0x80, 0x00, 0x00, 0x00, 0xFF,
                                  0xFF, 0xFF, 0x7B, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
                                  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0xFE,
                                  0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x03, 0x00, 0x00, 0xC0, 0x82, 0x83, 0x83,
                                  0x03, 0x00, 0x00, 0x00, 0x03, 0x7F, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
                                  0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x00, 0x00,
                                  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x01, 0x80, 0xF0,
                                  0xFC, 0xFE, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xDE, 0x1E,
                                  0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
                                  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x07, 0x0D, 0x08,
                                  0x0D, 0x08, 0x0D, 0x08, 0x0D, 0x08, 0x0D, 0x08, 0x0D, 0x07, 0x03, 0x03,
                                  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0C,
                                  0x0C, 0x1C, 0x18, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
                                  0x00, 0x00, 0x0F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
                                  0xFF, 0x7F, 0x3F, 0x3F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
                                  0xFF, 0x00, 0x00, 0x80, 0xF0, 0xFE, 0xFF, 0xFF, 0x7F, 0x3F, 0x3F, 0x1F,
                                  0x1C, 0x0C, 0x0C, 0x0F, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03,
                                  0x03, 0x03, 0x03, 0x03, 0x07, 0x0E, 0x08, 0x0D, 0x08, 0x0D, 0x08, 0x0D,
                                  0x08, 0x0D, 0x08, 0x0D, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x0F, 0x1F, 0x38, 0x70, 0xE0, 0xC3,
                                  0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x80, 0xFF, 0xFF, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
                                  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07,
                                  0x07, 0x07, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0x38, 0x1C, 0x0F,
                                  0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x07,
                                  0x0E, 0x0C, 0x18, 0x18, 0x3C, 0x3C, 0x3C, 0x7E, 0x7F, 0x7F, 0x7F, 0xFF,
                                  0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0x7F,
                                  0x7F, 0x7F, 0x60, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x06, 0x07,
                                  0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                };

const uint8_t big_char_array_page_top[78][10] = { { 0b00000000 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* . ALT */
  { 0x00 }, /*   */
  /*{ 0b11111100, 0b11111100, 0b00000011, 0b00000011, 0b00000011, 0b00000011,
      0b00000011, 0b00000011, 0b11111100, 0b11111100 },  0 */
  { 0b11110000, 0b11110000, 0b00001100, 0b00001100, 0b00001100, 0b00001100,
    0b00001100, 0b00001100, 0b11110000, 0b11110000
  }, /* 0 */
  /*{ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111,
      0b00001100, 0b00001100, 0b00000000, 0b00000000 },  1 ALT */
  { 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111100, 0b11111100,
    0b00110000, 0b00110000, 0b00000000, 0b00000000
  }, /* 1 */
  /* { 0b00111100, 0b00111100, 0b11000011, 0b11000011, 0b00000011, 0b00000011,
      0b00000011, 0b00000011, 0b00001100, 0b00001100 }, 2 */
  { 0b00000000, 0b11111000, 0b11111100, 0b00001100, 0b00001100, 0b00001100,
    0b00001100, 0b00001100, 0b00111000, 0b00110000
  }, /* 2 */
  /*{ 0b00111100, 0b00111100, 0b11000011, 0b11000011, 0b11000011, 0b11000011,
      0b00000011, 0b00000011, 0b00001100, 0b00001100 },  3 */
  { 0b11110000, 0b11110000, 0b00001100, 0b00001100, 0b00001100, 0b00001100,
    0b00001100, 0b00001100, 0b00110000, 0b00110000
  }, /* 3 */
  /*{ 0b00000000, 0b00000000, 0b11111100, 0b11111100, 0b00110000, 0b00110000,
      0b11000000, 0b11000000, 0b00000000, 0b00000000 },  4 */
  { 0b00000000, 0b0000000, 0b11111100, 0b11111100, 0b00110000, 0b00110000,
    0b11000000, 0b11000000, 0b00000000, 0b00000000
  }, //4
  /*{ 0b11000011, 0b11000011, 0b00110011, 0b00110011, 0b00110011, 0b00110011,
      0b00110011, 0b00110011, 0b00111111, 0b00111111 },  5 */
  { 0b00001100, 0b00001100, 0b11001100, 0b11001100, 0b11001100, 0b11001100,
    0b11001100, 0b11001100, 0b00111100, 0b00111100
  }, /* 5 */
  /*{ 0b00000000, 0b00000000, 0b11000011, 0b11000011, 0b11000011, 0b11000011,
      0b11001100, 0b11001100, 0b11110000, 0b11110000 },  6 */
  { 0b00000000, 0b00000000, 0b00001100, 0b00001100, 0b00001100, 0b00001100,
    0b00111000, 0b00110000, 0b11100000, 0b11000000
  }, /* 6 */
  /*{ 0b00001111, 0b00001111, 0b00110011, 0b00110011, 0b11000011, 0b11000011,
      0b00000011, 0b00000011, 0b00000011, 0b00000011 },  7 */
  { 0b00011100, 0b00111100, 0b01101100, 0b11001100, 0b10001100, 0b00001100,
    0b00001100, 0b00001100, 0b00001100, 0b00001100
  }, /* 7 */
  /*{ 0b00111100, 0b00111100, 0b11000011, 0b11000011, 0b11000011, 0b11000011,
      0b11000011, 0b11000011, 0b00111100, 0b00111100 },  8 */
  { 0b11110000, 0b11110000, 0b00001100, 0b00001100, 0b00001100, 0b00001100,
    0b00001100, 0b00001100, 0b11110000, 0b11110000
  }, /* 8 */
  /*{ 0b11111100, 0b11111100, 0b11000011, 0b11000011, 0b11000011, 0b11000011,
      0b11000011, 0b11000011, 0b00111100, 0b00111100 },  9 */
  { 0b11110000, 0b11110000, 0b00001100, 0b00001100, 0b00001100, 0b00001100,
    0b00001100, 0b00001100, 0b11110000, 0b11110000
  }, /* 9 */

  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0xFC, 0xFC, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFC, 0xFC }, /* A */
  { 0x3C, 0x3C, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF }, /* B */
  { 0x0C, 0x0C, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFC, 0xFC }, /* C */
  { 0xF0, 0xF0, 0x0C, 0x0C, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF }, /* D */
  { 0x03, 0x03, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF }, /* E */
  { 0x03, 0x03, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF }, /* F */
  { 0xCC, 0xCC, 0xC3, 0xC3, 0xC3, 0xC3, 0x03, 0x03, 0xFC, 0xFC }, /* G */
  { 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF }, /* H */
  { 0x00, 0x00, 0x03, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0x00 }, /* I */
  { 0x03, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00 }, /* J */
  { 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0xC0, 0xC0, 0xFF, 0xFF }, /* K */
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF }, /* L */
  { 0xFF, 0xFF, 0x0C, 0x0C, 0xF0, 0xF0, 0x0C, 0x0C, 0xFF, 0xFF }, /* M */

  /*{ 0xFF, 0xFF, 0x00, 0x00, 0xC0, 0xC0, 0x30, 0x30, 0xFF, 0xFF },  N */
  { 0xFC, 0xFC, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0x1C, 0xFC, 0xFC }, /* N */

  { 0xFC, 0xFC, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFC, 0xFC }, /* O */
  { 0x3C, 0x3C, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF }, /* P */
  { 0xFC, 0xFC, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFC, 0xFC }, /* Q */
  { 0x3C, 0x3C, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF }, /* R */

  /* { 0x03, 0x03, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x3C, 0x3C }, S */
  { 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xF0, 0xF0 }, /* S */

  { 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03 }, /* T */
  { 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF }, /* U */
  { 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF }, /* V */
  { 0xFF, 0xFF, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0xFF, 0xFF }, /* W */
  { 0x0F, 0x0F, 0x30, 0x30, 0xC0, 0xC0, 0x30, 0x30, 0x0F, 0x0F }, /* X */
  { 0x3F, 0x3F, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0x3F, 0x3F }, /* Y */
  { 0x0F, 0x0F, 0x33, 0x33, 0xC3, 0xC3, 0x03, 0x03, 0x03, 0x03 }, /* Z */
  { 0x00, 0xCC, 0xCC, 0x33, 0x33, 0x33, 0x33, 0x03, 0x03, 0x00 }, /* ^3 [*/
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0xC0, 0xC0, 0x30, 0x30, 0xC0, 0xC0, 0x30, 0x30, 0xF0, 0xF0 } /* m */
};

const uint8_t big_char_array_page_bottom[78][10] = { { 0b00000000 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x00 }, /* .  */
  { 0x00 }, /*   */

  /* { 0b00001111, 0b00001111, 0b00110000, 0b00110000, 0b00110000, 0b00110000,
      0b00110000, 0b00110000, 0b00001111, 0b00001111 }, 0 */
  { 0b00111111, 0b00111111, 0b11000000, 0b11000000, 0b11000000, 0b11000000,
    0b11000000, 0b11000000, 0b00111111, 0b00111111
  }, /* 0 */
  /*{ 0b00000000, 0b00000000, 0b00110000, 0b00110000, 0b00111111, 0b00111111,
      0b00110000, 0b00110000, 0b00000000, 0b00000000 },  1 */
  { 0b00000000, 0b00000000, 0b11000000, 0b11000000, 0b11111111, 0b11111111,
    0b11000000, 0b11000000, 0b00000000, 0b00000000
  }, /* 1 */
  /*{ 0b00110000, 0b00110000, 0b00110000, 0b00110000, 0b00110011, 0b00110011,
      0b00111100, 0b00111100, 0b00110000, 0b00110000 },  2 */
  { 0b00000000, 0b11000001, 0b11000011, 0b11000011, 0b11001110, 0b11001100,
    0b11111000, 0b11110000, 0b11100000, 0b11000000
  }, /* 2 */
  /*{ 0b00001111, 0b00001111, 0b00110000, 0b00110000, 0b00110000, 0b00110000,
      0b00110000, 0b00110000, 0b00001100, 0b00001100 },  3 */
  { 0b00111100, 0b00111100, 0b11000011, 0b11000011, 0b11000011, 0b11000011,
    0b11000000, 0b11000000, 0b00110000, 0b00110000
  }, /* 3 */
  /*{ 0b00000011, 0b00000011, 0b00111111, 0b00111111, 0b00000011, 0b00000011,
      0b00000011, 0b00000011, 0b00000011, 0b00000011 },  4 */
  { 0b00000011, 0b00000011, 0b11111111, 0b11111111, 0b00000011, 0b00000011,
    0b00000011, 0b00000011, 0b00000011, 0b00000011
  }, /* 4 */
  /*{ 0b00001111, 0b00001111, 0b00110000, 0b00110000, 0b00110000, 0b00110000,
      0b00110000, 0b00110000, 0b00001100, 0b00001100 },  5 */
  { 0b00111111, 0b00111111, 0b11000000, 0b11000000, 0b11000000, 0b11000000,
    0b11000000, 0b11000000, 0b00110000, 0b00110000
  }, /* 5 */
  /*{ 0b00001111, 0b00001111, 0b00110000, 0b00110000, 0b00110000, 0b00110000,
      0b00110000, 0b00110000, 0b00001111, 0b00001111 },  6 */
  { 0b00111100, 0b00111100, 0b11000011, 0b11000011, 0b11000011, 0b11000011,
    0b11000011, 0b11000011, 0b00111111, 0b00111111
  }, /* 6 */
  /*{ 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
      0b00111111, 0b00111111, 0b00000000, 0b00000000 },  7 */
  { 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00000011,
    0b11111110, 0b11111100, 0b00000000, 0b00000000
  }, /* 7 */
  /* { 0b00001111, 0b00001111, 0b00110000, 0b00110000, 0b00110000, 0b00110000,
      0b00110000, 0b00110000, 0b00001111, 0b00001111 }, 8 */
  { 0b00111100, 0b00111100, 0b11000011, 0b11000011, 0b11000011, 0b11000011,
    0b11000011, 0b11000011, 0b00111100, 0b00111100
  }, /* 8 */

  /*{ 0b00000011, 0b00000011, 0b00001100, 0b00001100, 0b00110000, 0b00110000,
      0b00110000, 0b00110000, 0b00000000, 0b00000000 },  9 */
  { 0b00001111, 0b00011111, 0b00111011, 0b01110011, 0b11100011, 0b11000011,
    0b11000011, 0b11000011, 0b00000000, 0b00000000
  }, /* 9 */


  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F }, /* A */
  { 0x0F, 0x0F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3F, 0x3F }, /* B */
  { 0x0C, 0x0C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0F, 0x0F }, /* C */
  { 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x30, 0x30, 0x3F, 0x3F }, /* D */
  { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3F, 0x3F }, /* E */
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F }, /* F */
  { 0x3F, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0F, 0x0F }, /* G */
  { 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F }, /* H */
  { 0x00, 0x00, 0x30, 0x30, 0x3F, 0x3F, 0x30, 0x30, 0x00, 0x00 }, /* I */
  { 0x00, 0x00, 0x0F, 0x0F, 0x30, 0x30, 0x30, 0x30, 0x0C, 0x0C }, /* J */
  { 0x30, 0x30, 0x0C, 0x0C, 0x03, 0x03, 0x00, 0x00, 0x3F, 0x3F }, /* K */
  { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3F, 0x3F }, /* L */
  { 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F }, /* M */


  /*{ 0x3F, 0x3F, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F },  N */
  { 0x7F, 0x7F, 0x70, 0x3E  , 0x0F,   0x03, 0x00, 0x00, 0x7F, 0x7F }, /* N */

  { 0x0F, 0x0F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0F, 0x0F }, /* O */
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F }, /* P */
  { 0x33, 0x33, 0x0C, 0x0C, 0x33, 0x33, 0x30, 0x30, 0x0F, 0x0F }, /* Q */
  { 0x30, 0x30, 0x0C, 0x0C, 0x03, 0x03, 0x00, 0x00, 0x3F, 0x3F }, /* R */

  /*{ 0x03, 0x03, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x3C, 0x3C },  S */
  { 0x7F, 0x7F, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC0, 0xC0 }, /* S */


  { 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00 }, /* T */
  { 0x0F, 0x0F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0F, 0x0F }, /* U */
  { 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x0C, 0x0C, 0x03, 0x03 }, /* V */
  { 0x0F, 0x0F, 0x30, 0x30, 0x0F, 0x0F, 0x30, 0x30, 0x0F, 0x0F }, /* W */
  { 0x3C, 0x3C, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x3C, 0x3C }, /* X */
  { 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00 }, /* Y */
  { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x33, 0x3C, 0x3C }, /* Z */
  { 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00 }, /* ^3 [*/
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x00 }, /*   */
  { 0x3F, 0x3F, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x3F, 0x3F }/* m */
};

const uint8_t cl[1024] = {

  0xFF, 0xFF, 0xFF, 0xFF,  0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,   0x0F,  0x0F,
  0x0F,  0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF,  //0. satır

  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, //1.satır

  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,//2.satır


  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,//3.satır


  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,//4. satır


  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, //5.satır

  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, //6.satır

  0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0,  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0, 0xF0, 0xF0, 0xF0,  0xFF, 0xFF, 0xFF, 0xFF //7.satır
};
const uint8_t clcl[128] = {
  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,//2.satır
};



const uint8_t circle_derece_ust[] = {

  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //6


  0x00, 0x1C, 0x1C,   0x0C, 0x0C, 0x0C, 0x0C, 0x0C,    0x1C, 0xFC, 0xF8, 0xF0,     0x0E, 0x1E,  0x1E, 0x0C, //5
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //4
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //3
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x78, 0x78,  //2
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //1

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t circle_derece_alt[] = {

  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //6

  0x00, 0x70, 0x70, 0x60,   0x60, 0x60, 0x60, 0x60,   0x70, 0x1C, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00,  //5

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //4
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //3
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E,  //2
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //1


  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t circle_yuzde_ust[] = {

  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,



  //0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x78, 0xE0,     0xC0,0xF8, 0x88, 0x88, 0x88, 0xF8, 0x00, 0x00, //6

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//6
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//5
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00 ,    0x18,   0x38, 0xF8, 0xC0, //4

  0x80, 0xF0, 0xF0, 0xB0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//3
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x78, 0x78,  //2
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //1

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};
const uint8_t circle_yuzde_alt[] = {

  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,



  //0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x78, 0xE0,     0xC0,0xF8, 0x88, 0x88, 0x88, 0xF8, 0x00, 0x00, //6

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//6
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//5

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00,      0x3E, 0x3E, 0x36, 0x3E, 0x3E, //4

  0x07, 0x0F, 0x7D, 0x79, 0x61, 0x41, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //3

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E,  //2
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //1

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};


const uint8_t circle_ikinokta_ust[] = {

  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//6
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//5

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //4

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //3
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78,   0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //1
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //2


  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};
const uint8_t circle_ikinokta_alt[] = {

  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,



  //0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x78, 0xE0,     0xC0,0xF8, 0x88, 0x88, 0x88, 0xF8, 0x00, 0x00, //6

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//6
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//5

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//4
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//3
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x1E,   0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //1
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //2


  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t SATIRBIR[] = {
  //yukarıdan aşağıya
  0xFF, 0xFF , 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x6C, 0x6C, 0x00, 0x00, 0x00, // dkk ile saat arasındaki noktra
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  0x00, 0x00, 0x00,   0x00,  0x18, 0x18, 0x00, 0x00,    //ay ile yıl arasındaki nokta

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,      0x18, 0x18,         0x00, 0x00, //gün ile ay arasındaki nokta

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF //1.satır
};


const uint8_t initialArray[13] = { 0xa2, //bias set:1/9
                                   0xa0, //ADC select:nomal,0->128
                                   0xa6, //normal/reverse  display   a6 -> normal , a7 -> reverse
                                   0xc8, //commom output mode select: reverse c8->reverse , c0->normal
                                   0xf8, //booster ratio set
                                   0x00, //booster ratio:4x
                                   0x2f, //power control set
                                   0x25, //set (Rb/Ra)
                                   0x81, //vo output voltage set
                                   0x1f, 0x42, //voltage volume =9.0v
                                   0x40, //set start line
                                   0xaf //display on
                                 };



void tick() {
  //toggle state
  digitalWrite(LED, !digitalRead(LED));     // set pin to the opposite state
}

/*void printLocalTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  //Serial.println(&timeinfo, "%m %d %Y / %H:%M:%S"); //scanf(&timeinfo, "%m %d %Y / %H:%M:%S")
  Krish_hour = timeinfo.tm_hour + 1; Krish_min = timeinfo.tm_min; Krish_sec = timeinfo.tm_sec;

  Krish_day = timeinfo.tm_mday; Krish_month = timeinfo.tm_mon + 1; Krish_year = timeinfo.tm_year + 1900;

  char day[2];
  itoa (Krish_day, day, 10);
  Serial.println(day);

  char month[2];
  itoa (Krish_month, month, 10);
  Serial.println(month);

  char year[4];
  itoa (Krish_year, year, 10);
  Serial.println(year);
  Serial.println(Krish_year);
  int j =sizeof(Krish_year);
  Serial.println(j);

  char hour[2];
  itoa (Krish_hour, hour, 10);
  Serial.println(hour);

  char min1[2];
  itoa (Krish_min, min1, 10);
  Serial.println(min1);

  //satirbir();

   //display(1, "13", SAAT, 0);
  //display(1, hour, SAAT, 0);

  display(1, min1, RIGHT, 0);

  //  display(1, "2001",IKI_PIKSEL , 0);
  //display(1, year,IKI_PIKSEL , 0);

  if (Krish_day < 10){
    display(1, "0", LEFT, 0);
    display(1, day, UC_PIKSEL, 0);
    }else
    display(1, day, LEFT, 0);
  if (Krish_month < 10) {
    display(1, "0", BIR_PIKSEL, 0);
    display(1, month, DORT_PIKSEL, 0);
    }else
    display(1, month, BIR_PIKSEL, 0);

  char bufyil[5];
  const char *firstyil = ".";
  strcpy(bufyil, firstyil);
  strcpy(bufyil, year);


  display(1, bufyil,IKI_PIKSEL , 0);
  Serial.println(year);
  Serial.println("bufyil: ");
  Serial.println(bufyil);
  }*/


void printLocalTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  Krish_hour = timeinfo.tm_hour + 1;
  Krish_min = timeinfo.tm_min;
  Krish_sec = timeinfo.tm_sec;
  Krish_day = timeinfo.tm_mday;
  Krish_month = timeinfo.tm_mon + 1;
  Krish_year = timeinfo.tm_year + 1900;
  setPage(0);
  setColumn(98);
  char dateTime[20];
  sprintf(dateTime, "%02u-%02u-%02u %02u:%02u", Krish_day  ,
          Krish_month, Krish_year, Krish_hour,
          Krish_min);
  Serial.println("giriyor");
  display(1, dateTime, RIGHT, false);
}


void configModeCallback (WiFiManager *myWiFiManager) {
  Serial.println("Entered config mode");
  Serial.println(WiFi.softAPIP());
  //if you used auto generated SSID, print it
  Serial.println(myWiFiManager->getConfigPortalSSID());
  //entered config mode, make led toggle faster
  ticker.attach(0.2, tick);
  // display(3, "FAILED TO CONNECT", CENTER, 1);
  display(4, "ENELSIS CIHAZINA BAGLANINIZ!", CENTER, 0);
  //display(5, "IF NOT CONNECTED, ENTER USER NAME PASSWORD", CENTER, 1);
  delay(3000);
}

void trans(TRANSMODE type, uint8_t command) {
  digitalWrite(SCREEN_CS_Pin, 0);

  digitalWrite(SCREEN_A0_Pin, type != INSTRUCTION);
  for (counter = 0; counter < 8; counter++) {

    if (((command & 0x80) == 0x80) == 1) {
      digitalWrite(SCREEN_SDA_Pin, 1);
    } else {
      digitalWrite(SCREEN_SDA_Pin, 0);
    }

    digitalWrite(SCREEN_SCL_Pin, 0);
    NOP;
    digitalWrite(SCREEN_SCL_Pin, 1);
    NOP;
    digitalWrite(SCREEN_SCL_Pin, 0);
    NOP;
    command <<= 1;
  }

  digitalWrite(SCREEN_CS_Pin, HIGH);
}

void initial() {
  for (screenTempI = 0; screenTempI < 13; screenTempI++) {
    trans(INSTRUCTION, initialArray[screenTempI]);
  }
}
void setPage(uint8_t page) {
  trans(INSTRUCTION, 0xb0 + page);
}

void setColumn(uint8_t column) {
  trans(INSTRUCTION, 0x10 | (column >> 4));
  trans(INSTRUCTION, 0x00 | (column & 0x0f));
}

void clearScreen() { //uint8_t removeFirstPage
  /*for (page = !removeFirstPage; page < 8; page++) {
    setPage(page);
    setColumn(0);
    for (column = 0; column < 1024; column++) {
      trans(DATA, 0x00);
    }

    clearPage(1);

    } */
  clearPage(0);
  clearPage(1);
  clearPage(2);
  clearPage(3);
  clearPage(4);
  clearPage(5);
  clearPage(6);
  clearPage(7);
  //clearPage(2);

  /*
    for (int i = 0; i < 1024; i++) {
      trans(i, 0x00);
    }
    clearPage(page);

    for (screenTempI = 0; screenTempI < 8; screenTempI++) {
      setPage(screenTempI);
      setColumn(0);
      for (screenTempI2 = 0; screenTempI2 < 128; screenTempI2++) {
        trans(DATA, 0x00);
      }
    } */
}

void displaycl() {
  for (screenTempI = 0; screenTempI < 8; screenTempI++) {
    setPage(screenTempI);
    setColumn(0);
    for (screenTempI2 = 0; screenTempI2 < 128; screenTempI2++) {
      trans(DATA, cl[(screenTempI * 128) + screenTempI2]);
    }
  }
}

void circle1() {
  //clearPage(2);
  setPage(2);

  //Serial.print("circleye girdi ");Serial.print("c: ");Serial.println(c);
  int a = (65 - (8 * c));
  int b = (65 + (8 * c)) ;
  int d = (b - a) / 16;
  setColumn(a);
  //Serial.print("a: "); Serial.println(a);Serial.print("b: ");Serial.println(b);Serial.print("d: ");Serial.println(d);
    
  if (kontrolsayi == 0  ) {
    for (int i = d; i > 0 ; i--) {
      // Serial.print("i: "); Serial.println(i);
      if (i == 1) {
        for (int l = a; l < a + 16; l++) {
          //   Serial.print("l: "); Serial.println(l);
          trans(DATA, KOYUBIR[l - a]);
        }
      } else if (i == 2) {
        for (int l = a + 16; l < a + 32; l++) {
          trans(DATA, ACIKIKI[l - a - 16]);
        }
      } else if (i == 3) {
        for (int l = a + 32; l < a + 48; l++) {
          trans(DATA, ACIKUC[l - a - 32]);
        }
      } else if (i == 4) {
        for (int l = a + 48; l < a + 64; l++) {
          trans(DATA, ACIKDORT[l - a - 48]);
        }
      } else if (i == 5) {
        for (int l = a + 64; l < a + 80; l++) {
          trans(DATA, ACIKBES[l - a - 64]);
        }
      } else if (i == 6) {
        for (int l = a + 80; l < a + 96; l++) {
          trans(DATA, ACIKALTI[l - a - 80]);
        }
      }

    }
  } else if (kontrolsayi == 1) {
    for (int i = d; i > 0 ; i--) {
      // Serial.print("i: "); Serial.println(i);
      if (i == 1) {
        for (int l = a; l < a + 16; l++) {
          //   Serial.print("l: "); Serial.println(l);
          trans(DATA, ACIKBIR[l - a]);
        }
      } else if (i == 2) {
        for (int l = a + 16; l < a + 32; l++) {
          trans(DATA, KOYUIKI[l - a - 16]);
        }
      } else if (i == 3) {
        for (int l = a + 32; l < a + 48; l++) {
          trans(DATA, ACIKUC[l - a - 32]);
        }
      } else if (i == 4) {
        for (int l = a + 48; l < a + 64; l++) {
          trans(DATA, ACIKDORT[l - a - 48]);
        }
      } else if (i == 5) {
        for (int l = a + 64; l < a + 80; l++) {
          trans(DATA, ACIKBES[l - a - 64]);
        }
      } else if (i == 6) {
        for (int l = a + 80; l < a + 96; l++) {
          trans(DATA, ACIKALTI[l - a - 80]);
        }
      }

    }
  } else if (kontrolsayi == 2) {
    for (int i = d; i > 0 ; i--) {
      // Serial.print("i: "); Serial.println(i);
      if (i == 1) {
        for (int l = a; l < a + 16; l++) {
          //   Serial.print("l: "); Serial.println(l);
          trans(DATA, ACIKBIR[l - a]);
        }
      } else if (i == 2) {
        for (int l = a + 16; l < a + 32; l++) {
          trans(DATA, ACIKIKI[l - a - 16]);
        }
      } else if (i == 3) {
        for (int l = a + 32; l < a + 48; l++) {
          trans(DATA, KOYUUC[l - a - 32]);
        }
      } else if (i == 4) {
        for (int l = a + 48; l < a + 64; l++) {
          trans(DATA, ACIKDORT[l - a - 48]);
        }
      } else if (i == 5) {
        for (int l = a + 64; l < a + 80; l++) {
          trans(DATA, ACIKBES[l - a - 64]);
        }
      } else if (i == 6) {
        for (int l = a + 80; l < a + 96; l++) {
          trans(DATA, ACIKALTI[l - a - 80]);
        }
      }

    }
  } else if (kontrolsayi == 3) {
    for (int i = d; i > 0 ; i--) {
      // Serial.print("i: "); Serial.println(i);
      if (i == 1) {
        for (int l = a; l < a + 16; l++) {
          //   Serial.print("l: "); Serial.println(l);
          trans(DATA, ACIKBIR[l - a]);
        }
      } else if (i == 2) {
        for (int l = a + 16; l < a + 32; l++) {
          trans(DATA, ACIKIKI[l - a - 16]);
        }
      } else if (i == 3) {
        for (int l = a + 32; l < a + 48; l++) {
          trans(DATA, ACIKUC[l - a - 32]);
        }
      } else if (i == 4) {
        for (int l = a + 48; l < a + 64; l++) {
          trans(DATA, KOYUDORT[l - a - 48]);
        }
      } else if (i == 5) {
        for (int l = a + 64; l < a + 80; l++) {
          trans(DATA, ACIKBES[l - a - 64]);
        }
      } else if (i == 6) {
        for (int l = a + 80; l < a + 96; l++) {
          trans(DATA, ACIKALTI[l - a - 80]);
        }
      }

    }
  } else if (kontrolsayi == 4) {
    for (int i = d; i > 0 ; i--) {
      // Serial.print("i: "); Serial.println(i);
      if (i == 1) {
        for (int l = a; l < a + 16; l++) {
          //   Serial.print("l: "); Serial.println(l);
          trans(DATA, ACIKBIR[l - a]);
        }
      } else if (i == 2) {
        for (int l = a + 16; l < a + 32; l++) {
          trans(DATA, ACIKIKI[l - a - 16]);
        }
      } else if (i == 3) {
        for (int l = a + 32; l < a + 48; l++) {
          trans(DATA, ACIKUC[l - a - 32]);
        }
      } else if (i == 4) {
        for (int l = a + 48; l < a + 64; l++) {
          trans(DATA, ACIKDORT[l - a - 48]);
        }
      } else if (i == 5) {
        for (int l = a + 64; l < a + 80; l++) {
          trans(DATA, KOYUBES[l - a - 64]);
        }
      } else if (i == 6) {
        for (int l = a + 80; l < a + 96; l++) {
          trans(DATA, ACIKALTI[l - a - 80]);
        }
      }

    }
  } else if (kontrolsayi == 5) {
    for (int i = d; i > 0 ; i--) {
      if (i == 1) {
        for (int l = a; l < a + 16; l++) {
          trans(DATA, ACIKBIR[l - a]);
        }
      } else if (i == 2) {
        for (int l = a + 16; l < a + 32; l++) {
          trans(DATA, ACIKIKI[l - a - 16]);
        }
      } else if (i == 3) {
        for (int l = a + 32; l < a + 48; l++) {
          trans(DATA, ACIKUC[l - a - 32]);
        }
      } else if (i == 4) {
        for (int l = a + 48; l < a + 64; l++) {
          trans(DATA, ACIKDORT[l - a - 48]);
        }
      } else if (i == 5) {
        for (int l = a + 64; l < a + 80; l++) {
          trans(DATA, ACIKBES[l - a - 64]);
        }
      } else if (i == 6) {
        for (int l = a + 80; l < a + 96; l++) {
          trans(DATA, KOYUALTI[l - a - 80]);
        }
      }

    }
  }


  a = 0;
  b = 0;
  d = 0;
}

void circleust() {


  setPage(3);
  setColumn(1);
  for (int i = 0; i < 128; i++) {
    trans(DATA, circle_derece_ust[i]);
  }
}
void circlealt() {


  setPage(4);
  setColumn(1);
  for (int i = 0; i < 128; i++) {
    trans(DATA, circle_derece_alt[i]);
  }
}
void circleyuzdeust() {


  setPage(5);
  setColumn(1);
  for (int i = 0; i < 128; i++) {
    trans(DATA, circle_yuzde_ust[i]);
  }
}
void satirbir() {


  setPage(1);
  setColumn(0);
  for (int i = 0; i < 128; i++) {
    trans(DATA, SATIRBIR[i]);
  }
}

void circleyuzdealt() {


  setPage(6);
  setColumn(1);
  for (int i = 0; i < 128; i++) {
    trans(DATA, circle_yuzde_alt[i]);
  }
}



void setScreenAndBackgroundLED(bool isOpen) {

  digitalWrite(SCREEN_A0_Pin, 0);
  digitalWrite(SCREEN_CS_Pin, 0);
  digitalWrite(SCREEN_RST_Pin, 0);
  digitalWrite(SCREEN_SCL_Pin, 0);
  digitalWrite(SCREEN_SDA_Pin, 0);

}
void initScreen() {
  setScreenAndBackgroundLED(true);
  digitalWrite(SCREEN_RST_Pin, 0);
  delay(500);
  digitalWrite(SCREEN_RST_Pin, 1);
  initial();

  displaycl();
}

void clearPage(uint8_t page) {
  setPage(page);
  setColumn(0);
  for (column = 0; column < 128; column++) {
    trans(DATA, 0x00);
  }
}
void clclearPage(uint8_t page) {
  setPage(page);
  setColumn(0);
  for (column = 0; column < 128; column++) {
    trans(DATA,  clcl[column]);
  }
}

void displayChar(char array[]) {
  uint8_t size = array[0];
  for (screenTempI = 1; screenTempI < size + 1; screenTempI++) {
    trans(DATA, array[screenTempI]);
  }
  trans(DATA, 0x00);
}

void displayBigChar(char array[]) {
  for (screenTempI = 0; screenTempI < 10; screenTempI++) {
    trans(DATA, array[screenTempI]);
  }
  trans(DATA, 0x00);
}

void display(uint8_t page, char sentence[], LOCATION location, bool isClearRow) {
  if (isClearRow)
    clearPage(page);
  int16_t i;
  char temp2[20];
  uint16_t sentence_size = strlen(sentence);
  uint8_t total_column = 0;
  char letter;
  for (i = 0; i < sentence_size; i++) {
    letter = sentence[i];
    total_column += charArray[letter - 32][0];
  }
  total_column += sentence_size - 1;
  setPage(page);
  switch (location) {
    case LEFT:
      setColumn(123 - total_column); //gün çift haneliyse
      break;
    case CENTER:
      setColumn(64 - (total_column / 2));
      break;
    case CENTER_UP:
      setColumn(78 - total_column);
      break;
    case RIGHT:
      setColumn(9);
      break;



    default:
      setColumn(location);
      break;

  }
  /*if (location == LEFT) {
    setColumn(123 - total_column); //gün çift haneliyse
    //  kontrol=0;

    }
    if (location == CENTER) {
    setColumn(64 - (total_column / 2));
    }
    if (location == CENTER_UP) {
    setColumn(78 - total_column);
    }
    if (location == RIGHT) {
    setColumn(9);
    }
    if (location == RIGHT_UP) {
    setColumn(32 - (total_column / 2));
    }



    if (location == BIR_PIKSEL) {
    setColumn(107 - total_column); //ay çift haneliyse
    //  kontrol=0;

    }
    if (location == IKI_PIKSEL) {
    setColumn(89 - total_column);
    }

    if (location == UC_PIKSEL) {
    setColumn(117 - total_column); // gün tek haneliyse
    }
    if (location == DORT_PIKSEL) {
    setColumn(101 - total_column);  // ay tek haneliyse
    }

    if (location == SAAT) {
    setColumn(25);
    }*/


  for (i = sentence_size - 1; i >= 0; i--) {
    letter = sentence[i];
    memcpy(temp2, charArray[letter - 32], charArray[letter - 32][0] + 1);
    displayChar(temp2);
  }
}
void circle() {


  setPage(2);
  //  setColumn(65 - (8*i));
  for (int i = 5; i < 123; i++) {
    trans(DATA, circle_yuzde_ust[i]);
  }
}
//MAX 11 KARAKTER
void displayBig(uint8_t page, char sentence[], LOCATION location, bool isClearRow) { //page: 0, 2, 4, 6
  if (isClearRow) {
    clearPage(page);
    clearPage(page + 1);
  }
  int8_t i;
  char temp2[10];
  char letter;
  uint8_t sentence_size = strlen(sentence); //KART YOK
  uint8_t total_column = 0;
  for (i = 0; i < sentence_size; i++) {
    if (sentence[i] == ' ')
      total_column += 3;
    else
      total_column += 11;
  }
  switch (location) {
    case LEFT:
      total_column = 118 - (total_column / 2);
      break;
    case CENTER:
      total_column = 64 - (total_column / 2);
      break;
    case RIGHT:
      total_column = 8;
      break;
    case CENTER_LEFT:
      total_column = 45 - (total_column / 2);
      break;
  }
  //clearPage(page);
  setPage(page);
  setColumn(total_column);
  for (i = sentence_size - 1; i >= 0; i--) {
    letter = sentence[i];
    if (letter == ' ') {
      trans(DATA, 0x00);
      trans(DATA, 0x00);
      trans(DATA, 0x00);
      trans(DATA, 0x00);
    } else {
      memcpy(temp2, big_char_array_page_top[letter - 32], 10);

      displayBigChar(temp2);
    }
  }
  //clearPage(page + 1);
  setPage(page + 1);
  setColumn(total_column);
  for (i = sentence_size - 1; i >= 0; i--) {
    letter = sentence[i];
    if (letter == ' ') {
      trans(DATA, 0x00);
      trans(DATA, 0x00);
      trans(DATA, 0x00);
      trans(DATA, 0x00);
    } else {
      memcpy(temp2, big_char_array_page_bottom[letter - 32], 10);
      displayBigChar(temp2);
    }
  }
}

void displayLogo() {
  for (screenTempI = 0; screenTempI < 8; screenTempI++) {
    setPage(screenTempI);
    setColumn(0);
    for (screenTempI2 = 0; screenTempI2 < 128; screenTempI2++) {
      trans(DATA, logoArray[(screenTempI * 128) + screenTempI2]);
    }
  }
}

void displayMainScreen() {
  //displayBattery();
  //displayDateTime();
  //displayAlarms();
  displayBig(3, "TOPLAM", CENTER, 1);
  sprintf(displayArr, "DENEME");
  displayBig(6, displayArr, CENTER, 1);
}

void displayMainScreen2() {
  displayBig(3, "KALAN", CENTER, 1);
  sprintf(displayArr, "DENEME2");
  displayBig(6, displayArr, CENTER, 1);
}

void getBatteryValues(){
  //BATARYAYI DENERKEN : https://forum.arduino.cc/t/measuring-the-battery-voltage-using-the-adc-on-mini-3v3-8mhz/422944   /   https://forum.arduino.cc/t/battery-level-check-using-arduino/424054  /  https://www.arduino.cc/reference/en/language/functions/analog-io/analogreference/

 /* const long InternalReferenceVoltage = 1062;  // Adjust this value to your board's specific internal BG voltage

// Code courtesy of "Coding Badly" and "Retrolefty" from the Arduino forum
// results are Vcc * 100
// So for example, 5V would be 500.
int getBandgap () 
  {
  // REFS0 : Selects AVcc external reference
  // MUX3 MUX2 MUX1 : Selects 1.1V (VBG)  
   ADMUX = bit (REFS0) | bit (MUX3) | bit (MUX2) | bit (MUX1);
   ADCSRA |= bit( ADSC );  // start conversion
   while (ADCSRA & bit (ADSC))
     { }  // wait for conversion to complete (toss this measurement)
   ADCSRA |= bit( ADSC );  // start conversion
   while (ADCSRA & bit (ADSC))
     { }  // wait for conversion to complete
   int results = (((InternalReferenceVoltage * 1024) / ADC) + 5) / 10; 
   return results;
  } // end of getBandgap */

//OR
/*
int value = 0;
float voltage;
float perc;

void setup(){
  Serial.begin(9600);
}

void loop(){
  value = analogRead(A0);
  voltage = value * 5.0/1023;
  perc = map(voltage, 3.6, 4.2, 0, 100);
  Serial.print("Voltage= ");
  Serial.println(voltage);
  Serial.print("Battery level= ");
  Serial.print(perc);
  Serial.println(" %");
  delay(500);
} 
 */

 

  
}

void displayBattery() {
 // getBatteryValues();
char DEVICEbattery1;
  DEVICEbattery1= '80';
  setPage(1);
  setColumn(95);
  sprintf(arr, "%02u", DEVICEbattery1);
 // displayChar(charArray[arr[1] - 32]);
 // displayChar(charArray[arr[0] - 32]);
  //displayChar(charArray['%' - 32]);
  trans(DATA, 0b00011100);
  trans(DATA, 0b00011100);
  trans(DATA, 0b01111111);
  trans(DATA, 0b01000001);
  if ( DEVICEbattery1 >= 83) {
    trans(DATA, 0b01011101);
  } else {
    trans(DATA, 0b01000001);
  }
  if ( DEVICEbattery1 >= 67) {
    trans(DATA, 0b01011101);
  } else {
    trans(DATA, 0b01000001);
  }
  if ( DEVICEbattery1 >= 50) {
    trans(DATA, 0b01011101);
  } else {
    trans(DATA, 0b01000001);
  }
  if ( DEVICEbattery1 >= 33) {
    trans(DATA, 0b01011101);
  } else {
    trans(DATA, 0b01000001);
  }
  if ( DEVICEbattery1 >= 17) {
    trans(DATA, 0b01011101);
  } else {
    trans(DATA, 0b01000001);
  }
  trans(DATA, 0b01011101);
  trans(DATA, 0b01000001);
  trans(DATA, 0b01111111);
}
void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your board's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
 // long rssi = WiFi.RSSI();
  long rssi= -40;
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
  setPage(1);
  setColumn(110);

  
  if (rssi > -50 &  rssi < 0 ){ //çok iyi
    trans(DATA, 0b00001000);
    trans(DATA, 0b00010100);
    trans(DATA, 0b00101010);
    trans(DATA, 0b00010101);
  
    trans(DATA, 0b11010101);
    trans(DATA, 0b11010101);
  
    trans(DATA, 0b00010101);
    trans(DATA, 0b00101010);
    trans(DATA, 0b00010100);
    trans(DATA, 0b00001000);


  
  } else if (rssi > -70 &  rssi < -50) {
  
    trans(DATA, 0b00000000);
    trans(DATA, 0b00010000);
    trans(DATA, 0b00101000);
    trans(DATA, 0b00010100);
  
    trans(DATA, 0b11010100);
    trans(DATA, 0b11010100);
  
    trans(DATA, 0b00010100);
    trans(DATA, 0b00101000);
    trans(DATA, 0b00010000);
    trans(DATA, 0b00000000);
  } else if (rssi > -80 &  rssi < -70) {
    trans(DATA, 0b00000000);
    trans(DATA, 0b00000000);
    trans(DATA, 0b00100000);
    trans(DATA, 0b00010000);
  
    trans(DATA, 0b11010000);
    trans(DATA, 0b11010000);
  
    trans(DATA, 0b00010000);
    trans(DATA, 0b00100000);
    trans(DATA, 0b00000000);
    trans(DATA, 0b00000000);
    
  }else if (rssi > -90 &  rssi < -80) { //çok kötü
    trans(DATA, 0b00000000);
    trans(DATA, 0b00000000);
    trans(DATA, 0b00000000);
    trans(DATA, 0b00000000);
  
    trans(DATA, 0b11000000);
    trans(DATA, 0b11000000);
  
    trans(DATA, 0b00000000);
    trans(DATA, 0b00000000);
    trans(DATA, 0b00000000);
    trans(DATA, 0b00000000);
  }
  
  
}
void setup() {
  Wire.begin(I2C_SDA, I2C_SCL);
  WiFi.mode(WIFI_STA); // explicitly set mode, esp defaults to STA+AP
  // put your setup code here, to run once:
  Serial.begin(115200);

  //set led pin as output
  pinMode(LED, OUTPUT);
  // start ticker with 0.5 because we start in AP mode and try to connect
  ticker.attach(0.6, tick);
  pinMode(SCREEN_CS_Pin, OUTPUT);
  pinMode(SCREEN_RST_Pin, OUTPUT);
  pinMode(SCREEN_A0_Pin, OUTPUT);
  pinMode(SCREEN_SCL_Pin, OUTPUT);
  pinMode(SCREEN_SDA_Pin, OUTPUT);
  initScreen();
  // clearScreen(1);

  /* setPage(0);
     setColumn(0);
     for (column = 0; column < 10; column++) {
       trans(DATA, 0x00);
     }*/

  //WiFiManager
  //Local intialization. Once its business is done, there is no need to keep it around
  WiFiManager wm;
  //reset settings - for testing
  // wm.resetSettings();

  //set callback that gets called when connecting to previous WiFi fails, and enters Access Point mode
  wm.setAPCallback(configModeCallback);

  //fetches ssid and pass and tries to connect
  //if it does not connect it starts an access point with the specified name
  //here  "AutoConnectAP"
  //and goes into a blocking loop awaiting configuration
  if (!wm.autoConnect()) {

    Serial.println("failed to connect and hit timeout");
    //reset and try again, or maybe put it to deep sleep
    ESP.restart();
    delay(1000);
  }


  display(4, "WIFII BAGLANDI", CENTER, 0);
  delay(3000);
  displaycl();




  //if you get here you have connected to the WiFi
  Serial.println("connected...yeey :)");
  ticker.detach();
  //keep LED on
  digitalWrite(LED, LOW);
  eskizaman = millis();
  eskizaman2 = millis();
  eskizaman3 = millis();
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

}

void loop() {

  if (kontrol1 == 0) {
    postDataToServer();
    displayBattery();
    printLocalTime();
    printWifiStatus();
    kontrol1 = 1;
  }

  simdikizaman = millis();
  simdikizaman2 = millis();
  simdikizaman3 = millis();
  if (simdikizaman - eskizaman >= 60000)
  {
    Serial.print("displaye girdi ");
    postDataToServer();
    displayBattery();
    printWifiStatus();
    eskizaman = simdikizaman;
  }
  if (simdikizaman2 - eskizaman2 >= 20000)
  {
    eskizaman2 = simdikizaman2;
    Serial.print("print locale girdi ");
    printLocalTime();
    eskizaman2 = simdikizaman2;
    
  }
  if (simdikizaman3 - eskizaman3 >= 2000)
  {
    kontrolcircle = kontrolcircle + 1;
    eskizaman3 = simdikizaman3;
    
   // Serial.println(kontrolcircle);
    kontrolsayi = kontrolcircle % c;
    //Serial.println(kontrolsayi);


  }


  if (Serial.available() > 0) {
    clclearPage(2);
    inByte = Serial.read();
    Serial.print("I received: ");  Serial.println(inByte);
    if (inByte == '1') {
      c = 1;
      //Serial.print("c: "); Serial.println(c);
    } if (inByte == '2') {
      c = 2;
      Serial.print("c: ");
      Serial.println(c);
    } if (inByte == '3') {
      c = 3;
      Serial.print("c: ");
      Serial.println(c);
    } if (inByte == '4') {
      c = 4;
      Serial.print("c: ");
      Serial.println(c);
    } if (inByte == '5') {
      c = 5;
      Serial.print("c: ");
      Serial.println(c);
    } if (inByte == '6') {
      c = 6;
      Serial.print("c: ");
      Serial.println(c);
    }



  }
  /*if (simdikizaman - eskizaman >= 2000)
  {
    kontrolcircle = kontrolcircle + 1;
    eskizaman = simdikizaman;
    
   // Serial.println(kontrolcircle);
    kontrolsayi = kontrolcircle % c;
    //Serial.println(kontrolsayi);


  }*/
  circle1();
  
  /* kontrolsayi 0 iken 1.cihazdaki veriler
     kontrolsayi 1 iken 2.cihazdaki veriler
     kontrolsayi 2 iken 3.cihazdaki veriler
     kontrolsayi 3 iken 4.cihazdaki veriler
     kontrolsayi 4 iken 5.cihazdaki veriler
     kontrolsayi 5 iken 6.cihazdaki veriler gönderilecek
  */


}

void postDataToServer() {
  unsigned int data[6];
  Wire.beginTransmission(Addr);
  // Send 16-bit command byte
  Wire.write(0x2C);
  Wire.write(0x06);
  // Stop I2C transmission
  Wire.endTransmission();
  delay(300);
  // Start I2C Transmission
  Wire.beginTransmission(Addr);
  // Stop I2C Transmission
  Wire.endTransmission();
  // Request 6 bytes of data
  Wire.requestFrom(Addr, 6);
  // Read 6 bytes of data
  // temp msb, temp lsb, temp crc, hum msb, hum lsb, hum crc
  if (Wire.available() == 6)
  {
    data[0] = Wire.read();
    data[1] = Wire.read();
    data[2] = Wire.read();
    data[3] = Wire.read();
    data[4] = Wire.read();
    data[5] = Wire.read();
  }
  int temp = (data[0] * 256) + data[1];
  cTemp = -45.0 + (175.0 * temp / 65535.0);
  humidity = (100.0 * ((data[3] * 256.0) + data[4])) / 65535.0;
  Serial.println("cTemp: ");
  Serial.println(cTemp);
  Serial.println("humidity: ");
  Serial.println(humidity);


  Serial.println("Posting JSON data to server...");
  // Block until we are able to connect to the WiFi access point
  if ((WiFi.status() == WL_CONNECTED)) { //Check the current connection status

    HTTPClient http;

    http.begin("https://www.enelsis.com:3000/newdata");
    http.addHeader("Content-Type", "application/json");

    StaticJsonDocument<200> doc;
    // Add values in the document
    //
    doc["temperature"] = cTemp;
    doc["humidity"] = humidity;
    doc["mac"] = "123kk";

    // Add an array.
    //
    JsonArray data = doc.createNestedArray("data");
    data.add(48.756080);
    data.add(2.302038);

    String requestBody;
    serializeJson(doc, requestBody);

    int httpResponseCode = http.POST(requestBody);

    if (httpResponseCode > 0) {

      String response = http.getString();

      Serial.println(httpResponseCode);
      Serial.println(response);

    }
    else {
      Serial.println("Error occurred while sending HTTP POST: %s\n");
      //Serial.println("Error occurred while sending HTTP POST: %s\n", httpClient.errorToString(statusCode).c_str());

    }

  }
  int icTemp = (int) cTemp;
  char stemp[3];
  //dtostrf(icTemp, 2, 2, stemp);
  itoa (icTemp, stemp, 10);
  // char buf[2];
  // const char *first = "TEMP:";
  // strcpy(buf, first);
  // strcat(buf, stemp);
  int inem = (int) humidity;
  char nem[3];
  //  char cnem[5];
  itoa (inem, nem, 10);
  // dtostrf(humidity, 5, 2, cnem);
  char bufnem[3];
  const char *firstnem = "NEM:";
  strcpy(bufnem, firstnem);
  //strcat(bufnem, nem);
  //display(1, "TEMP:", LEFT, 1);
  //  display(1, cnem, CENTER, 1);
  //display(1, buf, LEFT, 0);
  //display(1, bufnem, CENTER_UP, 0);
  //display(6, "ENELSIS", RIGHT, 0);
  displaycl();




  circleust();
  circlealt();
  circleyuzdeust();
  circleyuzdealt();


  //displayBig(3,"0123456789", CENTER,0);
  displayBig(3, "S", LEFT, 0);
  displayBig(3, stemp, CENTER, 0);
  displayBig(5, "N", LEFT, 0);
  displayBig(5, nem, CENTER_LEFT, 0);


}
