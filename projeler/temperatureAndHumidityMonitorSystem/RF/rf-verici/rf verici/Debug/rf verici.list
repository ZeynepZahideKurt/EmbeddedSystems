
rf verici.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a84  08003a84  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a8c  08003a8c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08003a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000210  08003ca4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003ca4  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f96  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000164a  00000000  00000000  000261ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  00027818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000508  00000000  00000000  00027dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011527  00000000  00000000  000282e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000067cf  00000000  00000000  00039807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061e50  00000000  00000000  0003ffd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a1e26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b20  00000000  00000000  000a1e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000210 	.word	0x20000210
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003958 	.word	0x08003958

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000214 	.word	0x20000214
 8000104:	08003958 	.word	0x08003958

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <spi3Class_vSpi3Init>:
**Name: 	vSpi3Init
**Func: 	Init Spi-3 Config
**Note:
**********************************************************/
void spi3Class_vSpi3Init()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
//	GPIO_Init(GPIO_PORT_C, (GPIO_Pin_TypeDef)GPIO_PINS, GPIO_MODE_OUT_PP_LOW_FAST);;	//SPI-3 for output
	SetCSB();
 80004b4:	23a0      	movs	r3, #160	; 0xa0
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	2201      	movs	r2, #1
 80004ba:	2102      	movs	r1, #2
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fc26 	bl	8001d0e <HAL_GPIO_WritePin>
	SetFCSB();
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2201      	movs	r2, #1
 80004c8:	2104      	movs	r1, #4
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fc1f 	bl	8001d0e <HAL_GPIO_WritePin>
	SetSDIO();
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	00d9      	lsls	r1, r3, #3
 80004d4:	23a0      	movs	r3, #160	; 0xa0
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2201      	movs	r2, #1
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fc17 	bl	8001d0e <HAL_GPIO_WritePin>
	ClrSDCK();
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	0099      	lsls	r1, r3, #2
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2200      	movs	r2, #0
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 fc0f 	bl	8001d0e <HAL_GPIO_WritePin>
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <vSpi3WriteByte>:
**Func: 	SPI-3 send one byte
**Input:
**Output:
**********************************************************/
void vSpi3WriteByte(uint8_t dat)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b084      	sub	sp, #16
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	0002      	movs	r2, r0
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	701a      	strb	r2, [r3, #0]

	uint8_t bitcnt;

	SetFCSB();				//FCSB = 1;
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2201      	movs	r2, #1
 8000508:	2104      	movs	r1, #4
 800050a:	0018      	movs	r0, r3
 800050c:	f001 fbff 	bl	8001d0e <HAL_GPIO_WritePin>

 	//OutputSDIO();			//SDA output mode
 	//OutputSDIO();			//SDA output mode
 	SetSDIO();				//    output 1
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	00d9      	lsls	r1, r3, #3
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	2201      	movs	r2, #1
 800051a:	0018      	movs	r0, r3
 800051c:	f001 fbf7 	bl	8001d0e <HAL_GPIO_WritePin>

 	ClrSDCK();
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	0099      	lsls	r1, r3, #2
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2200      	movs	r2, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f001 fbef 	bl	8001d0e <HAL_GPIO_WritePin>
 	ClrCSB();
 8000530:	23a0      	movs	r3, #160	; 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	2200      	movs	r2, #0
 8000536:	2102      	movs	r1, #2
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fbe8 	bl	8001d0e <HAL_GPIO_WritePin>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 800053e:	230f      	movs	r3, #15
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2208      	movs	r2, #8
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	e030      	b.n	80005aa <vSpi3WriteByte+0xb4>
 		{
		ClrSDCK();
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	0099      	lsls	r1, r3, #2
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	2200      	movs	r2, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fbdb 	bl	8001d0e <HAL_GPIO_WritePin>
		//HAL_Delay(SPI3_SPEED);
 		if(dat&0x80)
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b25b      	sxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	da08      	bge.n	8000574 <vSpi3WriteByte+0x7e>
 			SetSDIO();
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	00d9      	lsls	r1, r3, #3
 8000566:	23a0      	movs	r3, #160	; 0xa0
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	2201      	movs	r2, #1
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fbce 	bl	8001d0e <HAL_GPIO_WritePin>
 8000572:	e007      	b.n	8000584 <vSpi3WriteByte+0x8e>
 		else
 			ClrSDIO();
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	00d9      	lsls	r1, r3, #3
 8000578:	23a0      	movs	r3, #160	; 0xa0
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	2200      	movs	r2, #0
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fbc5 	bl	8001d0e <HAL_GPIO_WritePin>
		SetSDCK();
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	0099      	lsls	r1, r3, #2
 8000588:	23a0      	movs	r3, #160	; 0xa0
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	2201      	movs	r2, #1
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fbbd 	bl	8001d0e <HAL_GPIO_WritePin>
 		dat <<= 1;
 8000594:	1dfa      	adds	r2, r7, #7
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	18db      	adds	r3, r3, r3
 800059c:	7013      	strb	r3, [r2, #0]
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 800059e:	210f      	movs	r1, #15
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	3a01      	subs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	230f      	movs	r3, #15
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1c9      	bne.n	8000548 <vSpi3WriteByte+0x52>
 		//HAL_Delay(SPI3_SPEED);
 		}
 	ClrSDCK();
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	0099      	lsls	r1, r3, #2
 80005b8:	23a0      	movs	r3, #160	; 0xa0
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	2200      	movs	r2, #0
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 fba5 	bl	8001d0e <HAL_GPIO_WritePin>
 	SetSDIO();
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	00d9      	lsls	r1, r3, #3
 80005c8:	23a0      	movs	r3, #160	; 0xa0
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2201      	movs	r2, #1
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fb9d 	bl	8001d0e <HAL_GPIO_WritePin>
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b004      	add	sp, #16
 80005da:	bd80      	pop	{r7, pc}

080005dc <bSpi3ReadByte>:
**Func: 	SPI-3 read one byte
**Input:
**Output:
**********************************************************/
uint8_t bSpi3ReadByte()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	uint8_t RdPara = 0;
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	uint8_t bitcnt;

 	ClrCSB();
 80005e8:	23a0      	movs	r3, #160	; 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2200      	movs	r2, #0
 80005ee:	2102      	movs	r1, #2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 fb8c 	bl	8001d0e <HAL_GPIO_WritePin>
 	//InputSDIO();
  	//InputSDIO();
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80005f6:	1dbb      	adds	r3, r7, #6
 80005f8:	2208      	movs	r2, #8
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e02e      	b.n	800065c <bSpi3ReadByte+0x80>
 		{
 		ClrSDCK();
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	0099      	lsls	r1, r3, #2
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fb80 	bl	8001d0e <HAL_GPIO_WritePin>
 		RdPara <<= 1;
 800060e:	1dfa      	adds	r2, r7, #7
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	18db      	adds	r3, r3, r3
 8000616:	7013      	strb	r3, [r2, #0]
 		//HAL_Delay(SPI3_SPEED);
 		SetSDCK();
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	0099      	lsls	r1, r3, #2
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	2201      	movs	r2, #1
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fb73 	bl	8001d0e <HAL_GPIO_WritePin>
 		//HAL_Delay(SPI3_SPEED);
 		if(SDIO_H())
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	00da      	lsls	r2, r3, #3
 800062c:	23a0      	movs	r3, #160	; 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fb4e 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d006      	beq.n	800064a <bSpi3ReadByte+0x6e>
 			RdPara |= 0x01;
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	1dfa      	adds	r2, r7, #7
 8000640:	7812      	ldrb	r2, [r2, #0]
 8000642:	2101      	movs	r1, #1
 8000644:	430a      	orrs	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e003      	b.n	8000652 <bSpi3ReadByte+0x76>
 		else
 			RdPara |= 0x00;
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	1dfa      	adds	r2, r7, #7
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	701a      	strb	r2, [r3, #0]
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000652:	1dbb      	adds	r3, r7, #6
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	3a01      	subs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	1dbb      	adds	r3, r7, #6
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1cc      	bne.n	80005fe <bSpi3ReadByte+0x22>
 		}
 	ClrSDCK();
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	0099      	lsls	r1, r3, #2
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2200      	movs	r2, #0
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fb4d 	bl	8001d0e <HAL_GPIO_WritePin>
 	//OutputSDIO();
	//OutputSDIO();
 	SetSDIO();
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	00d9      	lsls	r1, r3, #3
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	2201      	movs	r2, #1
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fb45 	bl	8001d0e <HAL_GPIO_WritePin>
 	SetCSB();
 8000684:	23a0      	movs	r3, #160	; 0xa0
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	2201      	movs	r2, #1
 800068a:	2102      	movs	r1, #2
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fb3e 	bl	8001d0e <HAL_GPIO_WritePin>
 	return(RdPara);
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	781b      	ldrb	r3, [r3, #0]
}
 8000696:	0018      	movs	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}

0800069e <spi3Class_vSpi3Write>:
**Func: 	SPI Write One word
**Input: 	Write word
**Output:	none
**********************************************************/
void spi3Class_vSpi3Write(uint16_t dat)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	0002      	movs	r2, r0
 80006a6:	1dbb      	adds	r3, r7, #6
 80006a8:	801a      	strh	r2, [r3, #0]
 	vSpi3WriteByte((uint8_t)(dat>>8)&0x7F);
 80006aa:	1dbb      	adds	r3, r7, #6
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	227f      	movs	r2, #127	; 0x7f
 80006b6:	4013      	ands	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff ff1b 	bl	80004f6 <vSpi3WriteByte>
 	vSpi3WriteByte((uint8_t)dat);
 80006c0:	1dbb      	adds	r3, r7, #6
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff ff15 	bl	80004f6 <vSpi3WriteByte>
 	SetCSB();
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	2201      	movs	r2, #1
 80006d2:	2102      	movs	r1, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fb1a 	bl	8001d0e <HAL_GPIO_WritePin>
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <spi3Class_bSpi3Read>:
**Func: 	SPI-3 Read One byte
**Input: 	readout addresss
**Output:	readout byte
**********************************************************/
uint8_t spi3Class_bSpi3Read(uint8_t addr)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	0002      	movs	r2, r0
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	701a      	strb	r2, [r3, #0]
  	vSpi3WriteByte(addr|0x80);
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	4252      	negs	r2, r2
 80006f6:	4313      	orrs	r3, r2
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff fefb 	bl	80004f6 <vSpi3WriteByte>
 	return(bSpi3ReadByte());
 8000700:	f7ff ff6c 	bl	80005dc <bSpi3ReadByte>
 8000704:	0003      	movs	r3, r0
}
 8000706:	0018      	movs	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}

0800070e <spi3Class_vSpi3WriteFIFO>:
**Func: 	SPI-3 send one byte to FIFO
**Input: 	one byte buffer
**Output:	none
**********************************************************/
void spi3Class_vSpi3WriteFIFO(uint8_t dat)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	0002      	movs	r2, r0
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	701a      	strb	r2, [r3, #0]
	uint8_t bitcnt;

 	SetCSB();
 800071a:	23a0      	movs	r3, #160	; 0xa0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	2201      	movs	r2, #1
 8000720:	2102      	movs	r1, #2
 8000722:	0018      	movs	r0, r3
 8000724:	f001 faf3 	bl	8001d0e <HAL_GPIO_WritePin>
	//OutputSDIO();
	ClrSDCK();
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	0099      	lsls	r1, r3, #2
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2200      	movs	r2, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f001 faeb 	bl	8001d0e <HAL_GPIO_WritePin>
 	ClrFCSB();			//FCSB = 0
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2200      	movs	r2, #0
 800073e:	2104      	movs	r1, #4
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fae4 	bl	8001d0e <HAL_GPIO_WritePin>
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000746:	230f      	movs	r3, #15
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2208      	movs	r2, #8
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e036      	b.n	80007be <spi3Class_vSpi3WriteFIFO+0xb0>
 		{
 		ClrSDCK();
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	0099      	lsls	r1, r3, #2
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2200      	movs	r2, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f001 fad7 	bl	8001d0e <HAL_GPIO_WritePin>

 		if(dat&0x80)
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b25b      	sxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	da08      	bge.n	800077c <spi3Class_vSpi3WriteFIFO+0x6e>
			SetSDIO();
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	00d9      	lsls	r1, r3, #3
 800076e:	23a0      	movs	r3, #160	; 0xa0
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	2201      	movs	r2, #1
 8000774:	0018      	movs	r0, r3
 8000776:	f001 faca 	bl	8001d0e <HAL_GPIO_WritePin>
 800077a:	e007      	b.n	800078c <spi3Class_vSpi3WriteFIFO+0x7e>
		else
			ClrSDIO();
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	00d9      	lsls	r1, r3, #3
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	2200      	movs	r2, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f001 fac1 	bl	8001d0e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f001 f85b 	bl	8001848 <HAL_Delay>
		SetSDCK();
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	0099      	lsls	r1, r3, #2
 8000796:	23a0      	movs	r3, #160	; 0xa0
 8000798:	05db      	lsls	r3, r3, #23
 800079a:	2201      	movs	r2, #1
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fab6 	bl	8001d0e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f001 f850 	bl	8001848 <HAL_Delay>
 		dat <<= 1;
 80007a8:	1dfa      	adds	r2, r7, #7
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	18db      	adds	r3, r3, r3
 80007b0:	7013      	strb	r3, [r2, #0]
	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80007b2:	210f      	movs	r1, #15
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	3a01      	subs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	230f      	movs	r3, #15
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1c3      	bne.n	8000750 <spi3Class_vSpi3WriteFIFO+0x42>
 		}
 	ClrSDCK();
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	0099      	lsls	r1, r3, #2
 80007cc:	23a0      	movs	r3, #160	; 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	2200      	movs	r2, #0
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fa9b 	bl	8001d0e <HAL_GPIO_WritePin>
 	HAL_Delay(1);		//Time-Critical
 80007d8:	2001      	movs	r0, #1
 80007da:	f001 f835 	bl	8001848 <HAL_Delay>
 	HAL_Delay(1);		//Time-Critical
 80007de:	2001      	movs	r0, #1
 80007e0:	f001 f832 	bl	8001848 <HAL_Delay>
 	SetFCSB();
 80007e4:	23a0      	movs	r3, #160	; 0xa0
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	2201      	movs	r2, #1
 80007ea:	2104      	movs	r1, #4
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fa8e 	bl	8001d0e <HAL_GPIO_WritePin>
	SetSDIO();
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	00d9      	lsls	r1, r3, #3
 80007f6:	23a0      	movs	r3, #160	; 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2201      	movs	r2, #1
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 fa86 	bl	8001d0e <HAL_GPIO_WritePin>
 	HAL_Delay(1);		//Time-Critical
 8000802:	2001      	movs	r0, #1
 8000804:	f001 f820 	bl	8001848 <HAL_Delay>
 	HAL_Delay(1);		//Time-Critical
 8000808:	2001      	movs	r0, #1
 800080a:	f001 f81d 	bl	8001848 <HAL_Delay>
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b004      	add	sp, #16
 8000814:	bd80      	pop	{r7, pc}

08000816 <spi3Class_bSpi3ReadFIFO>:
**Func: 	SPI-3 read one byte to FIFO
**Input: 	none
**Output:	one byte buffer
**********************************************************/
uint8_t spi3Class_bSpi3ReadFIFO()
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
	uint8_t RdPara;
	uint8_t bitcnt;

 	SetCSB();
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2201      	movs	r2, #1
 8000822:	2102      	movs	r1, #2
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fa72 	bl	8001d0e <HAL_GPIO_WritePin>
	//InputSDIO();
 	ClrSDCK();
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	0099      	lsls	r1, r3, #2
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	2200      	movs	r2, #0
 8000834:	0018      	movs	r0, r3
 8000836:	f001 fa6a 	bl	8001d0e <HAL_GPIO_WritePin>
	ClrFCSB();
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2200      	movs	r2, #0
 8000840:	2104      	movs	r1, #4
 8000842:	0018      	movs	r0, r3
 8000844:	f001 fa63 	bl	8001d0e <HAL_GPIO_WritePin>

 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	2208      	movs	r2, #8
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e034      	b.n	80008ba <spi3Class_bSpi3ReadFIFO+0xa4>
 		{
 		ClrSDCK();
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	0099      	lsls	r1, r3, #2
 8000854:	23a0      	movs	r3, #160	; 0xa0
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	2200      	movs	r2, #0
 800085a:	0018      	movs	r0, r3
 800085c:	f001 fa57 	bl	8001d0e <HAL_GPIO_WritePin>
 		RdPara <<= 1;
 8000860:	1dfa      	adds	r2, r7, #7
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	18db      	adds	r3, r3, r3
 8000868:	7013      	strb	r3, [r2, #0]
 		HAL_Delay(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f000 ffec 	bl	8001848 <HAL_Delay>
		SetSDCK();
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	0099      	lsls	r1, r3, #2
 8000874:	23a0      	movs	r3, #160	; 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	2201      	movs	r2, #1
 800087a:	0018      	movs	r0, r3
 800087c:	f001 fa47 	bl	8001d0e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f000 ffe1 	bl	8001848 <HAL_Delay>
 		if(SDIO_H())
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	00da      	lsls	r2, r3, #3
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f001 fa1f 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d006      	beq.n	80008a8 <spi3Class_bSpi3ReadFIFO+0x92>
 			RdPara |= 0x01;		//NRZ MSB
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	1dfa      	adds	r2, r7, #7
 800089e:	7812      	ldrb	r2, [r2, #0]
 80008a0:	2101      	movs	r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e003      	b.n	80008b0 <spi3Class_bSpi3ReadFIFO+0x9a>
 		else
 		 	RdPara |= 0x00;		//NRZ MSB
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	701a      	strb	r2, [r3, #0]
 	for(bitcnt=8; bitcnt!=0; bitcnt--)
 80008b0:	1dbb      	adds	r3, r7, #6
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	1dbb      	adds	r3, r7, #6
 80008b6:	3a01      	subs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	1dbb      	adds	r3, r7, #6
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1c6      	bne.n	8000850 <spi3Class_bSpi3ReadFIFO+0x3a>
 		}

 	ClrSDCK();
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	0099      	lsls	r1, r3, #2
 80008c6:	23a0      	movs	r3, #160	; 0xa0
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	2200      	movs	r2, #0
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fa1e 	bl	8001d0e <HAL_GPIO_WritePin>
 	HAL_Delay(1);		//Time-Critical
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 ffb8 	bl	8001848 <HAL_Delay>
 	HAL_Delay(1);		//Time-Critical
 80008d8:	2001      	movs	r0, #1
 80008da:	f000 ffb5 	bl	8001848 <HAL_Delay>
 	SetFCSB();
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	2201      	movs	r2, #1
 80008e4:	2104      	movs	r1, #4
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 fa11 	bl	8001d0e <HAL_GPIO_WritePin>
	//OutputSDIO();
	SetSDIO();
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	00d9      	lsls	r1, r3, #3
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	2201      	movs	r2, #1
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fa09 	bl	8001d0e <HAL_GPIO_WritePin>
 	HAL_Delay(1);		//Time-Critical
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 ffa3 	bl	8001848 <HAL_Delay>

 	HAL_Delay(1);		//Time-Critical
 8000902:	2001      	movs	r0, #1
 8000904:	f000 ffa0 	bl	8001848 <HAL_Delay>
 	return(RdPara);
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b002      	add	sp, #8
 8000912:	bd80      	pop	{r7, pc}

08000914 <spi3Class_vSpi3BurstWriteFIFO>:
**Func: 	burst wirte N byte to FIFO
**Input: 	array length & head pointer
**Output:	none
**********************************************************/
void spi3Class_vSpi3BurstWriteFIFO(uint8_t ptr[], uint8_t length)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	000a      	movs	r2, r1
 800091e:	1cfb      	adds	r3, r7, #3
 8000920:	701a      	strb	r2, [r3, #0]
	uint8_t i;
 	if(length!=0x00)
 8000922:	1cfb      	adds	r3, r7, #3
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d01a      	beq.n	8000960 <spi3Class_vSpi3BurstWriteFIFO+0x4c>
	 	{
 		for(i=0;i<length;i++)
 800092a:	230f      	movs	r3, #15
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e00d      	b.n	8000950 <spi3Class_vSpi3BurstWriteFIFO+0x3c>
 			spi3Class_vSpi3WriteFIFO(ptr[i]);
 8000934:	240f      	movs	r4, #15
 8000936:	193b      	adds	r3, r7, r4
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	18d3      	adds	r3, r2, r3
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fee4 	bl	800070e <spi3Class_vSpi3WriteFIFO>
 		for(i=0;i<length;i++)
 8000946:	193b      	adds	r3, r7, r4
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	193b      	adds	r3, r7, r4
 800094c:	3201      	adds	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	230f      	movs	r3, #15
 8000952:	18fa      	adds	r2, r7, r3
 8000954:	1cfb      	adds	r3, r7, #3
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	d3ea      	bcc.n	8000934 <spi3Class_vSpi3BurstWriteFIFO+0x20>
 		}
 	return;
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46c0      	nop			; (mov r8, r8)
}
 8000962:	46bd      	mov	sp, r7
 8000964:	b005      	add	sp, #20
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <spi3Class_vSpi3BurstReadFIFO>:
**Func: 	burst wirte N byte to FIFO
**Input: 	array length  & head pointer
**Output:	none
**********************************************************/
void spi3Class_vSpi3BurstReadFIFO(uint8_t ptr[], uint8_t length)
{
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	000a      	movs	r2, r1
 8000972:	1cfb      	adds	r3, r7, #3
 8000974:	701a      	strb	r2, [r3, #0]
	uint8_t i;
 	if(length!=0)
 8000976:	1cfb      	adds	r3, r7, #3
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d01a      	beq.n	80009b4 <spi3Class_vSpi3BurstReadFIFO+0x4c>
 		{
 		for(i=0;i<length;i++)
 800097e:	230f      	movs	r3, #15
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	e00d      	b.n	80009a4 <spi3Class_vSpi3BurstReadFIFO+0x3c>
 			ptr[i] = spi3Class_bSpi3ReadFIFO();
 8000988:	250f      	movs	r5, #15
 800098a:	197b      	adds	r3, r7, r5
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	18d4      	adds	r4, r2, r3
 8000992:	f7ff ff40 	bl	8000816 <spi3Class_bSpi3ReadFIFO>
 8000996:	0003      	movs	r3, r0
 8000998:	7023      	strb	r3, [r4, #0]
 		for(i=0;i<length;i++)
 800099a:	197b      	adds	r3, r7, r5
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	197b      	adds	r3, r7, r5
 80009a0:	3201      	adds	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	230f      	movs	r3, #15
 80009a6:	18fa      	adds	r2, r7, r3
 80009a8:	1cfb      	adds	r3, r7, #3
 80009aa:	7812      	ldrb	r2, [r2, #0]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d3ea      	bcc.n	8000988 <spi3Class_vSpi3BurstReadFIFO+0x20>
 		}
 	return;
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46c0      	nop			; (mov r8, r8)
}
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b004      	add	sp, #16
 80009ba:	bdb0      	pop	{r4, r5, r7, pc}

080009bc <cmt2300aEasy_bGoStandby>:
**Function: Entry Standby Mode
**Input:    none
**Output:   none
**********************************************************/
unsigned char cmt2300aEasy_bGoStandby(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 unsigned char tmp, i;

 radio.RssiTrig = false;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <cmt2300aEasy_bGoStandby+0x6c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	715a      	strb	r2, [r3, #5]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_MODE_CTL<<8)+MODE_GO_STBY);
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <cmt2300aEasy_bGoStandby+0x70>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fe67 	bl	800069e <spi3Class_vSpi3Write>
 for(i=0; i<50; i++)
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e016      	b.n	8000a06 <cmt2300aEasy_bGoStandby+0x4a>
 	{
 	HAL_Delay(400);
 80009d8:	23c8      	movs	r3, #200	; 0xc8
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 ff33 	bl	8001848 <HAL_Delay>
	tmp = (MODE_MASK_STA & spi3Class_bSpi3Read(CMT23_MODE_STA));
 80009e2:	2061      	movs	r0, #97	; 0x61
 80009e4:	f7ff fe7d 	bl	80006e2 <spi3Class_bSpi3Read>
 80009e8:	0003      	movs	r3, r0
 80009ea:	0019      	movs	r1, r3
 80009ec:	1dbb      	adds	r3, r7, #6
 80009ee:	220f      	movs	r2, #15
 80009f0:	400a      	ands	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]
	if(tmp==MODE_STA_STBY)
 80009f4:	1dbb      	adds	r3, r7, #6
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d009      	beq.n	8000a10 <cmt2300aEasy_bGoStandby+0x54>
 for(i=0; i<50; i++)
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	3201      	adds	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b31      	cmp	r3, #49	; 0x31
 8000a0c:	d9e4      	bls.n	80009d8 <cmt2300aEasy_bGoStandby+0x1c>
 8000a0e:	e000      	b.n	8000a12 <cmt2300aEasy_bGoStandby+0x56>
		break;
 8000a10:	46c0      	nop			; (mov r8, r8)
	}
 if(i>=50)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b31      	cmp	r3, #49	; 0x31
 8000a18:	d901      	bls.n	8000a1e <cmt2300aEasy_bGoStandby+0x62>
 	return(false);
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <cmt2300aEasy_bGoStandby+0x64>
 else
 	return(true);
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000264 	.word	0x20000264
 8000a2c:	00006002 	.word	0x00006002

08000a30 <cmt2300aEasy_bGoTx>:
unsigned char cmt2300aEasy_bGoTx(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
unsigned char tmp, i;

INIT_TX:
 spi3Class_vSpi3Write(((unsigned short int)CMT23_MODE_CTL<<8)+MODE_GO_TX);
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <cmt2300aEasy_bGoTx+0x64>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fe30 	bl	800069e <spi3Class_vSpi3Write>
 for(i=0; i<50; i++)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e014      	b.n	8000a70 <cmt2300aEasy_bGoTx+0x40>
 	{

 	HAL_Delay(200);
 8000a46:	20c8      	movs	r0, #200	; 0xc8
 8000a48:	f000 fefe 	bl	8001848 <HAL_Delay>
	tmp = (MODE_MASK_STA & spi3Class_bSpi3Read(CMT23_MODE_STA));
 8000a4c:	2061      	movs	r0, #97	; 0x61
 8000a4e:	f7ff fe48 	bl	80006e2 <spi3Class_bSpi3Read>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0019      	movs	r1, r3
 8000a56:	1dbb      	adds	r3, r7, #6
 8000a58:	220f      	movs	r2, #15
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
	if(tmp==MODE_STA_TX)
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d009      	beq.n	8000a7a <cmt2300aEasy_bGoTx+0x4a>
 for(i=0; i<50; i++)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	3201      	adds	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b31      	cmp	r3, #49	; 0x31
 8000a76:	d9e6      	bls.n	8000a46 <cmt2300aEasy_bGoTx+0x16>
 8000a78:	e000      	b.n	8000a7c <cmt2300aEasy_bGoTx+0x4c>
		break;
 8000a7a:	46c0      	nop			; (mov r8, r8)
	}
 if(i>=50)
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b31      	cmp	r3, #49	; 0x31
 8000a82:	d902      	bls.n	8000a8a <cmt2300aEasy_bGoTx+0x5a>
 	{

		cmt2300aEasy_bGoStandby();
 8000a84:	f7ff ff9a 	bl	80009bc <cmt2300aEasy_bGoStandby>
 		goto INIT_TX;
 8000a88:	e7d5      	b.n	8000a36 <cmt2300aEasy_bGoTx+0x6>
 	}
 else
 	return(true);
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	00006040 	.word	0x00006040

08000a98 <cmt2300aEasy_bGoRx>:

}


unsigned char cmt2300aEasy_bGoRx(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 unsigned char tmp, i;
 radio.RssiTrig = false;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <cmt2300aEasy_bGoRx+0x6c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	715a      	strb	r2, [r3, #5]

 INIT_RX:
 spi3Class_vSpi3Write(((unsigned short int)CMT23_MODE_CTL<<8)+MODE_GO_RX);
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <cmt2300aEasy_bGoRx+0x70>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fdf9 	bl	800069e <spi3Class_vSpi3Write>
 for(i=0; i<50; i++)
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e014      	b.n	8000ade <cmt2300aEasy_bGoRx+0x46>
 	{
 	HAL_Delay(200);
 8000ab4:	20c8      	movs	r0, #200	; 0xc8
 8000ab6:	f000 fec7 	bl	8001848 <HAL_Delay>
	tmp = (MODE_MASK_STA & spi3Class_bSpi3Read(CMT23_MODE_STA));
 8000aba:	2061      	movs	r0, #97	; 0x61
 8000abc:	f7ff fe11 	bl	80006e2 <spi3Class_bSpi3Read>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	1dbb      	adds	r3, r7, #6
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	400a      	ands	r2, r1
 8000aca:	701a      	strb	r2, [r3, #0]
	if(tmp==MODE_STA_RX)
 8000acc:	1dbb      	adds	r3, r7, #6
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b05      	cmp	r3, #5
 8000ad2:	d009      	beq.n	8000ae8 <cmt2300aEasy_bGoRx+0x50>
 for(i=0; i<50; i++)
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	3201      	adds	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b31      	cmp	r3, #49	; 0x31
 8000ae4:	d9e6      	bls.n	8000ab4 <cmt2300aEasy_bGoRx+0x1c>
 8000ae6:	e000      	b.n	8000aea <cmt2300aEasy_bGoRx+0x52>
		break;
 8000ae8:	46c0      	nop			; (mov r8, r8)
	}
 if(i>=50)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b31      	cmp	r3, #49	; 0x31
 8000af0:	d902      	bls.n	8000af8 <cmt2300aEasy_bGoRx+0x60>
 	{
		cmt2300aEasy_bGoStandby();
 8000af2:	f7ff ff63 	bl	80009bc <cmt2300aEasy_bGoStandby>
 		goto INIT_RX;
 8000af6:	e7d5      	b.n	8000aa4 <cmt2300aEasy_bGoRx+0xc>
 	}
 else
 	return(true);
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000264 	.word	0x20000264
 8000b08:	00006008 	.word	0x00006008

08000b0c <cmt2300aEasy_bGoSleep>:
**Function: Entry Sleep Mode
**Input:    none
**Output:   none
**********************************************************/
unsigned char cmt2300aEasy_bGoSleep(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 unsigned char tmp;

 spi3Class_vSpi3Write(((unsigned short int)CMT23_MODE_CTL<<8)+MODE_GO_SLEEP);
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <cmt2300aEasy_bGoSleep+0x3c>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fdc2 	bl	800069e <spi3Class_vSpi3Write>
 HAL_Delay(100);		//enough?
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f000 fe94 	bl	8001848 <HAL_Delay>
 tmp = (MODE_MASK_STA & spi3Class_bSpi3Read(CMT23_MODE_STA));
 8000b20:	2061      	movs	r0, #97	; 0x61
 8000b22:	f7ff fdde 	bl	80006e2 <spi3Class_bSpi3Read>
 8000b26:	0003      	movs	r3, r0
 8000b28:	0019      	movs	r1, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	400a      	ands	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
 if(tmp==MODE_STA_SLEEP)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d101      	bne.n	8000b3e <cmt2300aEasy_bGoSleep+0x32>
 	return(true);
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <cmt2300aEasy_bGoSleep+0x34>
 else
 	return(false);
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	00006010 	.word	0x00006010

08000b4c <cmt2300aEasy_vSoftReset>:
**Function: Software reset Chipset
**Input:    none
**Output:   none
**********************************************************/
void cmt2300aEasy_vSoftReset(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
 spi3Class_vSpi3Write(((unsigned short int)CMT23_SOFTRST<<8)+0xFF);
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <cmt2300aEasy_vSoftReset+0x1c>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fda3 	bl	800069e <spi3Class_vSpi3Write>
 HAL_Delay(1000);				//enough?
 8000b58:	23fa      	movs	r3, #250	; 0xfa
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 fe73 	bl	8001848 <HAL_Delay>
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	00007fff 	.word	0x00007fff

08000b6c <cmt2300aEasy_vGpioFuncCfg>:
**Function: GPIO Function config
**Input:    none
**Output:   none
**********************************************************/
void cmt2300aEasy_vGpioFuncCfg(unsigned char io_cfg)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	701a      	strb	r2, [r3, #0]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_IO_SEL<<8)+io_cfg);
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	22ca      	movs	r2, #202	; 0xca
 8000b80:	01d2      	lsls	r2, r2, #7
 8000b82:	4694      	mov	ip, r2
 8000b84:	4463      	add	r3, ip
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff fd88 	bl	800069e <spi3Class_vSpi3Write>
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <cmt2300aEasy_vIntSrcCfg>:
**Function: config interrupt source
**Input:    int_1, int_2
**Output:   none
**********************************************************/
void cmt2300aEasy_vIntSrcCfg(unsigned char int_1, unsigned char int_2)
{
 8000b96:	b590      	push	{r4, r7, lr}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	1dbb      	adds	r3, r7, #6
 8000ba4:	1c0a      	adds	r2, r1, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
 unsigned char tmp;
 tmp = INT_MASK & spi3Class_bSpi3Read(CMT23_INT1_CTL);
 8000ba8:	2066      	movs	r0, #102	; 0x66
 8000baa:	f7ff fd9a 	bl	80006e2 <spi3Class_bSpi3Read>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	240f      	movs	r4, #15
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	221f      	movs	r2, #31
 8000bb8:	4391      	bics	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	701a      	strb	r2, [r3, #0]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_INT1_CTL<<8)+(tmp|int_1));
 8000bbe:	193a      	adds	r2, r7, r4
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	22cc      	movs	r2, #204	; 0xcc
 8000bce:	01d2      	lsls	r2, r2, #7
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff fd61 	bl	800069e <spi3Class_vSpi3Write>

 tmp = INT_MASK & spi3Class_bSpi3Read(CMT23_INT2_CTL);
 8000bdc:	2067      	movs	r0, #103	; 0x67
 8000bde:	f7ff fd80 	bl	80006e2 <spi3Class_bSpi3Read>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	221f      	movs	r2, #31
 8000bea:	4391      	bics	r1, r2
 8000bec:	000a      	movs	r2, r1
 8000bee:	701a      	strb	r2, [r3, #0]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_INT2_CTL<<8)+(tmp|int_2));
 8000bf0:	193a      	adds	r2, r7, r4
 8000bf2:	1dbb      	adds	r3, r7, #6
 8000bf4:	7812      	ldrb	r2, [r2, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	22ce      	movs	r2, #206	; 0xce
 8000c00:	01d2      	lsls	r2, r2, #7
 8000c02:	4694      	mov	ip, r2
 8000c04:	4463      	add	r3, ip
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fd48 	bl	800069e <spi3Class_vSpi3Write>
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b005      	add	sp, #20
 8000c14:	bd90      	pop	{r4, r7, pc}

08000c16 <cmt2300aEasy_vEnableAntSwitch>:
**Function:
**Input:
**Output:   none
**********************************************************/
void cmt2300aEasy_vEnableAntSwitch(unsigned char mode)
{
 8000c16:	b5b0      	push	{r4, r5, r7, lr}
 8000c18:	b084      	sub	sp, #16
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	0002      	movs	r2, r0
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	701a      	strb	r2, [r3, #0]
 unsigned char tmp;
 tmp = spi3Class_bSpi3Read(CMT23_INT1_CTL);
 8000c22:	250f      	movs	r5, #15
 8000c24:	197c      	adds	r4, r7, r5
 8000c26:	2066      	movs	r0, #102	; 0x66
 8000c28:	f7ff fd5b 	bl	80006e2 <spi3Class_bSpi3Read>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	7023      	strb	r3, [r4, #0]
 tmp&= 0x3F;
 8000c30:	197b      	adds	r3, r7, r5
 8000c32:	197a      	adds	r2, r7, r5
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	213f      	movs	r1, #63	; 0x3f
 8000c38:	400a      	ands	r2, r1
 8000c3a:	701a      	strb	r2, [r3, #0]
 switch(mode)
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d002      	beq.n	8000c4a <cmt2300aEasy_vEnableAntSwitch+0x34>
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d009      	beq.n	8000c5c <cmt2300aEasy_vEnableAntSwitch+0x46>
 		tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
 	case 2:
 		tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
 	case 0:
 	default:
 		break;							//Disable
 8000c48:	e010      	b.n	8000c6c <cmt2300aEasy_vEnableAntSwitch+0x56>
 		tmp |= RF_SWT1_EN; break;		//GPO1=RxActive; GPO2=TxActive
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	18bb      	adds	r3, r7, r2
 8000c4e:	18ba      	adds	r2, r7, r2
 8000c50:	7812      	ldrb	r2, [r2, #0]
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	4249      	negs	r1, r1
 8000c56:	430a      	orrs	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e007      	b.n	8000c6c <cmt2300aEasy_vEnableAntSwitch+0x56>
 		tmp |= RF_SWT2_EN; break;		//GPO1=RxActive; GPO2=!RxActive
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	18bb      	adds	r3, r7, r2
 8000c60:	18ba      	adds	r2, r7, r2
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	2140      	movs	r1, #64	; 0x40
 8000c66:	430a      	orrs	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	46c0      	nop			; (mov r8, r8)
 	}
 spi3Class_vSpi3Write(((unsigned short int)CMT23_INT1_CTL<<8)+tmp);
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	22cc      	movs	r2, #204	; 0xcc
 8000c76:	01d2      	lsls	r2, r2, #7
 8000c78:	4694      	mov	ip, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fd0d 	bl	800069e <spi3Class_vSpi3Write>
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b004      	add	sp, #16
 8000c8a:	bdb0      	pop	{r4, r5, r7, pc}

08000c8c <cmt2300aEasy_vEnablePLLcheck>:
**Function: enable interrupt source
**Input:    en_int
**Output:   none
**********************************************************/
void cmt2300aEasy_vEnablePLLcheck(void)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  unsigned char tmp;
  tmp = spi3Class_bSpi3Read(CMT23_EN_CTL);
 8000c92:	1dfc      	adds	r4, r7, #7
 8000c94:	2062      	movs	r0, #98	; 0x62
 8000c96:	f7ff fd24 	bl	80006e2 <spi3Class_bSpi3Read>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	7023      	strb	r3, [r4, #0]
  tmp |= LD_STOP_EN;
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	1dfa      	adds	r2, r7, #7
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
  spi3Class_vSpi3Write(((unsigned short int)CMT23_EN_CTL<<8)+tmp);
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	22c4      	movs	r2, #196	; 0xc4
 8000cb2:	01d2      	lsls	r2, r2, #7
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff fcef 	bl	800069e <spi3Class_vSpi3Write>
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b003      	add	sp, #12
 8000cc6:	bd90      	pop	{r4, r7, pc}

08000cc8 <cmt2300aEasy_vIntSrcEnable>:
**Function: enable PLLcheck
**Input:    en_int
**Output:   none
**********************************************************/
void cmt2300aEasy_vIntSrcEnable(unsigned char en_int)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_INT_EN<<8)+en_int);
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	22d0      	movs	r2, #208	; 0xd0
 8000cdc:	01d2      	lsls	r2, r2, #7
 8000cde:	4694      	mov	ip, r2
 8000ce0:	4463      	add	r3, ip
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fcda 	bl	800069e <spi3Class_vSpi3Write>
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <cmt2300aEasy_bIntSrcFlagClr>:
**Function: clear flag
**Input:    none
**Output:   equ CMT23_INT_EN
**********************************************************/
unsigned char cmt2300aEasy_bIntSrcFlagClr(void)
{
 8000cf2:	b590      	push	{r4, r7, lr}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 unsigned char tmp;
 unsigned char int_clr2 = 0;
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
 unsigned char int_clr1 = 0;
 8000cfe:	1dbb      	adds	r3, r7, #6
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
 unsigned char flg = 0;
 8000d04:	1d7b      	adds	r3, r7, #5
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]

 tmp = spi3Class_bSpi3Read(CMT23_INT_FLG);
 8000d0a:	1d3c      	adds	r4, r7, #4
 8000d0c:	206d      	movs	r0, #109	; 0x6d
 8000d0e:	f7ff fce8 	bl	80006e2 <spi3Class_bSpi3Read>
 8000d12:	0003      	movs	r3, r0
 8000d14:	7023      	strb	r3, [r4, #0]
 if(tmp&LBD_STATUS_FLAG)		//LBD_FLG_Active
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	da05      	bge.n	8000d2c <cmt2300aEasy_bIntSrcFlagClr+0x3a>
 	int_clr2 |= LBD_CLR;
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	1dfa      	adds	r2, r7, #7
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	2120      	movs	r1, #32
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	701a      	strb	r2, [r3, #0]

 if(tmp&PREAMBLE_PASS_FLAG)		//Preamble Active
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2210      	movs	r2, #16
 8000d32:	4013      	ands	r3, r2
 8000d34:	d00b      	beq.n	8000d4e <cmt2300aEasy_bIntSrcFlagClr+0x5c>
 	{
 	int_clr2 |= PREAMBLE_PASS_CLR;
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	1dfa      	adds	r2, r7, #7
 8000d3a:	7812      	ldrb	r2, [r2, #0]
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
 	flg |= PREAMBLE_PASS_EN;
 8000d42:	1d7b      	adds	r3, r7, #5
 8000d44:	1d7a      	adds	r2, r7, #5
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	2110      	movs	r1, #16
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
	}
 if(tmp&SYNC_PASS_FLAG)			//Sync Active
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2208      	movs	r2, #8
 8000d54:	4013      	ands	r3, r2
 8000d56:	d00b      	beq.n	8000d70 <cmt2300aEasy_bIntSrcFlagClr+0x7e>
 	{
 	int_clr2 |= SYNC_PASS_CLR;
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	2108      	movs	r1, #8
 8000d60:	430a      	orrs	r2, r1
 8000d62:	701a      	strb	r2, [r3, #0]
 	flg |= SYNC_PASS_EN;
 8000d64:	1d7b      	adds	r3, r7, #5
 8000d66:	1d7a      	adds	r2, r7, #5
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	2108      	movs	r1, #8
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	701a      	strb	r2, [r3, #0]
 	}
 if(tmp&NODE_PASS_FLAG)			//Node Addr Active
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2204      	movs	r2, #4
 8000d76:	4013      	ands	r3, r2
 8000d78:	d00b      	beq.n	8000d92 <cmt2300aEasy_bIntSrcFlagClr+0xa0>
 	{
 	int_clr2 |= NODE_PASS_CLR;
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	1dfa      	adds	r2, r7, #7
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	2104      	movs	r1, #4
 8000d82:	430a      	orrs	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
 	flg |= NODE_PASS_EN;
 8000d86:	1d7b      	adds	r3, r7, #5
 8000d88:	1d7a      	adds	r2, r7, #5
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
 	}
 if(tmp&CRC_PASS_FLAG)			//Crc Pass Active
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2202      	movs	r2, #2
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d00b      	beq.n	8000db4 <cmt2300aEasy_bIntSrcFlagClr+0xc2>
 	{
 	int_clr2 |= CRC_PASS_CLR;
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	1dfa      	adds	r2, r7, #7
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	2102      	movs	r1, #2
 8000da4:	430a      	orrs	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
 	flg |= CRC_PASS_EN;
 8000da8:	1d7b      	adds	r3, r7, #5
 8000daa:	1d7a      	adds	r2, r7, #5
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	2102      	movs	r1, #2
 8000db0:	430a      	orrs	r2, r1
 8000db2:	701a      	strb	r2, [r3, #0]
 	}
 if(tmp&RX_DONE_FLAG)			//Rx Done Active
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2201      	movs	r2, #1
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d00b      	beq.n	8000dd6 <cmt2300aEasy_bIntSrcFlagClr+0xe4>
 	{
 	int_clr2 |= RX_DONE_CLR;
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	1dfa      	adds	r2, r7, #7
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
 	flg |= PKT_DONE_EN;
 8000dca:	1d7b      	adds	r3, r7, #5
 8000dcc:	1d7a      	adds	r2, r7, #5
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
 	}

 if(tmp&COLLISION_ERR_FLAG)		//ÕâÁ½¸ö¶¼±ØĞëÍ¨¹ıRX_DONEÇå³ı
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2240      	movs	r2, #64	; 0x40
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d005      	beq.n	8000dec <cmt2300aEasy_bIntSrcFlagClr+0xfa>
 	int_clr2 |= RX_DONE_CLR;
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	1dfa      	adds	r2, r7, #7
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	2101      	movs	r1, #1
 8000de8:	430a      	orrs	r2, r1
 8000dea:	701a      	strb	r2, [r3, #0]
 if(tmp&DC_ERR_FLAG)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2220      	movs	r2, #32
 8000df2:	4013      	ands	r3, r2
 8000df4:	d005      	beq.n	8000e02 <cmt2300aEasy_bIntSrcFlagClr+0x110>
 	int_clr2 |= RX_DONE_CLR;
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	1dfa      	adds	r2, r7, #7
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]

 spi3Class_vSpi3Write(((unsigned short int)CMT23_INT_CLR2<<8)+int_clr2);	//Clear flag
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	22d6      	movs	r2, #214	; 0xd6
 8000e0a:	01d2      	lsls	r2, r2, #7
 8000e0c:	4694      	mov	ip, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fc43 	bl	800069e <spi3Class_vSpi3Write>


 tmp = spi3Class_bSpi3Read(CMT23_INT_CLR1);
 8000e18:	1d3c      	adds	r4, r7, #4
 8000e1a:	206a      	movs	r0, #106	; 0x6a
 8000e1c:	f7ff fc61 	bl	80006e2 <spi3Class_bSpi3Read>
 8000e20:	0003      	movs	r3, r0
 8000e22:	7023      	strb	r3, [r4, #0]
 if(tmp&TX_DONE_FLAG)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2208      	movs	r2, #8
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d00b      	beq.n	8000e46 <cmt2300aEasy_bIntSrcFlagClr+0x154>
 	{
 	int_clr1 |= TX_DONE_CLR;
 8000e2e:	1dbb      	adds	r3, r7, #6
 8000e30:	1dba      	adds	r2, r7, #6
 8000e32:	7812      	ldrb	r2, [r2, #0]
 8000e34:	2104      	movs	r1, #4
 8000e36:	430a      	orrs	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
 	flg |= TX_DONE_EN;
 8000e3a:	1d7b      	adds	r3, r7, #5
 8000e3c:	1d7a      	adds	r2, r7, #5
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	2120      	movs	r1, #32
 8000e42:	430a      	orrs	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
 	}
 if(tmp&SLEEP_TIMEOUT_FLAG)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d00c      	beq.n	8000e6a <cmt2300aEasy_bIntSrcFlagClr+0x178>
 	{
 	int_clr1 |= SLEEP_TIMEOUT_CLR;
 8000e50:	1dbb      	adds	r3, r7, #6
 8000e52:	1dba      	adds	r2, r7, #6
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	2102      	movs	r1, #2
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
 	flg |= SLEEP_TMO_EN;
 8000e5c:	1d7b      	adds	r3, r7, #5
 8000e5e:	1d7a      	adds	r2, r7, #5
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	4249      	negs	r1, r1
 8000e66:	430a      	orrs	r2, r1
 8000e68:	701a      	strb	r2, [r3, #0]
 	}
 if(tmp&RX_TIMEOUT_FLAG)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2210      	movs	r2, #16
 8000e70:	4013      	ands	r3, r2
 8000e72:	d00b      	beq.n	8000e8c <cmt2300aEasy_bIntSrcFlagClr+0x19a>
 	{
 	int_clr1 |= RX_TIMEOUT_CLR;
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	1dba      	adds	r2, r7, #6
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	701a      	strb	r2, [r3, #0]
 	flg |= RX_TMO_EN;
 8000e80:	1d7b      	adds	r3, r7, #5
 8000e82:	1d7a      	adds	r2, r7, #5
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	701a      	strb	r2, [r3, #0]
 	}
 spi3Class_vSpi3Write(((unsigned short int)CMT23_INT_CLR1<<8)+int_clr1);	//Clear flag
 8000e8c:	1dbb      	adds	r3, r7, #6
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	22d4      	movs	r2, #212	; 0xd4
 8000e94:	01d2      	lsls	r2, r2, #7
 8000e96:	4694      	mov	ip, r2
 8000e98:	4463      	add	r3, ip
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff fbfe 	bl	800069e <spi3Class_vSpi3Write>

 return(flg);
 8000ea2:	1d7b      	adds	r3, r7, #5
 8000ea4:	781b      	ldrb	r3, [r3, #0]
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b003      	add	sp, #12
 8000eac:	bd90      	pop	{r4, r7, pc}
	...

08000eb0 <cmt2300aEasy_vClearFIFO>:
**Function: clear FIFO buffer
**Input:    none
**Output:   FIFO state
**********************************************************/
unsigned char cmt2300aEasy_vClearFIFO(void)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 unsigned char tmp;
 tmp = spi3Class_bSpi3Read(CMT23_FIFO_FLG);
 8000eb6:	1dfc      	adds	r4, r7, #7
 8000eb8:	206e      	movs	r0, #110	; 0x6e
 8000eba:	f7ff fc12 	bl	80006e2 <spi3Class_bSpi3Read>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	7023      	strb	r3, [r4, #0]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_FIFO_CLR<<8)+FIFO_CLR_RX+FIFO_CLR_TX);
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <cmt2300aEasy_vClearFIFO+0x28>)
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff fbea 	bl	800069e <spi3Class_vSpi3Write>
 return(tmp);
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b003      	add	sp, #12
 8000ed4:	bd90      	pop	{r4, r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	00006c03 	.word	0x00006c03

08000edc <cmt2300aEasy_vEnableWrFifo>:

void cmt2300aEasy_vEnableWrFifo(void)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 unsigned char tmp;
 tmp = spi3Class_bSpi3Read(CMT23_FIFO_CTL);
 8000ee2:	1dfc      	adds	r4, r7, #7
 8000ee4:	2069      	movs	r0, #105	; 0x69
 8000ee6:	f7ff fbfc 	bl	80006e2 <spi3Class_bSpi3Read>
 8000eea:	0003      	movs	r3, r0
 8000eec:	7023      	strb	r3, [r4, #0]
 tmp |= (SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL);
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	1dfa      	adds	r2, r7, #7
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_FIFO_CTL<<8)+tmp);
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	22d2      	movs	r2, #210	; 0xd2
 8000f02:	01d2      	lsls	r2, r2, #7
 8000f04:	4694      	mov	ip, r2
 8000f06:	4463      	add	r3, ip
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f7ff fbc7 	bl	800069e <spi3Class_vSpi3Write>
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b003      	add	sp, #12
 8000f16:	bd90      	pop	{r4, r7, pc}

08000f18 <cmt2300aEasy_vEnableRdFifo>:

void cmt2300aEasy_vEnableRdFifo(void)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 unsigned char tmp;
 tmp = spi3Class_bSpi3Read(CMT23_FIFO_CTL);
 8000f1e:	1dfc      	adds	r4, r7, #7
 8000f20:	2069      	movs	r0, #105	; 0x69
 8000f22:	f7ff fbde 	bl	80006e2 <spi3Class_bSpi3Read>
 8000f26:	0003      	movs	r3, r0
 8000f28:	7023      	strb	r3, [r4, #0]
 tmp &= (~(SPI_FIFO_RD_WR_SEL|FIFO_RX_TX_SEL));
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	1dfa      	adds	r2, r7, #7
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	2105      	movs	r1, #5
 8000f32:	438a      	bics	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_FIFO_CTL<<8)+tmp);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	22d2      	movs	r2, #210	; 0xd2
 8000f3e:	01d2      	lsls	r2, r2, #7
 8000f40:	4694      	mov	ip, r2
 8000f42:	4463      	add	r3, ip
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff fba9 	bl	800069e <spi3Class_vSpi3Write>
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b003      	add	sp, #12
 8000f52:	bd90      	pop	{r4, r7, pc}

08000f54 <cmt2300aEasy_vInit>:
**Function: Init. CMT2300A
**Input:    none
**Output:   none
**********************************************************/
void cmt2300aEasy_vInit(void)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 //unsigned char i;
 unsigned char tmp;
 unsigned char tmp1;
 //unsigned short int len;
 spi3Class_vSpi3Init();
 8000f5a:	f7ff faa9 	bl	80004b0 <spi3Class_vSpi3Init>
 //GPO3In();

 cmt2300aEasy_vSoftReset();
 8000f5e:	f7ff fdf5 	bl	8000b4c <cmt2300aEasy_vSoftReset>
 HAL_Delay(20);
 8000f62:	2014      	movs	r0, #20
 8000f64:	f000 fc70 	bl	8001848 <HAL_Delay>
tmp1 = cmt2300aEasy_bGoStandby();
 8000f68:	1dfc      	adds	r4, r7, #7
 8000f6a:	f7ff fd27 	bl	80009bc <cmt2300aEasy_bGoStandby>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	7023      	strb	r3, [r4, #0]
if(tmp1 == false)
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d107      	bne.n	8000f8a <cmt2300aEasy_vInit+0x36>
{
	printf("tmp1=%d while(1)\n",(u16)tmp1);
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <cmt2300aEasy_vInit+0x7c>)
 8000f80:	0011      	movs	r1, r2
 8000f82:	0018      	movs	r0, r3
 8000f84:	f001 fcce 	bl	8002924 <iprintf>
	while(1);
 8000f88:	e7fe      	b.n	8000f88 <cmt2300aEasy_vInit+0x34>
}
 //
 tmp = spi3Class_bSpi3Read(CMT23_MODE_STA);
 8000f8a:	1dbc      	adds	r4, r7, #6
 8000f8c:	2061      	movs	r0, #97	; 0x61
 8000f8e:	f7ff fba8 	bl	80006e2 <spi3Class_bSpi3Read>
 8000f92:	0003      	movs	r3, r0
 8000f94:	7023      	strb	r3, [r4, #0]
 tmp|= EEP_CPY_DIS;
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	1dba      	adds	r2, r7, #6
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	701a      	strb	r2, [r3, #0]
 tmp&= (~RSTN_IN_EN);			//Disable RstPin
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	1dba      	adds	r2, r7, #6
 8000fa6:	7812      	ldrb	r2, [r2, #0]
 8000fa8:	2120      	movs	r1, #32
 8000faa:	438a      	bics	r2, r1
 8000fac:	701a      	strb	r2, [r3, #0]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_MODE_STA<<8)+tmp);
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	22c2      	movs	r2, #194	; 0xc2
 8000fb6:	01d2      	lsls	r2, r2, #7
 8000fb8:	4694      	mov	ip, r2
 8000fba:	4463      	add	r3, ip
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff fb6d 	bl	800069e <spi3Class_vSpi3Write>

 cmt2300aEasy_bIntSrcFlagClr();
 8000fc4:	f7ff fe95 	bl	8000cf2 <cmt2300aEasy_bIntSrcFlagClr>

}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b003      	add	sp, #12
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	08003970 	.word	0x08003970

08000fd4 <cmt2300aEasy_vCfgBank>:

void cmt2300aEasy_vCfgBank(unsigned short int cfg[], unsigned char length)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	000a      	movs	r2, r1
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	701a      	strb	r2, [r3, #0]
 unsigned char i;

 if(length!=0)
 8000fe2:	1cfb      	adds	r3, r7, #3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d01a      	beq.n	8001020 <cmt2300aEasy_vCfgBank+0x4c>
 	{
 	for(i=0; i<length; i++)
 8000fea:	230f      	movs	r3, #15
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e00e      	b.n	8001012 <cmt2300aEasy_vCfgBank+0x3e>
 		spi3Class_vSpi3Write(cfg[i]);
 8000ff4:	240f      	movs	r4, #15
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	18d3      	adds	r3, r2, r3
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff fb4b 	bl	800069e <spi3Class_vSpi3Write>
 	for(i=0; i<length; i++)
 8001008:	193b      	adds	r3, r7, r4
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	193b      	adds	r3, r7, r4
 800100e:	3201      	adds	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	230f      	movs	r3, #15
 8001014:	18fa      	adds	r2, r7, r3
 8001016:	1cfb      	adds	r3, r7, #3
 8001018:	7812      	ldrb	r2, [r2, #0]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d3e9      	bcc.n	8000ff4 <cmt2300aEasy_vCfgBank+0x20>
 	}
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b005      	add	sp, #20
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <cmt2300aEasy_bGetMessage>:
**ÊäÈë²ÎÊı£ºÎŞ
**Êä³ö²ÎÊı£º·Ç0¡ª¡ª½ÓÊÕ³É¹¦
**          0¡ª¡ª½ÓÊÕÊ§°Ü
******************************************************************************/
unsigned char cmt2300aEasy_bGetMessage(unsigned char msg[])
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 unsigned char i;

 cmt2300aEasy_vEnableRdFifo();
 8001030:	f7ff ff72 	bl	8000f18 <cmt2300aEasy_vEnableRdFifo>
 if(radio.FixedPktLength)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <cmt2300aEasy_bGetMessage+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00d      	beq.n	8001058 <cmt2300aEasy_bGetMessage+0x30>
 	{
  	spi3Class_vSpi3BurstReadFIFO(msg, radio.PayloadLength);
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <cmt2300aEasy_bGetMessage+0x58>)
 800103e:	885b      	ldrh	r3, [r3, #2]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fc8e 	bl	8000968 <spi3Class_vSpi3BurstReadFIFO>
	i = radio.PayloadLength;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <cmt2300aEasy_bGetMessage+0x58>)
 800104e:	885a      	ldrh	r2, [r3, #2]
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e00c      	b.n	8001072 <cmt2300aEasy_bGetMessage+0x4a>
	}
 else
 	{
	i = spi3Class_bSpi3ReadFIFO();
 8001058:	250f      	movs	r5, #15
 800105a:	197c      	adds	r4, r7, r5
 800105c:	f7ff fbdb 	bl	8000816 <spi3Class_bSpi3ReadFIFO>
 8001060:	0003      	movs	r3, r0
 8001062:	7023      	strb	r3, [r4, #0]
 	spi3Class_vSpi3BurstReadFIFO(msg, i);
 8001064:	197b      	adds	r3, r7, r5
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff fc7b 	bl	8000968 <spi3Class_vSpi3BurstReadFIFO>
 	}
 return(i);
 8001072:	230f      	movs	r3, #15
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b004      	add	sp, #16
 800107e:	bdb0      	pop	{r4, r5, r7, pc}
 8001080:	20000264 	.word	0x20000264

08001084 <cmt2300aEasy_bSendMessage>:
**ÊäÈë²ÎÊı£ºÎŞ
**Êä³ö²ÎÊı£º
**
******************************************************************************/
unsigned char cmt2300aEasy_bSendMessage(unsigned char msg[], unsigned char length)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	000a      	movs	r2, r1
 800108e:	1cfb      	adds	r3, r7, #3
 8001090:	701a      	strb	r2, [r3, #0]
 cmt2300aEasy_vEnableWrFifo();
 spi3Class_vSpi3BurstWriteFIFO(msg, length);
 cmt2300aEasy_bGoTx();*/

 //mode2
 cmt2300aEasy_bIntSrcFlagClr();  //ÇåÖĞ¶Ï
 8001092:	f7ff fe2e 	bl	8000cf2 <cmt2300aEasy_bIntSrcFlagClr>
 cmt2300aEasy_vSetTxPayloadLength(length);
 8001096:	1cfb      	adds	r3, r7, #3
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	0018      	movs	r0, r3
 800109c:	f000 f810 	bl	80010c0 <cmt2300aEasy_vSetTxPayloadLength>
 cmt2300aEasy_bGoTx();
 80010a0:	f7ff fcc6 	bl	8000a30 <cmt2300aEasy_bGoTx>
 cmt2300aEasy_vEnableWrFifo();
 80010a4:	f7ff ff1a 	bl	8000edc <cmt2300aEasy_vEnableWrFifo>
 spi3Class_vSpi3BurstWriteFIFO(msg, length);
 80010a8:	1cfb      	adds	r3, r7, #3
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff fc2f 	bl	8000914 <spi3Class_vSpi3BurstWriteFIFO>
 return(true);
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}

080010c0 <cmt2300aEasy_vSetTxPayloadLength>:

void cmt2300aEasy_vSetTxPayloadLength(unsigned short int length)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	0002      	movs	r2, r0
 80010c8:	1dbb      	adds	r3, r7, #6
 80010ca:	801a      	strh	r2, [r3, #0]
 unsigned char tmp;
 unsigned char len;
 cmt2300aEasy_bGoStandby();
 80010cc:	f7ff fc76 	bl	80009bc <cmt2300aEasy_bGoStandby>
 tmp = spi3Class_bSpi3Read(CMT23_PKT_CTRL1);
 80010d0:	250e      	movs	r5, #14
 80010d2:	197c      	adds	r4, r7, r5
 80010d4:	2045      	movs	r0, #69	; 0x45
 80010d6:	f7ff fb04 	bl	80006e2 <spi3Class_bSpi3Read>
 80010da:	0003      	movs	r3, r0
 80010dc:	7023      	strb	r3, [r4, #0]
 tmp&= 0x8F;
 80010de:	197b      	adds	r3, r7, r5
 80010e0:	197a      	adds	r2, r7, r5
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	2170      	movs	r1, #112	; 0x70
 80010e6:	438a      	bics	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]

 if(length!=0)
 80010ea:	1dbb      	adds	r3, r7, #6
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d011      	beq.n	8001116 <cmt2300aEasy_vSetTxPayloadLength+0x56>
 	{
 	if(radio.FixedPktLength)
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <cmt2300aEasy_vSetTxPayloadLength+0xb8>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <cmt2300aEasy_vSetTxPayloadLength+0x4a>
		len = length-1;
 80010fa:	1dbb      	adds	r3, r7, #6
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	3a01      	subs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e009      	b.n	800111e <cmt2300aEasy_vSetTxPayloadLength+0x5e>
 	else
		len = length;
 800110a:	230f      	movs	r3, #15
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	1dba      	adds	r2, r7, #6
 8001110:	8812      	ldrh	r2, [r2, #0]
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e003      	b.n	800111e <cmt2300aEasy_vSetTxPayloadLength+0x5e>
	}
 else
 	len = 0;
 8001116:	230f      	movs	r3, #15
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]

 tmp|= (((unsigned char)(len>>8)&0x07)<<4);
 800111e:	240f      	movs	r4, #15
 8001120:	193b      	adds	r3, r7, r4
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	121b      	asrs	r3, r3, #8
 8001126:	b2db      	uxtb	r3, r3
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	b25b      	sxtb	r3, r3
 800112c:	2270      	movs	r2, #112	; 0x70
 800112e:	4013      	ands	r3, r2
 8001130:	b25a      	sxtb	r2, r3
 8001132:	210e      	movs	r1, #14
 8001134:	187b      	adds	r3, r7, r1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b25a      	sxtb	r2, r3
 800113e:	187b      	adds	r3, r7, r1
 8001140:	701a      	strb	r2, [r3, #0]
 spi3Class_vSpi3Write(((unsigned short int)CMT23_PKT_CTRL1<<8)+tmp);
 8001142:	187b      	adds	r3, r7, r1
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	228a      	movs	r2, #138	; 0x8a
 800114a:	01d2      	lsls	r2, r2, #7
 800114c:	4694      	mov	ip, r2
 800114e:	4463      	add	r3, ip
 8001150:	b29b      	uxth	r3, r3
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff faa3 	bl	800069e <spi3Class_vSpi3Write>
 spi3Class_vSpi3Write(((unsigned short int)CMT23_PKT_LEN<<8)+(unsigned char)len);	//Payload length
 8001158:	193b      	adds	r3, r7, r4
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b29b      	uxth	r3, r3
 800115e:	228c      	movs	r2, #140	; 0x8c
 8001160:	01d2      	lsls	r2, r2, #7
 8001162:	4694      	mov	ip, r2
 8001164:	4463      	add	r3, ip
 8001166:	b29b      	uxth	r3, r3
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff fa98 	bl	800069e <spi3Class_vSpi3Write>
 //bGoSleep();
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bdb0      	pop	{r4, r5, r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000264 	.word	0x20000264

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001180:	f000 faf2 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001184:	f000 f81e 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001188:	f000 f89a 	bl	80012c0 <MX_GPIO_Init>
  MX_IWDG_Init();
 800118c:	f000 f878 	bl	8001280 <MX_IWDG_Init>
  	P3M0|=(1<<1);
  	P3M1&=~(1<5);
  	P3M0|=(1<<5);
  	UART_INIT();
  	EA = 1;*/
  	printf("start0!\r\n");
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <main+0x40>)
 8001192:	0018      	movs	r0, r3
 8001194:	f001 fc52 	bl	8002a3c <puts>

    if(false == statetx )
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <main+0x44>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <main+0x32>
  	{
  		CMT2219B_RxInit();
 80011a0:	f000 f904 	bl	80013ac <CMT2219B_RxInit>
  		setup_Rx();
 80011a4:	f000 f96e 	bl	8001484 <setup_Rx>
  		while(1)
  		{
  				loop_Rx();
 80011a8:	f000 f99e 	bl	80014e8 <loop_Rx>
 80011ac:	e7fc      	b.n	80011a8 <main+0x2c>
  		}
  	}
    else
  	{
  		CMT2119B_TxInit();
 80011ae:	f000 f8bf 	bl	8001330 <CMT2119B_TxInit>
  		setup_Tx();
 80011b2:	f000 f93f 	bl	8001434 <setup_Tx>
  		while (1)
  		{
  			 loop_Tx();
 80011b6:	f000 f97d 	bl	80014b4 <loop_Tx>
 80011ba:	e7fc      	b.n	80011b6 <main+0x3a>
 80011bc:	08003984 	.word	0x08003984
 80011c0:	20000186 	.word	0x20000186

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b093      	sub	sp, #76	; 0x4c
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	2414      	movs	r4, #20
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	0018      	movs	r0, r3
 80011d0:	2334      	movs	r3, #52	; 0x34
 80011d2:	001a      	movs	r2, r3
 80011d4:	2100      	movs	r1, #0
 80011d6:	f001 fb9d 	bl	8002914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011da:	003b      	movs	r3, r7
 80011dc:	0018      	movs	r0, r3
 80011de:	2314      	movs	r3, #20
 80011e0:	001a      	movs	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	f001 fb96 	bl	8002914 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <SystemClock_Config+0xb4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <SystemClock_Config+0xb8>)
 80011ee:	401a      	ands	r2, r3
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <SystemClock_Config+0xb4>)
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0109      	lsls	r1, r1, #4
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80011fa:	0021      	movs	r1, r4
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	220a      	movs	r2, #10
 8001200:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2201      	movs	r2, #1
 8001206:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2210      	movs	r2, #16
 800120c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2201      	movs	r2, #1
 8001212:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2202      	movs	r2, #2
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001220:	187b      	adds	r3, r7, r1
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	02d2      	lsls	r2, r2, #11
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	03d2      	lsls	r2, r2, #15
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	187b      	adds	r3, r7, r1
 8001232:	0018      	movs	r0, r3
 8001234:	f000 fdda 	bl	8001dec <HAL_RCC_OscConfig>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800123c:	f000 f980 	bl	8001540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	003b      	movs	r3, r7
 8001242:	220f      	movs	r2, #15
 8001244:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001246:	003b      	movs	r3, r7
 8001248:	2203      	movs	r2, #3
 800124a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	003b      	movs	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001252:	003b      	movs	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001258:	003b      	movs	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800125e:	003b      	movs	r3, r7
 8001260:	2101      	movs	r1, #1
 8001262:	0018      	movs	r0, r3
 8001264:	f001 f93e 	bl	80024e4 <HAL_RCC_ClockConfig>
 8001268:	1e03      	subs	r3, r0, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800126c:	f000 f968 	bl	8001540 <Error_Handler>
  }
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b013      	add	sp, #76	; 0x4c
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	40007000 	.word	0x40007000
 800127c:	ffffe7ff 	.word	0xffffe7ff

08001280 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_IWDG_Init+0x34>)
 8001286:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <MX_IWDG_Init+0x38>)
 8001288:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_IWDG_Init+0x34>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_IWDG_Init+0x34>)
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <MX_IWDG_Init+0x3c>)
 8001294:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_IWDG_Init+0x34>)
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <MX_IWDG_Init+0x3c>)
 800129a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <MX_IWDG_Init+0x34>)
 800129e:	0018      	movs	r0, r3
 80012a0:	f000 fd52 	bl	8001d48 <HAL_IWDG_Init>
 80012a4:	1e03      	subs	r3, r0, #0
 80012a6:	d001      	beq.n	80012ac <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80012a8:	f000 f94a 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	20000254 	.word	0x20000254
 80012b8:	40003000 	.word	0x40003000
 80012bc:	00000fff 	.word	0x00000fff

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	0018      	movs	r0, r3
 80012ca:	2314      	movs	r3, #20
 80012cc:	001a      	movs	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f001 fb20 	bl	8002914 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_GPIO_Init+0x68>)
 80012d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_GPIO_Init+0x68>)
 80012da:	2101      	movs	r1, #1
 80012dc:	430a      	orrs	r2, r1
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_GPIO_Init+0x68>)
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	2201      	movs	r2, #1
 80012e6:	4013      	ands	r3, r2
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, csb_Pin|fcsb_Pin|buzzer_Pin|SCLK_Pin
 80012ec:	490f      	ldr	r1, [pc, #60]	; (800132c <MX_GPIO_Init+0x6c>)
 80012ee:	23a0      	movs	r3, #160	; 0xa0
 80012f0:	05db      	lsls	r3, r3, #23
 80012f2:	2200      	movs	r2, #0
 80012f4:	0018      	movs	r0, r3
 80012f6:	f000 fd0a 	bl	8001d0e <HAL_GPIO_WritePin>
                          |SDIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : csb_Pin fcsb_Pin buzzer_Pin SCLK_Pin
                           SDIO_Pin */
  GPIO_InitStruct.Pin = csb_Pin|fcsb_Pin|buzzer_Pin|SCLK_Pin
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <MX_GPIO_Init+0x6c>)
 80012fe:	601a      	str	r2, [r3, #0]
                          |SDIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2201      	movs	r2, #1
 8001304:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	1d3a      	adds	r2, r7, #4
 8001314:	23a0      	movs	r3, #160	; 0xa0
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f000 fb6c 	bl	80019f8 <HAL_GPIO_Init>

}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b006      	add	sp, #24
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	0000060e 	.word	0x0000060e

08001330 <CMT2119B_TxInit>:

/* USER CODE BEGIN 4 */
void CMT2119B_TxInit()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	/**********基础设置初始化一次即可*******/
	radio.FixedPktLength    = false;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <CMT2119B_TxInit+0x60>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
	radio.PayloadLength     = LEN;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <CMT2119B_TxInit+0x60>)
 800133c:	2215      	movs	r2, #21
 800133e:	805a      	strh	r2, [r3, #2]
	cmt2300aEasy_vInit();
 8001340:	f7ff fe08 	bl	8000f54 <cmt2300aEasy_vInit>

	cmt2300aEasy_vCfgBank(CMTBank, 12);
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <CMT2119B_TxInit+0x64>)
 8001346:	210c      	movs	r1, #12
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fe43 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
	cmt2300aEasy_vCfgBank(SystemBank, 12);
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <CMT2119B_TxInit+0x68>)
 8001350:	210c      	movs	r1, #12
 8001352:	0018      	movs	r0, r3
 8001354:	f7ff fe3e 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
	cmt2300aEasy_vCfgBank(FrequencyBank, 8);
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <CMT2119B_TxInit+0x6c>)
 800135a:	2108      	movs	r1, #8
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fe39 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
	cmt2300aEasy_vCfgBank(DataRateBank, 24);
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <CMT2119B_TxInit+0x70>)
 8001364:	2118      	movs	r1, #24
 8001366:	0018      	movs	r0, r3
 8001368:	f7ff fe34 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
	cmt2300aEasy_vCfgBank(BasebandBank, 29);
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <CMT2119B_TxInit+0x74>)
 800136e:	211d      	movs	r1, #29
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff fe2f 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
	cmt2300aEasy_vCfgBank(TXBank, 11);
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <CMT2119B_TxInit+0x78>)
 8001378:	210b      	movs	r1, #11
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff fe2a 	bl	8000fd4 <cmt2300aEasy_vCfgBank>

	cmt2300aEasy_vEnablePLLcheck();
 8001380:	f7ff fc84 	bl	8000c8c <cmt2300aEasy_vEnablePLLcheck>
	cmt2300aEasy_bGoSleep();  				//让配置生效
 8001384:	f7ff fbc2 	bl	8000b0c <cmt2300aEasy_bGoSleep>
	/**************************************/
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	20000264 	.word	0x20000264
 8001394:	20000000 	.word	0x20000000
 8001398:	20000018 	.word	0x20000018
 800139c:	20000030 	.word	0x20000030
 80013a0:	20000040 	.word	0x20000040
 80013a4:	20000070 	.word	0x20000070
 80013a8:	200000ac 	.word	0x200000ac

080013ac <CMT2219B_RxInit>:

void CMT2219B_RxInit()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	/**********基础设置初始化一次即可*******/
	radio.FixedPktLength    = false;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <CMT2219B_RxInit+0x68>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	radio.PayloadLength     = LEN;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <CMT2219B_RxInit+0x68>)
 80013b8:	2215      	movs	r2, #21
 80013ba:	805a      	strh	r2, [r3, #2]
	cmt2300aEasy_vInit();
 80013bc:	f7ff fdca 	bl	8000f54 <cmt2300aEasy_vInit>

		cmt2300aEasy_vCfgBank(CMT_Bank, sizeof(CMT_Bank)/sizeof(unsigned short int));
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <CMT2219B_RxInit+0x6c>)
 80013c2:	210c      	movs	r1, #12
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff fe05 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
		cmt2300aEasy_vCfgBank(System_Bank, sizeof(System_Bank)/sizeof(unsigned short int));
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <CMT2219B_RxInit+0x70>)
 80013cc:	210c      	movs	r1, #12
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff fe00 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
		cmt2300aEasy_vCfgBank(Frequency_Bank, sizeof(Frequency_Bank)/sizeof(unsigned short int));
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <CMT2219B_RxInit+0x74>)
 80013d6:	2108      	movs	r1, #8
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff fdfb 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
		cmt2300aEasy_vCfgBank(Data_Rate_Bank, sizeof(Data_Rate_Bank)/sizeof(unsigned short int));
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <CMT2219B_RxInit+0x78>)
 80013e0:	2118      	movs	r1, #24
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff fdf6 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
		cmt2300aEasy_vCfgBank(Baseband_Bank, sizeof(Baseband_Bank)/sizeof(unsigned short int));
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <CMT2219B_RxInit+0x7c>)
 80013ea:	211d      	movs	r1, #29
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff fdf1 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
		cmt2300aEasy_vCfgBank(Reserve_Bank, sizeof(Reserve_Bank)/sizeof(unsigned short int));
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <CMT2219B_RxInit+0x80>)
 80013f4:	210a      	movs	r1, #10
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fdec 	bl	8000fd4 <cmt2300aEasy_vCfgBank>
		cmt2300aEasy_vCfgBank(LBD_Bank, sizeof(LBD_Bank)/sizeof(unsigned short int));
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <CMT2219B_RxInit+0x84>)
 80013fe:	2101      	movs	r1, #1
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff fde7 	bl	8000fd4 <cmt2300aEasy_vCfgBank>

	cmt2300aEasy_vEnablePLLcheck();
 8001406:	f7ff fc41 	bl	8000c8c <cmt2300aEasy_vEnablePLLcheck>
	cmt2300aEasy_bGoSleep();  				//让配置生效
 800140a:	f7ff fb7f 	bl	8000b0c <cmt2300aEasy_bGoSleep>
	/**************************************/
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000264 	.word	0x20000264
 8001418:	200000c4 	.word	0x200000c4
 800141c:	200000dc 	.word	0x200000dc
 8001420:	200000f4 	.word	0x200000f4
 8001424:	20000104 	.word	0x20000104
 8001428:	20000134 	.word	0x20000134
 800142c:	20000170 	.word	0x20000170
 8001430:	20000184 	.word	0x20000184

08001434 <setup_Tx>:

void setup_Tx(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

	if(cmt2300aEasy_bGoStandby())//;   //进入配置模式
 8001438:	f7ff fac0 	bl	80009bc <cmt2300aEasy_bGoStandby>
 800143c:	1e03      	subs	r3, r0, #0
 800143e:	d003      	beq.n	8001448 <setup_Tx+0x14>
	{
		printf("bGoStandby ok!\r\n");
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <setup_Tx+0x48>)
 8001442:	0018      	movs	r0, r3
 8001444:	f001 fafa 	bl	8002a3c <puts>
	}
	cmt2300aEasy_vEnableAntSwitch(0);  //设置天线切换_IO口切换
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff fbe4 	bl	8000c16 <cmt2300aEasy_vEnableAntSwitch>
	cmt2300aEasy_vGpioFuncCfg(GPIO1_INT2+GPIO2_INT2+GPIO3_INT2); //IO口的映射
 800144e:	2026      	movs	r0, #38	; 0x26
 8001450:	f7ff fb8c 	bl	8000b6c <cmt2300aEasy_vGpioFuncCfg>
	cmt2300aEasy_vIntSrcCfg(INT_FIFO_NMTY_TX, INT_TX_DONE);    //IO口中断的映射
 8001454:	210a      	movs	r1, #10
 8001456:	2010      	movs	r0, #16
 8001458:	f7ff fb9d 	bl	8000b96 <cmt2300aEasy_vIntSrcCfg>
	cmt2300aEasy_vIntSrcEnable(TX_DONE_EN);           //中断使能
 800145c:	2020      	movs	r0, #32
 800145e:	f7ff fc33 	bl	8000cc8 <cmt2300aEasy_vIntSrcEnable>

	cmt2300aEasy_vClearFIFO();  //清除FIFO
 8001462:	f7ff fd25 	bl	8000eb0 <cmt2300aEasy_vClearFIFO>
	if(cmt2300aEasy_bGoSleep())//;    //进入睡眠，让配置生效
 8001466:	f7ff fb51 	bl	8000b0c <cmt2300aEasy_bGoSleep>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d003      	beq.n	8001476 <setup_Tx+0x42>
	{
		printf("bGoSleep ok!\r\n");;
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <setup_Tx+0x4c>)
 8001470:	0018      	movs	r0, r3
 8001472:	f001 fae3 	bl	8002a3c <puts>
	}

}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	08003990 	.word	0x08003990
 8001480:	080039a0 	.word	0x080039a0

08001484 <setup_Rx>:

void setup_Rx(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	cmt2300aEasy_bGoStandby();   //进入配置模式
 8001488:	f7ff fa98 	bl	80009bc <cmt2300aEasy_bGoStandby>
	cmt2300aEasy_vEnableAntSwitch(0); //为 1 时 GPIO1 和 GPIO2 不可用
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fbc2 	bl	8000c16 <cmt2300aEasy_vEnableAntSwitch>
	//cmt2300aEasy_vGpioFuncCfg(GPIO1_INT1+GPIO2_Dout+GPIO3_DCLK);  //IO口的功能映射

	//cmt2300aEasy_vIntSrcCfg(INT_RSSI_VALID, INT_CRC_PASS);   //GPO3映射成CRC_pass中断，此处如果要用该中断，RFPDK需要配置CRC
	cmt2300aEasy_vIntSrcCfg(INT_PKT_DONE, INT_PKT_DONE);  //GPO3映射成PKT_DONE中断 //IO口中断的映射
 8001492:	2107      	movs	r1, #7
 8001494:	2007      	movs	r0, #7
 8001496:	f7ff fb7e 	bl	8000b96 <cmt2300aEasy_vIntSrcCfg>
	cmt2300aEasy_vIntSrcEnable(PKT_DONE_EN /*+ CRC_PASS_EN*/);          //中断使能
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fc14 	bl	8000cc8 <cmt2300aEasy_vIntSrcEnable>

	cmt2300aEasy_vClearFIFO();
 80014a0:	f7ff fd06 	bl	8000eb0 <cmt2300aEasy_vClearFIFO>
	cmt2300aEasy_bGoSleep();           //让配置生效
 80014a4:	f7ff fb32 	bl	8000b0c <cmt2300aEasy_bGoSleep>
	cmt2300aEasy_bGoRx();              //for Rx
 80014a8:	f7ff faf6 	bl	8000a98 <cmt2300aEasy_bGoRx>
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <loop_Tx>:


void loop_Tx()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	printf("send!\r\n");
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <loop_Tx+0x2c>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f001 fabe 	bl	8002a3c <puts>
	cmt2300aEasy_bSendMessage(str, LEN);
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <loop_Tx+0x30>)
 80014c2:	2115      	movs	r1, #21
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fddd 	bl	8001084 <cmt2300aEasy_bSendMessage>
  	//while(GPO3_L());   // 判断GPIO中断 为低等 为高运行下面代码
	cmt2300aEasy_bIntSrcFlagClr();
 80014ca:	f7ff fc12 	bl	8000cf2 <cmt2300aEasy_bIntSrcFlagClr>
	cmt2300aEasy_vClearFIFO();
 80014ce:	f7ff fcef 	bl	8000eb0 <cmt2300aEasy_vClearFIFO>
	HAL_Delay(20);
 80014d2:	2014      	movs	r0, #20
 80014d4:	f000 f9b8 	bl	8001848 <HAL_Delay>
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	080039b0 	.word	0x080039b0
 80014e4:	20000188 	.word	0x20000188

080014e8 <loop_Rx>:

unsigned char tmp;
void loop_Rx()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

	//if(GPO1_H())
	//{
		cmt2300aEasy_bGoStandby();
 80014ec:	f7ff fa66 	bl	80009bc <cmt2300aEasy_bGoStandby>
		tmp = cmt2300aEasy_bGetMessage(getstr);
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <loop_Rx+0x48>)
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff fd98 	bl	8001028 <cmt2300aEasy_bGetMessage>
 80014f8:	0003      	movs	r3, r0
 80014fa:	001a      	movs	r2, r3
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <loop_Rx+0x4c>)
 80014fe:	701a      	strb	r2, [r3, #0]
		printf("recv=%s\r\n",getstr);
 8001500:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <loop_Rx+0x48>)
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <loop_Rx+0x50>)
 8001504:	0011      	movs	r1, r2
 8001506:	0018      	movs	r0, r3
 8001508:	f001 fa0c 	bl	8002924 <iprintf>
		cmt2300aEasy_bIntSrcFlagClr();
 800150c:	f7ff fbf1 	bl	8000cf2 <cmt2300aEasy_bIntSrcFlagClr>
		cmt2300aEasy_vClearFIFO();
 8001510:	f7ff fcce 	bl	8000eb0 <cmt2300aEasy_vClearFIFO>
		cmt2300aEasy_bGoRx();
 8001514:	f7ff fac0 	bl	8000a98 <cmt2300aEasy_bGoRx>
	//}else
	//{
		printf("nothing!\r\n");
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <loop_Rx+0x54>)
 800151a:	0018      	movs	r0, r3
 800151c:	f001 fa8e 	bl	8002a3c <puts>
		HAL_Delay(1000);
 8001520:	23fa      	movs	r3, #250	; 0xfa
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	0018      	movs	r0, r3
 8001526:	f000 f98f 	bl	8001848 <HAL_Delay>

	//}
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000023c 	.word	0x2000023c
 8001534:	20000238 	.word	0x20000238
 8001538:	080039b8 	.word	0x080039b8
 800153c:	080039c4 	.word	0x080039c4

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>
	...

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_MspInit+0x24>)
 8001552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x24>)
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <HAL_MspInit+0x24>)
 800155e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_MspInit+0x24>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0549      	lsls	r1, r1, #21
 8001566:	430a      	orrs	r2, r1
 8001568:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001598:	f000 f93a 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e00a      	b.n	80015ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015b4:	e000      	b.n	80015b8 <_read+0x16>
 80015b6:	bf00      	nop
 80015b8:	0001      	movs	r1, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	60ba      	str	r2, [r7, #8]
 80015c0:	b2ca      	uxtb	r2, r1
 80015c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dbf0      	blt.n	80015b4 <_read+0x12>
	}

return len;
 80015d2:	687b      	ldr	r3, [r7, #4]
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b006      	add	sp, #24
 80015da:	bd80      	pop	{r7, pc}

080015dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e009      	b.n	8001602 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	60ba      	str	r2, [r7, #8]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	0018      	movs	r0, r3
 80015f8:	e000      	b.n	80015fc <_write+0x20>
 80015fa:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	dbf1      	blt.n	80015ee <_write+0x12>
	}
	return len;
 800160a:	687b      	ldr	r3, [r7, #4]
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b006      	add	sp, #24
 8001612:	bd80      	pop	{r7, pc}

08001614 <_close>:

int _close(int file)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return -1;
 800161c:	2301      	movs	r3, #1
 800161e:	425b      	negs	r3, r3
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}

08001628 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	0192      	lsls	r2, r2, #6
 8001638:	605a      	str	r2, [r3, #4]
	return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}

08001644 <_isatty>:

int _isatty(int file)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}

08001656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
	return 0;
 8001662:	2300      	movs	r3, #0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b004      	add	sp, #16
 800166a:	bd80      	pop	{r7, pc}

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	18d3      	adds	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f001 f910 	bl	80028c0 <__errno>
 80016a0:	0003      	movs	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	425b      	negs	r3, r3
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	18d2      	adds	r2, r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b006      	add	sp, #24
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20002000 	.word	0x20002000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	2000022c 	.word	0x2000022c
 80016d4:	20000280 	.word	0x20000280

080016d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80016e4:	4813      	ldr	r0, [pc, #76]	; (8001734 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80016e6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <LoopForever+0x6>)
    LDR R1, [R0]
 80016ea:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80016ec:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <LoopForever+0xa>)
    CMP R1, R2
 80016f0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80016f2:	d105      	bne.n	8001700 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80016f4:	4812      	ldr	r0, [pc, #72]	; (8001740 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80016f6:	4913      	ldr	r1, [pc, #76]	; (8001744 <LoopForever+0x12>)
    STR R1, [R0]
 80016f8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80016fa:	4813      	ldr	r0, [pc, #76]	; (8001748 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80016fc:	4913      	ldr	r1, [pc, #76]	; (800174c <LoopForever+0x1a>)
    STR R1, [R0]
 80016fe:	6001      	str	r1, [r0, #0]

08001700 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001702:	4914      	ldr	r1, [pc, #80]	; (8001754 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <LoopForever+0x26>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001718:	4c11      	ldr	r4, [pc, #68]	; (8001760 <LoopForever+0x2e>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001726:	f7ff ffd7 	bl	80016d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f001 f8cf 	bl	80028cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fd25 	bl	800117c <main>

08001732 <LoopForever>:

LoopForever:
    b LoopForever
 8001732:	e7fe      	b.n	8001732 <LoopForever>
   ldr   r0, =_estack
 8001734:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001738:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800173c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001740:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001744:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001748:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800174c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001758:	08003a94 	.word	0x08003a94
  ldr r2, =_sbss
 800175c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001760:	20000280 	.word	0x20000280

08001764 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_IRQHandler>
	...

08001768 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_Init+0x3c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Init+0x3c>)
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001780:	2000      	movs	r0, #0
 8001782:	f000 f811 	bl	80017a8 <HAL_InitTick>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d003      	beq.n	8001792 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e001      	b.n	8001796 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001792:	f7ff fedb 	bl	800154c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b002      	add	sp, #8
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40022000 	.word	0x40022000

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_InitTick+0x5c>)
 80017b2:	681c      	ldr	r4, [r3, #0]
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_InitTick+0x60>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	0019      	movs	r1, r3
 80017ba:	23fa      	movs	r3, #250	; 0xfa
 80017bc:	0098      	lsls	r0, r3, #2
 80017be:	f7fe fcad 	bl	800011c <__udivsi3>
 80017c2:	0003      	movs	r3, r0
 80017c4:	0019      	movs	r1, r3
 80017c6:	0020      	movs	r0, r4
 80017c8:	f7fe fca8 	bl	800011c <__udivsi3>
 80017cc:	0003      	movs	r3, r0
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 f905 	bl	80019de <HAL_SYSTICK_Config>
 80017d4:	1e03      	subs	r3, r0, #0
 80017d6:	d001      	beq.n	80017dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e00f      	b.n	80017fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d80b      	bhi.n	80017fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	2301      	movs	r3, #1
 80017e6:	425b      	negs	r3, r3
 80017e8:	2200      	movs	r2, #0
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 f8e2 	bl	80019b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_InitTick+0x64>)
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b003      	add	sp, #12
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	200001a0 	.word	0x200001a0
 8001808:	200001a8 	.word	0x200001a8
 800180c:	200001a4 	.word	0x200001a4

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x1c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	001a      	movs	r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x20>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	18d2      	adds	r2, r2, r3
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_IncTick+0x20>)
 8001822:	601a      	str	r2, [r3, #0]
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	200001a8 	.word	0x200001a8
 8001830:	2000026c 	.word	0x2000026c

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <HAL_GetTick+0x10>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	2000026c 	.word	0x2000026c

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fff0 	bl	8001834 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	001a      	movs	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	189b      	adds	r3, r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	f7ff ffe0 	bl	8001834 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b004      	add	sp, #16
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	200001a8 	.word	0x200001a8

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	0002      	movs	r2, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b7f      	cmp	r3, #127	; 0x7f
 80018a4:	d828      	bhi.n	80018f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a6:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <__NVIC_SetPriority+0xd4>)
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	33c0      	adds	r3, #192	; 0xc0
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	589b      	ldr	r3, [r3, r2]
 80018b6:	1dfa      	adds	r2, r7, #7
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	0011      	movs	r1, r2
 80018bc:	2203      	movs	r2, #3
 80018be:	400a      	ands	r2, r1
 80018c0:	00d2      	lsls	r2, r2, #3
 80018c2:	21ff      	movs	r1, #255	; 0xff
 80018c4:	4091      	lsls	r1, r2
 80018c6:	000a      	movs	r2, r1
 80018c8:	43d2      	mvns	r2, r2
 80018ca:	401a      	ands	r2, r3
 80018cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	019b      	lsls	r3, r3, #6
 80018d2:	22ff      	movs	r2, #255	; 0xff
 80018d4:	401a      	ands	r2, r3
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	0018      	movs	r0, r3
 80018dc:	2303      	movs	r3, #3
 80018de:	4003      	ands	r3, r0
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e4:	481f      	ldr	r0, [pc, #124]	; (8001964 <__NVIC_SetPriority+0xd4>)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	430a      	orrs	r2, r1
 80018f0:	33c0      	adds	r3, #192	; 0xc0
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018f6:	e031      	b.n	800195c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <__NVIC_SetPriority+0xd8>)
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	0019      	movs	r1, r3
 8001900:	230f      	movs	r3, #15
 8001902:	400b      	ands	r3, r1
 8001904:	3b08      	subs	r3, #8
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3306      	adds	r3, #6
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	18d3      	adds	r3, r2, r3
 800190e:	3304      	adds	r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	1dfa      	adds	r2, r7, #7
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	0011      	movs	r1, r2
 8001918:	2203      	movs	r2, #3
 800191a:	400a      	ands	r2, r1
 800191c:	00d2      	lsls	r2, r2, #3
 800191e:	21ff      	movs	r1, #255	; 0xff
 8001920:	4091      	lsls	r1, r2
 8001922:	000a      	movs	r2, r1
 8001924:	43d2      	mvns	r2, r2
 8001926:	401a      	ands	r2, r3
 8001928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	22ff      	movs	r2, #255	; 0xff
 8001930:	401a      	ands	r2, r3
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	0018      	movs	r0, r3
 8001938:	2303      	movs	r3, #3
 800193a:	4003      	ands	r3, r0
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001940:	4809      	ldr	r0, [pc, #36]	; (8001968 <__NVIC_SetPriority+0xd8>)
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	001c      	movs	r4, r3
 8001948:	230f      	movs	r3, #15
 800194a:	4023      	ands	r3, r4
 800194c:	3b08      	subs	r3, #8
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	430a      	orrs	r2, r1
 8001952:	3306      	adds	r3, #6
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	18c3      	adds	r3, r0, r3
 8001958:	3304      	adds	r3, #4
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b003      	add	sp, #12
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	045b      	lsls	r3, r3, #17
 800197c:	429a      	cmp	r2, r3
 800197e:	d301      	bcc.n	8001984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001980:	2301      	movs	r3, #1
 8001982:	e010      	b.n	80019a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <SysTick_Config+0x44>)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	3a01      	subs	r2, #1
 800198a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198c:	2301      	movs	r3, #1
 800198e:	425b      	negs	r3, r3
 8001990:	2103      	movs	r1, #3
 8001992:	0018      	movs	r0, r3
 8001994:	f7ff ff7c 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x44>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x44>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	210f      	movs	r1, #15
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	1c02      	adds	r2, r0, #0
 80019c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	0011      	movs	r1, r2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff ffbf 	bl	800196c <SysTick_Config>
 80019ee:	0003      	movs	r3, r0
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a0e:	e149      	b.n	8001ca4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4091      	lsls	r1, r2
 8001a1a:	000a      	movs	r2, r1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d100      	bne.n	8001a28 <HAL_GPIO_Init+0x30>
 8001a26:	e13a      	b.n	8001c9e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d005      	beq.n	8001a40 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d130      	bne.n	8001aa2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	43da      	mvns	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	409a      	lsls	r2, r3
 8001a62:	0013      	movs	r3, r2
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a76:	2201      	movs	r2, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
 8001a94:	0013      	movs	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d017      	beq.n	8001ade <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d123      	bne.n	8001b32 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	58d3      	ldr	r3, [r2, r3]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2207      	movs	r2, #7
 8001afc:	4013      	ands	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2107      	movs	r1, #7
 8001b16:	400b      	ands	r3, r1
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	6939      	ldr	r1, [r7, #16]
 8001b30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	0013      	movs	r3, r2
 8001b42:	43da      	mvns	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2203      	movs	r2, #3
 8001b50:	401a      	ands	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	23c0      	movs	r3, #192	; 0xc0
 8001b6c:	029b      	lsls	r3, r3, #10
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d100      	bne.n	8001b74 <HAL_GPIO_Init+0x17c>
 8001b72:	e094      	b.n	8001c9e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b74:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b78:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b80:	4a4f      	ldr	r2, [pc, #316]	; (8001cc0 <HAL_GPIO_Init+0x2c8>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	589b      	ldr	r3, [r3, r2]
 8001b8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2203      	movs	r2, #3
 8001b92:	4013      	ands	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	0013      	movs	r3, r2
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	23a0      	movs	r3, #160	; 0xa0
 8001ba8:	05db      	lsls	r3, r3, #23
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x1de>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a44      	ldr	r2, [pc, #272]	; (8001cc4 <HAL_GPIO_Init+0x2cc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x1da>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x1d6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a42      	ldr	r2, [pc, #264]	; (8001ccc <HAL_GPIO_Init+0x2d4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x1d2>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x1e0>
 8001bca:	2306      	movs	r3, #6
 8001bcc:	e004      	b.n	8001bd8 <HAL_GPIO_Init+0x1e0>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_Init+0x1e0>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_GPIO_Init+0x1e0>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	2103      	movs	r1, #3
 8001bdc:	400a      	ands	r2, r1
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4093      	lsls	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be8:	4935      	ldr	r1, [pc, #212]	; (8001cc0 <HAL_GPIO_Init+0x2c8>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_GPIO_Init+0x2d8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_GPIO_Init+0x2d8>)
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_GPIO_Init+0x2d8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43da      	mvns	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	029b      	lsls	r3, r3, #10
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_GPIO_Init+0x2d8>)
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <HAL_GPIO_Init+0x2d8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	035b      	lsls	r3, r3, #13
 8001c62:	4013      	ands	r3, r2
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_GPIO_Init+0x2d8>)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_GPIO_Init+0x2d8>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	039b      	lsls	r3, r3, #14
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_GPIO_Init+0x2d8>)
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	40da      	lsrs	r2, r3
 8001cac:	1e13      	subs	r3, r2, #0
 8001cae:	d000      	beq.n	8001cb2 <HAL_GPIO_Init+0x2ba>
 8001cb0:	e6ae      	b.n	8001a10 <HAL_GPIO_Init+0x18>
  }
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b006      	add	sp, #24
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	50000400 	.word	0x50000400
 8001cc8:	50000800 	.word	0x50000800
 8001ccc:	50001c00 	.word	0x50001c00
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	000a      	movs	r2, r1
 8001cde:	1cbb      	adds	r3, r7, #2
 8001ce0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	1cba      	adds	r2, r7, #2
 8001ce8:	8812      	ldrh	r2, [r2, #0]
 8001cea:	4013      	ands	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001cee:	230f      	movs	r3, #15
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	e003      	b.n	8001d00 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d00:	230f      	movs	r3, #15
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	781b      	ldrb	r3, [r3, #0]
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b004      	add	sp, #16
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	0008      	movs	r0, r1
 8001d18:	0011      	movs	r1, r2
 8001d1a:	1cbb      	adds	r3, r7, #2
 8001d1c:	1c02      	adds	r2, r0, #0
 8001d1e:	801a      	strh	r2, [r3, #0]
 8001d20:	1c7b      	adds	r3, r7, #1
 8001d22:	1c0a      	adds	r2, r1, #0
 8001d24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d26:	1c7b      	adds	r3, r7, #1
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	1cbb      	adds	r3, r7, #2
 8001d30:	881a      	ldrh	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001d36:	e003      	b.n	8001d40 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001d38:	1cbb      	adds	r3, r7, #2
 8001d3a:	881a      	ldrh	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e03d      	b.n	8001dd6 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a20      	ldr	r2, [pc, #128]	; (8001de0 <HAL_IWDG_Init+0x98>)
 8001d60:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_IWDG_Init+0x9c>)
 8001d68:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6852      	ldr	r2, [r2, #4]
 8001d72:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6892      	ldr	r2, [r2, #8]
 8001d7c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001d7e:	f7ff fd59 	bl	8001834 <HAL_GetTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d86:	e00e      	b.n	8001da6 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d88:	f7ff fd54 	bl	8001834 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b2a      	cmp	r3, #42	; 0x2a
 8001d94:	d907      	bls.n	8001da6 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d001      	beq.n	8001da6 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e017      	b.n	8001dd6 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2207      	movs	r2, #7
 8001dae:	4013      	ands	r3, r2
 8001db0:	d1ea      	bne.n	8001d88 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d005      	beq.n	8001dcc <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	68d2      	ldr	r2, [r2, #12]
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	e003      	b.n	8001dd4 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_IWDG_Init+0xa0>)
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	0000cccc 	.word	0x0000cccc
 8001de4:	00005555 	.word	0x00005555
 8001de8:	0000aaaa 	.word	0x0000aaaa

08001dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f000 fb6c 	bl	80024d8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e00:	4bc8      	ldr	r3, [pc, #800]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	220c      	movs	r2, #12
 8001e06:	4013      	ands	r3, r2
 8001e08:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0a:	4bc6      	ldr	r3, [pc, #792]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	025b      	lsls	r3, r3, #9
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d100      	bne.n	8001e22 <HAL_RCC_OscConfig+0x36>
 8001e20:	e07d      	b.n	8001f1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d007      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d112      	bne.n	8001e54 <HAL_RCC_OscConfig+0x68>
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	025b      	lsls	r3, r3, #9
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10d      	bne.n	8001e54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	4bba      	ldr	r3, [pc, #744]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	029b      	lsls	r3, r3, #10
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <HAL_RCC_OscConfig+0x5a>
 8001e44:	e06a      	b.n	8001f1c <HAL_RCC_OscConfig+0x130>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d166      	bne.n	8001f1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 fb42 	bl	80024d8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x84>
 8001e60:	4bb0      	ldr	r3, [pc, #704]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4baf      	ldr	r3, [pc, #700]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0249      	lsls	r1, r1, #9
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e027      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	23a0      	movs	r3, #160	; 0xa0
 8001e76:	02db      	lsls	r3, r3, #11
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d10e      	bne.n	8001e9a <HAL_RCC_OscConfig+0xae>
 8001e7c:	4ba9      	ldr	r3, [pc, #676]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4ba8      	ldr	r3, [pc, #672]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	02c9      	lsls	r1, r1, #11
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	4ba6      	ldr	r3, [pc, #664]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4ba5      	ldr	r3, [pc, #660]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	0249      	lsls	r1, r1, #9
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e012      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001e9a:	4ba2      	ldr	r3, [pc, #648]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4ba1      	ldr	r3, [pc, #644]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001ea0:	49a1      	ldr	r1, [pc, #644]	; (8002128 <HAL_RCC_OscConfig+0x33c>)
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	4b9f      	ldr	r3, [pc, #636]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	025b      	lsls	r3, r3, #9
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4b9b      	ldr	r3, [pc, #620]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b9a      	ldr	r3, [pc, #616]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001eba:	499c      	ldr	r1, [pc, #624]	; (800212c <HAL_RCC_OscConfig+0x340>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d014      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fcb4 	bl	8001834 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed2:	f7ff fcaf 	bl	8001834 <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b64      	cmp	r3, #100	; 0x64
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e2f9      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee4:	4b8f      	ldr	r3, [pc, #572]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	029b      	lsls	r3, r3, #10
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0xe6>
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fc9f 	bl	8001834 <HAL_GetTick>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff fc9a 	bl	8001834 <HAL_GetTick>
 8001f00:	0002      	movs	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e2e4      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f0e:	4b85      	ldr	r3, [pc, #532]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	029b      	lsls	r3, r3, #10
 8001f16:	4013      	ands	r3, r2
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x110>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	d100      	bne.n	8001f2a <HAL_RCC_OscConfig+0x13e>
 8001f28:	e099      	b.n	800205e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	2220      	movs	r2, #32
 8001f34:	4013      	ands	r3, r2
 8001f36:	d009      	beq.n	8001f4c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f38:	4b7a      	ldr	r3, [pc, #488]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b79      	ldr	r3, [pc, #484]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f3e:	2120      	movs	r1, #32
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	2220      	movs	r2, #32
 8001f48:	4393      	bics	r3, r2
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	d13e      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x1ea>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d13b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f5e:	4b71      	ldr	r3, [pc, #452]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2204      	movs	r2, #4
 8001f64:	4013      	ands	r3, r2
 8001f66:	d004      	beq.n	8001f72 <HAL_RCC_OscConfig+0x186>
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e2b2      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a6e      	ldr	r2, [pc, #440]	; (8002130 <HAL_RCC_OscConfig+0x344>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	021a      	lsls	r2, r3, #8
 8001f82:	4b68      	ldr	r3, [pc, #416]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f88:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2209      	movs	r2, #9
 8001f8e:	4393      	bics	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	4b64      	ldr	r3, [pc, #400]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f9a:	f000 fbeb 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8001f9e:	0001      	movs	r1, r0
 8001fa0:	4b60      	ldr	r3, [pc, #384]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	4013      	ands	r3, r2
 8001faa:	4a62      	ldr	r2, [pc, #392]	; (8002134 <HAL_RCC_OscConfig+0x348>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	000a      	movs	r2, r1
 8001fb0:	40da      	lsrs	r2, r3
 8001fb2:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCC_OscConfig+0x34c>)
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001fb6:	4b61      	ldr	r3, [pc, #388]	; (800213c <HAL_RCC_OscConfig+0x350>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2513      	movs	r5, #19
 8001fbc:	197c      	adds	r4, r7, r5
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f7ff fbf2 	bl	80017a8 <HAL_InitTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001fc8:	197b      	adds	r3, r7, r5
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d046      	beq.n	800205e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001fd0:	197b      	adds	r3, r7, r5
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	e280      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d027      	beq.n	800202c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fdc:	4b51      	ldr	r3, [pc, #324]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2209      	movs	r2, #9
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fc21 	bl	8001834 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fc1c 	bl	8001834 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e266      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2204      	movs	r2, #4
 8002010:	4013      	ands	r3, r2
 8002012:	d0f1      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a45      	ldr	r2, [pc, #276]	; (8002130 <HAL_RCC_OscConfig+0x344>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002026:	430a      	orrs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e018      	b.n	800205e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b3c      	ldr	r3, [pc, #240]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002032:	2101      	movs	r1, #1
 8002034:	438a      	bics	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff fbfc 	bl	8001834 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002042:	f7ff fbf7 	bl	8001834 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e241      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002054:	4b33      	ldr	r3, [pc, #204]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	d1f1      	bne.n	8002042 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2210      	movs	r2, #16
 8002064:	4013      	ands	r3, r2
 8002066:	d100      	bne.n	800206a <HAL_RCC_OscConfig+0x27e>
 8002068:	e0a1      	b.n	80021ae <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d140      	bne.n	80020f2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002070:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4013      	ands	r3, r2
 800207a:	d005      	beq.n	8002088 <HAL_RCC_OscConfig+0x29c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e227      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <HAL_RCC_OscConfig+0x354>)
 800208e:	4013      	ands	r3, r2
 8002090:	0019      	movs	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	4b23      	ldr	r3, [pc, #140]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002098:	430a      	orrs	r2, r1
 800209a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	0a19      	lsrs	r1, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	061a      	lsls	r2, r3, #24
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	0b5b      	lsrs	r3, r3, #13
 80020b6:	3301      	adds	r3, #1
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	0212      	lsls	r2, r2, #8
 80020bc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	210f      	movs	r1, #15
 80020c6:	400b      	ands	r3, r1
 80020c8:	491a      	ldr	r1, [pc, #104]	; (8002134 <HAL_RCC_OscConfig+0x348>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_RCC_OscConfig+0x34c>)
 80020d0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_RCC_OscConfig+0x350>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2513      	movs	r5, #19
 80020d8:	197c      	adds	r4, r7, r5
 80020da:	0018      	movs	r0, r3
 80020dc:	f7ff fb64 	bl	80017a8 <HAL_InitTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020e4:	197b      	adds	r3, r7, r5
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d060      	beq.n	80021ae <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80020ec:	197b      	adds	r3, r7, r5
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	e1f2      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03f      	beq.n	800217a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_RCC_OscConfig+0x338>)
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	0049      	lsls	r1, r1, #1
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fb94 	bl	8001834 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002110:	e018      	b.n	8002144 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002112:	f7ff fb8f 	bl	8001834 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d911      	bls.n	8002144 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1d9      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
 8002124:	40021000 	.word	0x40021000
 8002128:	fffeffff 	.word	0xfffeffff
 800212c:	fffbffff 	.word	0xfffbffff
 8002130:	ffffe0ff 	.word	0xffffe0ff
 8002134:	080039d0 	.word	0x080039d0
 8002138:	200001a0 	.word	0x200001a0
 800213c:	200001a4 	.word	0x200001a4
 8002140:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002144:	4bc9      	ldr	r3, [pc, #804]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d0e0      	beq.n	8002112 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002150:	4bc6      	ldr	r3, [pc, #792]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4ac6      	ldr	r2, [pc, #792]	; (8002470 <HAL_RCC_OscConfig+0x684>)
 8002156:	4013      	ands	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	4bc3      	ldr	r3, [pc, #780]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002160:	430a      	orrs	r2, r1
 8002162:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002164:	4bc1      	ldr	r3, [pc, #772]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	0a19      	lsrs	r1, r3, #8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	061a      	lsls	r2, r3, #24
 8002172:	4bbe      	ldr	r3, [pc, #760]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002174:	430a      	orrs	r2, r1
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	e019      	b.n	80021ae <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800217a:	4bbc      	ldr	r3, [pc, #752]	; (800246c <HAL_RCC_OscConfig+0x680>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4bbb      	ldr	r3, [pc, #748]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002180:	49bc      	ldr	r1, [pc, #752]	; (8002474 <HAL_RCC_OscConfig+0x688>)
 8002182:	400a      	ands	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7ff fb55 	bl	8001834 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002190:	f7ff fb50 	bl	8001834 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e19a      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021a2:	4bb2      	ldr	r3, [pc, #712]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2208      	movs	r2, #8
 80021b4:	4013      	ands	r3, r2
 80021b6:	d036      	beq.n	8002226 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d019      	beq.n	80021f4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c0:	4baa      	ldr	r3, [pc, #680]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80021c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c4:	4ba9      	ldr	r3, [pc, #676]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7ff fb32 	bl	8001834 <HAL_GetTick>
 80021d0:	0003      	movs	r3, r0
 80021d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d6:	f7ff fb2d 	bl	8001834 <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e177      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021e8:	4ba0      	ldr	r3, [pc, #640]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80021ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ec:	2202      	movs	r2, #2
 80021ee:	4013      	ands	r3, r2
 80021f0:	d0f1      	beq.n	80021d6 <HAL_RCC_OscConfig+0x3ea>
 80021f2:	e018      	b.n	8002226 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f4:	4b9d      	ldr	r3, [pc, #628]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80021f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021f8:	4b9c      	ldr	r3, [pc, #624]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80021fa:	2101      	movs	r1, #1
 80021fc:	438a      	bics	r2, r1
 80021fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7ff fb18 	bl	8001834 <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220a:	f7ff fb13 	bl	8001834 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e15d      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800221c:	4b93      	ldr	r3, [pc, #588]	; (800246c <HAL_RCC_OscConfig+0x680>)
 800221e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002220:	2202      	movs	r2, #2
 8002222:	4013      	ands	r3, r2
 8002224:	d1f1      	bne.n	800220a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2204      	movs	r2, #4
 800222c:	4013      	ands	r3, r2
 800222e:	d100      	bne.n	8002232 <HAL_RCC_OscConfig+0x446>
 8002230:	e0ae      	b.n	8002390 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002232:	2023      	movs	r0, #35	; 0x23
 8002234:	183b      	adds	r3, r7, r0
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_OscConfig+0x680>)
 800223c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	055b      	lsls	r3, r3, #21
 8002242:	4013      	ands	r3, r2
 8002244:	d109      	bne.n	800225a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b89      	ldr	r3, [pc, #548]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800224a:	4b88      	ldr	r3, [pc, #544]	; (800246c <HAL_RCC_OscConfig+0x680>)
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	0549      	lsls	r1, r1, #21
 8002250:	430a      	orrs	r2, r1
 8002252:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002254:	183b      	adds	r3, r7, r0
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	4b87      	ldr	r3, [pc, #540]	; (8002478 <HAL_RCC_OscConfig+0x68c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4013      	ands	r3, r2
 8002264:	d11a      	bne.n	800229c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002266:	4b84      	ldr	r3, [pc, #528]	; (8002478 <HAL_RCC_OscConfig+0x68c>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b83      	ldr	r3, [pc, #524]	; (8002478 <HAL_RCC_OscConfig+0x68c>)
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	0049      	lsls	r1, r1, #1
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002274:	f7ff fade 	bl	8001834 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7ff fad9 	bl	8001834 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b64      	cmp	r3, #100	; 0x64
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e123      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	4b79      	ldr	r3, [pc, #484]	; (8002478 <HAL_RCC_OscConfig+0x68c>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4cc>
 80022a8:	4b70      	ldr	r3, [pc, #448]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ac:	4b6f      	ldr	r3, [pc, #444]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	0049      	lsls	r1, r1, #1
 80022b2:	430a      	orrs	r2, r1
 80022b4:	651a      	str	r2, [r3, #80]	; 0x50
 80022b6:	e031      	b.n	800231c <HAL_RCC_OscConfig+0x530>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10c      	bne.n	80022da <HAL_RCC_OscConfig+0x4ee>
 80022c0:	4b6a      	ldr	r3, [pc, #424]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c4:	4b69      	ldr	r3, [pc, #420]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022c6:	496b      	ldr	r1, [pc, #428]	; (8002474 <HAL_RCC_OscConfig+0x688>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	651a      	str	r2, [r3, #80]	; 0x50
 80022cc:	4b67      	ldr	r3, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d0:	4b66      	ldr	r3, [pc, #408]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022d2:	496a      	ldr	r1, [pc, #424]	; (800247c <HAL_RCC_OscConfig+0x690>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	651a      	str	r2, [r3, #80]	; 0x50
 80022d8:	e020      	b.n	800231c <HAL_RCC_OscConfig+0x530>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	23a0      	movs	r3, #160	; 0xa0
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d10e      	bne.n	8002304 <HAL_RCC_OscConfig+0x518>
 80022e6:	4b61      	ldr	r3, [pc, #388]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ea:	4b60      	ldr	r3, [pc, #384]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	00c9      	lsls	r1, r1, #3
 80022f0:	430a      	orrs	r2, r1
 80022f2:	651a      	str	r2, [r3, #80]	; 0x50
 80022f4:	4b5d      	ldr	r3, [pc, #372]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022f8:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	0049      	lsls	r1, r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	651a      	str	r2, [r3, #80]	; 0x50
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0x530>
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002308:	4b58      	ldr	r3, [pc, #352]	; (800246c <HAL_RCC_OscConfig+0x680>)
 800230a:	495a      	ldr	r1, [pc, #360]	; (8002474 <HAL_RCC_OscConfig+0x688>)
 800230c:	400a      	ands	r2, r1
 800230e:	651a      	str	r2, [r3, #80]	; 0x50
 8002310:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002314:	4b55      	ldr	r3, [pc, #340]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002316:	4959      	ldr	r1, [pc, #356]	; (800247c <HAL_RCC_OscConfig+0x690>)
 8002318:	400a      	ands	r2, r1
 800231a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d015      	beq.n	8002350 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7ff fa86 	bl	8001834 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800232c:	e009      	b.n	8002342 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff fa81 	bl	8001834 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	4a51      	ldr	r2, [pc, #324]	; (8002480 <HAL_RCC_OscConfig+0x694>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e0ca      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002342:	4b4a      	ldr	r3, [pc, #296]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d0ef      	beq.n	800232e <HAL_RCC_OscConfig+0x542>
 800234e:	e014      	b.n	800237a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff fa70 	bl	8001834 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002358:	e009      	b.n	800236e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7ff fa6b 	bl	8001834 <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	4a46      	ldr	r2, [pc, #280]	; (8002480 <HAL_RCC_OscConfig+0x694>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e0b4      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d1ef      	bne.n	800235a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800237a:	2323      	movs	r3, #35	; 0x23
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002388:	4b38      	ldr	r3, [pc, #224]	; (800246c <HAL_RCC_OscConfig+0x680>)
 800238a:	493e      	ldr	r1, [pc, #248]	; (8002484 <HAL_RCC_OscConfig+0x698>)
 800238c:	400a      	ands	r2, r1
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	2b00      	cmp	r3, #0
 8002396:	d100      	bne.n	800239a <HAL_RCC_OscConfig+0x5ae>
 8002398:	e09d      	b.n	80024d6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d100      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5b6>
 80023a0:	e076      	b.n	8002490 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d145      	bne.n	8002436 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b2f      	ldr	r3, [pc, #188]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80023b0:	4935      	ldr	r1, [pc, #212]	; (8002488 <HAL_RCC_OscConfig+0x69c>)
 80023b2:	400a      	ands	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7ff fa3d 	bl	8001834 <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7ff fa38 	bl	8001834 <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e082      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	049b      	lsls	r3, r3, #18
 80023da:	4013      	ands	r3, r2
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_RCC_OscConfig+0x6a0>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	431a      	orrs	r2, r3
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_RCC_OscConfig+0x680>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023fe:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	0449      	lsls	r1, r1, #17
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff fa12 	bl	8001834 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002416:	f7ff fa0d 	bl	8001834 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e057      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_RCC_OscConfig+0x680>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	049b      	lsls	r3, r3, #18
 8002430:	4013      	ands	r3, r2
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x62a>
 8002434:	e04f      	b.n	80024d6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_RCC_OscConfig+0x680>)
 800243c:	4912      	ldr	r1, [pc, #72]	; (8002488 <HAL_RCC_OscConfig+0x69c>)
 800243e:	400a      	ands	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7ff f9f7 	bl	8001834 <HAL_GetTick>
 8002446:	0003      	movs	r3, r0
 8002448:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7ff f9f2 	bl	8001834 <HAL_GetTick>
 8002450:	0002      	movs	r2, r0
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e03c      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800245e:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCC_OscConfig+0x680>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	049b      	lsls	r3, r3, #18
 8002466:	4013      	ands	r3, r2
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x660>
 800246a:	e034      	b.n	80024d6 <HAL_RCC_OscConfig+0x6ea>
 800246c:	40021000 	.word	0x40021000
 8002470:	ffff1fff 	.word	0xffff1fff
 8002474:	fffffeff 	.word	0xfffffeff
 8002478:	40007000 	.word	0x40007000
 800247c:	fffffbff 	.word	0xfffffbff
 8002480:	00001388 	.word	0x00001388
 8002484:	efffffff 	.word	0xefffffff
 8002488:	feffffff 	.word	0xfeffffff
 800248c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_RCC_OscConfig+0x6f4>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	401a      	ands	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d10f      	bne.n	80024d2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	23f0      	movs	r3, #240	; 0xf0
 80024b6:	039b      	lsls	r3, r3, #14
 80024b8:	401a      	ands	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	23c0      	movs	r3, #192	; 0xc0
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	401a      	ands	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b00a      	add	sp, #40	; 0x28
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b5b0      	push	{r4, r5, r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e128      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b96      	ldr	r3, [pc, #600]	; (8002754 <HAL_RCC_ClockConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d91e      	bls.n	8002544 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b93      	ldr	r3, [pc, #588]	; (8002754 <HAL_RCC_ClockConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	4393      	bics	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	4b90      	ldr	r3, [pc, #576]	; (8002754 <HAL_RCC_ClockConfig+0x270>)
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002518:	f7ff f98c 	bl	8001834 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002520:	e009      	b.n	8002536 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002522:	f7ff f987 	bl	8001834 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	4a8a      	ldr	r2, [pc, #552]	; (8002758 <HAL_RCC_ClockConfig+0x274>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e109      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b87      	ldr	r3, [pc, #540]	; (8002754 <HAL_RCC_ClockConfig+0x270>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2201      	movs	r2, #1
 800253c:	4013      	ands	r3, r2
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254e:	4b83      	ldr	r3, [pc, #524]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	22f0      	movs	r2, #240	; 0xf0
 8002554:	4393      	bics	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b7f      	ldr	r3, [pc, #508]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 800255e:	430a      	orrs	r2, r1
 8002560:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2201      	movs	r2, #1
 8002568:	4013      	ands	r3, r2
 800256a:	d100      	bne.n	800256e <HAL_RCC_ClockConfig+0x8a>
 800256c:	e089      	b.n	8002682 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002576:	4b79      	ldr	r3, [pc, #484]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	029b      	lsls	r3, r3, #10
 800257e:	4013      	ands	r3, r2
 8002580:	d120      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0e1      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800258e:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	049b      	lsls	r3, r3, #18
 8002596:	4013      	ands	r3, r2
 8002598:	d114      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0d5      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d106      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025a6:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2204      	movs	r2, #4
 80025ac:	4013      	ands	r3, r2
 80025ae:	d109      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0ca      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025b4:	4b69      	ldr	r3, [pc, #420]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0c2      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c4:	4b65      	ldr	r3, [pc, #404]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2203      	movs	r2, #3
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4b62      	ldr	r3, [pc, #392]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d8:	f7ff f92c 	bl	8001834 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d111      	bne.n	800260c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e8:	e009      	b.n	80025fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ea:	f7ff f923 	bl	8001834 <HAL_GetTick>
 80025ee:	0002      	movs	r2, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x274>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0a5      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025fe:	4b57      	ldr	r3, [pc, #348]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	220c      	movs	r2, #12
 8002604:	4013      	ands	r3, r2
 8002606:	2b08      	cmp	r3, #8
 8002608:	d1ef      	bne.n	80025ea <HAL_RCC_ClockConfig+0x106>
 800260a:	e03a      	b.n	8002682 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d111      	bne.n	8002638 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	e009      	b.n	800262a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002616:	f7ff f90d 	bl	8001834 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x274>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e08f      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262a:	4b4c      	ldr	r3, [pc, #304]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	220c      	movs	r2, #12
 8002630:	4013      	ands	r3, r2
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d1ef      	bne.n	8002616 <HAL_RCC_ClockConfig+0x132>
 8002636:	e024      	b.n	8002682 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d11b      	bne.n	8002678 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002640:	e009      	b.n	8002656 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002642:	f7ff f8f7 	bl	8001834 <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	4a42      	ldr	r2, [pc, #264]	; (8002758 <HAL_RCC_ClockConfig+0x274>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e079      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	220c      	movs	r2, #12
 800265c:	4013      	ands	r3, r2
 800265e:	2b04      	cmp	r3, #4
 8002660:	d1ef      	bne.n	8002642 <HAL_RCC_ClockConfig+0x15e>
 8002662:	e00e      	b.n	8002682 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7ff f8e6 	bl	8001834 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	4a3a      	ldr	r2, [pc, #232]	; (8002758 <HAL_RCC_ClockConfig+0x274>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e068      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	220c      	movs	r2, #12
 800267e:	4013      	ands	r3, r2
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCC_ClockConfig+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	4013      	ands	r3, r2
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d21e      	bcs.n	80026ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002690:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_RCC_ClockConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	4393      	bics	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_RCC_ClockConfig+0x270>)
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026a2:	f7ff f8c7 	bl	8001834 <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	e009      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7ff f8c2 	bl	8001834 <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	4a28      	ldr	r2, [pc, #160]	; (8002758 <HAL_RCC_ClockConfig+0x274>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e044      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_ClockConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d1ee      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2204      	movs	r2, #4
 80026d4:	4013      	ands	r3, r2
 80026d6:	d009      	beq.n	80026ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x27c>)
 80026de:	4013      	ands	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2208      	movs	r2, #8
 80026f2:	4013      	ands	r3, r2
 80026f4:	d00a      	beq.n	800270c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_RCC_ClockConfig+0x280>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	00da      	lsls	r2, r3, #3
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 8002708:	430a      	orrs	r2, r1
 800270a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800270c:	f000 f832 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002710:	0001      	movs	r1, r0
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_RCC_ClockConfig+0x278>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	220f      	movs	r2, #15
 800271a:	4013      	ands	r3, r2
 800271c:	4a12      	ldr	r2, [pc, #72]	; (8002768 <HAL_RCC_ClockConfig+0x284>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	000a      	movs	r2, r1
 8002722:	40da      	lsrs	r2, r3
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_ClockConfig+0x288>)
 8002726:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_RCC_ClockConfig+0x28c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	250b      	movs	r5, #11
 800272e:	197c      	adds	r4, r7, r5
 8002730:	0018      	movs	r0, r3
 8002732:	f7ff f839 	bl	80017a8 <HAL_InitTick>
 8002736:	0003      	movs	r3, r0
 8002738:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800273a:	197b      	adds	r3, r7, r5
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002742:	197b      	adds	r3, r7, r5
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	e000      	b.n	800274a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b004      	add	sp, #16
 8002750:	bdb0      	pop	{r4, r5, r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	40022000 	.word	0x40022000
 8002758:	00001388 	.word	0x00001388
 800275c:	40021000 	.word	0x40021000
 8002760:	fffff8ff 	.word	0xfffff8ff
 8002764:	ffffc7ff 	.word	0xffffc7ff
 8002768:	080039d0 	.word	0x080039d0
 800276c:	200001a0 	.word	0x200001a0
 8002770:	200001a4 	.word	0x200001a4

08002774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b08e      	sub	sp, #56	; 0x38
 8002778:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800277a:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <HAL_RCC_GetSysClockFreq+0x138>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002782:	230c      	movs	r3, #12
 8002784:	4013      	ands	r3, r2
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d014      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x40>
 800278a:	d900      	bls.n	800278e <HAL_RCC_GetSysClockFreq+0x1a>
 800278c:	e07b      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x112>
 800278e:	2b04      	cmp	r3, #4
 8002790:	d002      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x24>
 8002792:	2b08      	cmp	r3, #8
 8002794:	d00b      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x3a>
 8002796:	e076      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002798:	4b44      	ldr	r3, [pc, #272]	; (80028ac <HAL_RCC_GetSysClockFreq+0x138>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	4013      	ands	r3, r2
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80027a2:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80027a6:	e07c      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x140>)
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ac:	e079      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027ae:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x144>)
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027b2:	e076      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	0c9a      	lsrs	r2, r3, #18
 80027b8:	230f      	movs	r3, #15
 80027ba:	401a      	ands	r2, r3
 80027bc:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_RCC_GetSysClockFreq+0x148>)
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	0d9a      	lsrs	r2, r3, #22
 80027c6:	2303      	movs	r3, #3
 80027c8:	4013      	ands	r3, r2
 80027ca:	3301      	adds	r3, #1
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_RCC_GetSysClockFreq+0x138>)
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	025b      	lsls	r3, r3, #9
 80027d6:	4013      	ands	r3, r2
 80027d8:	d01a      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	4a35      	ldr	r2, [pc, #212]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x144>)
 80027e4:	2300      	movs	r3, #0
 80027e6:	69b8      	ldr	r0, [r7, #24]
 80027e8:	69f9      	ldr	r1, [r7, #28]
 80027ea:	f7fd fd43 	bl	8000274 <__aeabi_lmul>
 80027ee:	0002      	movs	r2, r0
 80027f0:	000b      	movs	r3, r1
 80027f2:	0010      	movs	r0, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f7fd fd17 	bl	8000234 <__aeabi_uldivmod>
 8002806:	0002      	movs	r2, r0
 8002808:	000b      	movs	r3, r1
 800280a:	0013      	movs	r3, r2
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
 800280e:	e037      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_RCC_GetSysClockFreq+0x138>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2210      	movs	r2, #16
 8002816:	4013      	ands	r3, r2
 8002818:	d01a      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002824:	2300      	movs	r3, #0
 8002826:	68b8      	ldr	r0, [r7, #8]
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	f7fd fd23 	bl	8000274 <__aeabi_lmul>
 800282e:	0002      	movs	r2, r0
 8002830:	000b      	movs	r3, r1
 8002832:	0010      	movs	r0, r2
 8002834:	0019      	movs	r1, r3
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f7fd fcf7 	bl	8000234 <__aeabi_uldivmod>
 8002846:	0002      	movs	r2, r0
 8002848:	000b      	movs	r3, r1
 800284a:	0013      	movs	r3, r2
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
 800284e:	e017      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	0018      	movs	r0, r3
 8002854:	2300      	movs	r3, #0
 8002856:	0019      	movs	r1, r3
 8002858:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x140>)
 800285a:	2300      	movs	r3, #0
 800285c:	f7fd fd0a 	bl	8000274 <__aeabi_lmul>
 8002860:	0002      	movs	r2, r0
 8002862:	000b      	movs	r3, r1
 8002864:	0010      	movs	r0, r2
 8002866:	0019      	movs	r1, r3
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	001c      	movs	r4, r3
 800286c:	2300      	movs	r3, #0
 800286e:	001d      	movs	r5, r3
 8002870:	0022      	movs	r2, r4
 8002872:	002b      	movs	r3, r5
 8002874:	f7fd fcde 	bl	8000234 <__aeabi_uldivmod>
 8002878:	0002      	movs	r2, r0
 800287a:	000b      	movs	r3, r1
 800287c:	0013      	movs	r3, r2
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002884:	e00d      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_GetSysClockFreq+0x138>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	0b5b      	lsrs	r3, r3, #13
 800288c:	2207      	movs	r2, #7
 800288e:	4013      	ands	r3, r2
 8002890:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	3301      	adds	r3, #1
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	0212      	lsls	r2, r2, #8
 800289a:	409a      	lsls	r2, r3
 800289c:	0013      	movs	r3, r2
 800289e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028a0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b00e      	add	sp, #56	; 0x38
 80028aa:	bdb0      	pop	{r4, r5, r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	003d0900 	.word	0x003d0900
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	080039e0 	.word	0x080039e0

080028c0 <__errno>:
 80028c0:	4b01      	ldr	r3, [pc, #4]	; (80028c8 <__errno+0x8>)
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	4770      	bx	lr
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	200001ac 	.word	0x200001ac

080028cc <__libc_init_array>:
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	2600      	movs	r6, #0
 80028d0:	4d0c      	ldr	r5, [pc, #48]	; (8002904 <__libc_init_array+0x38>)
 80028d2:	4c0d      	ldr	r4, [pc, #52]	; (8002908 <__libc_init_array+0x3c>)
 80028d4:	1b64      	subs	r4, r4, r5
 80028d6:	10a4      	asrs	r4, r4, #2
 80028d8:	42a6      	cmp	r6, r4
 80028da:	d109      	bne.n	80028f0 <__libc_init_array+0x24>
 80028dc:	2600      	movs	r6, #0
 80028de:	f001 f83b 	bl	8003958 <_init>
 80028e2:	4d0a      	ldr	r5, [pc, #40]	; (800290c <__libc_init_array+0x40>)
 80028e4:	4c0a      	ldr	r4, [pc, #40]	; (8002910 <__libc_init_array+0x44>)
 80028e6:	1b64      	subs	r4, r4, r5
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	42a6      	cmp	r6, r4
 80028ec:	d105      	bne.n	80028fa <__libc_init_array+0x2e>
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	00b3      	lsls	r3, r6, #2
 80028f2:	58eb      	ldr	r3, [r5, r3]
 80028f4:	4798      	blx	r3
 80028f6:	3601      	adds	r6, #1
 80028f8:	e7ee      	b.n	80028d8 <__libc_init_array+0xc>
 80028fa:	00b3      	lsls	r3, r6, #2
 80028fc:	58eb      	ldr	r3, [r5, r3]
 80028fe:	4798      	blx	r3
 8002900:	3601      	adds	r6, #1
 8002902:	e7f2      	b.n	80028ea <__libc_init_array+0x1e>
 8002904:	08003a8c 	.word	0x08003a8c
 8002908:	08003a8c 	.word	0x08003a8c
 800290c:	08003a8c 	.word	0x08003a8c
 8002910:	08003a90 	.word	0x08003a90

08002914 <memset>:
 8002914:	0003      	movs	r3, r0
 8002916:	1882      	adds	r2, r0, r2
 8002918:	4293      	cmp	r3, r2
 800291a:	d100      	bne.n	800291e <memset+0xa>
 800291c:	4770      	bx	lr
 800291e:	7019      	strb	r1, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	e7f9      	b.n	8002918 <memset+0x4>

08002924 <iprintf>:
 8002924:	b40f      	push	{r0, r1, r2, r3}
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <iprintf+0x30>)
 8002928:	b513      	push	{r0, r1, r4, lr}
 800292a:	681c      	ldr	r4, [r3, #0]
 800292c:	2c00      	cmp	r4, #0
 800292e:	d005      	beq.n	800293c <iprintf+0x18>
 8002930:	69a3      	ldr	r3, [r4, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <iprintf+0x18>
 8002936:	0020      	movs	r0, r4
 8002938:	f000 fa86 	bl	8002e48 <__sinit>
 800293c:	ab05      	add	r3, sp, #20
 800293e:	0020      	movs	r0, r4
 8002940:	9a04      	ldr	r2, [sp, #16]
 8002942:	68a1      	ldr	r1, [r4, #8]
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	f000 fc5f 	bl	8003208 <_vfiprintf_r>
 800294a:	bc16      	pop	{r1, r2, r4}
 800294c:	bc08      	pop	{r3}
 800294e:	b004      	add	sp, #16
 8002950:	4718      	bx	r3
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	200001ac 	.word	0x200001ac

08002958 <_puts_r>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	0005      	movs	r5, r0
 800295c:	000e      	movs	r6, r1
 800295e:	2800      	cmp	r0, #0
 8002960:	d004      	beq.n	800296c <_puts_r+0x14>
 8002962:	6983      	ldr	r3, [r0, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <_puts_r+0x14>
 8002968:	f000 fa6e 	bl	8002e48 <__sinit>
 800296c:	69ab      	ldr	r3, [r5, #24]
 800296e:	68ac      	ldr	r4, [r5, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <_puts_r+0x22>
 8002974:	0028      	movs	r0, r5
 8002976:	f000 fa67 	bl	8002e48 <__sinit>
 800297a:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <_puts_r+0xd8>)
 800297c:	429c      	cmp	r4, r3
 800297e:	d122      	bne.n	80029c6 <_puts_r+0x6e>
 8002980:	686c      	ldr	r4, [r5, #4]
 8002982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002984:	07db      	lsls	r3, r3, #31
 8002986:	d405      	bmi.n	8002994 <_puts_r+0x3c>
 8002988:	89a3      	ldrh	r3, [r4, #12]
 800298a:	059b      	lsls	r3, r3, #22
 800298c:	d402      	bmi.n	8002994 <_puts_r+0x3c>
 800298e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002990:	f000 fafb 	bl	8002f8a <__retarget_lock_acquire_recursive>
 8002994:	89a3      	ldrh	r3, [r4, #12]
 8002996:	071b      	lsls	r3, r3, #28
 8002998:	d502      	bpl.n	80029a0 <_puts_r+0x48>
 800299a:	6923      	ldr	r3, [r4, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d129      	bne.n	80029f4 <_puts_r+0x9c>
 80029a0:	0021      	movs	r1, r4
 80029a2:	0028      	movs	r0, r5
 80029a4:	f000 f8aa 	bl	8002afc <__swsetup_r>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d023      	beq.n	80029f4 <_puts_r+0x9c>
 80029ac:	2501      	movs	r5, #1
 80029ae:	426d      	negs	r5, r5
 80029b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029b2:	07db      	lsls	r3, r3, #31
 80029b4:	d405      	bmi.n	80029c2 <_puts_r+0x6a>
 80029b6:	89a3      	ldrh	r3, [r4, #12]
 80029b8:	059b      	lsls	r3, r3, #22
 80029ba:	d402      	bmi.n	80029c2 <_puts_r+0x6a>
 80029bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029be:	f000 fae5 	bl	8002f8c <__retarget_lock_release_recursive>
 80029c2:	0028      	movs	r0, r5
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <_puts_r+0xdc>)
 80029c8:	429c      	cmp	r4, r3
 80029ca:	d101      	bne.n	80029d0 <_puts_r+0x78>
 80029cc:	68ac      	ldr	r4, [r5, #8]
 80029ce:	e7d8      	b.n	8002982 <_puts_r+0x2a>
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <_puts_r+0xe0>)
 80029d2:	429c      	cmp	r4, r3
 80029d4:	d1d5      	bne.n	8002982 <_puts_r+0x2a>
 80029d6:	68ec      	ldr	r4, [r5, #12]
 80029d8:	e7d3      	b.n	8002982 <_puts_r+0x2a>
 80029da:	3601      	adds	r6, #1
 80029dc:	60a3      	str	r3, [r4, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da04      	bge.n	80029ec <_puts_r+0x94>
 80029e2:	69a2      	ldr	r2, [r4, #24]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dc16      	bgt.n	8002a16 <_puts_r+0xbe>
 80029e8:	290a      	cmp	r1, #10
 80029ea:	d014      	beq.n	8002a16 <_puts_r+0xbe>
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	6022      	str	r2, [r4, #0]
 80029f2:	7019      	strb	r1, [r3, #0]
 80029f4:	68a3      	ldr	r3, [r4, #8]
 80029f6:	7831      	ldrb	r1, [r6, #0]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	2900      	cmp	r1, #0
 80029fc:	d1ed      	bne.n	80029da <_puts_r+0x82>
 80029fe:	60a3      	str	r3, [r4, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da0f      	bge.n	8002a24 <_puts_r+0xcc>
 8002a04:	0028      	movs	r0, r5
 8002a06:	0022      	movs	r2, r4
 8002a08:	310a      	adds	r1, #10
 8002a0a:	f000 f821 	bl	8002a50 <__swbuf_r>
 8002a0e:	250a      	movs	r5, #10
 8002a10:	1c43      	adds	r3, r0, #1
 8002a12:	d1cd      	bne.n	80029b0 <_puts_r+0x58>
 8002a14:	e7ca      	b.n	80029ac <_puts_r+0x54>
 8002a16:	0022      	movs	r2, r4
 8002a18:	0028      	movs	r0, r5
 8002a1a:	f000 f819 	bl	8002a50 <__swbuf_r>
 8002a1e:	1c43      	adds	r3, r0, #1
 8002a20:	d1e8      	bne.n	80029f4 <_puts_r+0x9c>
 8002a22:	e7c3      	b.n	80029ac <_puts_r+0x54>
 8002a24:	250a      	movs	r5, #10
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	6022      	str	r2, [r4, #0]
 8002a2c:	701d      	strb	r5, [r3, #0]
 8002a2e:	e7bf      	b.n	80029b0 <_puts_r+0x58>
 8002a30:	08003a10 	.word	0x08003a10
 8002a34:	08003a30 	.word	0x08003a30
 8002a38:	080039f0 	.word	0x080039f0

08002a3c <puts>:
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <puts+0x10>)
 8002a40:	0001      	movs	r1, r0
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	f7ff ff88 	bl	8002958 <_puts_r>
 8002a48:	bd10      	pop	{r4, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	200001ac 	.word	0x200001ac

08002a50 <__swbuf_r>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	0005      	movs	r5, r0
 8002a54:	000e      	movs	r6, r1
 8002a56:	0014      	movs	r4, r2
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d004      	beq.n	8002a66 <__swbuf_r+0x16>
 8002a5c:	6983      	ldr	r3, [r0, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <__swbuf_r+0x16>
 8002a62:	f000 f9f1 	bl	8002e48 <__sinit>
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <__swbuf_r+0xa0>)
 8002a68:	429c      	cmp	r4, r3
 8002a6a:	d12e      	bne.n	8002aca <__swbuf_r+0x7a>
 8002a6c:	686c      	ldr	r4, [r5, #4]
 8002a6e:	69a3      	ldr	r3, [r4, #24]
 8002a70:	60a3      	str	r3, [r4, #8]
 8002a72:	89a3      	ldrh	r3, [r4, #12]
 8002a74:	071b      	lsls	r3, r3, #28
 8002a76:	d532      	bpl.n	8002ade <__swbuf_r+0x8e>
 8002a78:	6923      	ldr	r3, [r4, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d02f      	beq.n	8002ade <__swbuf_r+0x8e>
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	6922      	ldr	r2, [r4, #16]
 8002a82:	b2f7      	uxtb	r7, r6
 8002a84:	1a98      	subs	r0, r3, r2
 8002a86:	6963      	ldr	r3, [r4, #20]
 8002a88:	b2f6      	uxtb	r6, r6
 8002a8a:	4283      	cmp	r3, r0
 8002a8c:	dc05      	bgt.n	8002a9a <__swbuf_r+0x4a>
 8002a8e:	0021      	movs	r1, r4
 8002a90:	0028      	movs	r0, r5
 8002a92:	f000 f937 	bl	8002d04 <_fflush_r>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d127      	bne.n	8002aea <__swbuf_r+0x9a>
 8002a9a:	68a3      	ldr	r3, [r4, #8]
 8002a9c:	3001      	adds	r0, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	60a3      	str	r3, [r4, #8]
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	6022      	str	r2, [r4, #0]
 8002aa8:	701f      	strb	r7, [r3, #0]
 8002aaa:	6963      	ldr	r3, [r4, #20]
 8002aac:	4283      	cmp	r3, r0
 8002aae:	d004      	beq.n	8002aba <__swbuf_r+0x6a>
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	07db      	lsls	r3, r3, #31
 8002ab4:	d507      	bpl.n	8002ac6 <__swbuf_r+0x76>
 8002ab6:	2e0a      	cmp	r6, #10
 8002ab8:	d105      	bne.n	8002ac6 <__swbuf_r+0x76>
 8002aba:	0021      	movs	r1, r4
 8002abc:	0028      	movs	r0, r5
 8002abe:	f000 f921 	bl	8002d04 <_fflush_r>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d111      	bne.n	8002aea <__swbuf_r+0x9a>
 8002ac6:	0030      	movs	r0, r6
 8002ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <__swbuf_r+0xa4>)
 8002acc:	429c      	cmp	r4, r3
 8002ace:	d101      	bne.n	8002ad4 <__swbuf_r+0x84>
 8002ad0:	68ac      	ldr	r4, [r5, #8]
 8002ad2:	e7cc      	b.n	8002a6e <__swbuf_r+0x1e>
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <__swbuf_r+0xa8>)
 8002ad6:	429c      	cmp	r4, r3
 8002ad8:	d1c9      	bne.n	8002a6e <__swbuf_r+0x1e>
 8002ada:	68ec      	ldr	r4, [r5, #12]
 8002adc:	e7c7      	b.n	8002a6e <__swbuf_r+0x1e>
 8002ade:	0021      	movs	r1, r4
 8002ae0:	0028      	movs	r0, r5
 8002ae2:	f000 f80b 	bl	8002afc <__swsetup_r>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	d0c9      	beq.n	8002a7e <__swbuf_r+0x2e>
 8002aea:	2601      	movs	r6, #1
 8002aec:	4276      	negs	r6, r6
 8002aee:	e7ea      	b.n	8002ac6 <__swbuf_r+0x76>
 8002af0:	08003a10 	.word	0x08003a10
 8002af4:	08003a30 	.word	0x08003a30
 8002af8:	080039f0 	.word	0x080039f0

08002afc <__swsetup_r>:
 8002afc:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <__swsetup_r+0xe0>)
 8002afe:	b570      	push	{r4, r5, r6, lr}
 8002b00:	681d      	ldr	r5, [r3, #0]
 8002b02:	0006      	movs	r6, r0
 8002b04:	000c      	movs	r4, r1
 8002b06:	2d00      	cmp	r5, #0
 8002b08:	d005      	beq.n	8002b16 <__swsetup_r+0x1a>
 8002b0a:	69ab      	ldr	r3, [r5, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <__swsetup_r+0x1a>
 8002b10:	0028      	movs	r0, r5
 8002b12:	f000 f999 	bl	8002e48 <__sinit>
 8002b16:	4b32      	ldr	r3, [pc, #200]	; (8002be0 <__swsetup_r+0xe4>)
 8002b18:	429c      	cmp	r4, r3
 8002b1a:	d10f      	bne.n	8002b3c <__swsetup_r+0x40>
 8002b1c:	686c      	ldr	r4, [r5, #4]
 8002b1e:	230c      	movs	r3, #12
 8002b20:	5ee2      	ldrsh	r2, [r4, r3]
 8002b22:	b293      	uxth	r3, r2
 8002b24:	0711      	lsls	r1, r2, #28
 8002b26:	d42d      	bmi.n	8002b84 <__swsetup_r+0x88>
 8002b28:	06d9      	lsls	r1, r3, #27
 8002b2a:	d411      	bmi.n	8002b50 <__swsetup_r+0x54>
 8002b2c:	2309      	movs	r3, #9
 8002b2e:	2001      	movs	r0, #1
 8002b30:	6033      	str	r3, [r6, #0]
 8002b32:	3337      	adds	r3, #55	; 0x37
 8002b34:	4313      	orrs	r3, r2
 8002b36:	81a3      	strh	r3, [r4, #12]
 8002b38:	4240      	negs	r0, r0
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <__swsetup_r+0xe8>)
 8002b3e:	429c      	cmp	r4, r3
 8002b40:	d101      	bne.n	8002b46 <__swsetup_r+0x4a>
 8002b42:	68ac      	ldr	r4, [r5, #8]
 8002b44:	e7eb      	b.n	8002b1e <__swsetup_r+0x22>
 8002b46:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <__swsetup_r+0xec>)
 8002b48:	429c      	cmp	r4, r3
 8002b4a:	d1e8      	bne.n	8002b1e <__swsetup_r+0x22>
 8002b4c:	68ec      	ldr	r4, [r5, #12]
 8002b4e:	e7e6      	b.n	8002b1e <__swsetup_r+0x22>
 8002b50:	075b      	lsls	r3, r3, #29
 8002b52:	d513      	bpl.n	8002b7c <__swsetup_r+0x80>
 8002b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b56:	2900      	cmp	r1, #0
 8002b58:	d008      	beq.n	8002b6c <__swsetup_r+0x70>
 8002b5a:	0023      	movs	r3, r4
 8002b5c:	3344      	adds	r3, #68	; 0x44
 8002b5e:	4299      	cmp	r1, r3
 8002b60:	d002      	beq.n	8002b68 <__swsetup_r+0x6c>
 8002b62:	0030      	movs	r0, r6
 8002b64:	f000 fa80 	bl	8003068 <_free_r>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	6363      	str	r3, [r4, #52]	; 0x34
 8002b6c:	2224      	movs	r2, #36	; 0x24
 8002b6e:	89a3      	ldrh	r3, [r4, #12]
 8002b70:	4393      	bics	r3, r2
 8002b72:	81a3      	strh	r3, [r4, #12]
 8002b74:	2300      	movs	r3, #0
 8002b76:	6063      	str	r3, [r4, #4]
 8002b78:	6923      	ldr	r3, [r4, #16]
 8002b7a:	6023      	str	r3, [r4, #0]
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	89a2      	ldrh	r2, [r4, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	81a3      	strh	r3, [r4, #12]
 8002b84:	6923      	ldr	r3, [r4, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <__swsetup_r+0xa6>
 8002b8a:	21a0      	movs	r1, #160	; 0xa0
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	89a3      	ldrh	r3, [r4, #12]
 8002b90:	0089      	lsls	r1, r1, #2
 8002b92:	0092      	lsls	r2, r2, #2
 8002b94:	400b      	ands	r3, r1
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <__swsetup_r+0xa6>
 8002b9a:	0021      	movs	r1, r4
 8002b9c:	0030      	movs	r0, r6
 8002b9e:	f000 fa1f 	bl	8002fe0 <__smakebuf_r>
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	5ea3      	ldrsh	r3, [r4, r2]
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	001a      	movs	r2, r3
 8002baa:	b299      	uxth	r1, r3
 8002bac:	4002      	ands	r2, r0
 8002bae:	4203      	tst	r3, r0
 8002bb0:	d00f      	beq.n	8002bd2 <__swsetup_r+0xd6>
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60a2      	str	r2, [r4, #8]
 8002bb6:	6962      	ldr	r2, [r4, #20]
 8002bb8:	4252      	negs	r2, r2
 8002bba:	61a2      	str	r2, [r4, #24]
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	6922      	ldr	r2, [r4, #16]
 8002bc0:	4282      	cmp	r2, r0
 8002bc2:	d1ba      	bne.n	8002b3a <__swsetup_r+0x3e>
 8002bc4:	060a      	lsls	r2, r1, #24
 8002bc6:	d5b8      	bpl.n	8002b3a <__swsetup_r+0x3e>
 8002bc8:	2240      	movs	r2, #64	; 0x40
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	81a3      	strh	r3, [r4, #12]
 8002bce:	3801      	subs	r0, #1
 8002bd0:	e7b3      	b.n	8002b3a <__swsetup_r+0x3e>
 8002bd2:	0788      	lsls	r0, r1, #30
 8002bd4:	d400      	bmi.n	8002bd8 <__swsetup_r+0xdc>
 8002bd6:	6962      	ldr	r2, [r4, #20]
 8002bd8:	60a2      	str	r2, [r4, #8]
 8002bda:	e7ef      	b.n	8002bbc <__swsetup_r+0xc0>
 8002bdc:	200001ac 	.word	0x200001ac
 8002be0:	08003a10 	.word	0x08003a10
 8002be4:	08003a30 	.word	0x08003a30
 8002be8:	080039f0 	.word	0x080039f0

08002bec <__sflush_r>:
 8002bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bee:	898b      	ldrh	r3, [r1, #12]
 8002bf0:	0005      	movs	r5, r0
 8002bf2:	000c      	movs	r4, r1
 8002bf4:	071a      	lsls	r2, r3, #28
 8002bf6:	d45f      	bmi.n	8002cb8 <__sflush_r+0xcc>
 8002bf8:	684a      	ldr	r2, [r1, #4]
 8002bfa:	2a00      	cmp	r2, #0
 8002bfc:	dc04      	bgt.n	8002c08 <__sflush_r+0x1c>
 8002bfe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	dc01      	bgt.n	8002c08 <__sflush_r+0x1c>
 8002c04:	2000      	movs	r0, #0
 8002c06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c0a:	2f00      	cmp	r7, #0
 8002c0c:	d0fa      	beq.n	8002c04 <__sflush_r+0x18>
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	682e      	ldr	r6, [r5, #0]
 8002c14:	602a      	str	r2, [r5, #0]
 8002c16:	001a      	movs	r2, r3
 8002c18:	0149      	lsls	r1, r1, #5
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	420b      	tst	r3, r1
 8002c1e:	d034      	beq.n	8002c8a <__sflush_r+0x9e>
 8002c20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c22:	89a3      	ldrh	r3, [r4, #12]
 8002c24:	075b      	lsls	r3, r3, #29
 8002c26:	d506      	bpl.n	8002c36 <__sflush_r+0x4a>
 8002c28:	6863      	ldr	r3, [r4, #4]
 8002c2a:	1ac0      	subs	r0, r0, r3
 8002c2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <__sflush_r+0x4a>
 8002c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c34:	1ac0      	subs	r0, r0, r3
 8002c36:	0002      	movs	r2, r0
 8002c38:	6a21      	ldr	r1, [r4, #32]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	0028      	movs	r0, r5
 8002c3e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c40:	47b8      	blx	r7
 8002c42:	89a1      	ldrh	r1, [r4, #12]
 8002c44:	1c43      	adds	r3, r0, #1
 8002c46:	d106      	bne.n	8002c56 <__sflush_r+0x6a>
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	2b1d      	cmp	r3, #29
 8002c4c:	d831      	bhi.n	8002cb2 <__sflush_r+0xc6>
 8002c4e:	4a2c      	ldr	r2, [pc, #176]	; (8002d00 <__sflush_r+0x114>)
 8002c50:	40da      	lsrs	r2, r3
 8002c52:	07d3      	lsls	r3, r2, #31
 8002c54:	d52d      	bpl.n	8002cb2 <__sflush_r+0xc6>
 8002c56:	2300      	movs	r3, #0
 8002c58:	6063      	str	r3, [r4, #4]
 8002c5a:	6923      	ldr	r3, [r4, #16]
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	04cb      	lsls	r3, r1, #19
 8002c60:	d505      	bpl.n	8002c6e <__sflush_r+0x82>
 8002c62:	1c43      	adds	r3, r0, #1
 8002c64:	d102      	bne.n	8002c6c <__sflush_r+0x80>
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d100      	bne.n	8002c6e <__sflush_r+0x82>
 8002c6c:	6560      	str	r0, [r4, #84]	; 0x54
 8002c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c70:	602e      	str	r6, [r5, #0]
 8002c72:	2900      	cmp	r1, #0
 8002c74:	d0c6      	beq.n	8002c04 <__sflush_r+0x18>
 8002c76:	0023      	movs	r3, r4
 8002c78:	3344      	adds	r3, #68	; 0x44
 8002c7a:	4299      	cmp	r1, r3
 8002c7c:	d002      	beq.n	8002c84 <__sflush_r+0x98>
 8002c7e:	0028      	movs	r0, r5
 8002c80:	f000 f9f2 	bl	8003068 <_free_r>
 8002c84:	2000      	movs	r0, #0
 8002c86:	6360      	str	r0, [r4, #52]	; 0x34
 8002c88:	e7bd      	b.n	8002c06 <__sflush_r+0x1a>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	0028      	movs	r0, r5
 8002c8e:	6a21      	ldr	r1, [r4, #32]
 8002c90:	47b8      	blx	r7
 8002c92:	1c43      	adds	r3, r0, #1
 8002c94:	d1c5      	bne.n	8002c22 <__sflush_r+0x36>
 8002c96:	682b      	ldr	r3, [r5, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0c2      	beq.n	8002c22 <__sflush_r+0x36>
 8002c9c:	2b1d      	cmp	r3, #29
 8002c9e:	d001      	beq.n	8002ca4 <__sflush_r+0xb8>
 8002ca0:	2b16      	cmp	r3, #22
 8002ca2:	d101      	bne.n	8002ca8 <__sflush_r+0xbc>
 8002ca4:	602e      	str	r6, [r5, #0]
 8002ca6:	e7ad      	b.n	8002c04 <__sflush_r+0x18>
 8002ca8:	2340      	movs	r3, #64	; 0x40
 8002caa:	89a2      	ldrh	r2, [r4, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	81a3      	strh	r3, [r4, #12]
 8002cb0:	e7a9      	b.n	8002c06 <__sflush_r+0x1a>
 8002cb2:	2340      	movs	r3, #64	; 0x40
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	e7fa      	b.n	8002cae <__sflush_r+0xc2>
 8002cb8:	690f      	ldr	r7, [r1, #16]
 8002cba:	2f00      	cmp	r7, #0
 8002cbc:	d0a2      	beq.n	8002c04 <__sflush_r+0x18>
 8002cbe:	680a      	ldr	r2, [r1, #0]
 8002cc0:	600f      	str	r7, [r1, #0]
 8002cc2:	1bd2      	subs	r2, r2, r7
 8002cc4:	9201      	str	r2, [sp, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	079b      	lsls	r3, r3, #30
 8002cca:	d100      	bne.n	8002cce <__sflush_r+0xe2>
 8002ccc:	694a      	ldr	r2, [r1, #20]
 8002cce:	60a2      	str	r2, [r4, #8]
 8002cd0:	9b01      	ldr	r3, [sp, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	dc00      	bgt.n	8002cd8 <__sflush_r+0xec>
 8002cd6:	e795      	b.n	8002c04 <__sflush_r+0x18>
 8002cd8:	003a      	movs	r2, r7
 8002cda:	0028      	movs	r0, r5
 8002cdc:	9b01      	ldr	r3, [sp, #4]
 8002cde:	6a21      	ldr	r1, [r4, #32]
 8002ce0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ce2:	47b0      	blx	r6
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	dc06      	bgt.n	8002cf6 <__sflush_r+0x10a>
 8002ce8:	2340      	movs	r3, #64	; 0x40
 8002cea:	2001      	movs	r0, #1
 8002cec:	89a2      	ldrh	r2, [r4, #12]
 8002cee:	4240      	negs	r0, r0
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	81a3      	strh	r3, [r4, #12]
 8002cf4:	e787      	b.n	8002c06 <__sflush_r+0x1a>
 8002cf6:	9b01      	ldr	r3, [sp, #4]
 8002cf8:	183f      	adds	r7, r7, r0
 8002cfa:	1a1b      	subs	r3, r3, r0
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	e7e7      	b.n	8002cd0 <__sflush_r+0xe4>
 8002d00:	20400001 	.word	0x20400001

08002d04 <_fflush_r>:
 8002d04:	690b      	ldr	r3, [r1, #16]
 8002d06:	b570      	push	{r4, r5, r6, lr}
 8002d08:	0005      	movs	r5, r0
 8002d0a:	000c      	movs	r4, r1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <_fflush_r+0x12>
 8002d10:	2500      	movs	r5, #0
 8002d12:	0028      	movs	r0, r5
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d004      	beq.n	8002d24 <_fflush_r+0x20>
 8002d1a:	6983      	ldr	r3, [r0, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <_fflush_r+0x20>
 8002d20:	f000 f892 	bl	8002e48 <__sinit>
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <_fflush_r+0x74>)
 8002d26:	429c      	cmp	r4, r3
 8002d28:	d11b      	bne.n	8002d62 <_fflush_r+0x5e>
 8002d2a:	686c      	ldr	r4, [r5, #4]
 8002d2c:	220c      	movs	r2, #12
 8002d2e:	5ea3      	ldrsh	r3, [r4, r2]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ed      	beq.n	8002d10 <_fflush_r+0xc>
 8002d34:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d36:	07d2      	lsls	r2, r2, #31
 8002d38:	d404      	bmi.n	8002d44 <_fflush_r+0x40>
 8002d3a:	059b      	lsls	r3, r3, #22
 8002d3c:	d402      	bmi.n	8002d44 <_fflush_r+0x40>
 8002d3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d40:	f000 f923 	bl	8002f8a <__retarget_lock_acquire_recursive>
 8002d44:	0028      	movs	r0, r5
 8002d46:	0021      	movs	r1, r4
 8002d48:	f7ff ff50 	bl	8002bec <__sflush_r>
 8002d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d4e:	0005      	movs	r5, r0
 8002d50:	07db      	lsls	r3, r3, #31
 8002d52:	d4de      	bmi.n	8002d12 <_fflush_r+0xe>
 8002d54:	89a3      	ldrh	r3, [r4, #12]
 8002d56:	059b      	lsls	r3, r3, #22
 8002d58:	d4db      	bmi.n	8002d12 <_fflush_r+0xe>
 8002d5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d5c:	f000 f916 	bl	8002f8c <__retarget_lock_release_recursive>
 8002d60:	e7d7      	b.n	8002d12 <_fflush_r+0xe>
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <_fflush_r+0x78>)
 8002d64:	429c      	cmp	r4, r3
 8002d66:	d101      	bne.n	8002d6c <_fflush_r+0x68>
 8002d68:	68ac      	ldr	r4, [r5, #8]
 8002d6a:	e7df      	b.n	8002d2c <_fflush_r+0x28>
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <_fflush_r+0x7c>)
 8002d6e:	429c      	cmp	r4, r3
 8002d70:	d1dc      	bne.n	8002d2c <_fflush_r+0x28>
 8002d72:	68ec      	ldr	r4, [r5, #12]
 8002d74:	e7da      	b.n	8002d2c <_fflush_r+0x28>
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	08003a10 	.word	0x08003a10
 8002d7c:	08003a30 	.word	0x08003a30
 8002d80:	080039f0 	.word	0x080039f0

08002d84 <std>:
 8002d84:	2300      	movs	r3, #0
 8002d86:	b510      	push	{r4, lr}
 8002d88:	0004      	movs	r4, r0
 8002d8a:	6003      	str	r3, [r0, #0]
 8002d8c:	6043      	str	r3, [r0, #4]
 8002d8e:	6083      	str	r3, [r0, #8]
 8002d90:	8181      	strh	r1, [r0, #12]
 8002d92:	6643      	str	r3, [r0, #100]	; 0x64
 8002d94:	0019      	movs	r1, r3
 8002d96:	81c2      	strh	r2, [r0, #14]
 8002d98:	6103      	str	r3, [r0, #16]
 8002d9a:	6143      	str	r3, [r0, #20]
 8002d9c:	6183      	str	r3, [r0, #24]
 8002d9e:	2208      	movs	r2, #8
 8002da0:	305c      	adds	r0, #92	; 0x5c
 8002da2:	f7ff fdb7 	bl	8002914 <memset>
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <std+0x38>)
 8002da8:	6263      	str	r3, [r4, #36]	; 0x24
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <std+0x3c>)
 8002dac:	6224      	str	r4, [r4, #32]
 8002dae:	62a3      	str	r3, [r4, #40]	; 0x28
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <std+0x40>)
 8002db2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <std+0x44>)
 8002db6:	6323      	str	r3, [r4, #48]	; 0x30
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	080037a5 	.word	0x080037a5
 8002dc0:	080037cd 	.word	0x080037cd
 8002dc4:	08003805 	.word	0x08003805
 8002dc8:	08003831 	.word	0x08003831

08002dcc <_cleanup_r>:
 8002dcc:	b510      	push	{r4, lr}
 8002dce:	4902      	ldr	r1, [pc, #8]	; (8002dd8 <_cleanup_r+0xc>)
 8002dd0:	f000 f8ba 	bl	8002f48 <_fwalk_reent>
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	08002d05 	.word	0x08002d05

08002ddc <__sfmoreglue>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	2568      	movs	r5, #104	; 0x68
 8002de0:	1e4a      	subs	r2, r1, #1
 8002de2:	4355      	muls	r5, r2
 8002de4:	000e      	movs	r6, r1
 8002de6:	0029      	movs	r1, r5
 8002de8:	3174      	adds	r1, #116	; 0x74
 8002dea:	f000 f987 	bl	80030fc <_malloc_r>
 8002dee:	1e04      	subs	r4, r0, #0
 8002df0:	d008      	beq.n	8002e04 <__sfmoreglue+0x28>
 8002df2:	2100      	movs	r1, #0
 8002df4:	002a      	movs	r2, r5
 8002df6:	6001      	str	r1, [r0, #0]
 8002df8:	6046      	str	r6, [r0, #4]
 8002dfa:	300c      	adds	r0, #12
 8002dfc:	60a0      	str	r0, [r4, #8]
 8002dfe:	3268      	adds	r2, #104	; 0x68
 8002e00:	f7ff fd88 	bl	8002914 <memset>
 8002e04:	0020      	movs	r0, r4
 8002e06:	bd70      	pop	{r4, r5, r6, pc}

08002e08 <__sfp_lock_acquire>:
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	4802      	ldr	r0, [pc, #8]	; (8002e14 <__sfp_lock_acquire+0xc>)
 8002e0c:	f000 f8bd 	bl	8002f8a <__retarget_lock_acquire_recursive>
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	20000278 	.word	0x20000278

08002e18 <__sfp_lock_release>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	4802      	ldr	r0, [pc, #8]	; (8002e24 <__sfp_lock_release+0xc>)
 8002e1c:	f000 f8b6 	bl	8002f8c <__retarget_lock_release_recursive>
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	20000278 	.word	0x20000278

08002e28 <__sinit_lock_acquire>:
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	4802      	ldr	r0, [pc, #8]	; (8002e34 <__sinit_lock_acquire+0xc>)
 8002e2c:	f000 f8ad 	bl	8002f8a <__retarget_lock_acquire_recursive>
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	20000273 	.word	0x20000273

08002e38 <__sinit_lock_release>:
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	4802      	ldr	r0, [pc, #8]	; (8002e44 <__sinit_lock_release+0xc>)
 8002e3c:	f000 f8a6 	bl	8002f8c <__retarget_lock_release_recursive>
 8002e40:	bd10      	pop	{r4, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	20000273 	.word	0x20000273

08002e48 <__sinit>:
 8002e48:	b513      	push	{r0, r1, r4, lr}
 8002e4a:	0004      	movs	r4, r0
 8002e4c:	f7ff ffec 	bl	8002e28 <__sinit_lock_acquire>
 8002e50:	69a3      	ldr	r3, [r4, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <__sinit+0x14>
 8002e56:	f7ff ffef 	bl	8002e38 <__sinit_lock_release>
 8002e5a:	bd13      	pop	{r0, r1, r4, pc}
 8002e5c:	64a3      	str	r3, [r4, #72]	; 0x48
 8002e5e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002e60:	6523      	str	r3, [r4, #80]	; 0x50
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <__sinit+0x68>)
 8002e64:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <__sinit+0x6c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	42a3      	cmp	r3, r4
 8002e6e:	d101      	bne.n	8002e74 <__sinit+0x2c>
 8002e70:	2301      	movs	r3, #1
 8002e72:	61a3      	str	r3, [r4, #24]
 8002e74:	0020      	movs	r0, r4
 8002e76:	f000 f81f 	bl	8002eb8 <__sfp>
 8002e7a:	6060      	str	r0, [r4, #4]
 8002e7c:	0020      	movs	r0, r4
 8002e7e:	f000 f81b 	bl	8002eb8 <__sfp>
 8002e82:	60a0      	str	r0, [r4, #8]
 8002e84:	0020      	movs	r0, r4
 8002e86:	f000 f817 	bl	8002eb8 <__sfp>
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	60e0      	str	r0, [r4, #12]
 8002e90:	6860      	ldr	r0, [r4, #4]
 8002e92:	f7ff ff77 	bl	8002d84 <std>
 8002e96:	2201      	movs	r2, #1
 8002e98:	2109      	movs	r1, #9
 8002e9a:	68a0      	ldr	r0, [r4, #8]
 8002e9c:	f7ff ff72 	bl	8002d84 <std>
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	2112      	movs	r1, #18
 8002ea4:	68e0      	ldr	r0, [r4, #12]
 8002ea6:	f7ff ff6d 	bl	8002d84 <std>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61a3      	str	r3, [r4, #24]
 8002eae:	e7d2      	b.n	8002e56 <__sinit+0xe>
 8002eb0:	080039ec 	.word	0x080039ec
 8002eb4:	08002dcd 	.word	0x08002dcd

08002eb8 <__sfp>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	0007      	movs	r7, r0
 8002ebc:	f7ff ffa4 	bl	8002e08 <__sfp_lock_acquire>
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <__sfp+0x88>)
 8002ec2:	681e      	ldr	r6, [r3, #0]
 8002ec4:	69b3      	ldr	r3, [r6, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <__sfp+0x18>
 8002eca:	0030      	movs	r0, r6
 8002ecc:	f7ff ffbc 	bl	8002e48 <__sinit>
 8002ed0:	3648      	adds	r6, #72	; 0x48
 8002ed2:	68b4      	ldr	r4, [r6, #8]
 8002ed4:	6873      	ldr	r3, [r6, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	d504      	bpl.n	8002ee4 <__sfp+0x2c>
 8002eda:	6833      	ldr	r3, [r6, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d022      	beq.n	8002f26 <__sfp+0x6e>
 8002ee0:	6836      	ldr	r6, [r6, #0]
 8002ee2:	e7f6      	b.n	8002ed2 <__sfp+0x1a>
 8002ee4:	220c      	movs	r2, #12
 8002ee6:	5ea5      	ldrsh	r5, [r4, r2]
 8002ee8:	2d00      	cmp	r5, #0
 8002eea:	d11a      	bne.n	8002f22 <__sfp+0x6a>
 8002eec:	0020      	movs	r0, r4
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <__sfp+0x8c>)
 8002ef0:	3058      	adds	r0, #88	; 0x58
 8002ef2:	60e3      	str	r3, [r4, #12]
 8002ef4:	6665      	str	r5, [r4, #100]	; 0x64
 8002ef6:	f000 f847 	bl	8002f88 <__retarget_lock_init_recursive>
 8002efa:	f7ff ff8d 	bl	8002e18 <__sfp_lock_release>
 8002efe:	0020      	movs	r0, r4
 8002f00:	2208      	movs	r2, #8
 8002f02:	0029      	movs	r1, r5
 8002f04:	6025      	str	r5, [r4, #0]
 8002f06:	60a5      	str	r5, [r4, #8]
 8002f08:	6065      	str	r5, [r4, #4]
 8002f0a:	6125      	str	r5, [r4, #16]
 8002f0c:	6165      	str	r5, [r4, #20]
 8002f0e:	61a5      	str	r5, [r4, #24]
 8002f10:	305c      	adds	r0, #92	; 0x5c
 8002f12:	f7ff fcff 	bl	8002914 <memset>
 8002f16:	6365      	str	r5, [r4, #52]	; 0x34
 8002f18:	63a5      	str	r5, [r4, #56]	; 0x38
 8002f1a:	64a5      	str	r5, [r4, #72]	; 0x48
 8002f1c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002f1e:	0020      	movs	r0, r4
 8002f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f22:	3468      	adds	r4, #104	; 0x68
 8002f24:	e7d7      	b.n	8002ed6 <__sfp+0x1e>
 8002f26:	2104      	movs	r1, #4
 8002f28:	0038      	movs	r0, r7
 8002f2a:	f7ff ff57 	bl	8002ddc <__sfmoreglue>
 8002f2e:	1e04      	subs	r4, r0, #0
 8002f30:	6030      	str	r0, [r6, #0]
 8002f32:	d1d5      	bne.n	8002ee0 <__sfp+0x28>
 8002f34:	f7ff ff70 	bl	8002e18 <__sfp_lock_release>
 8002f38:	230c      	movs	r3, #12
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	e7ef      	b.n	8002f1e <__sfp+0x66>
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	080039ec 	.word	0x080039ec
 8002f44:	ffff0001 	.word	0xffff0001

08002f48 <_fwalk_reent>:
 8002f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f4a:	0004      	movs	r4, r0
 8002f4c:	0006      	movs	r6, r0
 8002f4e:	2700      	movs	r7, #0
 8002f50:	9101      	str	r1, [sp, #4]
 8002f52:	3448      	adds	r4, #72	; 0x48
 8002f54:	6863      	ldr	r3, [r4, #4]
 8002f56:	68a5      	ldr	r5, [r4, #8]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	9b00      	ldr	r3, [sp, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	d504      	bpl.n	8002f6c <_fwalk_reent+0x24>
 8002f62:	6824      	ldr	r4, [r4, #0]
 8002f64:	2c00      	cmp	r4, #0
 8002f66:	d1f5      	bne.n	8002f54 <_fwalk_reent+0xc>
 8002f68:	0038      	movs	r0, r7
 8002f6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f6c:	89ab      	ldrh	r3, [r5, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d908      	bls.n	8002f84 <_fwalk_reent+0x3c>
 8002f72:	220e      	movs	r2, #14
 8002f74:	5eab      	ldrsh	r3, [r5, r2]
 8002f76:	3301      	adds	r3, #1
 8002f78:	d004      	beq.n	8002f84 <_fwalk_reent+0x3c>
 8002f7a:	0029      	movs	r1, r5
 8002f7c:	0030      	movs	r0, r6
 8002f7e:	9b01      	ldr	r3, [sp, #4]
 8002f80:	4798      	blx	r3
 8002f82:	4307      	orrs	r7, r0
 8002f84:	3568      	adds	r5, #104	; 0x68
 8002f86:	e7e8      	b.n	8002f5a <_fwalk_reent+0x12>

08002f88 <__retarget_lock_init_recursive>:
 8002f88:	4770      	bx	lr

08002f8a <__retarget_lock_acquire_recursive>:
 8002f8a:	4770      	bx	lr

08002f8c <__retarget_lock_release_recursive>:
 8002f8c:	4770      	bx	lr
	...

08002f90 <__swhatbuf_r>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	000e      	movs	r6, r1
 8002f94:	001d      	movs	r5, r3
 8002f96:	230e      	movs	r3, #14
 8002f98:	5ec9      	ldrsh	r1, [r1, r3]
 8002f9a:	0014      	movs	r4, r2
 8002f9c:	b096      	sub	sp, #88	; 0x58
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	da07      	bge.n	8002fb2 <__swhatbuf_r+0x22>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	602b      	str	r3, [r5, #0]
 8002fa6:	89b3      	ldrh	r3, [r6, #12]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	d411      	bmi.n	8002fd0 <__swhatbuf_r+0x40>
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	e00f      	b.n	8002fd2 <__swhatbuf_r+0x42>
 8002fb2:	466a      	mov	r2, sp
 8002fb4:	f000 fc68 	bl	8003888 <_fstat_r>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	dbf2      	blt.n	8002fa2 <__swhatbuf_r+0x12>
 8002fbc:	23f0      	movs	r3, #240	; 0xf0
 8002fbe:	9901      	ldr	r1, [sp, #4]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	4019      	ands	r1, r3
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <__swhatbuf_r+0x4c>)
 8002fc6:	18c9      	adds	r1, r1, r3
 8002fc8:	424b      	negs	r3, r1
 8002fca:	4159      	adcs	r1, r3
 8002fcc:	6029      	str	r1, [r5, #0]
 8002fce:	e7ed      	b.n	8002fac <__swhatbuf_r+0x1c>
 8002fd0:	2340      	movs	r3, #64	; 0x40
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	b016      	add	sp, #88	; 0x58
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	ffffe000 	.word	0xffffe000

08002fe0 <__smakebuf_r>:
 8002fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fe2:	2602      	movs	r6, #2
 8002fe4:	898b      	ldrh	r3, [r1, #12]
 8002fe6:	0005      	movs	r5, r0
 8002fe8:	000c      	movs	r4, r1
 8002fea:	4233      	tst	r3, r6
 8002fec:	d006      	beq.n	8002ffc <__smakebuf_r+0x1c>
 8002fee:	0023      	movs	r3, r4
 8002ff0:	3347      	adds	r3, #71	; 0x47
 8002ff2:	6023      	str	r3, [r4, #0]
 8002ff4:	6123      	str	r3, [r4, #16]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	6163      	str	r3, [r4, #20]
 8002ffa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002ffc:	466a      	mov	r2, sp
 8002ffe:	ab01      	add	r3, sp, #4
 8003000:	f7ff ffc6 	bl	8002f90 <__swhatbuf_r>
 8003004:	9900      	ldr	r1, [sp, #0]
 8003006:	0007      	movs	r7, r0
 8003008:	0028      	movs	r0, r5
 800300a:	f000 f877 	bl	80030fc <_malloc_r>
 800300e:	2800      	cmp	r0, #0
 8003010:	d108      	bne.n	8003024 <__smakebuf_r+0x44>
 8003012:	220c      	movs	r2, #12
 8003014:	5ea3      	ldrsh	r3, [r4, r2]
 8003016:	059a      	lsls	r2, r3, #22
 8003018:	d4ef      	bmi.n	8002ffa <__smakebuf_r+0x1a>
 800301a:	2203      	movs	r2, #3
 800301c:	4393      	bics	r3, r2
 800301e:	431e      	orrs	r6, r3
 8003020:	81a6      	strh	r6, [r4, #12]
 8003022:	e7e4      	b.n	8002fee <__smakebuf_r+0xe>
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <__smakebuf_r+0x84>)
 8003026:	62ab      	str	r3, [r5, #40]	; 0x28
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	89a2      	ldrh	r2, [r4, #12]
 800302c:	6020      	str	r0, [r4, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	9b00      	ldr	r3, [sp, #0]
 8003034:	6120      	str	r0, [r4, #16]
 8003036:	6163      	str	r3, [r4, #20]
 8003038:	9b01      	ldr	r3, [sp, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00d      	beq.n	800305a <__smakebuf_r+0x7a>
 800303e:	0028      	movs	r0, r5
 8003040:	230e      	movs	r3, #14
 8003042:	5ee1      	ldrsh	r1, [r4, r3]
 8003044:	f000 fc32 	bl	80038ac <_isatty_r>
 8003048:	2800      	cmp	r0, #0
 800304a:	d006      	beq.n	800305a <__smakebuf_r+0x7a>
 800304c:	2203      	movs	r2, #3
 800304e:	89a3      	ldrh	r3, [r4, #12]
 8003050:	4393      	bics	r3, r2
 8003052:	001a      	movs	r2, r3
 8003054:	2301      	movs	r3, #1
 8003056:	4313      	orrs	r3, r2
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	89a0      	ldrh	r0, [r4, #12]
 800305c:	4307      	orrs	r7, r0
 800305e:	81a7      	strh	r7, [r4, #12]
 8003060:	e7cb      	b.n	8002ffa <__smakebuf_r+0x1a>
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	08002dcd 	.word	0x08002dcd

08003068 <_free_r>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	0005      	movs	r5, r0
 800306c:	2900      	cmp	r1, #0
 800306e:	d010      	beq.n	8003092 <_free_r+0x2a>
 8003070:	1f0c      	subs	r4, r1, #4
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	da00      	bge.n	800307a <_free_r+0x12>
 8003078:	18e4      	adds	r4, r4, r3
 800307a:	0028      	movs	r0, r5
 800307c:	f000 fc48 	bl	8003910 <__malloc_lock>
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <_free_r+0x90>)
 8003082:	6813      	ldr	r3, [r2, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <_free_r+0x2c>
 8003088:	6063      	str	r3, [r4, #4]
 800308a:	6014      	str	r4, [r2, #0]
 800308c:	0028      	movs	r0, r5
 800308e:	f000 fc47 	bl	8003920 <__malloc_unlock>
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	42a3      	cmp	r3, r4
 8003096:	d908      	bls.n	80030aa <_free_r+0x42>
 8003098:	6821      	ldr	r1, [r4, #0]
 800309a:	1860      	adds	r0, r4, r1
 800309c:	4283      	cmp	r3, r0
 800309e:	d1f3      	bne.n	8003088 <_free_r+0x20>
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	1841      	adds	r1, r0, r1
 80030a6:	6021      	str	r1, [r4, #0]
 80030a8:	e7ee      	b.n	8003088 <_free_r+0x20>
 80030aa:	001a      	movs	r2, r3
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <_free_r+0x4e>
 80030b2:	42a3      	cmp	r3, r4
 80030b4:	d9f9      	bls.n	80030aa <_free_r+0x42>
 80030b6:	6811      	ldr	r1, [r2, #0]
 80030b8:	1850      	adds	r0, r2, r1
 80030ba:	42a0      	cmp	r0, r4
 80030bc:	d10b      	bne.n	80030d6 <_free_r+0x6e>
 80030be:	6820      	ldr	r0, [r4, #0]
 80030c0:	1809      	adds	r1, r1, r0
 80030c2:	1850      	adds	r0, r2, r1
 80030c4:	6011      	str	r1, [r2, #0]
 80030c6:	4283      	cmp	r3, r0
 80030c8:	d1e0      	bne.n	800308c <_free_r+0x24>
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	1841      	adds	r1, r0, r1
 80030d0:	6011      	str	r1, [r2, #0]
 80030d2:	6053      	str	r3, [r2, #4]
 80030d4:	e7da      	b.n	800308c <_free_r+0x24>
 80030d6:	42a0      	cmp	r0, r4
 80030d8:	d902      	bls.n	80030e0 <_free_r+0x78>
 80030da:	230c      	movs	r3, #12
 80030dc:	602b      	str	r3, [r5, #0]
 80030de:	e7d5      	b.n	800308c <_free_r+0x24>
 80030e0:	6821      	ldr	r1, [r4, #0]
 80030e2:	1860      	adds	r0, r4, r1
 80030e4:	4283      	cmp	r3, r0
 80030e6:	d103      	bne.n	80030f0 <_free_r+0x88>
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	1841      	adds	r1, r0, r1
 80030ee:	6021      	str	r1, [r4, #0]
 80030f0:	6063      	str	r3, [r4, #4]
 80030f2:	6054      	str	r4, [r2, #4]
 80030f4:	e7ca      	b.n	800308c <_free_r+0x24>
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	20000230 	.word	0x20000230

080030fc <_malloc_r>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	2303      	movs	r3, #3
 8003100:	1ccd      	adds	r5, r1, #3
 8003102:	439d      	bics	r5, r3
 8003104:	3508      	adds	r5, #8
 8003106:	0006      	movs	r6, r0
 8003108:	2d0c      	cmp	r5, #12
 800310a:	d21f      	bcs.n	800314c <_malloc_r+0x50>
 800310c:	250c      	movs	r5, #12
 800310e:	42a9      	cmp	r1, r5
 8003110:	d81e      	bhi.n	8003150 <_malloc_r+0x54>
 8003112:	0030      	movs	r0, r6
 8003114:	f000 fbfc 	bl	8003910 <__malloc_lock>
 8003118:	4925      	ldr	r1, [pc, #148]	; (80031b0 <_malloc_r+0xb4>)
 800311a:	680a      	ldr	r2, [r1, #0]
 800311c:	0014      	movs	r4, r2
 800311e:	2c00      	cmp	r4, #0
 8003120:	d11a      	bne.n	8003158 <_malloc_r+0x5c>
 8003122:	4f24      	ldr	r7, [pc, #144]	; (80031b4 <_malloc_r+0xb8>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d104      	bne.n	8003134 <_malloc_r+0x38>
 800312a:	0021      	movs	r1, r4
 800312c:	0030      	movs	r0, r6
 800312e:	f000 fb27 	bl	8003780 <_sbrk_r>
 8003132:	6038      	str	r0, [r7, #0]
 8003134:	0029      	movs	r1, r5
 8003136:	0030      	movs	r0, r6
 8003138:	f000 fb22 	bl	8003780 <_sbrk_r>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d12b      	bne.n	8003198 <_malloc_r+0x9c>
 8003140:	230c      	movs	r3, #12
 8003142:	0030      	movs	r0, r6
 8003144:	6033      	str	r3, [r6, #0]
 8003146:	f000 fbeb 	bl	8003920 <__malloc_unlock>
 800314a:	e003      	b.n	8003154 <_malloc_r+0x58>
 800314c:	2d00      	cmp	r5, #0
 800314e:	dade      	bge.n	800310e <_malloc_r+0x12>
 8003150:	230c      	movs	r3, #12
 8003152:	6033      	str	r3, [r6, #0]
 8003154:	2000      	movs	r0, #0
 8003156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	1b5b      	subs	r3, r3, r5
 800315c:	d419      	bmi.n	8003192 <_malloc_r+0x96>
 800315e:	2b0b      	cmp	r3, #11
 8003160:	d903      	bls.n	800316a <_malloc_r+0x6e>
 8003162:	6023      	str	r3, [r4, #0]
 8003164:	18e4      	adds	r4, r4, r3
 8003166:	6025      	str	r5, [r4, #0]
 8003168:	e003      	b.n	8003172 <_malloc_r+0x76>
 800316a:	6863      	ldr	r3, [r4, #4]
 800316c:	42a2      	cmp	r2, r4
 800316e:	d10e      	bne.n	800318e <_malloc_r+0x92>
 8003170:	600b      	str	r3, [r1, #0]
 8003172:	0030      	movs	r0, r6
 8003174:	f000 fbd4 	bl	8003920 <__malloc_unlock>
 8003178:	0020      	movs	r0, r4
 800317a:	2207      	movs	r2, #7
 800317c:	300b      	adds	r0, #11
 800317e:	1d23      	adds	r3, r4, #4
 8003180:	4390      	bics	r0, r2
 8003182:	1ac2      	subs	r2, r0, r3
 8003184:	4298      	cmp	r0, r3
 8003186:	d0e6      	beq.n	8003156 <_malloc_r+0x5a>
 8003188:	1a1b      	subs	r3, r3, r0
 800318a:	50a3      	str	r3, [r4, r2]
 800318c:	e7e3      	b.n	8003156 <_malloc_r+0x5a>
 800318e:	6053      	str	r3, [r2, #4]
 8003190:	e7ef      	b.n	8003172 <_malloc_r+0x76>
 8003192:	0022      	movs	r2, r4
 8003194:	6864      	ldr	r4, [r4, #4]
 8003196:	e7c2      	b.n	800311e <_malloc_r+0x22>
 8003198:	2303      	movs	r3, #3
 800319a:	1cc4      	adds	r4, r0, #3
 800319c:	439c      	bics	r4, r3
 800319e:	42a0      	cmp	r0, r4
 80031a0:	d0e1      	beq.n	8003166 <_malloc_r+0x6a>
 80031a2:	1a21      	subs	r1, r4, r0
 80031a4:	0030      	movs	r0, r6
 80031a6:	f000 faeb 	bl	8003780 <_sbrk_r>
 80031aa:	1c43      	adds	r3, r0, #1
 80031ac:	d1db      	bne.n	8003166 <_malloc_r+0x6a>
 80031ae:	e7c7      	b.n	8003140 <_malloc_r+0x44>
 80031b0:	20000230 	.word	0x20000230
 80031b4:	20000234 	.word	0x20000234

080031b8 <__sfputc_r>:
 80031b8:	6893      	ldr	r3, [r2, #8]
 80031ba:	b510      	push	{r4, lr}
 80031bc:	3b01      	subs	r3, #1
 80031be:	6093      	str	r3, [r2, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	da04      	bge.n	80031ce <__sfputc_r+0x16>
 80031c4:	6994      	ldr	r4, [r2, #24]
 80031c6:	42a3      	cmp	r3, r4
 80031c8:	db07      	blt.n	80031da <__sfputc_r+0x22>
 80031ca:	290a      	cmp	r1, #10
 80031cc:	d005      	beq.n	80031da <__sfputc_r+0x22>
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	1c58      	adds	r0, r3, #1
 80031d2:	6010      	str	r0, [r2, #0]
 80031d4:	7019      	strb	r1, [r3, #0]
 80031d6:	0008      	movs	r0, r1
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	f7ff fc39 	bl	8002a50 <__swbuf_r>
 80031de:	0001      	movs	r1, r0
 80031e0:	e7f9      	b.n	80031d6 <__sfputc_r+0x1e>

080031e2 <__sfputs_r>:
 80031e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e4:	0006      	movs	r6, r0
 80031e6:	000f      	movs	r7, r1
 80031e8:	0014      	movs	r4, r2
 80031ea:	18d5      	adds	r5, r2, r3
 80031ec:	42ac      	cmp	r4, r5
 80031ee:	d101      	bne.n	80031f4 <__sfputs_r+0x12>
 80031f0:	2000      	movs	r0, #0
 80031f2:	e007      	b.n	8003204 <__sfputs_r+0x22>
 80031f4:	7821      	ldrb	r1, [r4, #0]
 80031f6:	003a      	movs	r2, r7
 80031f8:	0030      	movs	r0, r6
 80031fa:	f7ff ffdd 	bl	80031b8 <__sfputc_r>
 80031fe:	3401      	adds	r4, #1
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d1f3      	bne.n	80031ec <__sfputs_r+0xa>
 8003204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003208 <_vfiprintf_r>:
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320a:	b0a1      	sub	sp, #132	; 0x84
 800320c:	0006      	movs	r6, r0
 800320e:	000c      	movs	r4, r1
 8003210:	001f      	movs	r7, r3
 8003212:	9203      	str	r2, [sp, #12]
 8003214:	2800      	cmp	r0, #0
 8003216:	d004      	beq.n	8003222 <_vfiprintf_r+0x1a>
 8003218:	6983      	ldr	r3, [r0, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <_vfiprintf_r+0x1a>
 800321e:	f7ff fe13 	bl	8002e48 <__sinit>
 8003222:	4b8e      	ldr	r3, [pc, #568]	; (800345c <_vfiprintf_r+0x254>)
 8003224:	429c      	cmp	r4, r3
 8003226:	d11c      	bne.n	8003262 <_vfiprintf_r+0x5a>
 8003228:	6874      	ldr	r4, [r6, #4]
 800322a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800322c:	07db      	lsls	r3, r3, #31
 800322e:	d405      	bmi.n	800323c <_vfiprintf_r+0x34>
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	059b      	lsls	r3, r3, #22
 8003234:	d402      	bmi.n	800323c <_vfiprintf_r+0x34>
 8003236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003238:	f7ff fea7 	bl	8002f8a <__retarget_lock_acquire_recursive>
 800323c:	89a3      	ldrh	r3, [r4, #12]
 800323e:	071b      	lsls	r3, r3, #28
 8003240:	d502      	bpl.n	8003248 <_vfiprintf_r+0x40>
 8003242:	6923      	ldr	r3, [r4, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d11d      	bne.n	8003284 <_vfiprintf_r+0x7c>
 8003248:	0021      	movs	r1, r4
 800324a:	0030      	movs	r0, r6
 800324c:	f7ff fc56 	bl	8002afc <__swsetup_r>
 8003250:	2800      	cmp	r0, #0
 8003252:	d017      	beq.n	8003284 <_vfiprintf_r+0x7c>
 8003254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003256:	07db      	lsls	r3, r3, #31
 8003258:	d50d      	bpl.n	8003276 <_vfiprintf_r+0x6e>
 800325a:	2001      	movs	r0, #1
 800325c:	4240      	negs	r0, r0
 800325e:	b021      	add	sp, #132	; 0x84
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	4b7f      	ldr	r3, [pc, #508]	; (8003460 <_vfiprintf_r+0x258>)
 8003264:	429c      	cmp	r4, r3
 8003266:	d101      	bne.n	800326c <_vfiprintf_r+0x64>
 8003268:	68b4      	ldr	r4, [r6, #8]
 800326a:	e7de      	b.n	800322a <_vfiprintf_r+0x22>
 800326c:	4b7d      	ldr	r3, [pc, #500]	; (8003464 <_vfiprintf_r+0x25c>)
 800326e:	429c      	cmp	r4, r3
 8003270:	d1db      	bne.n	800322a <_vfiprintf_r+0x22>
 8003272:	68f4      	ldr	r4, [r6, #12]
 8003274:	e7d9      	b.n	800322a <_vfiprintf_r+0x22>
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	059b      	lsls	r3, r3, #22
 800327a:	d4ee      	bmi.n	800325a <_vfiprintf_r+0x52>
 800327c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800327e:	f7ff fe85 	bl	8002f8c <__retarget_lock_release_recursive>
 8003282:	e7ea      	b.n	800325a <_vfiprintf_r+0x52>
 8003284:	2300      	movs	r3, #0
 8003286:	ad08      	add	r5, sp, #32
 8003288:	616b      	str	r3, [r5, #20]
 800328a:	3320      	adds	r3, #32
 800328c:	766b      	strb	r3, [r5, #25]
 800328e:	3310      	adds	r3, #16
 8003290:	76ab      	strb	r3, [r5, #26]
 8003292:	9707      	str	r7, [sp, #28]
 8003294:	9f03      	ldr	r7, [sp, #12]
 8003296:	783b      	ldrb	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <_vfiprintf_r+0x98>
 800329c:	2b25      	cmp	r3, #37	; 0x25
 800329e:	d14e      	bne.n	800333e <_vfiprintf_r+0x136>
 80032a0:	9b03      	ldr	r3, [sp, #12]
 80032a2:	1afb      	subs	r3, r7, r3
 80032a4:	9305      	str	r3, [sp, #20]
 80032a6:	9b03      	ldr	r3, [sp, #12]
 80032a8:	429f      	cmp	r7, r3
 80032aa:	d00d      	beq.n	80032c8 <_vfiprintf_r+0xc0>
 80032ac:	9b05      	ldr	r3, [sp, #20]
 80032ae:	0021      	movs	r1, r4
 80032b0:	0030      	movs	r0, r6
 80032b2:	9a03      	ldr	r2, [sp, #12]
 80032b4:	f7ff ff95 	bl	80031e2 <__sfputs_r>
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d100      	bne.n	80032be <_vfiprintf_r+0xb6>
 80032bc:	e0b5      	b.n	800342a <_vfiprintf_r+0x222>
 80032be:	696a      	ldr	r2, [r5, #20]
 80032c0:	9b05      	ldr	r3, [sp, #20]
 80032c2:	4694      	mov	ip, r2
 80032c4:	4463      	add	r3, ip
 80032c6:	616b      	str	r3, [r5, #20]
 80032c8:	783b      	ldrb	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d100      	bne.n	80032d0 <_vfiprintf_r+0xc8>
 80032ce:	e0ac      	b.n	800342a <_vfiprintf_r+0x222>
 80032d0:	2201      	movs	r2, #1
 80032d2:	1c7b      	adds	r3, r7, #1
 80032d4:	9303      	str	r3, [sp, #12]
 80032d6:	2300      	movs	r3, #0
 80032d8:	4252      	negs	r2, r2
 80032da:	606a      	str	r2, [r5, #4]
 80032dc:	a904      	add	r1, sp, #16
 80032de:	3254      	adds	r2, #84	; 0x54
 80032e0:	1852      	adds	r2, r2, r1
 80032e2:	602b      	str	r3, [r5, #0]
 80032e4:	60eb      	str	r3, [r5, #12]
 80032e6:	60ab      	str	r3, [r5, #8]
 80032e8:	7013      	strb	r3, [r2, #0]
 80032ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80032ec:	9b03      	ldr	r3, [sp, #12]
 80032ee:	2205      	movs	r2, #5
 80032f0:	7819      	ldrb	r1, [r3, #0]
 80032f2:	485d      	ldr	r0, [pc, #372]	; (8003468 <_vfiprintf_r+0x260>)
 80032f4:	f000 fb00 	bl	80038f8 <memchr>
 80032f8:	9b03      	ldr	r3, [sp, #12]
 80032fa:	1c5f      	adds	r7, r3, #1
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d120      	bne.n	8003342 <_vfiprintf_r+0x13a>
 8003300:	682a      	ldr	r2, [r5, #0]
 8003302:	06d3      	lsls	r3, r2, #27
 8003304:	d504      	bpl.n	8003310 <_vfiprintf_r+0x108>
 8003306:	2353      	movs	r3, #83	; 0x53
 8003308:	a904      	add	r1, sp, #16
 800330a:	185b      	adds	r3, r3, r1
 800330c:	2120      	movs	r1, #32
 800330e:	7019      	strb	r1, [r3, #0]
 8003310:	0713      	lsls	r3, r2, #28
 8003312:	d504      	bpl.n	800331e <_vfiprintf_r+0x116>
 8003314:	2353      	movs	r3, #83	; 0x53
 8003316:	a904      	add	r1, sp, #16
 8003318:	185b      	adds	r3, r3, r1
 800331a:	212b      	movs	r1, #43	; 0x2b
 800331c:	7019      	strb	r1, [r3, #0]
 800331e:	9b03      	ldr	r3, [sp, #12]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b2a      	cmp	r3, #42	; 0x2a
 8003324:	d016      	beq.n	8003354 <_vfiprintf_r+0x14c>
 8003326:	2100      	movs	r1, #0
 8003328:	68eb      	ldr	r3, [r5, #12]
 800332a:	9f03      	ldr	r7, [sp, #12]
 800332c:	783a      	ldrb	r2, [r7, #0]
 800332e:	1c78      	adds	r0, r7, #1
 8003330:	3a30      	subs	r2, #48	; 0x30
 8003332:	4684      	mov	ip, r0
 8003334:	2a09      	cmp	r2, #9
 8003336:	d94f      	bls.n	80033d8 <_vfiprintf_r+0x1d0>
 8003338:	2900      	cmp	r1, #0
 800333a:	d111      	bne.n	8003360 <_vfiprintf_r+0x158>
 800333c:	e017      	b.n	800336e <_vfiprintf_r+0x166>
 800333e:	3701      	adds	r7, #1
 8003340:	e7a9      	b.n	8003296 <_vfiprintf_r+0x8e>
 8003342:	4b49      	ldr	r3, [pc, #292]	; (8003468 <_vfiprintf_r+0x260>)
 8003344:	682a      	ldr	r2, [r5, #0]
 8003346:	1ac0      	subs	r0, r0, r3
 8003348:	2301      	movs	r3, #1
 800334a:	4083      	lsls	r3, r0
 800334c:	4313      	orrs	r3, r2
 800334e:	602b      	str	r3, [r5, #0]
 8003350:	9703      	str	r7, [sp, #12]
 8003352:	e7cb      	b.n	80032ec <_vfiprintf_r+0xe4>
 8003354:	9b07      	ldr	r3, [sp, #28]
 8003356:	1d19      	adds	r1, r3, #4
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	9107      	str	r1, [sp, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	db01      	blt.n	8003364 <_vfiprintf_r+0x15c>
 8003360:	930b      	str	r3, [sp, #44]	; 0x2c
 8003362:	e004      	b.n	800336e <_vfiprintf_r+0x166>
 8003364:	425b      	negs	r3, r3
 8003366:	60eb      	str	r3, [r5, #12]
 8003368:	2302      	movs	r3, #2
 800336a:	4313      	orrs	r3, r2
 800336c:	602b      	str	r3, [r5, #0]
 800336e:	783b      	ldrb	r3, [r7, #0]
 8003370:	2b2e      	cmp	r3, #46	; 0x2e
 8003372:	d10a      	bne.n	800338a <_vfiprintf_r+0x182>
 8003374:	787b      	ldrb	r3, [r7, #1]
 8003376:	2b2a      	cmp	r3, #42	; 0x2a
 8003378:	d137      	bne.n	80033ea <_vfiprintf_r+0x1e2>
 800337a:	9b07      	ldr	r3, [sp, #28]
 800337c:	3702      	adds	r7, #2
 800337e:	1d1a      	adds	r2, r3, #4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	9207      	str	r2, [sp, #28]
 8003384:	2b00      	cmp	r3, #0
 8003386:	db2d      	blt.n	80033e4 <_vfiprintf_r+0x1dc>
 8003388:	9309      	str	r3, [sp, #36]	; 0x24
 800338a:	2203      	movs	r2, #3
 800338c:	7839      	ldrb	r1, [r7, #0]
 800338e:	4837      	ldr	r0, [pc, #220]	; (800346c <_vfiprintf_r+0x264>)
 8003390:	f000 fab2 	bl	80038f8 <memchr>
 8003394:	2800      	cmp	r0, #0
 8003396:	d007      	beq.n	80033a8 <_vfiprintf_r+0x1a0>
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <_vfiprintf_r+0x264>)
 800339a:	682a      	ldr	r2, [r5, #0]
 800339c:	1ac0      	subs	r0, r0, r3
 800339e:	2340      	movs	r3, #64	; 0x40
 80033a0:	4083      	lsls	r3, r0
 80033a2:	4313      	orrs	r3, r2
 80033a4:	3701      	adds	r7, #1
 80033a6:	602b      	str	r3, [r5, #0]
 80033a8:	7839      	ldrb	r1, [r7, #0]
 80033aa:	1c7b      	adds	r3, r7, #1
 80033ac:	2206      	movs	r2, #6
 80033ae:	4830      	ldr	r0, [pc, #192]	; (8003470 <_vfiprintf_r+0x268>)
 80033b0:	9303      	str	r3, [sp, #12]
 80033b2:	7629      	strb	r1, [r5, #24]
 80033b4:	f000 faa0 	bl	80038f8 <memchr>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d045      	beq.n	8003448 <_vfiprintf_r+0x240>
 80033bc:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <_vfiprintf_r+0x26c>)
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d127      	bne.n	8003412 <_vfiprintf_r+0x20a>
 80033c2:	2207      	movs	r2, #7
 80033c4:	9b07      	ldr	r3, [sp, #28]
 80033c6:	3307      	adds	r3, #7
 80033c8:	4393      	bics	r3, r2
 80033ca:	3308      	adds	r3, #8
 80033cc:	9307      	str	r3, [sp, #28]
 80033ce:	696b      	ldr	r3, [r5, #20]
 80033d0:	9a04      	ldr	r2, [sp, #16]
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	616b      	str	r3, [r5, #20]
 80033d6:	e75d      	b.n	8003294 <_vfiprintf_r+0x8c>
 80033d8:	210a      	movs	r1, #10
 80033da:	434b      	muls	r3, r1
 80033dc:	4667      	mov	r7, ip
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	3909      	subs	r1, #9
 80033e2:	e7a3      	b.n	800332c <_vfiprintf_r+0x124>
 80033e4:	2301      	movs	r3, #1
 80033e6:	425b      	negs	r3, r3
 80033e8:	e7ce      	b.n	8003388 <_vfiprintf_r+0x180>
 80033ea:	2300      	movs	r3, #0
 80033ec:	001a      	movs	r2, r3
 80033ee:	3701      	adds	r7, #1
 80033f0:	606b      	str	r3, [r5, #4]
 80033f2:	7839      	ldrb	r1, [r7, #0]
 80033f4:	1c78      	adds	r0, r7, #1
 80033f6:	3930      	subs	r1, #48	; 0x30
 80033f8:	4684      	mov	ip, r0
 80033fa:	2909      	cmp	r1, #9
 80033fc:	d903      	bls.n	8003406 <_vfiprintf_r+0x1fe>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0c3      	beq.n	800338a <_vfiprintf_r+0x182>
 8003402:	9209      	str	r2, [sp, #36]	; 0x24
 8003404:	e7c1      	b.n	800338a <_vfiprintf_r+0x182>
 8003406:	230a      	movs	r3, #10
 8003408:	435a      	muls	r2, r3
 800340a:	4667      	mov	r7, ip
 800340c:	1852      	adds	r2, r2, r1
 800340e:	3b09      	subs	r3, #9
 8003410:	e7ef      	b.n	80033f2 <_vfiprintf_r+0x1ea>
 8003412:	ab07      	add	r3, sp, #28
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	0022      	movs	r2, r4
 8003418:	0029      	movs	r1, r5
 800341a:	0030      	movs	r0, r6
 800341c:	4b16      	ldr	r3, [pc, #88]	; (8003478 <_vfiprintf_r+0x270>)
 800341e:	e000      	b.n	8003422 <_vfiprintf_r+0x21a>
 8003420:	bf00      	nop
 8003422:	9004      	str	r0, [sp, #16]
 8003424:	9b04      	ldr	r3, [sp, #16]
 8003426:	3301      	adds	r3, #1
 8003428:	d1d1      	bne.n	80033ce <_vfiprintf_r+0x1c6>
 800342a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800342c:	07db      	lsls	r3, r3, #31
 800342e:	d405      	bmi.n	800343c <_vfiprintf_r+0x234>
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	059b      	lsls	r3, r3, #22
 8003434:	d402      	bmi.n	800343c <_vfiprintf_r+0x234>
 8003436:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003438:	f7ff fda8 	bl	8002f8c <__retarget_lock_release_recursive>
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	065b      	lsls	r3, r3, #25
 8003440:	d500      	bpl.n	8003444 <_vfiprintf_r+0x23c>
 8003442:	e70a      	b.n	800325a <_vfiprintf_r+0x52>
 8003444:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003446:	e70a      	b.n	800325e <_vfiprintf_r+0x56>
 8003448:	ab07      	add	r3, sp, #28
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	0022      	movs	r2, r4
 800344e:	0029      	movs	r1, r5
 8003450:	0030      	movs	r0, r6
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <_vfiprintf_r+0x270>)
 8003454:	f000 f882 	bl	800355c <_printf_i>
 8003458:	e7e3      	b.n	8003422 <_vfiprintf_r+0x21a>
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	08003a10 	.word	0x08003a10
 8003460:	08003a30 	.word	0x08003a30
 8003464:	080039f0 	.word	0x080039f0
 8003468:	08003a50 	.word	0x08003a50
 800346c:	08003a56 	.word	0x08003a56
 8003470:	08003a5a 	.word	0x08003a5a
 8003474:	00000000 	.word	0x00000000
 8003478:	080031e3 	.word	0x080031e3

0800347c <_printf_common>:
 800347c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800347e:	0015      	movs	r5, r2
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	688a      	ldr	r2, [r1, #8]
 8003484:	690b      	ldr	r3, [r1, #16]
 8003486:	000c      	movs	r4, r1
 8003488:	9000      	str	r0, [sp, #0]
 800348a:	4293      	cmp	r3, r2
 800348c:	da00      	bge.n	8003490 <_printf_common+0x14>
 800348e:	0013      	movs	r3, r2
 8003490:	0022      	movs	r2, r4
 8003492:	602b      	str	r3, [r5, #0]
 8003494:	3243      	adds	r2, #67	; 0x43
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	2a00      	cmp	r2, #0
 800349a:	d001      	beq.n	80034a0 <_printf_common+0x24>
 800349c:	3301      	adds	r3, #1
 800349e:	602b      	str	r3, [r5, #0]
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	069b      	lsls	r3, r3, #26
 80034a4:	d502      	bpl.n	80034ac <_printf_common+0x30>
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	3302      	adds	r3, #2
 80034aa:	602b      	str	r3, [r5, #0]
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	2306      	movs	r3, #6
 80034b0:	0017      	movs	r7, r2
 80034b2:	401f      	ands	r7, r3
 80034b4:	421a      	tst	r2, r3
 80034b6:	d027      	beq.n	8003508 <_printf_common+0x8c>
 80034b8:	0023      	movs	r3, r4
 80034ba:	3343      	adds	r3, #67	; 0x43
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	1e5a      	subs	r2, r3, #1
 80034c0:	4193      	sbcs	r3, r2
 80034c2:	6822      	ldr	r2, [r4, #0]
 80034c4:	0692      	lsls	r2, r2, #26
 80034c6:	d430      	bmi.n	800352a <_printf_common+0xae>
 80034c8:	0022      	movs	r2, r4
 80034ca:	9901      	ldr	r1, [sp, #4]
 80034cc:	9800      	ldr	r0, [sp, #0]
 80034ce:	9e08      	ldr	r6, [sp, #32]
 80034d0:	3243      	adds	r2, #67	; 0x43
 80034d2:	47b0      	blx	r6
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	d025      	beq.n	8003524 <_printf_common+0xa8>
 80034d8:	2306      	movs	r3, #6
 80034da:	6820      	ldr	r0, [r4, #0]
 80034dc:	682a      	ldr	r2, [r5, #0]
 80034de:	68e1      	ldr	r1, [r4, #12]
 80034e0:	2500      	movs	r5, #0
 80034e2:	4003      	ands	r3, r0
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d103      	bne.n	80034f0 <_printf_common+0x74>
 80034e8:	1a8d      	subs	r5, r1, r2
 80034ea:	43eb      	mvns	r3, r5
 80034ec:	17db      	asrs	r3, r3, #31
 80034ee:	401d      	ands	r5, r3
 80034f0:	68a3      	ldr	r3, [r4, #8]
 80034f2:	6922      	ldr	r2, [r4, #16]
 80034f4:	4293      	cmp	r3, r2
 80034f6:	dd01      	ble.n	80034fc <_printf_common+0x80>
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	18ed      	adds	r5, r5, r3
 80034fc:	2700      	movs	r7, #0
 80034fe:	42bd      	cmp	r5, r7
 8003500:	d120      	bne.n	8003544 <_printf_common+0xc8>
 8003502:	2000      	movs	r0, #0
 8003504:	e010      	b.n	8003528 <_printf_common+0xac>
 8003506:	3701      	adds	r7, #1
 8003508:	68e3      	ldr	r3, [r4, #12]
 800350a:	682a      	ldr	r2, [r5, #0]
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	42bb      	cmp	r3, r7
 8003510:	ddd2      	ble.n	80034b8 <_printf_common+0x3c>
 8003512:	0022      	movs	r2, r4
 8003514:	2301      	movs	r3, #1
 8003516:	9901      	ldr	r1, [sp, #4]
 8003518:	9800      	ldr	r0, [sp, #0]
 800351a:	9e08      	ldr	r6, [sp, #32]
 800351c:	3219      	adds	r2, #25
 800351e:	47b0      	blx	r6
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	d1f0      	bne.n	8003506 <_printf_common+0x8a>
 8003524:	2001      	movs	r0, #1
 8003526:	4240      	negs	r0, r0
 8003528:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800352a:	2030      	movs	r0, #48	; 0x30
 800352c:	18e1      	adds	r1, r4, r3
 800352e:	3143      	adds	r1, #67	; 0x43
 8003530:	7008      	strb	r0, [r1, #0]
 8003532:	0021      	movs	r1, r4
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	3145      	adds	r1, #69	; 0x45
 8003538:	7809      	ldrb	r1, [r1, #0]
 800353a:	18a2      	adds	r2, r4, r2
 800353c:	3243      	adds	r2, #67	; 0x43
 800353e:	3302      	adds	r3, #2
 8003540:	7011      	strb	r1, [r2, #0]
 8003542:	e7c1      	b.n	80034c8 <_printf_common+0x4c>
 8003544:	0022      	movs	r2, r4
 8003546:	2301      	movs	r3, #1
 8003548:	9901      	ldr	r1, [sp, #4]
 800354a:	9800      	ldr	r0, [sp, #0]
 800354c:	9e08      	ldr	r6, [sp, #32]
 800354e:	321a      	adds	r2, #26
 8003550:	47b0      	blx	r6
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	d0e6      	beq.n	8003524 <_printf_common+0xa8>
 8003556:	3701      	adds	r7, #1
 8003558:	e7d1      	b.n	80034fe <_printf_common+0x82>
	...

0800355c <_printf_i>:
 800355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355e:	b08b      	sub	sp, #44	; 0x2c
 8003560:	9206      	str	r2, [sp, #24]
 8003562:	000a      	movs	r2, r1
 8003564:	3243      	adds	r2, #67	; 0x43
 8003566:	9307      	str	r3, [sp, #28]
 8003568:	9005      	str	r0, [sp, #20]
 800356a:	9204      	str	r2, [sp, #16]
 800356c:	7e0a      	ldrb	r2, [r1, #24]
 800356e:	000c      	movs	r4, r1
 8003570:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003572:	2a78      	cmp	r2, #120	; 0x78
 8003574:	d806      	bhi.n	8003584 <_printf_i+0x28>
 8003576:	2a62      	cmp	r2, #98	; 0x62
 8003578:	d808      	bhi.n	800358c <_printf_i+0x30>
 800357a:	2a00      	cmp	r2, #0
 800357c:	d100      	bne.n	8003580 <_printf_i+0x24>
 800357e:	e0c0      	b.n	8003702 <_printf_i+0x1a6>
 8003580:	2a58      	cmp	r2, #88	; 0x58
 8003582:	d052      	beq.n	800362a <_printf_i+0xce>
 8003584:	0026      	movs	r6, r4
 8003586:	3642      	adds	r6, #66	; 0x42
 8003588:	7032      	strb	r2, [r6, #0]
 800358a:	e022      	b.n	80035d2 <_printf_i+0x76>
 800358c:	0010      	movs	r0, r2
 800358e:	3863      	subs	r0, #99	; 0x63
 8003590:	2815      	cmp	r0, #21
 8003592:	d8f7      	bhi.n	8003584 <_printf_i+0x28>
 8003594:	f7fc fdb8 	bl	8000108 <__gnu_thumb1_case_shi>
 8003598:	001f0016 	.word	0x001f0016
 800359c:	fff6fff6 	.word	0xfff6fff6
 80035a0:	fff6fff6 	.word	0xfff6fff6
 80035a4:	fff6001f 	.word	0xfff6001f
 80035a8:	fff6fff6 	.word	0xfff6fff6
 80035ac:	00a8fff6 	.word	0x00a8fff6
 80035b0:	009a0036 	.word	0x009a0036
 80035b4:	fff6fff6 	.word	0xfff6fff6
 80035b8:	fff600b9 	.word	0xfff600b9
 80035bc:	fff60036 	.word	0xfff60036
 80035c0:	009efff6 	.word	0x009efff6
 80035c4:	0026      	movs	r6, r4
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	3642      	adds	r6, #66	; 0x42
 80035ca:	1d11      	adds	r1, r2, #4
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	7033      	strb	r3, [r6, #0]
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0a7      	b.n	8003726 <_printf_i+0x1ca>
 80035d6:	6808      	ldr	r0, [r1, #0]
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	1d0a      	adds	r2, r1, #4
 80035dc:	0605      	lsls	r5, r0, #24
 80035de:	d50b      	bpl.n	80035f8 <_printf_i+0x9c>
 80035e0:	680d      	ldr	r5, [r1, #0]
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	2d00      	cmp	r5, #0
 80035e6:	da03      	bge.n	80035f0 <_printf_i+0x94>
 80035e8:	232d      	movs	r3, #45	; 0x2d
 80035ea:	9a04      	ldr	r2, [sp, #16]
 80035ec:	426d      	negs	r5, r5
 80035ee:	7013      	strb	r3, [r2, #0]
 80035f0:	4b61      	ldr	r3, [pc, #388]	; (8003778 <_printf_i+0x21c>)
 80035f2:	270a      	movs	r7, #10
 80035f4:	9303      	str	r3, [sp, #12]
 80035f6:	e032      	b.n	800365e <_printf_i+0x102>
 80035f8:	680d      	ldr	r5, [r1, #0]
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	0641      	lsls	r1, r0, #25
 80035fe:	d5f1      	bpl.n	80035e4 <_printf_i+0x88>
 8003600:	b22d      	sxth	r5, r5
 8003602:	e7ef      	b.n	80035e4 <_printf_i+0x88>
 8003604:	680d      	ldr	r5, [r1, #0]
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	1d08      	adds	r0, r1, #4
 800360a:	6018      	str	r0, [r3, #0]
 800360c:	062e      	lsls	r6, r5, #24
 800360e:	d501      	bpl.n	8003614 <_printf_i+0xb8>
 8003610:	680d      	ldr	r5, [r1, #0]
 8003612:	e003      	b.n	800361c <_printf_i+0xc0>
 8003614:	066d      	lsls	r5, r5, #25
 8003616:	d5fb      	bpl.n	8003610 <_printf_i+0xb4>
 8003618:	680d      	ldr	r5, [r1, #0]
 800361a:	b2ad      	uxth	r5, r5
 800361c:	4b56      	ldr	r3, [pc, #344]	; (8003778 <_printf_i+0x21c>)
 800361e:	270a      	movs	r7, #10
 8003620:	9303      	str	r3, [sp, #12]
 8003622:	2a6f      	cmp	r2, #111	; 0x6f
 8003624:	d117      	bne.n	8003656 <_printf_i+0xfa>
 8003626:	2708      	movs	r7, #8
 8003628:	e015      	b.n	8003656 <_printf_i+0xfa>
 800362a:	3145      	adds	r1, #69	; 0x45
 800362c:	700a      	strb	r2, [r1, #0]
 800362e:	4a52      	ldr	r2, [pc, #328]	; (8003778 <_printf_i+0x21c>)
 8003630:	9203      	str	r2, [sp, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	6821      	ldr	r1, [r4, #0]
 8003636:	ca20      	ldmia	r2!, {r5}
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	0608      	lsls	r0, r1, #24
 800363c:	d550      	bpl.n	80036e0 <_printf_i+0x184>
 800363e:	07cb      	lsls	r3, r1, #31
 8003640:	d502      	bpl.n	8003648 <_printf_i+0xec>
 8003642:	2320      	movs	r3, #32
 8003644:	4319      	orrs	r1, r3
 8003646:	6021      	str	r1, [r4, #0]
 8003648:	2710      	movs	r7, #16
 800364a:	2d00      	cmp	r5, #0
 800364c:	d103      	bne.n	8003656 <_printf_i+0xfa>
 800364e:	2320      	movs	r3, #32
 8003650:	6822      	ldr	r2, [r4, #0]
 8003652:	439a      	bics	r2, r3
 8003654:	6022      	str	r2, [r4, #0]
 8003656:	0023      	movs	r3, r4
 8003658:	2200      	movs	r2, #0
 800365a:	3343      	adds	r3, #67	; 0x43
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	6863      	ldr	r3, [r4, #4]
 8003660:	60a3      	str	r3, [r4, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	db03      	blt.n	800366e <_printf_i+0x112>
 8003666:	2204      	movs	r2, #4
 8003668:	6821      	ldr	r1, [r4, #0]
 800366a:	4391      	bics	r1, r2
 800366c:	6021      	str	r1, [r4, #0]
 800366e:	2d00      	cmp	r5, #0
 8003670:	d102      	bne.n	8003678 <_printf_i+0x11c>
 8003672:	9e04      	ldr	r6, [sp, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00c      	beq.n	8003692 <_printf_i+0x136>
 8003678:	9e04      	ldr	r6, [sp, #16]
 800367a:	0028      	movs	r0, r5
 800367c:	0039      	movs	r1, r7
 800367e:	f7fc fdd3 	bl	8000228 <__aeabi_uidivmod>
 8003682:	9b03      	ldr	r3, [sp, #12]
 8003684:	3e01      	subs	r6, #1
 8003686:	5c5b      	ldrb	r3, [r3, r1]
 8003688:	7033      	strb	r3, [r6, #0]
 800368a:	002b      	movs	r3, r5
 800368c:	0005      	movs	r5, r0
 800368e:	429f      	cmp	r7, r3
 8003690:	d9f3      	bls.n	800367a <_printf_i+0x11e>
 8003692:	2f08      	cmp	r7, #8
 8003694:	d109      	bne.n	80036aa <_printf_i+0x14e>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	07db      	lsls	r3, r3, #31
 800369a:	d506      	bpl.n	80036aa <_printf_i+0x14e>
 800369c:	6863      	ldr	r3, [r4, #4]
 800369e:	6922      	ldr	r2, [r4, #16]
 80036a0:	4293      	cmp	r3, r2
 80036a2:	dc02      	bgt.n	80036aa <_printf_i+0x14e>
 80036a4:	2330      	movs	r3, #48	; 0x30
 80036a6:	3e01      	subs	r6, #1
 80036a8:	7033      	strb	r3, [r6, #0]
 80036aa:	9b04      	ldr	r3, [sp, #16]
 80036ac:	1b9b      	subs	r3, r3, r6
 80036ae:	6123      	str	r3, [r4, #16]
 80036b0:	9b07      	ldr	r3, [sp, #28]
 80036b2:	0021      	movs	r1, r4
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	9805      	ldr	r0, [sp, #20]
 80036b8:	9b06      	ldr	r3, [sp, #24]
 80036ba:	aa09      	add	r2, sp, #36	; 0x24
 80036bc:	f7ff fede 	bl	800347c <_printf_common>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d135      	bne.n	8003730 <_printf_i+0x1d4>
 80036c4:	2001      	movs	r0, #1
 80036c6:	4240      	negs	r0, r0
 80036c8:	b00b      	add	sp, #44	; 0x2c
 80036ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036cc:	2220      	movs	r2, #32
 80036ce:	6809      	ldr	r1, [r1, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	6022      	str	r2, [r4, #0]
 80036d4:	0022      	movs	r2, r4
 80036d6:	2178      	movs	r1, #120	; 0x78
 80036d8:	3245      	adds	r2, #69	; 0x45
 80036da:	7011      	strb	r1, [r2, #0]
 80036dc:	4a27      	ldr	r2, [pc, #156]	; (800377c <_printf_i+0x220>)
 80036de:	e7a7      	b.n	8003630 <_printf_i+0xd4>
 80036e0:	0648      	lsls	r0, r1, #25
 80036e2:	d5ac      	bpl.n	800363e <_printf_i+0xe2>
 80036e4:	b2ad      	uxth	r5, r5
 80036e6:	e7aa      	b.n	800363e <_printf_i+0xe2>
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	680d      	ldr	r5, [r1, #0]
 80036ec:	1d10      	adds	r0, r2, #4
 80036ee:	6949      	ldr	r1, [r1, #20]
 80036f0:	6018      	str	r0, [r3, #0]
 80036f2:	6813      	ldr	r3, [r2, #0]
 80036f4:	062e      	lsls	r6, r5, #24
 80036f6:	d501      	bpl.n	80036fc <_printf_i+0x1a0>
 80036f8:	6019      	str	r1, [r3, #0]
 80036fa:	e002      	b.n	8003702 <_printf_i+0x1a6>
 80036fc:	066d      	lsls	r5, r5, #25
 80036fe:	d5fb      	bpl.n	80036f8 <_printf_i+0x19c>
 8003700:	8019      	strh	r1, [r3, #0]
 8003702:	2300      	movs	r3, #0
 8003704:	9e04      	ldr	r6, [sp, #16]
 8003706:	6123      	str	r3, [r4, #16]
 8003708:	e7d2      	b.n	80036b0 <_printf_i+0x154>
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	1d11      	adds	r1, r2, #4
 800370e:	6019      	str	r1, [r3, #0]
 8003710:	6816      	ldr	r6, [r2, #0]
 8003712:	2100      	movs	r1, #0
 8003714:	0030      	movs	r0, r6
 8003716:	6862      	ldr	r2, [r4, #4]
 8003718:	f000 f8ee 	bl	80038f8 <memchr>
 800371c:	2800      	cmp	r0, #0
 800371e:	d001      	beq.n	8003724 <_printf_i+0x1c8>
 8003720:	1b80      	subs	r0, r0, r6
 8003722:	6060      	str	r0, [r4, #4]
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	6123      	str	r3, [r4, #16]
 8003728:	2300      	movs	r3, #0
 800372a:	9a04      	ldr	r2, [sp, #16]
 800372c:	7013      	strb	r3, [r2, #0]
 800372e:	e7bf      	b.n	80036b0 <_printf_i+0x154>
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	0032      	movs	r2, r6
 8003734:	9906      	ldr	r1, [sp, #24]
 8003736:	9805      	ldr	r0, [sp, #20]
 8003738:	9d07      	ldr	r5, [sp, #28]
 800373a:	47a8      	blx	r5
 800373c:	1c43      	adds	r3, r0, #1
 800373e:	d0c1      	beq.n	80036c4 <_printf_i+0x168>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	079b      	lsls	r3, r3, #30
 8003744:	d415      	bmi.n	8003772 <_printf_i+0x216>
 8003746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003748:	68e0      	ldr	r0, [r4, #12]
 800374a:	4298      	cmp	r0, r3
 800374c:	dabc      	bge.n	80036c8 <_printf_i+0x16c>
 800374e:	0018      	movs	r0, r3
 8003750:	e7ba      	b.n	80036c8 <_printf_i+0x16c>
 8003752:	0022      	movs	r2, r4
 8003754:	2301      	movs	r3, #1
 8003756:	9906      	ldr	r1, [sp, #24]
 8003758:	9805      	ldr	r0, [sp, #20]
 800375a:	9e07      	ldr	r6, [sp, #28]
 800375c:	3219      	adds	r2, #25
 800375e:	47b0      	blx	r6
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d0af      	beq.n	80036c4 <_printf_i+0x168>
 8003764:	3501      	adds	r5, #1
 8003766:	68e3      	ldr	r3, [r4, #12]
 8003768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	42ab      	cmp	r3, r5
 800376e:	dcf0      	bgt.n	8003752 <_printf_i+0x1f6>
 8003770:	e7e9      	b.n	8003746 <_printf_i+0x1ea>
 8003772:	2500      	movs	r5, #0
 8003774:	e7f7      	b.n	8003766 <_printf_i+0x20a>
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	08003a61 	.word	0x08003a61
 800377c:	08003a72 	.word	0x08003a72

08003780 <_sbrk_r>:
 8003780:	2300      	movs	r3, #0
 8003782:	b570      	push	{r4, r5, r6, lr}
 8003784:	4d06      	ldr	r5, [pc, #24]	; (80037a0 <_sbrk_r+0x20>)
 8003786:	0004      	movs	r4, r0
 8003788:	0008      	movs	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fd ff6e 	bl	800166c <_sbrk>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d103      	bne.n	800379c <_sbrk_r+0x1c>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d000      	beq.n	800379c <_sbrk_r+0x1c>
 800379a:	6023      	str	r3, [r4, #0]
 800379c:	bd70      	pop	{r4, r5, r6, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	2000027c 	.word	0x2000027c

080037a4 <__sread>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	000c      	movs	r4, r1
 80037a8:	250e      	movs	r5, #14
 80037aa:	5f49      	ldrsh	r1, [r1, r5]
 80037ac:	f000 f8c0 	bl	8003930 <_read_r>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	db03      	blt.n	80037bc <__sread+0x18>
 80037b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037b6:	181b      	adds	r3, r3, r0
 80037b8:	6563      	str	r3, [r4, #84]	; 0x54
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	4a02      	ldr	r2, [pc, #8]	; (80037c8 <__sread+0x24>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	81a3      	strh	r3, [r4, #12]
 80037c4:	e7f9      	b.n	80037ba <__sread+0x16>
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	ffffefff 	.word	0xffffefff

080037cc <__swrite>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	001f      	movs	r7, r3
 80037d0:	898b      	ldrh	r3, [r1, #12]
 80037d2:	0005      	movs	r5, r0
 80037d4:	000c      	movs	r4, r1
 80037d6:	0016      	movs	r6, r2
 80037d8:	05db      	lsls	r3, r3, #23
 80037da:	d505      	bpl.n	80037e8 <__swrite+0x1c>
 80037dc:	230e      	movs	r3, #14
 80037de:	5ec9      	ldrsh	r1, [r1, r3]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2302      	movs	r3, #2
 80037e4:	f000 f874 	bl	80038d0 <_lseek_r>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	4a05      	ldr	r2, [pc, #20]	; (8003800 <__swrite+0x34>)
 80037ec:	0028      	movs	r0, r5
 80037ee:	4013      	ands	r3, r2
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	0032      	movs	r2, r6
 80037f4:	230e      	movs	r3, #14
 80037f6:	5ee1      	ldrsh	r1, [r4, r3]
 80037f8:	003b      	movs	r3, r7
 80037fa:	f000 f81f 	bl	800383c <_write_r>
 80037fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003800:	ffffefff 	.word	0xffffefff

08003804 <__sseek>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	000c      	movs	r4, r1
 8003808:	250e      	movs	r5, #14
 800380a:	5f49      	ldrsh	r1, [r1, r5]
 800380c:	f000 f860 	bl	80038d0 <_lseek_r>
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	1c42      	adds	r2, r0, #1
 8003814:	d103      	bne.n	800381e <__sseek+0x1a>
 8003816:	4a05      	ldr	r2, [pc, #20]	; (800382c <__sseek+0x28>)
 8003818:	4013      	ands	r3, r2
 800381a:	81a3      	strh	r3, [r4, #12]
 800381c:	bd70      	pop	{r4, r5, r6, pc}
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	0152      	lsls	r2, r2, #5
 8003822:	4313      	orrs	r3, r2
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	6560      	str	r0, [r4, #84]	; 0x54
 8003828:	e7f8      	b.n	800381c <__sseek+0x18>
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	ffffefff 	.word	0xffffefff

08003830 <__sclose>:
 8003830:	b510      	push	{r4, lr}
 8003832:	230e      	movs	r3, #14
 8003834:	5ec9      	ldrsh	r1, [r1, r3]
 8003836:	f000 f815 	bl	8003864 <_close_r>
 800383a:	bd10      	pop	{r4, pc}

0800383c <_write_r>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	0004      	movs	r4, r0
 8003840:	0008      	movs	r0, r1
 8003842:	0011      	movs	r1, r2
 8003844:	001a      	movs	r2, r3
 8003846:	2300      	movs	r3, #0
 8003848:	4d05      	ldr	r5, [pc, #20]	; (8003860 <_write_r+0x24>)
 800384a:	602b      	str	r3, [r5, #0]
 800384c:	f7fd fec6 	bl	80015dc <_write>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d103      	bne.n	800385c <_write_r+0x20>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d000      	beq.n	800385c <_write_r+0x20>
 800385a:	6023      	str	r3, [r4, #0]
 800385c:	bd70      	pop	{r4, r5, r6, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	2000027c 	.word	0x2000027c

08003864 <_close_r>:
 8003864:	2300      	movs	r3, #0
 8003866:	b570      	push	{r4, r5, r6, lr}
 8003868:	4d06      	ldr	r5, [pc, #24]	; (8003884 <_close_r+0x20>)
 800386a:	0004      	movs	r4, r0
 800386c:	0008      	movs	r0, r1
 800386e:	602b      	str	r3, [r5, #0]
 8003870:	f7fd fed0 	bl	8001614 <_close>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d103      	bne.n	8003880 <_close_r+0x1c>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d000      	beq.n	8003880 <_close_r+0x1c>
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	bd70      	pop	{r4, r5, r6, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	2000027c 	.word	0x2000027c

08003888 <_fstat_r>:
 8003888:	2300      	movs	r3, #0
 800388a:	b570      	push	{r4, r5, r6, lr}
 800388c:	4d06      	ldr	r5, [pc, #24]	; (80038a8 <_fstat_r+0x20>)
 800388e:	0004      	movs	r4, r0
 8003890:	0008      	movs	r0, r1
 8003892:	0011      	movs	r1, r2
 8003894:	602b      	str	r3, [r5, #0]
 8003896:	f7fd fec7 	bl	8001628 <_fstat>
 800389a:	1c43      	adds	r3, r0, #1
 800389c:	d103      	bne.n	80038a6 <_fstat_r+0x1e>
 800389e:	682b      	ldr	r3, [r5, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d000      	beq.n	80038a6 <_fstat_r+0x1e>
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	2000027c 	.word	0x2000027c

080038ac <_isatty_r>:
 80038ac:	2300      	movs	r3, #0
 80038ae:	b570      	push	{r4, r5, r6, lr}
 80038b0:	4d06      	ldr	r5, [pc, #24]	; (80038cc <_isatty_r+0x20>)
 80038b2:	0004      	movs	r4, r0
 80038b4:	0008      	movs	r0, r1
 80038b6:	602b      	str	r3, [r5, #0]
 80038b8:	f7fd fec4 	bl	8001644 <_isatty>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d103      	bne.n	80038c8 <_isatty_r+0x1c>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d000      	beq.n	80038c8 <_isatty_r+0x1c>
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	bd70      	pop	{r4, r5, r6, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	2000027c 	.word	0x2000027c

080038d0 <_lseek_r>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	0004      	movs	r4, r0
 80038d4:	0008      	movs	r0, r1
 80038d6:	0011      	movs	r1, r2
 80038d8:	001a      	movs	r2, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	4d05      	ldr	r5, [pc, #20]	; (80038f4 <_lseek_r+0x24>)
 80038de:	602b      	str	r3, [r5, #0]
 80038e0:	f7fd feb9 	bl	8001656 <_lseek>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d103      	bne.n	80038f0 <_lseek_r+0x20>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d000      	beq.n	80038f0 <_lseek_r+0x20>
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	bd70      	pop	{r4, r5, r6, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	2000027c 	.word	0x2000027c

080038f8 <memchr>:
 80038f8:	b2c9      	uxtb	r1, r1
 80038fa:	1882      	adds	r2, r0, r2
 80038fc:	4290      	cmp	r0, r2
 80038fe:	d101      	bne.n	8003904 <memchr+0xc>
 8003900:	2000      	movs	r0, #0
 8003902:	4770      	bx	lr
 8003904:	7803      	ldrb	r3, [r0, #0]
 8003906:	428b      	cmp	r3, r1
 8003908:	d0fb      	beq.n	8003902 <memchr+0xa>
 800390a:	3001      	adds	r0, #1
 800390c:	e7f6      	b.n	80038fc <memchr+0x4>
	...

08003910 <__malloc_lock>:
 8003910:	b510      	push	{r4, lr}
 8003912:	4802      	ldr	r0, [pc, #8]	; (800391c <__malloc_lock+0xc>)
 8003914:	f7ff fb39 	bl	8002f8a <__retarget_lock_acquire_recursive>
 8003918:	bd10      	pop	{r4, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	20000274 	.word	0x20000274

08003920 <__malloc_unlock>:
 8003920:	b510      	push	{r4, lr}
 8003922:	4802      	ldr	r0, [pc, #8]	; (800392c <__malloc_unlock+0xc>)
 8003924:	f7ff fb32 	bl	8002f8c <__retarget_lock_release_recursive>
 8003928:	bd10      	pop	{r4, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	20000274 	.word	0x20000274

08003930 <_read_r>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	0004      	movs	r4, r0
 8003934:	0008      	movs	r0, r1
 8003936:	0011      	movs	r1, r2
 8003938:	001a      	movs	r2, r3
 800393a:	2300      	movs	r3, #0
 800393c:	4d05      	ldr	r5, [pc, #20]	; (8003954 <_read_r+0x24>)
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	f7fd fe2f 	bl	80015a2 <_read>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d103      	bne.n	8003950 <_read_r+0x20>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d000      	beq.n	8003950 <_read_r+0x20>
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	bd70      	pop	{r4, r5, r6, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	2000027c 	.word	0x2000027c

08003958 <_init>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr

08003964 <_fini>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr
