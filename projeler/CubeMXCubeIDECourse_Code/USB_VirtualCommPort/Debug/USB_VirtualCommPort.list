
USB_VirtualCommPort.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006074  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006264  08006264  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800626c  0800626c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08006274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018e4  20000214  08006488  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001af8  08006488  00021af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a1a  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de8  00000000  00000000  00032c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00035a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  00036540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001881a  00000000  00000000  00036ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff8e  00000000  00000000  0004f70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867cb  00000000  00000000  0005f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5e63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf8  00000000  00000000  000e5eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000214 	.word	0x20000214
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080061f4 	.word	0x080061f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000218 	.word	0x20000218
 80001d4:	080061f4 	.word	0x080061f4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <HAL_Init+0x40>)
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <HAL_Init+0x40>)
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_Init+0x40>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f94f 	bl	80007ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	2000      	movs	r0, #0
 8000510:	f000 f808 	bl	8000524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f004 ffae 	bl	8005474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f967 	bl	8000816 <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 f92f 	bl	80007c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000014c 	.word	0x2000014c
 800057c:	20000004 	.word	0x20000004
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_IncTick+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_IncTick+0x24>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000240 	.word	0x20000240

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000240 	.word	0x20000240

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff ffee 	bl	80005ac <HAL_GetTick>
 80005d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d005      	beq.n	80005ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_Delay+0x44>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ea:	bf00      	nop
 80005ec:	f7ff ffde 	bl	80005ac <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8f7      	bhi.n	80005ec <HAL_Delay+0x28>
  {
  }
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000004 	.word	0x20000004

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4907      	ldr	r1, [pc, #28]	; (80006a8 <__NVIC_EnableIRQ+0x38>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	; 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000778:	d301      	bcc.n	800077e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2301      	movs	r3, #1
 800077c:	e00f      	b.n	800079e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <SysTick_Config+0x40>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000786:	210f      	movs	r1, #15
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f7ff ff8e 	bl	80006ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SysTick_Config+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <SysTick_Config+0x40>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010

080007ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff29 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d4:	f7ff ff3e 	bl	8000654 <__NVIC_GetPriorityGrouping>
 80007d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	6978      	ldr	r0, [r7, #20]
 80007e0:	f7ff ff8e 	bl	8000700 <NVIC_EncodePriority>
 80007e4:	4602      	mov	r2, r0
 80007e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff5d 	bl	80006ac <__NVIC_SetPriority>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff31 	bl	8000670 <__NVIC_EnableIRQ>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffa2 	bl	8000768 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	b480      	push	{r7}
 8000832:	b089      	sub	sp, #36	; 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	e159      	b.n	8000b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800084c:	2201      	movs	r2, #1
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	429a      	cmp	r2, r3
 8000866:	f040 8148 	bne.w	8000afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d00b      	beq.n	800088a <HAL_GPIO_Init+0x5a>
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d007      	beq.n	800088a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087e:	2b11      	cmp	r3, #17
 8000880:	d003      	beq.n	800088a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b12      	cmp	r3, #18
 8000888:	d130      	bne.n	80008ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2203      	movs	r2, #3
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4013      	ands	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	68da      	ldr	r2, [r3, #12]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c0:	2201      	movs	r2, #1
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	091b      	lsrs	r3, r3, #4
 80008d6:	f003 0201 	and.w	r2, r3, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2203      	movs	r2, #3
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	4013      	ands	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d003      	beq.n	800092c <HAL_GPIO_Init+0xfc>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b12      	cmp	r3, #18
 800092a:	d123      	bne.n	8000974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	08da      	lsrs	r2, r3, #3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3208      	adds	r2, #8
 8000934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	691a      	ldr	r2, [r3, #16]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	69b9      	ldr	r1, [r7, #24]
 8000970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0203 	and.w	r2, r3, #3
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80a2 	beq.w	8000afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b57      	ldr	r3, [pc, #348]	; (8000b18 <HAL_GPIO_Init+0x2e8>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a56      	ldr	r2, [pc, #344]	; (8000b18 <HAL_GPIO_Init+0x2e8>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b54      	ldr	r3, [pc, #336]	; (8000b18 <HAL_GPIO_Init+0x2e8>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009d2:	4a52      	ldr	r2, [pc, #328]	; (8000b1c <HAL_GPIO_Init+0x2ec>)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3302      	adds	r3, #2
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0303 	and.w	r3, r3, #3
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <HAL_GPIO_Init+0x2f0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d019      	beq.n	8000a32 <HAL_GPIO_Init+0x202>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a48      	ldr	r2, [pc, #288]	; (8000b24 <HAL_GPIO_Init+0x2f4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d013      	beq.n	8000a2e <HAL_GPIO_Init+0x1fe>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a47      	ldr	r2, [pc, #284]	; (8000b28 <HAL_GPIO_Init+0x2f8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00d      	beq.n	8000a2a <HAL_GPIO_Init+0x1fa>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a46      	ldr	r2, [pc, #280]	; (8000b2c <HAL_GPIO_Init+0x2fc>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d007      	beq.n	8000a26 <HAL_GPIO_Init+0x1f6>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a45      	ldr	r2, [pc, #276]	; (8000b30 <HAL_GPIO_Init+0x300>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_GPIO_Init+0x1f2>
 8000a1e:	2304      	movs	r3, #4
 8000a20:	e008      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a22:	2307      	movs	r3, #7
 8000a24:	e006      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a26:	2303      	movs	r3, #3
 8000a28:	e004      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e002      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a32:	2300      	movs	r3, #0
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	f002 0203 	and.w	r2, r2, #3
 8000a3a:	0092      	lsls	r2, r2, #2
 8000a3c:	4093      	lsls	r3, r2
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a44:	4935      	ldr	r1, [pc, #212]	; (8000b1c <HAL_GPIO_Init+0x2ec>)
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a52:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa0:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aca:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000af4:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3301      	adds	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	f67f aea2 	bls.w	800084c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40013800 	.word	0x40013800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40013c00 	.word	0x40013c00

08000b38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	b08f      	sub	sp, #60	; 0x3c
 8000b3c:	af0a      	add	r7, sp, #40	; 0x28
 8000b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e10f      	b.n	8000d6a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d106      	bne.n	8000b6a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f004 fe0b 	bl	8005780 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 feb8 	bl	80028fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	687e      	ldr	r6, [r7, #4]
 8000b96:	466d      	mov	r5, sp
 8000b98:	f106 0410 	add.w	r4, r6, #16
 8000b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ba8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bac:	1d33      	adds	r3, r6, #4
 8000bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb0:	6838      	ldr	r0, [r7, #0]
 8000bb2:	f001 fd8f 	bl	80026d4 <USB_CoreInit>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e0d0      	b.n	8000d6a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fea6 	bl	8002920 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e04a      	b.n	8000c70 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	333d      	adds	r3, #61	; 0x3d
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bee:	7bfa      	ldrb	r2, [r7, #15]
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	333c      	adds	r3, #60	; 0x3c
 8000bfe:	7bfa      	ldrb	r2, [r7, #15]
 8000c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	b298      	uxth	r0, r3
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	1a9b      	subs	r3, r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3342      	adds	r3, #66	; 0x42
 8000c16:	4602      	mov	r2, r0
 8000c18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	333f      	adds	r3, #63	; 0x3f
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c2e:	7bfa      	ldrb	r2, [r7, #15]
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	4613      	mov	r3, r2
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	1a9b      	subs	r3, r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3344      	adds	r3, #68	; 0x44
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	3348      	adds	r3, #72	; 0x48
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	1a9b      	subs	r3, r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	3350      	adds	r3, #80	; 0x50
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfa      	ldrb	r2, [r7, #15]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3af      	bcc.n	8000bda <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e044      	b.n	8000d0a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cac:	7bfa      	ldrb	r2, [r7, #15]
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	3301      	adds	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	7bfa      	ldrb	r2, [r7, #15]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3b5      	bcc.n	8000c80 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	687e      	ldr	r6, [r7, #4]
 8000d1c:	466d      	mov	r5, sp
 8000d1e:	f106 0410 	add.w	r4, r6, #16
 8000d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d32:	1d33      	adds	r3, r6, #4
 8000d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d36:	6838      	ldr	r0, [r7, #0]
 8000d38:	f001 fe1c 	bl	8002974 <USB_DevInit>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2202      	movs	r2, #2
 8000d46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00d      	b.n	8000d6a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fe11 	bl	800398a <USB_DevDisconnect>

  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_PCD_Start+0x1c>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e020      	b.n	8000dd0 <HAL_PCD_Start+0x5e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d109      	bne.n	8000db2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d005      	beq.n	8000db2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000daa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fdcf 	bl	800395a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fd8b 	bl	80028dc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b08d      	sub	sp, #52	; 0x34
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fe76 	bl	8003ae0 <USB_GetMode>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f040 838e 	bne.w	8001518 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fdda 	bl	80039ba <USB_ReadInterrupts>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 8384 	beq.w	8001516 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 fdd1 	bl	80039ba <USB_ReadInterrupts>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d107      	bne.n	8000e32 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f002 0202 	and.w	r2, r2, #2
 8000e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fdbf 	bl	80039ba <USB_ReadInterrupts>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e46:	d17b      	bne.n	8000f40 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 fdc5 	bl	80039e0 <USB_ReadDevAllOutEpInterrupt>
 8000e56:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000e58:	e06f      	b.n	8000f3a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d064      	beq.n	8000f2e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fdea 	bl	8003a48 <USB_ReadDevOutEPInterrupt>
 8000e74:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	015a      	lsls	r2, r3, #5
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	4413      	add	r3, r2
 8000e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	2301      	movs	r3, #1
 8000e90:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000e92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 fe0d 	bl	8001ab4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00c      	beq.n	8000ebe <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 ff0c 	bl	8001cc4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	015a      	lsls	r2, r3, #5
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2308      	movs	r3, #8
 8000ebc:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d008      	beq.n	8000eda <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	015a      	lsls	r2, r3, #5
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	4413      	add	r3, r2
 8000ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	f003 0320 	and.w	r3, r3, #32
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d015      	beq.n	8000f10 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2101      	movs	r1, #1
 8000efa:	f002 fe35 	bl	8003b68 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	015a      	lsls	r2, r3, #5
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	4413      	add	r3, r2
 8000f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d009      	beq.n	8000f2e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	015a      	lsls	r2, r3, #5
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f26:	461a      	mov	r2, r3
 8000f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	3301      	adds	r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d18c      	bne.n	8000e5a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fd38 	bl	80039ba <USB_ReadInterrupts>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f54:	f040 80c4 	bne.w	80010e0 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fd59 	bl	8003a14 <USB_ReadDevAllInEpInterrupt>
 8000f62:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8000f68:	e0b6      	b.n	80010d8 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80ab 	beq.w	80010cc <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fd7f 	bl	8003a84 <USB_ReadDevInEPInterrupt>
 8000f86:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d05b      	beq.n	800104a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	f003 030f 	and.w	r3, r3, #15
 8000f98:	2201      	movs	r2, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69f9      	ldr	r1, [r7, #28]
 8000fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	015a      	lsls	r2, r3, #5
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d11b      	bne.n	8001008 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	3348      	adds	r3, #72	; 0x48
 8000fe0:	6819      	ldr	r1, [r3, #0]
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4403      	add	r3, r0
 8000ff0:	3344      	adds	r3, #68	; 0x44
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4419      	add	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4403      	add	r3, r0
 8001004:	3348      	adds	r3, #72	; 0x48
 8001006:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f004 fc37 	bl	8005882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d116      	bne.n	800104a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	2b00      	cmp	r3, #0
 8001020:	d113      	bne.n	800104a <HAL_PCD_IRQHandler+0x272>
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3350      	adds	r3, #80	; 0x50
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d108      	bne.n	800104a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001042:	461a      	mov	r2, r3
 8001044:	2101      	movs	r1, #1
 8001046:	f002 fd8f 	bl	8003b68 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d008      	beq.n	8001066 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	015a      	lsls	r2, r3, #5
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	4413      	add	r3, r2
 800105c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001060:	461a      	mov	r2, r3
 8001062:	2308      	movs	r3, #8
 8001064:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	015a      	lsls	r2, r3, #5
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	4413      	add	r3, r2
 8001078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800107c:	461a      	mov	r2, r3
 800107e:	2310      	movs	r3, #16
 8001080:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001088:	2b00      	cmp	r3, #0
 800108a:	d008      	beq.n	800109e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	015a      	lsls	r2, r3, #5
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	4413      	add	r3, r2
 8001094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001098:	461a      	mov	r2, r3
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	015a      	lsls	r2, r3, #5
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	4413      	add	r3, r2
 80010b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b4:	461a      	mov	r2, r3
 80010b6:	2302      	movs	r3, #2
 80010b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80010c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fc67 	bl	800199a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	3301      	adds	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	085b      	lsrs	r3, r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80010d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f47f af45 	bne.w	8000f6a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fc68 	bl	80039ba <USB_ReadInterrupts>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010f4:	d122      	bne.n	800113c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fe88 	bl	8001e34 <HAL_PCDEx_LPM_Callback>
 8001124:	e002      	b.n	800112c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f004 fc18 	bl	800595c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800113a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fc3a 	bl	80039ba <USB_ReadInterrupts>
 8001146:	4603      	mov	r3, r0
 8001148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800114c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001150:	d112      	bne.n	8001178 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f004 fbd4 	bl	8005910 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001176:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fc1c 	bl	80039ba <USB_ReadInterrupts>
 8001182:	4603      	mov	r3, r0
 8001184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118c:	f040 80a7 	bne.w	80012de <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2110      	movs	r1, #16
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fd54 	bl	8002c58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011b4:	e036      	b.n	8001224 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b8:	015a      	lsls	r2, r3, #5
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	4413      	add	r3, r2
 80011be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011c2:	461a      	mov	r2, r3
 80011c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80011c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	015a      	lsls	r2, r3, #5
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	4413      	add	r3, r2
 80011d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011da:	0151      	lsls	r1, r2, #5
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	440a      	add	r2, r1
 80011e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80011e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80011e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	015a      	lsls	r2, r3, #5
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	4413      	add	r3, r2
 80011f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011f6:	461a      	mov	r2, r3
 80011f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80011fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	015a      	lsls	r2, r3, #5
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	4413      	add	r3, r2
 8001206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800120e:	0151      	lsls	r1, r2, #5
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	440a      	add	r2, r1
 8001214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800121c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	3301      	adds	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122a:	429a      	cmp	r2, r3
 800122c:	d3c3      	bcc.n	80011b6 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800123c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001240:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	2b00      	cmp	r3, #0
 8001248:	d016      	beq.n	8001278 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800125a:	f043 030b 	orr.w	r3, r3, #11
 800125e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001270:	f043 030b 	orr.w	r3, r3, #11
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	e015      	b.n	80012a4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800128a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800128e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800129e:	f043 030b 	orr.w	r3, r3, #11
 80012a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80012b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80012c8:	461a      	mov	r2, r3
 80012ca:	f002 fc4d 	bl	8003b68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fb69 	bl	80039ba <USB_ReadInterrupts>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012f2:	d124      	bne.n	800133e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fbff 	bl	8003afc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fd09 	bl	8002d1a <USB_GetDevSpeed>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681c      	ldr	r4, [r3, #0]
 8001314:	f001 f9d2 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 8001318:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4620      	mov	r0, r4
 8001324:	f001 fa38 	bl	8002798 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f004 fad2 	bl	80058d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800133c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fb39 	bl	80039ba <USB_ReadInterrupts>
 8001348:	4603      	mov	r3, r0
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b10      	cmp	r3, #16
 8001350:	d161      	bne.n	8001416 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0210 	bic.w	r2, r2, #16
 8001360:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f003 020f 	and.w	r2, r3, #15
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	3304      	adds	r3, #4
 8001380:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	0c5b      	lsrs	r3, r3, #17
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	2b02      	cmp	r3, #2
 800138c:	d124      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d035      	beq.n	8001406 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	6a38      	ldr	r0, [r7, #32]
 80013ae:	f002 f9b1 	bl	8003714 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013be:	441a      	add	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	619a      	str	r2, [r3, #24]
 80013d6:	e016      	b.n	8001406 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	0c5b      	lsrs	r3, r3, #17
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	d110      	bne.n	8001406 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013ea:	2208      	movs	r2, #8
 80013ec:	4619      	mov	r1, r3
 80013ee:	6a38      	ldr	r0, [r7, #32]
 80013f0:	f002 f990 	bl	8003714 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001400:	441a      	add	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0210 	orr.w	r2, r2, #16
 8001414:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f002 facd 	bl	80039ba <USB_ReadInterrupts>
 8001420:	4603      	mov	r3, r0
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b08      	cmp	r3, #8
 8001428:	d10a      	bne.n	8001440 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f004 fa43 	bl	80058b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f002 0208 	and.w	r2, r2, #8
 800143e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fab8 	bl	80039ba <USB_ReadInterrupts>
 800144a:	4603      	mov	r3, r0
 800144c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001454:	d10f      	bne.n	8001476 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f004 fa9b 	bl	800599c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fa9d 	bl	80039ba <USB_ReadInterrupts>
 8001480:	4603      	mov	r3, r0
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800148a:	d10f      	bne.n	80014ac <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4619      	mov	r1, r3
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f004 fa6e 	bl	8005978 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80014aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fa82 	bl	80039ba <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d10a      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f004 fa7c 	bl	80059c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80014d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fa6c 	bl	80039ba <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d115      	bne.n	8001518 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f004 fa6c 	bl	80059dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	e000      	b.n	8001518 <HAL_PCD_IRQHandler+0x740>
      return;
 8001516:	bf00      	nop
    }
  }
}
 8001518:	3734      	adds	r7, #52	; 0x34
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}

0800151e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_PCD_SetAddress+0x1a>
 8001534:	2302      	movs	r3, #2
 8001536:	e013      	b.n	8001560 <HAL_PCD_SetAddress+0x42>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f9dc 	bl	800390e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4603      	mov	r3, r0
 8001578:	70fb      	strb	r3, [r7, #3]
 800157a:	460b      	mov	r3, r1
 800157c:	803b      	strh	r3, [r7, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da0f      	bge.n	80015ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	3338      	adds	r3, #56	; 0x38
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	3304      	adds	r3, #4
 80015a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	705a      	strb	r2, [r3, #1]
 80015ac:	e00f      	b.n	80015ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	f003 020f 	and.w	r2, r3, #15
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	3304      	adds	r3, #4
 80015c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015da:	883a      	ldrh	r2, [r7, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	78ba      	ldrb	r2, [r7, #2]
 80015e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015f8:	78bb      	ldrb	r3, [r7, #2]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d102      	bne.n	8001604 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_PCD_EP_Open+0xaa>
 800160e:	2302      	movs	r3, #2
 8001610:	e00e      	b.n	8001630 <HAL_PCD_EP_Open+0xc8>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68f9      	ldr	r1, [r7, #12]
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fb9f 	bl	8002d64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800162e:	7afb      	ldrb	r3, [r7, #11]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001648:	2b00      	cmp	r3, #0
 800164a:	da0f      	bge.n	800166c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	f003 020f 	and.w	r2, r3, #15
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	3338      	adds	r3, #56	; 0x38
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	3304      	adds	r3, #4
 8001662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	705a      	strb	r2, [r3, #1]
 800166a:	e00f      	b.n	800168c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f003 020f 	and.w	r2, r3, #15
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	1a9b      	subs	r3, r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	3304      	adds	r3, #4
 8001684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	b2da      	uxtb	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_PCD_EP_Close+0x6e>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e00e      	b.n	80016c4 <HAL_PCD_EP_Close+0x8c>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68f9      	ldr	r1, [r7, #12]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 fbdd 	bl	8002e74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	460b      	mov	r3, r1
 80016da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	f003 020f 	and.w	r2, r3, #15
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	3304      	adds	r3, #4
 80016f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2200      	movs	r2, #0
 800170c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	b2da      	uxtb	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d102      	bne.n	8001728 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001728:	7afb      	ldrb	r3, [r7, #11]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	6979      	ldr	r1, [r7, #20]
 8001740:	f001 fe60 	bl	8003404 <USB_EP0StartXfer>
 8001744:	e008      	b.n	8001758 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	6979      	ldr	r1, [r7, #20]
 8001754:	f001 fc12 	bl	8002f7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	f003 020f 	and.w	r2, r3, #15
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001784:	681b      	ldr	r3, [r3, #0]
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	460b      	mov	r3, r1
 80017a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	f003 020f 	and.w	r2, r3, #15
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	3338      	adds	r3, #56	; 0x38
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	3304      	adds	r3, #4
 80017b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2201      	movs	r2, #1
 80017d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ec:	7afb      	ldrb	r3, [r7, #11]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	6979      	ldr	r1, [r7, #20]
 8001804:	f001 fdfe 	bl	8003404 <USB_EP0StartXfer>
 8001808:	e008      	b.n	800181c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	6979      	ldr	r1, [r7, #20]
 8001818:	f001 fbb0 	bl	8002f7c <USB_EPStartXfer>
  }

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	f003 020f 	and.w	r2, r3, #15
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d901      	bls.n	8001844 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e050      	b.n	80018e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001848:	2b00      	cmp	r3, #0
 800184a:	da0f      	bge.n	800186c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	f003 020f 	and.w	r2, r3, #15
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	3338      	adds	r3, #56	; 0x38
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	3304      	adds	r3, #4
 8001862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	705a      	strb	r2, [r3, #1]
 800186a:	e00d      	b.n	8001888 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	4613      	mov	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	3304      	adds	r3, #4
 8001880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	b2da      	uxtb	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_PCD_EP_SetStall+0x82>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e01e      	b.n	80018e6 <HAL_PCD_EP_SetStall+0xc0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68f9      	ldr	r1, [r7, #12]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 ff55 	bl	8003766 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	b2d9      	uxtb	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018d6:	461a      	mov	r2, r3
 80018d8:	f002 f946 	bl	8003b68 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	f003 020f 	and.w	r2, r3, #15
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	d901      	bls.n	800190c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e042      	b.n	8001992 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800190c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da0f      	bge.n	8001934 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 020f 	and.w	r2, r3, #15
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3338      	adds	r3, #56	; 0x38
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	3304      	adds	r3, #4
 800192a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	705a      	strb	r2, [r3, #1]
 8001932:	e00f      	b.n	8001954 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	f003 020f 	and.w	r2, r3, #15
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_PCD_EP_ClrStall+0x86>
 8001970:	2302      	movs	r3, #2
 8001972:	e00e      	b.n	8001992 <HAL_PCD_EP_ClrStall+0xa4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	4618      	mov	r0, r3
 8001984:	f001 ff5d 	bl	8003842 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b08a      	sub	sp, #40	; 0x28
 800199e:	af02      	add	r7, sp, #8
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	3338      	adds	r3, #56	; 0x38
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	3304      	adds	r3, #4
 80019c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d901      	bls.n	80019d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06c      	b.n	8001aac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d902      	bls.n	80019ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3303      	adds	r3, #3
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80019f6:	e02b      	b.n	8001a50 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d902      	bls.n	8001a14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	3303      	adds	r3, #3
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68d9      	ldr	r1, [r3, #12]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	4603      	mov	r3, r0
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f001 fe39 	bl	80036aa <USB_WritePacket>

    ep->xfer_buff  += len;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	441a      	add	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	441a      	add	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d809      	bhi.n	8001a7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d203      	bcs.n	8001a7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1be      	bne.n	80019f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d811      	bhi.n	8001aaa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	6939      	ldr	r1, [r7, #16]
 8001aa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	333c      	adds	r3, #60	; 0x3c
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	015a      	lsls	r2, r3, #5
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	f040 80b3 	bne.w	8001c52 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d028      	beq.n	8001b48 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4a70      	ldr	r2, [pc, #448]	; (8001cbc <PCD_EP_OutXfrComplete_int+0x208>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d90e      	bls.n	8001b1c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d009      	beq.n	8001b1c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b14:	461a      	mov	r2, r3
 8001b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f003 fe83 	bl	8005828 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2101      	movs	r1, #1
 8001b30:	f002 f81a 	bl	8003b68 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b40:	461a      	mov	r2, r3
 8001b42:	2308      	movs	r3, #8
 8001b44:	6093      	str	r3, [r2, #8]
 8001b46:	e0b3      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2320      	movs	r3, #32
 8001b62:	6093      	str	r3, [r2, #8]
 8001b64:	e0a4      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 809f 	bne.w	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4a51      	ldr	r2, [pc, #324]	; (8001cbc <PCD_EP_OutXfrComplete_int+0x208>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d90f      	bls.n	8001b9a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00a      	beq.n	8001b9a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	461a      	mov	r2, r3
 8001b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b96:	6093      	str	r3, [r2, #8]
 8001b98:	e08a      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bac:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	0159      	lsls	r1, r3, #5
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001bc0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4403      	add	r3, r0
 8001bd0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bd4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	1a9b      	subs	r3, r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4403      	add	r3, r0
 8001bf8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4419      	add	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4403      	add	r3, r0
 8001c0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c12:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f003 fe16 	bl	800584c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d144      	bne.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d138      	bne.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	f001 ff8c 	bl	8003b68 <USB_EP0_OutStart>
 8001c50:	e02e      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d124      	bne.n	8001ca4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c70:	461a      	mov	r2, r3
 8001c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c76:	6093      	str	r3, [r2, #8]
 8001c78:	e01a      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c90:	461a      	mov	r2, r3
 8001c92:	2320      	movs	r3, #32
 8001c94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f003 fdd5 	bl	800584c <HAL_PCD_DataOutStageCallback>
 8001ca2:	e005      	b.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f003 fdce 	bl	800584c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	4f54300a 	.word	0x4f54300a
 8001cc0:	4f54310a 	.word	0x4f54310a

08001cc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	333c      	adds	r3, #60	; 0x3c
 8001cdc:	3304      	adds	r3, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d113      	bne.n	8001d22 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <PCD_EP_OutSetupPacket_int+0xb8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d922      	bls.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01d      	beq.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d1e:	6093      	str	r3, [r2, #8]
 8001d20:	e012      	b.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <PCD_EP_OutSetupPacket_int+0xbc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10e      	bne.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d40:	461a      	mov	r2, r3
 8001d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f003 fd6d 	bl	8005828 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <PCD_EP_OutSetupPacket_int+0xb8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d90c      	bls.n	8001d70 <PCD_EP_OutSetupPacket_int+0xac>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d108      	bne.n	8001d70 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	f001 fefc 	bl	8003b68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	4f54300a 	.word	0x4f54300a
 8001d80:	4f54310a 	.word	0x4f54310a

08001d84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
 8001d90:	4613      	mov	r3, r2
 8001d92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d107      	bne.n	8001db2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	0419      	lsls	r1, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
 8001db0:	e028      	b.n	8001e04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	0c1b      	lsrs	r3, r3, #16
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e00d      	b.n	8001de2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3340      	adds	r3, #64	; 0x40
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4413      	add	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	3301      	adds	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d3ec      	bcc.n	8001dc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001dec:	883b      	ldrh	r3, [r7, #0]
 8001dee:	0418      	lsls	r0, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	4302      	orrs	r2, r0
 8001dfc:	3340      	adds	r3, #64	; 0x40
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e25b      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d075      	beq.n	8001f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6a:	4ba3      	ldr	r3, [pc, #652]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d00c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4ba0      	ldr	r3, [pc, #640]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d112      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b9d      	ldr	r3, [pc, #628]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b99      	ldr	r3, [pc, #612]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e236      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x74>
 8001eb2:	4b91      	ldr	r3, [pc, #580]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a90      	ldr	r2, [pc, #576]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a8a      	ldr	r2, [pc, #552]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a87      	ldr	r2, [pc, #540]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ee4:	4b84      	ldr	r3, [pc, #528]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a83      	ldr	r2, [pc, #524]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b81      	ldr	r3, [pc, #516]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a80      	ldr	r2, [pc, #512]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fb52 	bl	80005ac <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fb4e 	bl	80005ac <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1fb      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xc0>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fb3e 	bl	80005ac <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe fb3a 	bl	80005ac <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1e7      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0xe8>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d063      	beq.n	800202a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d11c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1bb      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b56      	ldr	r3, [pc, #344]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4952      	ldr	r1, [pc, #328]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	e03a      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <HAL_RCC_OscConfig+0x2b0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7fe faf3 	bl	80005ac <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7fe faef 	bl	80005ac <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e19c      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4940      	ldr	r1, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e015      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_RCC_OscConfig+0x2b0>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe fad2 	bl	80005ac <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200c:	f7fe face 	bl	80005ac <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e17b      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d030      	beq.n	8002098 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCC_OscConfig+0x2b4>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe fab2 	bl	80005ac <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204c:	f7fe faae 	bl	80005ac <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e15b      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x200>
 800206a:	e015      	b.n	8002098 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x2b4>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7fe fa9b 	bl	80005ac <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207a:	f7fe fa97 	bl	80005ac <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e144      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a0 	beq.w	80021e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x2b8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d121      	bne.n	8002126 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_OscConfig+0x2b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_RCC_OscConfig+0x2b8>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7fe fa5d 	bl	80005ac <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e011      	b.n	800211a <HAL_RCC_OscConfig+0x2ce>
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470000 	.word	0x42470000
 8002100:	42470e80 	.word	0x42470e80
 8002104:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002108:	f7fe fa50 	bl	80005ac <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0fd      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b81      	ldr	r3, [pc, #516]	; (8002320 <HAL_RCC_OscConfig+0x4d4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d106      	bne.n	800213c <HAL_RCC_OscConfig+0x2f0>
 800212e:	4b7d      	ldr	r3, [pc, #500]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a7c      	ldr	r2, [pc, #496]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	e01c      	b.n	8002176 <HAL_RCC_OscConfig+0x32a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x312>
 8002144:	4b77      	ldr	r3, [pc, #476]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a76      	ldr	r2, [pc, #472]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	4b74      	ldr	r3, [pc, #464]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a73      	ldr	r2, [pc, #460]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x32a>
 800215e:	4b71      	ldr	r3, [pc, #452]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a70      	ldr	r2, [pc, #448]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	4b6e      	ldr	r3, [pc, #440]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a6d      	ldr	r2, [pc, #436]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe fa15 	bl	80005ac <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fa11 	bl	80005ac <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0bc      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <HAL_RCC_OscConfig+0x33a>
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe f9ff 	bl	80005ac <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe f9fb 	bl	80005ac <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0a6      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b56      	ldr	r3, [pc, #344]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b52      	ldr	r3, [pc, #328]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a51      	ldr	r2, [pc, #324]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8092 	beq.w	8002314 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f0:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d05c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d141      	bne.n	8002288 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b48      	ldr	r3, [pc, #288]	; (8002328 <HAL_RCC_OscConfig+0x4dc>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe f9cf 	bl	80005ac <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe f9cb 	bl	80005ac <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e078      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002224:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	019b      	lsls	r3, r3, #6
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	4933      	ldr	r1, [pc, #204]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225a:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_OscConfig+0x4dc>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe f9a4 	bl	80005ac <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe f9a0 	bl	80005ac <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e04d      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x41c>
 8002286:	e045      	b.n	8002314 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x4dc>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe f98d 	bl	80005ac <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe f989 	bl	80005ac <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e036      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x44a>
 80022b4:	e02e      	b.n	8002314 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e029      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_RCC_OscConfig+0x4d8>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d115      	bne.n	8002310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ea:	4013      	ands	r3, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10d      	bne.n	8002310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40007000 	.word	0x40007000
 8002324:	40023800 	.word	0x40023800
 8002328:	42470060 	.word	0x42470060

0800232c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0cc      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d90c      	bls.n	8002368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800238a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a52      	ldr	r2, [pc, #328]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d044      	beq.n	800244c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d119      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e067      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4934      	ldr	r1, [pc, #208]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800241c:	f7fe f8c6 	bl	80005ac <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7fe f8c2 	bl	80005ac <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e04f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d20c      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490a      	ldr	r1, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f826 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00
 80024e8:	40023800 	.word	0x40023800
 80024ec:	08006254 	.word	0x08006254
 80024f0:	2000014c 	.word	0x2000014c
 80024f4:	20000000 	.word	0x20000000

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	2300      	movs	r3, #0
 800250a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002510:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d00d      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x40>
 800251c:	2b08      	cmp	r3, #8
 800251e:	f200 80bd 	bhi.w	800269c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x34>
 8002526:	2b04      	cmp	r3, #4
 8002528:	d003      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x3a>
 800252a:	e0b7      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800252e:	60bb      	str	r3, [r7, #8]
       break;
 8002530:	e0b7      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002532:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002534:	60bb      	str	r3, [r7, #8]
      break;
 8002536:	e0b4      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002538:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002540:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002542:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d04d      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	461a      	mov	r2, r3
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800255e:	f04f 0100 	mov.w	r1, #0
 8002562:	ea02 0800 	and.w	r8, r2, r0
 8002566:	ea03 0901 	and.w	r9, r3, r1
 800256a:	4640      	mov	r0, r8
 800256c:	4649      	mov	r1, r9
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	014b      	lsls	r3, r1, #5
 8002578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800257c:	0142      	lsls	r2, r0, #5
 800257e:	4610      	mov	r0, r2
 8002580:	4619      	mov	r1, r3
 8002582:	ebb0 0008 	subs.w	r0, r0, r8
 8002586:	eb61 0109 	sbc.w	r1, r1, r9
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	018b      	lsls	r3, r1, #6
 8002594:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002598:	0182      	lsls	r2, r0, #6
 800259a:	1a12      	subs	r2, r2, r0
 800259c:	eb63 0301 	sbc.w	r3, r3, r1
 80025a0:	f04f 0000 	mov.w	r0, #0
 80025a4:	f04f 0100 	mov.w	r1, #0
 80025a8:	00d9      	lsls	r1, r3, #3
 80025aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025ae:	00d0      	lsls	r0, r2, #3
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	eb12 0208 	adds.w	r2, r2, r8
 80025b8:	eb43 0309 	adc.w	r3, r3, r9
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	0259      	lsls	r1, r3, #9
 80025c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80025ca:	0250      	lsls	r0, r2, #9
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f7fd fe04 	bl	80001e8 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e04a      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	461a      	mov	r2, r3
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	ea02 0400 	and.w	r4, r2, r0
 8002602:	ea03 0501 	and.w	r5, r3, r1
 8002606:	4620      	mov	r0, r4
 8002608:	4629      	mov	r1, r5
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	014b      	lsls	r3, r1, #5
 8002614:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002618:	0142      	lsls	r2, r0, #5
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	1b00      	subs	r0, r0, r4
 8002620:	eb61 0105 	sbc.w	r1, r1, r5
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	018b      	lsls	r3, r1, #6
 800262e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002632:	0182      	lsls	r2, r0, #6
 8002634:	1a12      	subs	r2, r2, r0
 8002636:	eb63 0301 	sbc.w	r3, r3, r1
 800263a:	f04f 0000 	mov.w	r0, #0
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	00d9      	lsls	r1, r3, #3
 8002644:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002648:	00d0      	lsls	r0, r2, #3
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	1912      	adds	r2, r2, r4
 8002650:	eb45 0303 	adc.w	r3, r5, r3
 8002654:	f04f 0000 	mov.w	r0, #0
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	0299      	lsls	r1, r3, #10
 800265e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002662:	0290      	lsls	r0, r2, #10
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	461a      	mov	r2, r3
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	f7fd fdb8 	bl	80001e8 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4613      	mov	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	3301      	adds	r3, #1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	60bb      	str	r3, [r7, #8]
      break;
 800269a:	e002      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800269e:	60bb      	str	r3, [r7, #8]
      break;
 80026a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a2:	68bb      	ldr	r3, [r7, #8]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	00f42400 	.word	0x00f42400
 80026b8:	007a1200 	.word	0x007a1200

080026bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	2000014c 	.word	0x2000014c

080026d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80026d4:	b084      	sub	sp, #16
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	f107 001c 	add.w	r0, r7, #28
 80026e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d122      	bne.n	8002732 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d105      	bne.n	8002726 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f001 fa7c 	bl	8003c24 <USB_CoreReset>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e01a      	b.n	8002768 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f001 fa70 	bl	8003c24 <USB_CoreReset>
 8002744:	4603      	mov	r3, r0
 8002746:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	639a      	str	r2, [r3, #56]	; 0x38
 800275a:	e005      	b.n	8002768 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10b      	bne.n	8002786 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f043 0206 	orr.w	r2, r3, #6
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002792:	b004      	add	sp, #16
 8002794:	4770      	bx	lr
	...

08002798 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d165      	bne.n	8002878 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4a41      	ldr	r2, [pc, #260]	; (80028b4 <USB_SetTurnaroundTime+0x11c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d906      	bls.n	80027c2 <USB_SetTurnaroundTime+0x2a>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <USB_SetTurnaroundTime+0x120>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d202      	bcs.n	80027c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80027bc:	230f      	movs	r3, #15
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e062      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4a3c      	ldr	r2, [pc, #240]	; (80028b8 <USB_SetTurnaroundTime+0x120>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d306      	bcc.n	80027d8 <USB_SetTurnaroundTime+0x40>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4a3b      	ldr	r2, [pc, #236]	; (80028bc <USB_SetTurnaroundTime+0x124>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d202      	bcs.n	80027d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80027d2:	230e      	movs	r3, #14
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e057      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4a38      	ldr	r2, [pc, #224]	; (80028bc <USB_SetTurnaroundTime+0x124>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d306      	bcc.n	80027ee <USB_SetTurnaroundTime+0x56>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4a37      	ldr	r2, [pc, #220]	; (80028c0 <USB_SetTurnaroundTime+0x128>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d202      	bcs.n	80027ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80027e8:	230d      	movs	r3, #13
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	e04c      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4a33      	ldr	r2, [pc, #204]	; (80028c0 <USB_SetTurnaroundTime+0x128>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d306      	bcc.n	8002804 <USB_SetTurnaroundTime+0x6c>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4a32      	ldr	r2, [pc, #200]	; (80028c4 <USB_SetTurnaroundTime+0x12c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d802      	bhi.n	8002804 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80027fe:	230c      	movs	r3, #12
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e041      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4a2f      	ldr	r2, [pc, #188]	; (80028c4 <USB_SetTurnaroundTime+0x12c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d906      	bls.n	800281a <USB_SetTurnaroundTime+0x82>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <USB_SetTurnaroundTime+0x130>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d802      	bhi.n	800281a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002814:	230b      	movs	r3, #11
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e036      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4a2a      	ldr	r2, [pc, #168]	; (80028c8 <USB_SetTurnaroundTime+0x130>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d906      	bls.n	8002830 <USB_SetTurnaroundTime+0x98>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4a29      	ldr	r2, [pc, #164]	; (80028cc <USB_SetTurnaroundTime+0x134>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d802      	bhi.n	8002830 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800282a:	230a      	movs	r3, #10
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e02b      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4a26      	ldr	r2, [pc, #152]	; (80028cc <USB_SetTurnaroundTime+0x134>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d906      	bls.n	8002846 <USB_SetTurnaroundTime+0xae>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4a25      	ldr	r2, [pc, #148]	; (80028d0 <USB_SetTurnaroundTime+0x138>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d202      	bcs.n	8002846 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002840:	2309      	movs	r3, #9
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e020      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4a21      	ldr	r2, [pc, #132]	; (80028d0 <USB_SetTurnaroundTime+0x138>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d306      	bcc.n	800285c <USB_SetTurnaroundTime+0xc4>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4a20      	ldr	r2, [pc, #128]	; (80028d4 <USB_SetTurnaroundTime+0x13c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d802      	bhi.n	800285c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002856:	2308      	movs	r3, #8
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e015      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <USB_SetTurnaroundTime+0x13c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d906      	bls.n	8002872 <USB_SetTurnaroundTime+0xda>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <USB_SetTurnaroundTime+0x140>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d202      	bcs.n	8002872 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800286c:	2307      	movs	r3, #7
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e00a      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002872:	2306      	movs	r3, #6
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e007      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800287e:	2309      	movs	r3, #9
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e001      	b.n	8002888 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002884:	2309      	movs	r3, #9
 8002886:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80028a0:	431a      	orrs	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	00d8acbf 	.word	0x00d8acbf
 80028b8:	00e4e1c0 	.word	0x00e4e1c0
 80028bc:	00f42400 	.word	0x00f42400
 80028c0:	01067380 	.word	0x01067380
 80028c4:	011a499f 	.word	0x011a499f
 80028c8:	01312cff 	.word	0x01312cff
 80028cc:	014ca43f 	.word	0x014ca43f
 80028d0:	016e3600 	.word	0x016e3600
 80028d4:	01a6ab1f 	.word	0x01a6ab1f
 80028d8:	01e84800 	.word	0x01e84800

080028dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0201 	bic.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d106      	bne.n	800294c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	e00b      	b.n	8002964 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	e001      	b.n	8002964 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e003      	b.n	800296c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002964:	2032      	movs	r0, #50	; 0x32
 8002966:	f7fd fe2d 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002974:	b084      	sub	sp, #16
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	e009      	b.n	80029a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	3340      	adds	r3, #64	; 0x40
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	2200      	movs	r2, #0
 80029a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	3301      	adds	r3, #1
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b0e      	cmp	r3, #14
 80029ac:	d9f2      	bls.n	8002994 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80029ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d112      	bne.n	80029da <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
 80029d8:	e00b      	b.n	80029f2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80029f8:	461a      	mov	r2, r3
 80029fa:	2300      	movs	r3, #0
 80029fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a04:	4619      	mov	r1, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	680b      	ldr	r3, [r1, #0]
 8002a10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d10c      	bne.n	8002a32 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a1e:	2100      	movs	r1, #0
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f961 	bl	8002ce8 <USB_SetDevSpeed>
 8002a26:	e008      	b.n	8002a3a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f95c 	bl	8002ce8 <USB_SetDevSpeed>
 8002a30:	e003      	b.n	8002a3a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a32:	2103      	movs	r1, #3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f957 	bl	8002ce8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a3a:	2110      	movs	r1, #16
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f90b 	bl	8002c58 <USB_FlushTxFifo>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f929 	bl	8002ca4 <USB_FlushRxFifo>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a62:	461a      	mov	r2, r3
 8002a64:	2300      	movs	r3, #0
 8002a66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2300      	movs	r3, #0
 8002a72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	e043      	b.n	8002b0e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a9c:	d118      	bne.n	8002ad0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	e013      	b.n	8002ae2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e008      	b.n	8002ae2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002adc:	461a      	mov	r2, r3
 8002ade:	2300      	movs	r3, #0
 8002ae0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aee:	461a      	mov	r2, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b00:	461a      	mov	r2, r3
 8002b02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d3b7      	bcc.n	8002a86 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	e043      	b.n	8002ba4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b32:	d118      	bne.n	8002b66 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b46:	461a      	mov	r2, r3
 8002b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e013      	b.n	8002b78 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	e008      	b.n	8002b78 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b72:	461a      	mov	r2, r3
 8002b74:	2300      	movs	r3, #0
 8002b76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b84:	461a      	mov	r2, r3
 8002b86:	2300      	movs	r3, #0
 8002b88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b96:	461a      	mov	r2, r3
 8002b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d3b7      	bcc.n	8002b1c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbe:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d111      	bne.n	8002bea <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <USB_DevInit+0x2dc>)
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	f043 0303 	orr.w	r3, r3, #3
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002bf6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f043 0210 	orr.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <USB_DevInit+0x2e0>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f043 0208 	orr.w	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c4a:	b004      	add	sp, #16
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	00800100 	.word	0x00800100
 8002c54:	803c3800 	.word	0x803c3800

08002c58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3301      	adds	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <USB_FlushTxFifo+0x48>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e006      	b.n	8002c92 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d0f0      	beq.n	8002c72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	00030d40 	.word	0x00030d40

08002ca4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <USB_FlushRxFifo+0x40>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e006      	b.n	8002cd6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d0f0      	beq.n	8002cb6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	00030d40 	.word	0x00030d40

08002ce8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	68f9      	ldr	r1, [r7, #12]
 8002d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0306 	and.w	r3, r3, #6
 8002d32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]
 8002d3e:	e00a      	b.n	8002d56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d002      	beq.n	8002d4c <USB_GetDevSpeed+0x32>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b06      	cmp	r3, #6
 8002d4a:	d102      	bne.n	8002d52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	75fb      	strb	r3, [r7, #23]
 8002d50:	e001      	b.n	8002d56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002d52:	230f      	movs	r3, #15
 8002d54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d13a      	bne.n	8002df6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	68f9      	ldr	r1, [r7, #12]
 8002d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d155      	bne.n	8002e64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	78db      	ldrb	r3, [r3, #3]
 8002dd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002dd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	059b      	lsls	r3, r3, #22
 8002dda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	0151      	lsls	r1, r2, #5
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	440a      	add	r2, r1
 8002de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	e036      	b.n	8002e64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	68f9      	ldr	r1, [r7, #12]
 8002e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d11a      	bne.n	8002e64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	78db      	ldrb	r3, [r3, #3]
 8002e48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	0151      	lsls	r1, r2, #5
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	440a      	add	r2, r1
 8002e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d135      	bne.n	8002efc <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	68f9      	ldr	r1, [r7, #12]
 8002eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	68f9      	ldr	r1, [r7, #12]
 8002ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	0159      	lsls	r1, r3, #5
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <USB_DeactivateEndpoint+0x100>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
 8002efa:	e034      	b.n	8002f66 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	43db      	mvns	r3, r3
 8002f16:	68f9      	ldr	r1, [r7, #12]
 8002f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	2101      	movs	r1, #1
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f40:	4013      	ands	r3, r2
 8002f42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	0159      	lsls	r1, r3, #5
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	440b      	add	r3, r1
 8002f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <USB_DeactivateEndpoint+0x104>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	ec337800 	.word	0xec337800
 8002f78:	eff37800 	.word	0xeff37800

08002f7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	4613      	mov	r3, r2
 8002f88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f040 815c 	bne.w	8003256 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d132      	bne.n	800300c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	0151      	lsls	r1, r2, #5
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	440a      	add	r2, r1
 8002fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002fc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	0151      	lsls	r1, r2, #5
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	440a      	add	r2, r1
 8002fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	0151      	lsls	r1, r2, #5
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	440a      	add	r2, r1
 8003000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003004:	0cdb      	lsrs	r3, r3, #19
 8003006:	04db      	lsls	r3, r3, #19
 8003008:	6113      	str	r3, [r2, #16]
 800300a:	e074      	b.n	80030f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	0151      	lsls	r1, r2, #5
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	440a      	add	r2, r1
 8003022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003026:	0cdb      	lsrs	r3, r3, #19
 8003028:	04db      	lsls	r3, r3, #19
 800302a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	0151      	lsls	r1, r2, #5
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	440a      	add	r2, r1
 8003042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003046:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800304a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800304e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6959      	ldr	r1, [r3, #20]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	440b      	add	r3, r1
 8003068:	1e59      	subs	r1, r3, #1
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003072:	04d9      	lsls	r1, r3, #19
 8003074:	4b9d      	ldr	r3, [pc, #628]	; (80032ec <USB_EPStartXfer+0x370>)
 8003076:	400b      	ands	r3, r1
 8003078:	69b9      	ldr	r1, [r7, #24]
 800307a:	0148      	lsls	r0, r1, #5
 800307c:	69f9      	ldr	r1, [r7, #28]
 800307e:	4401      	add	r1, r0
 8003080:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003084:	4313      	orrs	r3, r2
 8003086:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	0148      	lsls	r0, r1, #5
 80030a2:	69f9      	ldr	r1, [r7, #28]
 80030a4:	4401      	add	r1, r0
 80030a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80030aa:	4313      	orrs	r3, r2
 80030ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	78db      	ldrb	r3, [r3, #3]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d11f      	bne.n	80030f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	0151      	lsls	r1, r2, #5
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	440a      	add	r2, r1
 80030cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80030d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	0151      	lsls	r1, r2, #5
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	440a      	add	r2, r1
 80030ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d14b      	bne.n	8003194 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	78db      	ldrb	r3, [r3, #3]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d128      	bne.n	8003172 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d110      	bne.n	8003152 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	0151      	lsls	r1, r2, #5
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	440a      	add	r2, r1
 8003146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800314a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e00f      	b.n	8003172 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	0151      	lsls	r1, r2, #5
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	440a      	add	r2, r1
 8003168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003170:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	0151      	lsls	r1, r2, #5
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	440a      	add	r2, r1
 8003188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800318c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e12f      	b.n	80033f4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	0151      	lsls	r1, r2, #5
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	440a      	add	r2, r1
 80031aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80031b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	78db      	ldrb	r3, [r3, #3]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d015      	beq.n	80031e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8117 	beq.w	80033f4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	69f9      	ldr	r1, [r7, #28]
 80031de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e2:	4313      	orrs	r3, r2
 80031e4:	634b      	str	r3, [r1, #52]	; 0x34
 80031e6:	e105      	b.n	80033f4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d110      	bne.n	800321a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	0151      	lsls	r1, r2, #5
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	440a      	add	r2, r1
 800320e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003212:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	e00f      	b.n	800323a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	0151      	lsls	r1, r2, #5
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	440a      	add	r2, r1
 8003230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	68d9      	ldr	r1, [r3, #12]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	b298      	uxth	r0, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	4603      	mov	r3, r0
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fa2b 	bl	80036aa <USB_WritePacket>
 8003254:	e0ce      	b.n	80033f4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	0151      	lsls	r1, r2, #5
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	440a      	add	r2, r1
 800326c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003270:	0cdb      	lsrs	r3, r3, #19
 8003272:	04db      	lsls	r3, r3, #19
 8003274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	0151      	lsls	r1, r2, #5
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	440a      	add	r2, r1
 800328c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003290:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003294:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003298:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d126      	bne.n	80032f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	69b9      	ldr	r1, [r7, #24]
 80032ba:	0148      	lsls	r0, r1, #5
 80032bc:	69f9      	ldr	r1, [r7, #28]
 80032be:	4401      	add	r1, r0
 80032c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80032c4:	4313      	orrs	r3, r2
 80032c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032e6:	6113      	str	r3, [r2, #16]
 80032e8:	e036      	b.n	8003358 <USB_EPStartXfer+0x3dc>
 80032ea:	bf00      	nop
 80032ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4413      	add	r3, r2
 80032fa:	1e5a      	subs	r2, r3, #1
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	8afb      	ldrh	r3, [r7, #22]
 8003316:	04d9      	lsls	r1, r3, #19
 8003318:	4b39      	ldr	r3, [pc, #228]	; (8003400 <USB_EPStartXfer+0x484>)
 800331a:	400b      	ands	r3, r1
 800331c:	69b9      	ldr	r1, [r7, #24]
 800331e:	0148      	lsls	r0, r1, #5
 8003320:	69f9      	ldr	r1, [r7, #28]
 8003322:	4401      	add	r1, r0
 8003324:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003328:	4313      	orrs	r3, r2
 800332a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	8af9      	ldrh	r1, [r7, #22]
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003348:	69b9      	ldr	r1, [r7, #24]
 800334a:	0148      	lsls	r0, r1, #5
 800334c:	69f9      	ldr	r1, [r7, #28]
 800334e:	4401      	add	r1, r0
 8003350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003354:	4313      	orrs	r3, r2
 8003356:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d10d      	bne.n	800337a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	68d9      	ldr	r1, [r3, #12]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	460a      	mov	r2, r1
 8003378:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	78db      	ldrb	r3, [r3, #3]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d128      	bne.n	80033d4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d110      	bne.n	80033b4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	0151      	lsls	r1, r2, #5
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	440a      	add	r2, r1
 80033a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e00f      	b.n	80033d4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	0151      	lsls	r1, r2, #5
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	440a      	add	r2, r1
 80033ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	0151      	lsls	r1, r2, #5
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	440a      	add	r2, r1
 80033ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80033f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	1ff80000 	.word	0x1ff80000

08003404 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	2b01      	cmp	r3, #1
 8003422:	f040 80cd 	bne.w	80035c0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d132      	bne.n	8003494 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	0151      	lsls	r1, r2, #5
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	440a      	add	r2, r1
 8003444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003448:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800344c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	0151      	lsls	r1, r2, #5
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	440a      	add	r2, r1
 8003468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800346c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	0151      	lsls	r1, r2, #5
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	440a      	add	r2, r1
 8003488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800348c:	0cdb      	lsrs	r3, r3, #19
 800348e:	04db      	lsls	r3, r3, #19
 8003490:	6113      	str	r3, [r2, #16]
 8003492:	e04e      	b.n	8003532 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	0151      	lsls	r1, r2, #5
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	440a      	add	r2, r1
 80034aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ae:	0cdb      	lsrs	r3, r3, #19
 80034b0:	04db      	lsls	r3, r3, #19
 80034b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	0151      	lsls	r1, r2, #5
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	440a      	add	r2, r1
 80034ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d903      	bls.n	80034ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	0151      	lsls	r1, r2, #5
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	440a      	add	r2, r1
 8003502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003506:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800350a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003522:	6939      	ldr	r1, [r7, #16]
 8003524:	0148      	lsls	r0, r1, #5
 8003526:	6979      	ldr	r1, [r7, #20]
 8003528:	4401      	add	r1, r0
 800352a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800352e:	4313      	orrs	r3, r2
 8003530:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d11e      	bne.n	8003576 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354c:	461a      	mov	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	0151      	lsls	r1, r2, #5
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	440a      	add	r2, r1
 800356a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	e092      	b.n	800369c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	440a      	add	r2, r1
 800358c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003590:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003594:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d07e      	beq.n	800369c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	6979      	ldr	r1, [r7, #20]
 80035b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035ba:	4313      	orrs	r3, r2
 80035bc:	634b      	str	r3, [r1, #52]	; 0x34
 80035be:	e06d      	b.n	800369c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	0151      	lsls	r1, r2, #5
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	440a      	add	r2, r1
 80035d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035da:	0cdb      	lsrs	r3, r3, #19
 80035dc:	04db      	lsls	r3, r3, #19
 80035de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003602:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	440a      	add	r2, r1
 800362a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800362e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003632:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364a:	6939      	ldr	r1, [r7, #16]
 800364c:	0148      	lsls	r0, r1, #5
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	4401      	add	r1, r0
 8003652:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003656:	4313      	orrs	r3, r2
 8003658:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d10d      	bne.n	800367c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d009      	beq.n	800367c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	68d9      	ldr	r1, [r3, #12]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003678:	460a      	mov	r2, r1
 800367a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	440a      	add	r2, r1
 8003692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800369a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b089      	sub	sp, #36	; 0x24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	4611      	mov	r1, r2
 80036b6:	461a      	mov	r2, r3
 80036b8:	460b      	mov	r3, r1
 80036ba:	71fb      	strb	r3, [r7, #7]
 80036bc:	4613      	mov	r3, r2
 80036be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80036c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11a      	bne.n	8003706 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80036d0:	88bb      	ldrh	r3, [r7, #4]
 80036d2:	3303      	adds	r3, #3
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	e00f      	b.n	80036fe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	031a      	lsls	r2, r3, #12
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ea:	461a      	mov	r2, r3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3304      	adds	r3, #4
 80036f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	3301      	adds	r3, #1
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	d3eb      	bcc.n	80036de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3724      	adds	r7, #36	; 0x24
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	3303      	adds	r3, #3
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e00b      	b.n	8003750 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	601a      	str	r2, [r3, #0]
    pDest++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3304      	adds	r3, #4
 8003748:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	3301      	adds	r3, #1
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	429a      	cmp	r2, r3
 8003756:	d3ef      	bcc.n	8003738 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003758:	69fb      	ldr	r3, [r7, #28]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3724      	adds	r7, #36	; 0x24
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d12c      	bne.n	80037dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db12      	blt.n	80037ba <USB_EPSetStall+0x54>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00f      	beq.n	80037ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	0151      	lsls	r1, r2, #5
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	440a      	add	r2, r1
 80037b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	0151      	lsls	r1, r2, #5
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	440a      	add	r2, r1
 80037d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e02b      	b.n	8003834 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	db12      	blt.n	8003814 <USB_EPSetStall+0xae>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00f      	beq.n	8003814 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	440a      	add	r2, r1
 800380a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800380e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003812:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	440a      	add	r2, r1
 800382a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800382e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	785b      	ldrb	r3, [r3, #1]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d128      	bne.n	80038b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	0151      	lsls	r1, r2, #5
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	440a      	add	r2, r1
 8003874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003878:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800387c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	78db      	ldrb	r3, [r3, #3]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d003      	beq.n	800388e <USB_EPClearStall+0x4c>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	78db      	ldrb	r3, [r3, #3]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d138      	bne.n	8003900 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	0151      	lsls	r1, r2, #5
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	440a      	add	r2, r1
 80038a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e027      	b.n	8003900 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	0151      	lsls	r1, r2, #5
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	440a      	add	r2, r1
 80038c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	78db      	ldrb	r3, [r3, #3]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d003      	beq.n	80038e0 <USB_EPClearStall+0x9e>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	78db      	ldrb	r3, [r3, #3]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d10f      	bne.n	8003900 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800392c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003930:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003942:	68f9      	ldr	r1, [r7, #12]
 8003944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003974:	f023 0302 	bic.w	r3, r3, #2
 8003978:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800397a:	2003      	movs	r0, #3
 800397c:	f7fc fe22 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80039aa:	2003      	movs	r0, #3
 80039ac:	f7fc fe0a 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80039d2:	68fb      	ldr	r3, [r7, #12]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	0c1b      	lsrs	r3, r3, #16
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	4013      	ands	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	b29b      	uxth	r3, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	4013      	ands	r3, r2
 8003a74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003a76:	68bb      	ldr	r3, [r7, #8]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	01db      	lsls	r3, r3, #7
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0301 	and.w	r3, r3, #1
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0306 	and.w	r3, r3, #6
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d109      	bne.n	8003b44 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3e:	f043 0303 	orr.w	r3, r3, #3
 8003b42:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	460b      	mov	r3, r1
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	333c      	adds	r3, #60	; 0x3c
 8003b7e:	3304      	adds	r3, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4a26      	ldr	r2, [pc, #152]	; (8003c20 <USB_EP0_OutStart+0xb8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d90a      	bls.n	8003ba2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b9c:	d101      	bne.n	8003ba2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e037      	b.n	8003c12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd0:	f043 0318 	orr.w	r3, r3, #24
 8003bd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003be8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003bea:	7afb      	ldrb	r3, [r7, #11]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10f      	bne.n	8003c10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003c0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	4f54300a 	.word	0x4f54300a

08003c24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <USB_CoreReset+0x64>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e01b      	b.n	8003c7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	daf2      	bge.n	8003c30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <USB_CoreReset+0x64>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d901      	bls.n	8003c6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e006      	b.n	8003c7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d0f0      	beq.n	8003c5a <USB_CoreReset+0x36>

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	00030d40 	.word	0x00030d40

08003c8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7c1b      	ldrb	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d115      	bne.n	8003cd0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca8:	2202      	movs	r2, #2
 8003caa:	2181      	movs	r1, #129	; 0x81
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f001 ff0a 	bl	8005ac6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f001 ff00 	bl	8005ac6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8003cce:	e012      	b.n	8003cf6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	2181      	movs	r1, #129	; 0x81
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f001 fef5 	bl	8005ac6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003ce2:	2340      	movs	r3, #64	; 0x40
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f001 feec 	bl	8005ac6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	2182      	movs	r1, #130	; 0x82
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f001 fee2 	bl	8005ac6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003d08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003d0c:	f002 f992 	bl	8006034 <malloc>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	e026      	b.n	8003d78 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003d30:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	7c1b      	ldrb	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d5e:	2101      	movs	r1, #1
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 ffa1 	bl	8005ca8 <USBD_LL_PrepareReceive>
 8003d66:	e007      	b.n	8003d78 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d6e:	2340      	movs	r3, #64	; 0x40
 8003d70:	2101      	movs	r1, #1
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f001 ff98 	bl	8005ca8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003d92:	2181      	movs	r1, #129	; 0x81
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f001 febc 	bl	8005b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003da0:	2101      	movs	r1, #1
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f001 feb5 	bl	8005b12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003db0:	2182      	movs	r1, #130	; 0x82
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f001 fead 	bl	8005b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00e      	beq.n	8003de6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f002 f933 	bl	8006044 <free>
    pdev->pClassData = NULL;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003e00:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d039      	beq.n	8003e8e <USBD_CDC_Setup+0x9e>
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d17f      	bne.n	8003f1e <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	88db      	ldrh	r3, [r3, #6]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d029      	beq.n	8003e7a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b25b      	sxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	da11      	bge.n	8003e54 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8003e3c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	88d2      	ldrh	r2, [r2, #6]
 8003e42:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e44:	6939      	ldr	r1, [r7, #16]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	88db      	ldrh	r3, [r3, #6]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f001 f9da 	bl	8005206 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8003e52:	e06b      	b.n	8003f2c <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	785a      	ldrb	r2, [r3, #1]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	88db      	ldrh	r3, [r3, #6]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e6a:	6939      	ldr	r1, [r7, #16]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	88db      	ldrh	r3, [r3, #6]
 8003e70:	461a      	mov	r2, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f001 f9f5 	bl	8005262 <USBD_CtlPrepareRx>
    break;
 8003e78:	e058      	b.n	8003f2c <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	7850      	ldrb	r0, [r2, #1]
 8003e86:	2200      	movs	r2, #0
 8003e88:	6839      	ldr	r1, [r7, #0]
 8003e8a:	4798      	blx	r3
    break;
 8003e8c:	e04e      	b.n	8003f2c <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	785b      	ldrb	r3, [r3, #1]
 8003e92:	2b0b      	cmp	r3, #11
 8003e94:	d02e      	beq.n	8003ef4 <USBD_CDC_Setup+0x104>
 8003e96:	2b0b      	cmp	r3, #11
 8003e98:	dc38      	bgt.n	8003f0c <USBD_CDC_Setup+0x11c>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <USBD_CDC_Setup+0xb4>
 8003e9e:	2b0a      	cmp	r3, #10
 8003ea0:	d014      	beq.n	8003ecc <USBD_CDC_Setup+0xdc>
 8003ea2:	e033      	b.n	8003f0c <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d107      	bne.n	8003ebe <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f001 f9a5 	bl	8005206 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003ebc:	e02e      	b.n	8003f1c <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f001 f935 	bl	8005130 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eca:	e027      	b.n	8003f1c <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d107      	bne.n	8003ee6 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8003ed6:	f107 030f 	add.w	r3, r7, #15
 8003eda:	2201      	movs	r2, #1
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f001 f991 	bl	8005206 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003ee4:	e01a      	b.n	8003f1c <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 f921 	bl	8005130 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef2:	e013      	b.n	8003f1c <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d00d      	beq.n	8003f1a <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8003efe:	6839      	ldr	r1, [r7, #0]
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f001 f915 	bl	8005130 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003f06:	2302      	movs	r3, #2
 8003f08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f0a:	e006      	b.n	8003f1a <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f001 f90e 	bl	8005130 <USBD_CtlError>
      ret = USBD_FAIL;
 8003f14:	2302      	movs	r3, #2
 8003f16:	75fb      	strb	r3, [r7, #23]
      break;
 8003f18:	e000      	b.n	8003f1c <USBD_CDC_Setup+0x12c>
      break;
 8003f1a:	bf00      	nop
    }
    break;
 8003f1c:	e006      	b.n	8003f2c <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f001 f905 	bl	8005130 <USBD_CtlError>
    ret = USBD_FAIL;
 8003f26:	2302      	movs	r3, #2
 8003f28:	75fb      	strb	r3, [r7, #23]
    break;
 8003f2a:	bf00      	nop
  }

  return ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003f48:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003f50:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03a      	beq.n	8003fd2 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	331c      	adds	r3, #28
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d029      	beq.n	8003fc6 <USBD_CDC_DataIn+0x90>
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	331c      	adds	r3, #28
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	78f9      	ldrb	r1, [r7, #3]
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	1a5b      	subs	r3, r3, r1
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4403      	add	r3, r0
 8003f92:	3344      	adds	r3, #68	; 0x44
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f9a:	fb03 f301 	mul.w	r3, r3, r1
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d110      	bne.n	8003fc6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	331c      	adds	r3, #28
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003fb8:	78f9      	ldrb	r1, [r7, #3]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 fe4f 	bl	8005c62 <USBD_LL_Transmit>
 8003fc4:	e003      	b.n	8003fce <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f001 fe7a 	bl	8005cee <USBD_LL_GetRxDataSize>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004020:	4611      	mov	r1, r2
 8004022:	4798      	blx	r3

    return USBD_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004040:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <USBD_CDC_EP0_RxReady+0x46>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004052:	2bff      	cmp	r3, #255	; 0xff
 8004054:	d010      	beq.n	8004078 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004064:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800406c:	b292      	uxth	r2, r2
 800406e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	22ff      	movs	r2, #255	; 0xff
 8004074:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2243      	movs	r2, #67	; 0x43
 8004090:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004092:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20000090 	.word	0x20000090

080040a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2243      	movs	r2, #67	; 0x43
 80040b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80040b2:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	2000004c 	.word	0x2000004c

080040c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2243      	movs	r2, #67	; 0x43
 80040d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80040d2:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	200000d4 	.word	0x200000d4

080040e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	220a      	movs	r2, #10
 80040f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80040f2:	4b03      	ldr	r3, [pc, #12]	; (8004100 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	20000008 	.word	0x20000008

08004104 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800410e:	2302      	movs	r3, #2
 8004110:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004132:	b480      	push	{r7}
 8004134:	b087      	sub	sp, #28
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004146:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004176:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800419c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01c      	beq.n	80041e2 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d115      	bne.n	80041de <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2181      	movs	r1, #129	; 0x81
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f001 fd44 	bl	8005c62 <USBD_LL_Transmit>

      return USBD_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e002      	b.n	80041e4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004202:	2b00      	cmp	r3, #0
 8004204:	d017      	beq.n	8004236 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	7c1b      	ldrb	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004218:	2101      	movs	r1, #1
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f001 fd44 	bl	8005ca8 <USBD_LL_PrepareReceive>
 8004220:	e007      	b.n	8004232 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004228:	2340      	movs	r3, #64	; 0x40
 800422a:	2101      	movs	r1, #1
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f001 fd3b 	bl	8005ca8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	4613      	mov	r3, r2
 800424c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004254:	2302      	movs	r3, #2
 8004256:	e01a      	b.n	800428e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	79fa      	ldrb	r2, [r7, #7]
 8004284:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f001 fbb6 	bl	80059f8 <USBD_LL_Init>

  return USBD_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
 80042b6:	e001      	b.n	80042bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80042b8:	2302      	movs	r3, #2
 80042ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 fbdc 	bl	8005a90 <USBD_LL_Start>

  return USBD_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004304:	2302      	movs	r3, #2
 8004306:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	4611      	mov	r1, r2
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	4611      	mov	r1, r2
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
  return USBD_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fea1 	bl	80050b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8004382:	461a      	mov	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2b02      	cmp	r3, #2
 8004396:	d016      	beq.n	80043c6 <USBD_LL_SetupStage+0x6a>
 8004398:	2b02      	cmp	r3, #2
 800439a:	d81c      	bhi.n	80043d6 <USBD_LL_SetupStage+0x7a>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <USBD_LL_SetupStage+0x4a>
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d008      	beq.n	80043b6 <USBD_LL_SetupStage+0x5a>
 80043a4:	e017      	b.n	80043d6 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa04 	bl	80047bc <USBD_StdDevReq>
    break;
 80043b4:	e01a      	b.n	80043ec <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fa66 	bl	8004890 <USBD_StdItfReq>
    break;
 80043c4:	e012      	b.n	80043ec <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043cc:	4619      	mov	r1, r3
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 faa6 	bl	8004920 <USBD_StdEPReq>
    break;
 80043d4:	e00a      	b.n	80043ec <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80043dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	4619      	mov	r1, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f001 fbb3 	bl	8005b50 <USBD_LL_StallEP>
    break;
 80043ea:	bf00      	nop
  }

  return USBD_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	460b      	mov	r3, r1
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d14b      	bne.n	80044a2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004410:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004418:	2b03      	cmp	r3, #3
 800441a:	d134      	bne.n	8004486 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	429a      	cmp	r2, r3
 8004426:	d919      	bls.n	800445c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	1ad2      	subs	r2, r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800443e:	429a      	cmp	r2, r3
 8004440:	d203      	bcs.n	800444a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8004446:	b29b      	uxth	r3, r3
 8004448:	e002      	b.n	8004450 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 ff22 	bl	800529e <USBD_CtlContinueRx>
 800445a:	e038      	b.n	80044ce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800446e:	2b03      	cmp	r3, #3
 8004470:	d105      	bne.n	800447e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 ff1f 	bl	80052c2 <USBD_CtlSendStatus>
 8004484:	e023      	b.n	80044ce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800448c:	2b05      	cmp	r3, #5
 800448e:	d11e      	bne.n	80044ce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004498:	2100      	movs	r1, #0
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f001 fb58 	bl	8005b50 <USBD_LL_StallEP>
 80044a0:	e015      	b.n	80044ce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d108      	bne.n	80044ca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	7afa      	ldrb	r2, [r7, #11]
 80044c2:	4611      	mov	r1, r2
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	4798      	blx	r3
 80044c8:	e001      	b.n	80044ce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80044ca:	2302      	movs	r3, #2
 80044cc:	e000      	b.n	80044d0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	460b      	mov	r3, r1
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80044e6:	7afb      	ldrb	r3, [r7, #11]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d17f      	bne.n	80045ec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3314      	adds	r3, #20
 80044f0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d15c      	bne.n	80045b6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	429a      	cmp	r2, r3
 8004506:	d915      	bls.n	8004534 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	1ad2      	subs	r2, r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	b29b      	uxth	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fe8c 	bl	800523e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004526:	2300      	movs	r3, #0
 8004528:	2200      	movs	r2, #0
 800452a:	2100      	movs	r1, #0
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f001 fbbb 	bl	8005ca8 <USBD_LL_PrepareReceive>
 8004532:	e04e      	b.n	80045d2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	6912      	ldr	r2, [r2, #16]
 800453c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004540:	fb02 f201 	mul.w	r2, r2, r1
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11c      	bne.n	8004584 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004552:	429a      	cmp	r2, r3
 8004554:	d316      	bcc.n	8004584 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004560:	429a      	cmp	r2, r3
 8004562:	d20f      	bcs.n	8004584 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004564:	2200      	movs	r2, #0
 8004566:	2100      	movs	r1, #0
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fe68 	bl	800523e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004576:	2300      	movs	r3, #0
 8004578:	2200      	movs	r2, #0
 800457a:	2100      	movs	r1, #0
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f001 fb93 	bl	8005ca8 <USBD_LL_PrepareReceive>
 8004582:	e026      	b.n	80045d2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004596:	2b03      	cmp	r3, #3
 8004598:	d105      	bne.n	80045a6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f001 fad1 	bl	8005b50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fe9a 	bl	80052e8 <USBD_CtlReceiveStatus>
 80045b4:	e00d      	b.n	80045d2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d004      	beq.n	80045ca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80045ca:	2180      	movs	r1, #128	; 0x80
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f001 fabf 	bl	8005b50 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d11d      	bne.n	8004618 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff fe80 	bl	80042e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80045ea:	e015      	b.n	8004618 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d108      	bne.n	8004614 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	7afa      	ldrb	r2, [r7, #11]
 800460c:	4611      	mov	r1, r2
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	4798      	blx	r3
 8004612:	e001      	b.n	8004618 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004614:	2302      	movs	r3, #2
 8004616:	e000      	b.n	800461a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800462a:	2340      	movs	r3, #64	; 0x40
 800462c:	2200      	movs	r2, #0
 800462e:	2100      	movs	r1, #0
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 fa48 	bl	8005ac6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2240      	movs	r2, #64	; 0x40
 8004642:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004646:	2340      	movs	r3, #64	; 0x40
 8004648:	2200      	movs	r2, #0
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f001 fa3a 	bl	8005ac6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2240      	movs	r2, #64	; 0x40
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6852      	ldr	r2, [r2, #4]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	4611      	mov	r1, r2
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
  }

  return USBD_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2204      	movs	r2, #4
 80046dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800471e:	2b03      	cmp	r3, #3
 8004720:	d10b      	bne.n	800473a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6852      	ldr	r2, [r2, #4]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	4611      	mov	r1, r2
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3

  return USBD_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d005      	beq.n	80047e2 <USBD_StdDevReq+0x26>
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d84f      	bhi.n	800487a <USBD_StdDevReq+0xbe>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <USBD_StdDevReq+0x36>
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d14b      	bne.n	800487a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
    break;
 80047f0:	e048      	b.n	8004884 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	d839      	bhi.n	800486e <USBD_StdDevReq+0xb2>
 80047fa:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <USBD_StdDevReq+0x44>)
 80047fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004800:	08004851 	.word	0x08004851
 8004804:	08004865 	.word	0x08004865
 8004808:	0800486f 	.word	0x0800486f
 800480c:	0800485b 	.word	0x0800485b
 8004810:	0800486f 	.word	0x0800486f
 8004814:	08004833 	.word	0x08004833
 8004818:	08004829 	.word	0x08004829
 800481c:	0800486f 	.word	0x0800486f
 8004820:	08004847 	.word	0x08004847
 8004824:	0800483d 	.word	0x0800483d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f9da 	bl	8004be4 <USBD_GetDescriptor>
      break;
 8004830:	e022      	b.n	8004878 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 facf 	bl	8004dd8 <USBD_SetAddress>
      break;
 800483a:	e01d      	b.n	8004878 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fb0e 	bl	8004e60 <USBD_SetConfig>
      break;
 8004844:	e018      	b.n	8004878 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fb97 	bl	8004f7c <USBD_GetConfig>
      break;
 800484e:	e013      	b.n	8004878 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fbc7 	bl	8004fe6 <USBD_GetStatus>
      break;
 8004858:	e00e      	b.n	8004878 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fbf5 	bl	800504c <USBD_SetFeature>
      break;
 8004862:	e009      	b.n	8004878 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8004864:	6839      	ldr	r1, [r7, #0]
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fc04 	bl	8005074 <USBD_ClrFeature>
      break;
 800486c:	e004      	b.n	8004878 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fc5d 	bl	8005130 <USBD_CtlError>
      break;
 8004876:	bf00      	nop
    }
    break;
 8004878:	e004      	b.n	8004884 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800487a:	6839      	ldr	r1, [r7, #0]
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fc57 	bl	8005130 <USBD_CtlError>
    break;
 8004882:	bf00      	nop
  }

  return ret;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop

08004890 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	d005      	beq.n	80048b6 <USBD_StdItfReq+0x26>
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d82e      	bhi.n	800490c <USBD_StdItfReq+0x7c>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <USBD_StdItfReq+0x26>
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d12a      	bne.n	800490c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80048bc:	3b01      	subs	r3, #1
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d81d      	bhi.n	80048fe <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	889b      	ldrh	r3, [r3, #4]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d813      	bhi.n	80048f4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
 80048da:	4603      	mov	r3, r0
 80048dc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	88db      	ldrh	r3, [r3, #6]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d110      	bne.n	8004908 <USBD_StdItfReq+0x78>
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10d      	bne.n	8004908 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fce8 	bl	80052c2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80048f2:	e009      	b.n	8004908 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fc1a 	bl	8005130 <USBD_CtlError>
      break;
 80048fc:	e004      	b.n	8004908 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80048fe:	6839      	ldr	r1, [r7, #0]
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fc15 	bl	8005130 <USBD_CtlError>
      break;
 8004906:	e000      	b.n	800490a <USBD_StdItfReq+0x7a>
      break;
 8004908:	bf00      	nop
    }
    break;
 800490a:	e004      	b.n	8004916 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fc0e 	bl	8005130 <USBD_CtlError>
    break;
 8004914:	bf00      	nop
  }

  return USBD_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	889b      	ldrh	r3, [r3, #4]
 8004932:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d007      	beq.n	8004950 <USBD_StdEPReq+0x30>
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	f200 8144 	bhi.w	8004bce <USBD_StdEPReq+0x2ae>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <USBD_StdEPReq+0x40>
 800494a:	2b20      	cmp	r3, #32
 800494c:	f040 813f 	bne.w	8004bce <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
    break;
 800495e:	e13b      	b.n	8004bd8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004968:	2b20      	cmp	r3, #32
 800496a:	d10a      	bne.n	8004982 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	4798      	blx	r3
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	e12b      	b.n	8004bda <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d007      	beq.n	800499a <USBD_StdEPReq+0x7a>
 800498a:	2b03      	cmp	r3, #3
 800498c:	f300 8119 	bgt.w	8004bc2 <USBD_StdEPReq+0x2a2>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d072      	beq.n	8004a7a <USBD_StdEPReq+0x15a>
 8004994:	2b01      	cmp	r3, #1
 8004996:	d03a      	beq.n	8004a0e <USBD_StdEPReq+0xee>
 8004998:	e113      	b.n	8004bc2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d002      	beq.n	80049aa <USBD_StdEPReq+0x8a>
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d015      	beq.n	80049d4 <USBD_StdEPReq+0xb4>
 80049a8:	e02b      	b.n	8004a02 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049aa:	7bbb      	ldrb	r3, [r7, #14]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00c      	beq.n	80049ca <USBD_StdEPReq+0xaa>
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d009      	beq.n	80049ca <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80049b6:	7bbb      	ldrb	r3, [r7, #14]
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f001 f8c8 	bl	8005b50 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80049c0:	2180      	movs	r1, #128	; 0x80
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f001 f8c4 	bl	8005b50 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80049c8:	e020      	b.n	8004a0c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fbaf 	bl	8005130 <USBD_CtlError>
        break;
 80049d2:	e01b      	b.n	8004a0c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	885b      	ldrh	r3, [r3, #2]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10e      	bne.n	80049fa <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80049dc:	7bbb      	ldrb	r3, [r7, #14]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <USBD_StdEPReq+0xda>
 80049e2:	7bbb      	ldrb	r3, [r7, #14]
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d008      	beq.n	80049fa <USBD_StdEPReq+0xda>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	88db      	ldrh	r3, [r3, #6]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d104      	bne.n	80049fa <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80049f0:	7bbb      	ldrb	r3, [r7, #14]
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 f8ab 	bl	8005b50 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fc61 	bl	80052c2 <USBD_CtlSendStatus>

        break;
 8004a00:	e004      	b.n	8004a0c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fb93 	bl	8005130 <USBD_CtlError>
        break;
 8004a0a:	bf00      	nop
      }
      break;
 8004a0c:	e0de      	b.n	8004bcc <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d002      	beq.n	8004a1e <USBD_StdEPReq+0xfe>
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d015      	beq.n	8004a48 <USBD_StdEPReq+0x128>
 8004a1c:	e026      	b.n	8004a6c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a1e:	7bbb      	ldrb	r3, [r7, #14]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <USBD_StdEPReq+0x11e>
 8004a24:	7bbb      	ldrb	r3, [r7, #14]
 8004a26:	2b80      	cmp	r3, #128	; 0x80
 8004a28:	d009      	beq.n	8004a3e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f001 f88e 	bl	8005b50 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 f88a 	bl	8005b50 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004a3c:	e01c      	b.n	8004a78 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fb75 	bl	8005130 <USBD_CtlError>
        break;
 8004a46:	e017      	b.n	8004a78 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	885b      	ldrh	r3, [r3, #2]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d112      	bne.n	8004a76 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004a50:	7bbb      	ldrb	r3, [r7, #14]
 8004a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a5a:	7bbb      	ldrb	r3, [r7, #14]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f001 f895 	bl	8005b8e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fc2c 	bl	80052c2 <USBD_CtlSendStatus>
        }
        break;
 8004a6a:	e004      	b.n	8004a76 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fb5e 	bl	8005130 <USBD_CtlError>
        break;
 8004a74:	e000      	b.n	8004a78 <USBD_StdEPReq+0x158>
        break;
 8004a76:	bf00      	nop
      }
      break;
 8004a78:	e0a8      	b.n	8004bcc <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d002      	beq.n	8004a8a <USBD_StdEPReq+0x16a>
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d031      	beq.n	8004aec <USBD_StdEPReq+0x1cc>
 8004a88:	e095      	b.n	8004bb6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a8a:	7bbb      	ldrb	r3, [r7, #14]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <USBD_StdEPReq+0x180>
 8004a90:	7bbb      	ldrb	r3, [r7, #14]
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d004      	beq.n	8004aa0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8004a96:	6839      	ldr	r1, [r7, #0]
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb49 	bl	8005130 <USBD_CtlError>
          break;
 8004a9e:	e08f      	b.n	8004bc0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da0b      	bge.n	8004ac0 <USBD_StdEPReq+0x1a0>
 8004aa8:	7bbb      	ldrb	r3, [r7, #14]
 8004aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	3310      	adds	r3, #16
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	3304      	adds	r3, #4
 8004abe:	e00a      	b.n	8004ad6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004ac0:	7bbb      	ldrb	r3, [r7, #14]
 8004ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fb8e 	bl	8005206 <USBD_CtlSendData>
          break;
 8004aea:	e069      	b.n	8004bc0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8004aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	da11      	bge.n	8004b18 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004af4:	7bbb      	ldrb	r3, [r7, #14]
 8004af6:	f003 020f 	and.w	r2, r3, #15
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	3318      	adds	r3, #24
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d117      	bne.n	8004b3e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fb0d 	bl	8005130 <USBD_CtlError>
            break;
 8004b16:	e053      	b.n	8004bc0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004b18:	7bbb      	ldrb	r3, [r7, #14]
 8004b1a:	f003 020f 	and.w	r2, r3, #15
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8004b34:	6839      	ldr	r1, [r7, #0]
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fafa 	bl	8005130 <USBD_CtlError>
            break;
 8004b3c:	e040      	b.n	8004bc0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004b3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da0b      	bge.n	8004b5e <USBD_StdEPReq+0x23e>
 8004b46:	7bbb      	ldrb	r3, [r7, #14]
 8004b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	3310      	adds	r3, #16
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	4413      	add	r3, r2
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	e00a      	b.n	8004b74 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004b5e:	7bbb      	ldrb	r3, [r7, #14]
 8004b60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004b76:	7bbb      	ldrb	r3, [r7, #14]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <USBD_StdEPReq+0x262>
 8004b7c:	7bbb      	ldrb	r3, [r7, #14]
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d103      	bne.n	8004b8a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	e00e      	b.n	8004ba8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004b8a:	7bbb      	ldrb	r3, [r7, #14]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f001 f81c 	bl	8005bcc <USBD_LL_IsStallEP>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e002      	b.n	8004ba8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2202      	movs	r2, #2
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fb29 	bl	8005206 <USBD_CtlSendData>
          break;
 8004bb4:	e004      	b.n	8004bc0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fab9 	bl	8005130 <USBD_CtlError>
        break;
 8004bbe:	bf00      	nop
      }
      break;
 8004bc0:	e004      	b.n	8004bcc <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fab3 	bl	8005130 <USBD_CtlError>
      break;
 8004bca:	bf00      	nop
    }
    break;
 8004bcc:	e004      	b.n	8004bd8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8004bce:	6839      	ldr	r1, [r7, #0]
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 faad 	bl	8005130 <USBD_CtlError>
    break;
 8004bd6:	bf00      	nop
  }

  return ret;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	885b      	ldrh	r3, [r3, #2]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	2b06      	cmp	r3, #6
 8004bfa:	f200 80c9 	bhi.w	8004d90 <USBD_GetDescriptor+0x1ac>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <USBD_GetDescriptor+0x20>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	08004c39 	.word	0x08004c39
 8004c0c:	08004c79 	.word	0x08004c79
 8004c10:	08004d91 	.word	0x08004d91
 8004c14:	08004d91 	.word	0x08004d91
 8004c18:	08004d3d 	.word	0x08004d3d
 8004c1c:	08004d63 	.word	0x08004d63
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	7c12      	ldrb	r2, [r2, #16]
 8004c2c:	f107 010a 	add.w	r1, r7, #10
 8004c30:	4610      	mov	r0, r2
 8004c32:	4798      	blx	r3
 8004c34:	60f8      	str	r0, [r7, #12]
    break;
 8004c36:	e0b0      	b.n	8004d9a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	7c1b      	ldrb	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10d      	bne.n	8004c5c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c48:	f107 020a 	add.w	r2, r7, #10
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
 8004c50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	2202      	movs	r2, #2
 8004c58:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004c5a:	e09e      	b.n	8004d9a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	f107 020a 	add.w	r2, r7, #10
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4798      	blx	r3
 8004c6c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	2202      	movs	r2, #2
 8004c74:	701a      	strb	r2, [r3, #0]
    break;
 8004c76:	e090      	b.n	8004d9a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	885b      	ldrh	r3, [r3, #2]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d856      	bhi.n	8004d30 <USBD_GetDescriptor+0x14c>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <USBD_GetDescriptor+0xa4>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004ca1 	.word	0x08004ca1
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004cd1 	.word	0x08004cd1
 8004c94:	08004ce9 	.word	0x08004ce9
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004d19 	.word	0x08004d19
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	7c12      	ldrb	r2, [r2, #16]
 8004cac:	f107 010a 	add.w	r1, r7, #10
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4798      	blx	r3
 8004cb4:	60f8      	str	r0, [r7, #12]
      break;
 8004cb6:	e040      	b.n	8004d3a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	7c12      	ldrb	r2, [r2, #16]
 8004cc4:	f107 010a 	add.w	r1, r7, #10
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4798      	blx	r3
 8004ccc:	60f8      	str	r0, [r7, #12]
      break;
 8004cce:	e034      	b.n	8004d3a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	7c12      	ldrb	r2, [r2, #16]
 8004cdc:	f107 010a 	add.w	r1, r7, #10
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4798      	blx	r3
 8004ce4:	60f8      	str	r0, [r7, #12]
      break;
 8004ce6:	e028      	b.n	8004d3a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	7c12      	ldrb	r2, [r2, #16]
 8004cf4:	f107 010a 	add.w	r1, r7, #10
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4798      	blx	r3
 8004cfc:	60f8      	str	r0, [r7, #12]
      break;
 8004cfe:	e01c      	b.n	8004d3a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	7c12      	ldrb	r2, [r2, #16]
 8004d0c:	f107 010a 	add.w	r1, r7, #10
 8004d10:	4610      	mov	r0, r2
 8004d12:	4798      	blx	r3
 8004d14:	60f8      	str	r0, [r7, #12]
      break;
 8004d16:	e010      	b.n	8004d3a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	7c12      	ldrb	r2, [r2, #16]
 8004d24:	f107 010a 	add.w	r1, r7, #10
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4798      	blx	r3
 8004d2c:	60f8      	str	r0, [r7, #12]
      break;
 8004d2e:	e004      	b.n	8004d3a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8004d30:	6839      	ldr	r1, [r7, #0]
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f9fc 	bl	8005130 <USBD_CtlError>
      return;
 8004d38:	e04b      	b.n	8004dd2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8004d3a:	e02e      	b.n	8004d9a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7c1b      	ldrb	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4c:	f107 020a 	add.w	r2, r7, #10
 8004d50:	4610      	mov	r0, r2
 8004d52:	4798      	blx	r3
 8004d54:	60f8      	str	r0, [r7, #12]
      break;
 8004d56:	e020      	b.n	8004d9a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f9e8 	bl	8005130 <USBD_CtlError>
      return;
 8004d60:	e037      	b.n	8004dd2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7c1b      	ldrb	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	f107 020a 	add.w	r2, r7, #10
 8004d76:	4610      	mov	r0, r2
 8004d78:	4798      	blx	r3
 8004d7a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	2207      	movs	r2, #7
 8004d82:	701a      	strb	r2, [r3, #0]
      break;
 8004d84:	e009      	b.n	8004d9a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f9d1 	bl	8005130 <USBD_CtlError>
      return;
 8004d8e:	e020      	b.n	8004dd2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f9cc 	bl	8005130 <USBD_CtlError>
    return;
 8004d98:	e01b      	b.n	8004dd2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8004d9a:	897b      	ldrh	r3, [r7, #10]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d011      	beq.n	8004dc4 <USBD_GetDescriptor+0x1e0>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	88db      	ldrh	r3, [r3, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	88da      	ldrh	r2, [r3, #6]
 8004dac:	897b      	ldrh	r3, [r7, #10]
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bf28      	it	cs
 8004db2:	4613      	movcs	r3, r2
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68f9      	ldr	r1, [r7, #12]
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa21 	bl	8005206 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	88db      	ldrh	r3, [r3, #6]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fa78 	bl	80052c2 <USBD_CtlSendStatus>
  }
}
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	889b      	ldrh	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d130      	bne.n	8004e4c <USBD_SetAddress+0x74>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	88db      	ldrh	r3, [r3, #6]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d12c      	bne.n	8004e4c <USBD_SetAddress+0x74>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	885b      	ldrh	r3, [r3, #2]
 8004df6:	2b7f      	cmp	r3, #127	; 0x7f
 8004df8:	d828      	bhi.n	8004e4c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	885b      	ldrh	r3, [r3, #2]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d104      	bne.n	8004e1a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8004e10:	6839      	ldr	r1, [r7, #0]
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f98c 	bl	8005130 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e18:	e01d      	b.n	8004e56 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fefc 	bl	8005c24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fa48 	bl	80052c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e40:	e009      	b.n	8004e56 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e4a:	e004      	b.n	8004e56 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004e4c:	6839      	ldr	r1, [r7, #0]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f96e 	bl	8005130 <USBD_CtlError>
  }
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	885b      	ldrh	r3, [r3, #2]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <USBD_SetConfig+0x118>)
 8004e72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e74:	4b40      	ldr	r3, [pc, #256]	; (8004f78 <USBD_SetConfig+0x118>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d904      	bls.n	8004e86 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f956 	bl	8005130 <USBD_CtlError>
 8004e84:	e075      	b.n	8004f72 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d002      	beq.n	8004e96 <USBD_SetConfig+0x36>
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d023      	beq.n	8004edc <USBD_SetConfig+0x7c>
 8004e94:	e062      	b.n	8004f5c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8004e96:	4b38      	ldr	r3, [pc, #224]	; (8004f78 <USBD_SetConfig+0x118>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01a      	beq.n	8004ed4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8004e9e:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <USBD_SetConfig+0x118>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004eb0:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <USBD_SetConfig+0x118>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff fa1e 	bl	80042f8 <USBD_SetClassConfig>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d104      	bne.n	8004ecc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f933 	bl	8005130 <USBD_CtlError>
          return;
 8004eca:	e052      	b.n	8004f72 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f9f8 	bl	80052c2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004ed2:	e04e      	b.n	8004f72 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f9f4 	bl	80052c2 <USBD_CtlSendStatus>
      break;
 8004eda:	e04a      	b.n	8004f72 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8004edc:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <USBD_SetConfig+0x118>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d112      	bne.n	8004f0a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8004eec:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <USBD_SetConfig+0x118>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8004ef6:	4b20      	ldr	r3, [pc, #128]	; (8004f78 <USBD_SetConfig+0x118>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fa1a 	bl	8004336 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f9dd 	bl	80052c2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004f08:	e033      	b.n	8004f72 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <USBD_SetConfig+0x118>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d01d      	beq.n	8004f54 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fa08 	bl	8004336 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004f26:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <USBD_SetConfig+0x118>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004f30:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <USBD_SetConfig+0x118>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff f9de 	bl	80042f8 <USBD_SetClassConfig>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d104      	bne.n	8004f4c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f8f3 	bl	8005130 <USBD_CtlError>
          return;
 8004f4a:	e012      	b.n	8004f72 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f9b8 	bl	80052c2 <USBD_CtlSendStatus>
      break;
 8004f52:	e00e      	b.n	8004f72 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f9b4 	bl	80052c2 <USBD_CtlSendStatus>
      break;
 8004f5a:	e00a      	b.n	8004f72 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8004f5c:	6839      	ldr	r1, [r7, #0]
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f8e6 	bl	8005130 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <USBD_SetConfig+0x118>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff f9e3 	bl	8004336 <USBD_ClrClassConfig>
      break;
 8004f70:	bf00      	nop
    }
  }
}
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000230 	.word	0x20000230

08004f7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	88db      	ldrh	r3, [r3, #6]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d004      	beq.n	8004f98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f8cd 	bl	8005130 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004f96:	e022      	b.n	8004fde <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	dc02      	bgt.n	8004fa8 <USBD_GetConfig+0x2c>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	dc03      	bgt.n	8004fae <USBD_GetConfig+0x32>
 8004fa6:	e015      	b.n	8004fd4 <USBD_GetConfig+0x58>
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d00b      	beq.n	8004fc4 <USBD_GetConfig+0x48>
 8004fac:	e012      	b.n	8004fd4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	2201      	movs	r2, #1
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f922 	bl	8005206 <USBD_CtlSendData>
      break;
 8004fc2:	e00c      	b.n	8004fde <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	2201      	movs	r2, #1
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f91a 	bl	8005206 <USBD_CtlSendData>
      break;
 8004fd2:	e004      	b.n	8004fde <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f8aa 	bl	8005130 <USBD_CtlError>
      break;
 8004fdc:	bf00      	nop
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d81e      	bhi.n	800503a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	88db      	ldrh	r3, [r3, #6]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d004      	beq.n	800500e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f892 	bl	8005130 <USBD_CtlError>
      break;
 800500c:	e01a      	b.n	8005044 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f043 0202 	orr.w	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	330c      	adds	r3, #12
 800502e:	2202      	movs	r2, #2
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8e7 	bl	8005206 <USBD_CtlSendData>
    break;
 8005038:	e004      	b.n	8005044 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f877 	bl	8005130 <USBD_CtlError>
    break;
 8005042:	bf00      	nop
  }
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	885b      	ldrh	r3, [r3, #2]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d106      	bne.n	800506c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f92b 	bl	80052c2 <USBD_CtlSendStatus>
  }

}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005084:	3b01      	subs	r3, #1
 8005086:	2b02      	cmp	r3, #2
 8005088:	d80b      	bhi.n	80050a2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	885b      	ldrh	r3, [r3, #2]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10c      	bne.n	80050ac <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f911 	bl	80052c2 <USBD_CtlSendStatus>
    }
    break;
 80050a0:	e004      	b.n	80050ac <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80050a2:	6839      	ldr	r1, [r7, #0]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f843 	bl	8005130 <USBD_CtlError>
    break;
 80050aa:	e000      	b.n	80050ae <USBD_ClrFeature+0x3a>
    break;
 80050ac:	bf00      	nop
  }
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781a      	ldrb	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	785a      	ldrb	r2, [r3, #1]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	3302      	adds	r3, #2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	3303      	adds	r3, #3
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	4413      	add	r3, r2
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	3304      	adds	r3, #4
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	3305      	adds	r3, #5
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	b29b      	uxth	r3, r3
 8005100:	4413      	add	r3, r2
 8005102:	b29a      	uxth	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	3306      	adds	r3, #6
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b29a      	uxth	r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	3307      	adds	r3, #7
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	b29b      	uxth	r3, r3
 800511c:	4413      	add	r3, r2
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	80da      	strh	r2, [r3, #6]

}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fd07 	bl	8005b50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005142:	2100      	movs	r1, #0
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fd03 	bl	8005b50 <USBD_LL_StallEP>
}
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b086      	sub	sp, #24
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d032      	beq.n	80051ce <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f834 	bl	80051d6 <USBD_GetLen>
 800516e:	4603      	mov	r3, r0
 8005170:	3301      	adds	r3, #1
 8005172:	b29b      	uxth	r3, r3
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	75fa      	strb	r2, [r7, #23]
 8005182:	461a      	mov	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4413      	add	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	75fa      	strb	r2, [r7, #23]
 8005194:	461a      	mov	r2, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	2203      	movs	r2, #3
 800519c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800519e:	e012      	b.n	80051c6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	60fa      	str	r2, [r7, #12]
 80051a6:	7dfa      	ldrb	r2, [r7, #23]
 80051a8:	1c51      	adds	r1, r2, #1
 80051aa:	75f9      	strb	r1, [r7, #23]
 80051ac:	4611      	mov	r1, r2
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	440a      	add	r2, r1
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	75fa      	strb	r2, [r7, #23]
 80051bc:	461a      	mov	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e8      	bne.n	80051a0 <USBD_GetString+0x4e>
    }
  }
}
 80051ce:	bf00      	nop
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80051e2:	e005      	b.n	80051f0 <USBD_GetLen+0x1a>
    {
        len++;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	3301      	adds	r3, #1
 80051e8:	73fb      	strb	r3, [r7, #15]
        buf++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3301      	adds	r3, #1
 80051ee:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f5      	bne.n	80051e4 <USBD_GetLen+0xe>
    }

    return len;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	4613      	mov	r3, r2
 8005212:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2202      	movs	r2, #2
 8005218:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	2100      	movs	r1, #0
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fd17 	bl	8005c62 <USBD_LL_Transmit>

  return USBD_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	2100      	movs	r1, #0
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fd05 	bl	8005c62 <USBD_LL_Transmit>

  return USBD_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	4613      	mov	r3, r2
 800526e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2203      	movs	r2, #3
 8005274:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8005278:	88fa      	ldrh	r2, [r7, #6]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	2100      	movs	r1, #0
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 fd0a 	bl	8005ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	4613      	mov	r3, r2
 80052aa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	2100      	movs	r1, #0
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fcf8 	bl	8005ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80052d2:	2300      	movs	r3, #0
 80052d4:	2200      	movs	r2, #0
 80052d6:	2100      	movs	r1, #0
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fcc2 	bl	8005c62 <USBD_LL_Transmit>

  return USBD_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2205      	movs	r2, #5
 80052f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80052f8:	2300      	movs	r3, #0
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fcd2 	bl	8005ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <main>:
static void MX_GPIO_Init(void);

uint8_t message[50] = "Hello from CubeIDE \n";

int main(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0

  HAL_Init();
 8005314:	f7fb f8e4 	bl	80004e0 <HAL_Init>


  SystemClock_Config();
 8005318:	f000 f814 	bl	8005344 <SystemClock_Config>


  MX_GPIO_Init();
 800531c:	f000 f87a 	bl	8005414 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8005320:	f000 f94a 	bl	80055b8 <MX_USB_DEVICE_Init>

  while (1)
  {
  CDC_Transmit_FS(message,strlen((char *)message));
 8005324:	4806      	ldr	r0, [pc, #24]	; (8005340 <main+0x30>)
 8005326:	f7fa ff57 	bl	80001d8 <strlen>
 800532a:	4603      	mov	r3, r0
 800532c:	b29b      	uxth	r3, r3
 800532e:	4619      	mov	r1, r3
 8005330:	4803      	ldr	r0, [pc, #12]	; (8005340 <main+0x30>)
 8005332:	f000 f9ff 	bl	8005734 <CDC_Transmit_FS>
  HAL_Delay(400);
 8005336:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800533a:	f7fb f943 	bl	80005c4 <HAL_Delay>
  CDC_Transmit_FS(message,strlen((char *)message));
 800533e:	e7f1      	b.n	8005324 <main+0x14>
 8005340:	20000118 	.word	0x20000118

08005344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b094      	sub	sp, #80	; 0x50
 8005348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800534a:	f107 0320 	add.w	r3, r7, #32
 800534e:	2230      	movs	r2, #48	; 0x30
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fe7e 	bl	8006054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005368:	2300      	movs	r3, #0
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	4b27      	ldr	r3, [pc, #156]	; (800540c <SystemClock_Config+0xc8>)
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	4a26      	ldr	r2, [pc, #152]	; (800540c <SystemClock_Config+0xc8>)
 8005372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005376:	6413      	str	r3, [r2, #64]	; 0x40
 8005378:	4b24      	ldr	r3, [pc, #144]	; (800540c <SystemClock_Config+0xc8>)
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005384:	2300      	movs	r3, #0
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	4b21      	ldr	r3, [pc, #132]	; (8005410 <SystemClock_Config+0xcc>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a20      	ldr	r2, [pc, #128]	; (8005410 <SystemClock_Config+0xcc>)
 800538e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <SystemClock_Config+0xcc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80053a0:	2301      	movs	r3, #1
 80053a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053aa:	2302      	movs	r3, #2
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80053b4:	2304      	movs	r3, #4
 80053b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80053b8:	2360      	movs	r3, #96	; 0x60
 80053ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053bc:	2302      	movs	r3, #2
 80053be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80053c0:	2304      	movs	r3, #4
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053c4:	f107 0320 	add.w	r3, r7, #32
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fc fd3f 	bl	8001e4c <HAL_RCC_OscConfig>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80053d4:	f000 f846 	bl	8005464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053d8:	230f      	movs	r3, #15
 80053da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053dc:	2302      	movs	r3, #2
 80053de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80053e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80053ee:	f107 030c 	add.w	r3, r7, #12
 80053f2:	2103      	movs	r1, #3
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fc ff99 	bl	800232c <HAL_RCC_ClockConfig>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005400:	f000 f830 	bl	8005464 <Error_Handler>
  }
}
 8005404:	bf00      	nop
 8005406:	3750      	adds	r7, #80	; 0x50
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	40007000 	.word	0x40007000

08005414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	607b      	str	r3, [r7, #4]
 800541e:	4b10      	ldr	r3, [pc, #64]	; (8005460 <MX_GPIO_Init+0x4c>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	4a0f      	ldr	r2, [pc, #60]	; (8005460 <MX_GPIO_Init+0x4c>)
 8005424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005428:	6313      	str	r3, [r2, #48]	; 0x30
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <MX_GPIO_Init+0x4c>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <MX_GPIO_Init+0x4c>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	4a08      	ldr	r2, [pc, #32]	; (8005460 <MX_GPIO_Init+0x4c>)
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	6313      	str	r3, [r2, #48]	; 0x30
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <MX_GPIO_Init+0x4c>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	683b      	ldr	r3, [r7, #0]

}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800

08005464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <HAL_MspInit+0x4c>)
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	4a0f      	ldr	r2, [pc, #60]	; (80054c0 <HAL_MspInit+0x4c>)
 8005484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005488:	6453      	str	r3, [r2, #68]	; 0x44
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <HAL_MspInit+0x4c>)
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005492:	607b      	str	r3, [r7, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005496:	2300      	movs	r3, #0
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_MspInit+0x4c>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <HAL_MspInit+0x4c>)
 80054a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a4:	6413      	str	r3, [r2, #64]	; 0x40
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_MspInit+0x4c>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80054b2:	2007      	movs	r0, #7
 80054b4:	f7fb f97a 	bl	80007ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40023800 	.word	0x40023800

080054c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054d2:	b480      	push	{r7}
 80054d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054d6:	e7fe      	b.n	80054d6 <HardFault_Handler+0x4>

080054d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054dc:	e7fe      	b.n	80054dc <MemManage_Handler+0x4>

080054de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054de:	b480      	push	{r7}
 80054e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054e2:	e7fe      	b.n	80054e2 <BusFault_Handler+0x4>

080054e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054e8:	e7fe      	b.n	80054e8 <UsageFault_Handler+0x4>

080054ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054ea:	b480      	push	{r7}
 80054ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054ee:	bf00      	nop
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054fc:	bf00      	nop
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800550a:	bf00      	nop
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005518:	f7fb f834 	bl	8000584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}

08005520 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005524:	4802      	ldr	r0, [pc, #8]	; (8005530 <OTG_FS_IRQHandler+0x10>)
 8005526:	f7fb fc57 	bl	8000dd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200014e0 	.word	0x200014e0

08005534 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <_sbrk+0x50>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <_sbrk+0x16>
		heap_end = &end;
 8005544:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <_sbrk+0x50>)
 8005546:	4a10      	ldr	r2, [pc, #64]	; (8005588 <_sbrk+0x54>)
 8005548:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800554a:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <_sbrk+0x50>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <_sbrk+0x50>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4413      	add	r3, r2
 8005558:	466a      	mov	r2, sp
 800555a:	4293      	cmp	r3, r2
 800555c:	d907      	bls.n	800556e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800555e:	f000 fd3f 	bl	8005fe0 <__errno>
 8005562:	4603      	mov	r3, r0
 8005564:	220c      	movs	r2, #12
 8005566:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005568:	f04f 33ff 	mov.w	r3, #4294967295
 800556c:	e006      	b.n	800557c <_sbrk+0x48>
	}

	heap_end += incr;
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <_sbrk+0x50>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	4a03      	ldr	r2, [pc, #12]	; (8005584 <_sbrk+0x50>)
 8005578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800557a:	68fb      	ldr	r3, [r7, #12]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20000234 	.word	0x20000234
 8005588:	20001af8 	.word	0x20001af8

0800558c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005590:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <SystemInit+0x28>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	4a07      	ldr	r2, [pc, #28]	; (80055b4 <SystemInit+0x28>)
 8005598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800559c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80055a0:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <SystemInit+0x28>)
 80055a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055a6:	609a      	str	r2, [r3, #8]
#endif
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	e000ed00 	.word	0xe000ed00

080055b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80055bc:	2200      	movs	r2, #0
 80055be:	4912      	ldr	r1, [pc, #72]	; (8005608 <MX_USB_DEVICE_Init+0x50>)
 80055c0:	4812      	ldr	r0, [pc, #72]	; (800560c <MX_USB_DEVICE_Init+0x54>)
 80055c2:	f7fe fe3d 	bl	8004240 <USBD_Init>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80055cc:	f7ff ff4a 	bl	8005464 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80055d0:	490f      	ldr	r1, [pc, #60]	; (8005610 <MX_USB_DEVICE_Init+0x58>)
 80055d2:	480e      	ldr	r0, [pc, #56]	; (800560c <MX_USB_DEVICE_Init+0x54>)
 80055d4:	f7fe fe5f 	bl	8004296 <USBD_RegisterClass>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80055de:	f7ff ff41 	bl	8005464 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80055e2:	490c      	ldr	r1, [pc, #48]	; (8005614 <MX_USB_DEVICE_Init+0x5c>)
 80055e4:	4809      	ldr	r0, [pc, #36]	; (800560c <MX_USB_DEVICE_Init+0x54>)
 80055e6:	f7fe fd8d 	bl	8004104 <USBD_CDC_RegisterInterface>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80055f0:	f7ff ff38 	bl	8005464 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80055f4:	4805      	ldr	r0, [pc, #20]	; (800560c <MX_USB_DEVICE_Init+0x54>)
 80055f6:	f7fe fe68 	bl	80042ca <USBD_Start>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005600:	f7ff ff30 	bl	8005464 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005604:	bf00      	nop
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000160 	.word	0x20000160
 800560c:	20000244 	.word	0x20000244
 8005610:	20000014 	.word	0x20000014
 8005614:	20000150 	.word	0x20000150

08005618 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800561c:	2200      	movs	r2, #0
 800561e:	4905      	ldr	r1, [pc, #20]	; (8005634 <CDC_Init_FS+0x1c>)
 8005620:	4805      	ldr	r0, [pc, #20]	; (8005638 <CDC_Init_FS+0x20>)
 8005622:	f7fe fd86 	bl	8004132 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005626:	4905      	ldr	r1, [pc, #20]	; (800563c <CDC_Init_FS+0x24>)
 8005628:	4803      	ldr	r0, [pc, #12]	; (8005638 <CDC_Init_FS+0x20>)
 800562a:	f7fe fd9c 	bl	8004166 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800562e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20000ce0 	.word	0x20000ce0
 8005638:	20000244 	.word	0x20000244
 800563c:	200004e0 	.word	0x200004e0

08005640 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005644:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005646:	4618      	mov	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	6039      	str	r1, [r7, #0]
 800565a:	71fb      	strb	r3, [r7, #7]
 800565c:	4613      	mov	r3, r2
 800565e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	2b23      	cmp	r3, #35	; 0x23
 8005664:	d84a      	bhi.n	80056fc <CDC_Control_FS+0xac>
 8005666:	a201      	add	r2, pc, #4	; (adr r2, 800566c <CDC_Control_FS+0x1c>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	080056fd 	.word	0x080056fd
 8005670:	080056fd 	.word	0x080056fd
 8005674:	080056fd 	.word	0x080056fd
 8005678:	080056fd 	.word	0x080056fd
 800567c:	080056fd 	.word	0x080056fd
 8005680:	080056fd 	.word	0x080056fd
 8005684:	080056fd 	.word	0x080056fd
 8005688:	080056fd 	.word	0x080056fd
 800568c:	080056fd 	.word	0x080056fd
 8005690:	080056fd 	.word	0x080056fd
 8005694:	080056fd 	.word	0x080056fd
 8005698:	080056fd 	.word	0x080056fd
 800569c:	080056fd 	.word	0x080056fd
 80056a0:	080056fd 	.word	0x080056fd
 80056a4:	080056fd 	.word	0x080056fd
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	080056fd 	.word	0x080056fd
 80056b0:	080056fd 	.word	0x080056fd
 80056b4:	080056fd 	.word	0x080056fd
 80056b8:	080056fd 	.word	0x080056fd
 80056bc:	080056fd 	.word	0x080056fd
 80056c0:	080056fd 	.word	0x080056fd
 80056c4:	080056fd 	.word	0x080056fd
 80056c8:	080056fd 	.word	0x080056fd
 80056cc:	080056fd 	.word	0x080056fd
 80056d0:	080056fd 	.word	0x080056fd
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	080056fd 	.word	0x080056fd
 80056e0:	080056fd 	.word	0x080056fd
 80056e4:	080056fd 	.word	0x080056fd
 80056e8:	080056fd 	.word	0x080056fd
 80056ec:	080056fd 	.word	0x080056fd
 80056f0:	080056fd 	.word	0x080056fd
 80056f4:	080056fd 	.word	0x080056fd
 80056f8:	080056fd 	.word	0x080056fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80056fc:	bf00      	nop
  }

  return (USBD_OK);
 80056fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4805      	ldr	r0, [pc, #20]	; (8005730 <CDC_Receive_FS+0x24>)
 800571a:	f7fe fd24 	bl	8004166 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800571e:	4804      	ldr	r0, [pc, #16]	; (8005730 <CDC_Receive_FS+0x24>)
 8005720:	f7fe fd64 	bl	80041ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005724:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000244 	.word	0x20000244

08005734 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005744:	4b0d      	ldr	r3, [pc, #52]	; (800577c <CDC_Transmit_FS+0x48>)
 8005746:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800574a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005756:	2301      	movs	r3, #1
 8005758:	e00b      	b.n	8005772 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800575a:	887b      	ldrh	r3, [r7, #2]
 800575c:	461a      	mov	r2, r3
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4806      	ldr	r0, [pc, #24]	; (800577c <CDC_Transmit_FS+0x48>)
 8005762:	f7fe fce6 	bl	8004132 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005766:	4805      	ldr	r0, [pc, #20]	; (800577c <CDC_Transmit_FS+0x48>)
 8005768:	f7fe fd11 	bl	800418e <USBD_CDC_TransmitPacket>
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000244 	.word	0x20000244

08005780 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005788:	f107 0314 	add.w	r3, r7, #20
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057a0:	d13a      	bne.n	8005818 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	4b1e      	ldr	r3, [pc, #120]	; (8005820 <HAL_PCD_MspInit+0xa0>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	4a1d      	ldr	r2, [pc, #116]	; (8005820 <HAL_PCD_MspInit+0xa0>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6313      	str	r3, [r2, #48]	; 0x30
 80057b2:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <HAL_PCD_MspInit+0xa0>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80057be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80057c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c4:	2302      	movs	r3, #2
 80057c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057cc:	2303      	movs	r3, #3
 80057ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80057d0:	230a      	movs	r3, #10
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	4619      	mov	r1, r3
 80057da:	4812      	ldr	r0, [pc, #72]	; (8005824 <HAL_PCD_MspInit+0xa4>)
 80057dc:	f7fb f828 	bl	8000830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80057e0:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <HAL_PCD_MspInit+0xa0>)
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	4a0e      	ldr	r2, [pc, #56]	; (8005820 <HAL_PCD_MspInit+0xa0>)
 80057e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ea:	6353      	str	r3, [r2, #52]	; 0x34
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_PCD_MspInit+0xa0>)
 80057f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f4:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <HAL_PCD_MspInit+0xa0>)
 80057f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057fa:	6453      	str	r3, [r2, #68]	; 0x44
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <HAL_PCD_MspInit+0xa0>)
 80057fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005808:	2200      	movs	r2, #0
 800580a:	2100      	movs	r1, #0
 800580c:	2043      	movs	r0, #67	; 0x43
 800580e:	f7fa ffd8 	bl	80007c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005812:	2043      	movs	r0, #67	; 0x43
 8005814:	f7fa fff1 	bl	80007fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005818:	bf00      	nop
 800581a:	3728      	adds	r7, #40	; 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	40020000 	.word	0x40020000

08005828 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f7fe fd8c 	bl	800435c <USBD_LL_SetupStage>
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	4619      	mov	r1, r3
 8005876:	f7fe fdbe 	bl	80043f6 <USBD_LL_DataOutStage>
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	3348      	adds	r3, #72	; 0x48
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	4619      	mov	r1, r3
 80058aa:	f7fe fe15 	bl	80044d8 <USBD_LL_DataInStage>
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe ff23 	bl	8004710 <USBD_LL_SOF>
}
 80058ca:	bf00      	nop
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d001      	beq.n	80058ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80058e6:	f7ff fdbd 	bl	8005464 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058f0:	7bfa      	ldrb	r2, [r7, #15]
 80058f2:	4611      	mov	r1, r2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fe fed5 	bl	80046a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe fe8e 	bl	8004622 <USBD_LL_Reset>
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fed0 	bl	80046c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005944:	4b04      	ldr	r3, [pc, #16]	; (8005958 <HAL_PCD_SuspendCallback+0x48>)
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	4a03      	ldr	r2, [pc, #12]	; (8005958 <HAL_PCD_SuspendCallback+0x48>)
 800594a:	f043 0306 	orr.w	r3, r3, #6
 800594e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	e000ed00 	.word	0xe000ed00

0800595c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe febf 	bl	80046ee <USBD_LL_Resume>
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fee5 	bl	800475e <USBD_LL_IsoOUTIncomplete>
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	4611      	mov	r1, r2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fec6 	bl	8004744 <USBD_LL_IsoINIncomplete>
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fed2 	bl	8004778 <USBD_LL_DevConnected>
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe fecf 	bl	800478e <USBD_LL_DevDisconnected>
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d13c      	bne.n	8005a82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005a08:	4a20      	ldr	r2, [pc, #128]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005a18:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005a20:	4b1a      	ldr	r3, [pc, #104]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a22:	2204      	movs	r2, #4
 8005a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005a26:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a28:	2202      	movs	r2, #2
 8005a2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005a32:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a34:	2202      	movs	r2, #2
 8005a36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005a38:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005a44:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005a50:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005a56:	480d      	ldr	r0, [pc, #52]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a58:	f7fb f86e 	bl	8000b38 <HAL_PCD_Init>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005a62:	f7ff fcff 	bl	8005464 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005a66:	2180      	movs	r1, #128	; 0x80
 8005a68:	4808      	ldr	r0, [pc, #32]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a6a:	f7fc f9d2 	bl	8001e12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	2100      	movs	r1, #0
 8005a72:	4806      	ldr	r0, [pc, #24]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a74:	f7fc f986 	bl	8001d84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005a78:	2280      	movs	r2, #128	; 0x80
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4803      	ldr	r0, [pc, #12]	; (8005a8c <USBD_LL_Init+0x94>)
 8005a7e:	f7fc f981 	bl	8001d84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	200014e0 	.word	0x200014e0

08005a90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fb f963 	bl	8000d72 <HAL_PCD_Start>
 8005aac:	4603      	mov	r3, r0
 8005aae:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 f92e 	bl	8005d14 <USBD_Get_USB_Status>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	70fb      	strb	r3, [r7, #3]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70bb      	strb	r3, [r7, #2]
 8005adc:	4613      	mov	r3, r2
 8005ade:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005aee:	78bb      	ldrb	r3, [r7, #2]
 8005af0:	883a      	ldrh	r2, [r7, #0]
 8005af2:	78f9      	ldrb	r1, [r7, #3]
 8005af4:	f7fb fd38 	bl	8001568 <HAL_PCD_EP_Open>
 8005af8:	4603      	mov	r3, r0
 8005afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f908 	bl	8005d14 <USBD_Get_USB_Status>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005b2c:	78fa      	ldrb	r2, [r7, #3]
 8005b2e:	4611      	mov	r1, r2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fb fd81 	bl	8001638 <HAL_PCD_EP_Close>
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 f8e9 	bl	8005d14 <USBD_Get_USB_Status>
 8005b42:	4603      	mov	r3, r0
 8005b44:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005b6a:	78fa      	ldrb	r2, [r7, #3]
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fb fe59 	bl	8001826 <HAL_PCD_EP_SetStall>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f8ca 	bl	8005d14 <USBD_Get_USB_Status>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	460b      	mov	r3, r1
 8005b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fb fe9e 	bl	80018ee <HAL_PCD_EP_ClrStall>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 f8ab 	bl	8005d14 <USBD_Get_USB_Status>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8005bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005bde:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da0b      	bge.n	8005c00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bee:	68f9      	ldr	r1, [r7, #12]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	333e      	adds	r3, #62	; 0x3e
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	e00b      	b.n	8005c18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	4611      	mov	r1, r2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fb fc6b 	bl	800151e <HAL_PCD_SetAddress>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f860 	bl	8005d14 <USBD_Get_USB_Status>
 8005c54:	4603      	mov	r3, r0
 8005c56:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	460b      	mov	r3, r1
 8005c70:	72fb      	strb	r3, [r7, #11]
 8005c72:	4613      	mov	r3, r2
 8005c74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005c84:	893b      	ldrh	r3, [r7, #8]
 8005c86:	7af9      	ldrb	r1, [r7, #11]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	f7fb fd82 	bl	8001792 <HAL_PCD_EP_Transmit>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 f83d 	bl	8005d14 <USBD_Get_USB_Status>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005c9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	607a      	str	r2, [r7, #4]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	72fb      	strb	r3, [r7, #11]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005cca:	893b      	ldrh	r3, [r7, #8]
 8005ccc:	7af9      	ldrb	r1, [r7, #11]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	f7fb fcfc 	bl	80016cc <HAL_PCD_EP_Receive>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f81a 	bl	8005d14 <USBD_Get_USB_Status>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8005ce4:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005d00:	78fa      	ldrb	r2, [r7, #3]
 8005d02:	4611      	mov	r1, r2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fb fd2c 	bl	8001762 <HAL_PCD_EP_GetRxCount>
 8005d0a:	4603      	mov	r3, r0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d817      	bhi.n	8005d58 <USBD_Get_USB_Status+0x44>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <USBD_Get_USB_Status+0x1c>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d41 	.word	0x08005d41
 8005d34:	08005d47 	.word	0x08005d47
 8005d38:	08005d4d 	.word	0x08005d4d
 8005d3c:	08005d53 	.word	0x08005d53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
    break;
 8005d44:	e00b      	b.n	8005d5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005d46:	2302      	movs	r3, #2
 8005d48:	73fb      	strb	r3, [r7, #15]
    break;
 8005d4a:	e008      	b.n	8005d5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d50:	e005      	b.n	8005d5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005d52:	2302      	movs	r3, #2
 8005d54:	73fb      	strb	r3, [r7, #15]
    break;
 8005d56:	e002      	b.n	8005d5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005d58:	2302      	movs	r3, #2
 8005d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8005d5c:	bf00      	nop
  }
  return usb_status;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	6039      	str	r1, [r7, #0]
 8005d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2212      	movs	r2, #18
 8005d7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d7e:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	2000017c 	.word	0x2000017c

08005d90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	6039      	str	r1, [r7, #0]
 8005d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005da2:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	20000190 	.word	0x20000190

08005db4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	6039      	str	r1, [r7, #0]
 8005dbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	4907      	ldr	r1, [pc, #28]	; (8005de8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dca:	4808      	ldr	r0, [pc, #32]	; (8005dec <USBD_FS_ProductStrDescriptor+0x38>)
 8005dcc:	f7ff f9c1 	bl	8005152 <USBD_GetString>
 8005dd0:	e004      	b.n	8005ddc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4904      	ldr	r1, [pc, #16]	; (8005de8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005dd6:	4805      	ldr	r0, [pc, #20]	; (8005dec <USBD_FS_ProductStrDescriptor+0x38>)
 8005dd8:	f7ff f9bb 	bl	8005152 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ddc:	4b02      	ldr	r3, [pc, #8]	; (8005de8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200018e8 	.word	0x200018e8
 8005dec:	0800620c 	.word	0x0800620c

08005df0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	6039      	str	r1, [r7, #0]
 8005dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	4904      	ldr	r1, [pc, #16]	; (8005e10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005e00:	4804      	ldr	r0, [pc, #16]	; (8005e14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005e02:	f7ff f9a6 	bl	8005152 <USBD_GetString>
  return USBD_StrDesc;
 8005e06:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	200018e8 	.word	0x200018e8
 8005e14:	08006224 	.word	0x08006224

08005e18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	221a      	movs	r2, #26
 8005e28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e2a:	f000 f843 	bl	8005eb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e2e:	4b02      	ldr	r3, [pc, #8]	; (8005e38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000194 	.word	0x20000194

08005e3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	6039      	str	r1, [r7, #0]
 8005e46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d105      	bne.n	8005e5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4907      	ldr	r1, [pc, #28]	; (8005e70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e52:	4808      	ldr	r0, [pc, #32]	; (8005e74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e54:	f7ff f97d 	bl	8005152 <USBD_GetString>
 8005e58:	e004      	b.n	8005e64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	4904      	ldr	r1, [pc, #16]	; (8005e70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e5e:	4805      	ldr	r0, [pc, #20]	; (8005e74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e60:	f7ff f977 	bl	8005152 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200018e8 	.word	0x200018e8
 8005e74:	08006238 	.word	0x08006238

08005e78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d105      	bne.n	8005e96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	4907      	ldr	r1, [pc, #28]	; (8005eac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e8e:	4808      	ldr	r0, [pc, #32]	; (8005eb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e90:	f7ff f95f 	bl	8005152 <USBD_GetString>
 8005e94:	e004      	b.n	8005ea0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	4904      	ldr	r1, [pc, #16]	; (8005eac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e9a:	4805      	ldr	r0, [pc, #20]	; (8005eb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e9c:	f7ff f959 	bl	8005152 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200018e8 	.word	0x200018e8
 8005eb0:	08006244 	.word	0x08006244

08005eb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005eba:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <Get_SerialNum+0x44>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <Get_SerialNum+0x48>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <Get_SerialNum+0x4c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005eda:	2208      	movs	r2, #8
 8005edc:	4909      	ldr	r1, [pc, #36]	; (8005f04 <Get_SerialNum+0x50>)
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f814 	bl	8005f0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	4908      	ldr	r1, [pc, #32]	; (8005f08 <Get_SerialNum+0x54>)
 8005ee8:	68b8      	ldr	r0, [r7, #8]
 8005eea:	f000 f80f 	bl	8005f0c <IntToUnicode>
  }
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	1fff7a10 	.word	0x1fff7a10
 8005efc:	1fff7a14 	.word	0x1fff7a14
 8005f00:	1fff7a18 	.word	0x1fff7a18
 8005f04:	20000196 	.word	0x20000196
 8005f08:	200001a6 	.word	0x200001a6

08005f0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f1e:	2300      	movs	r3, #0
 8005f20:	75fb      	strb	r3, [r7, #23]
 8005f22:	e027      	b.n	8005f74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	0f1b      	lsrs	r3, r3, #28
 8005f28:	2b09      	cmp	r3, #9
 8005f2a:	d80b      	bhi.n	8005f44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	0f1b      	lsrs	r3, r3, #28
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	4619      	mov	r1, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	440b      	add	r3, r1
 8005f3c:	3230      	adds	r2, #48	; 0x30
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	e00a      	b.n	8005f5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	0f1b      	lsrs	r3, r3, #28
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	4619      	mov	r1, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	440b      	add	r3, r1
 8005f54:	3237      	adds	r2, #55	; 0x37
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	3301      	adds	r3, #1
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4413      	add	r3, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f6e:	7dfb      	ldrb	r3, [r7, #23]
 8005f70:	3301      	adds	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
 8005f74:	7dfa      	ldrb	r2, [r7, #23]
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d3d3      	bcc.n	8005f24 <IntToUnicode+0x18>
  }
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005f90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005f92:	e003      	b.n	8005f9c <LoopCopyDataInit>

08005f94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005f94:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005f96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005f98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005f9a:	3104      	adds	r1, #4

08005f9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005f9c:	480b      	ldr	r0, [pc, #44]	; (8005fcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005fa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005fa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005fa4:	d3f6      	bcc.n	8005f94 <CopyDataInit>
  ldr  r2, =_sbss
 8005fa6:	4a0b      	ldr	r2, [pc, #44]	; (8005fd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005fa8:	e002      	b.n	8005fb0 <LoopFillZerobss>

08005faa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005faa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005fac:	f842 3b04 	str.w	r3, [r2], #4

08005fb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005fb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005fb4:	d3f9      	bcc.n	8005faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005fb6:	f7ff fae9 	bl	800558c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fba:	f000 f817 	bl	8005fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fbe:	f7ff f9a7 	bl	8005310 <main>
  bx  lr    
 8005fc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005fc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005fc8:	08006274 	.word	0x08006274
  ldr  r0, =_sdata
 8005fcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005fd0:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8005fd4:	20000214 	.word	0x20000214
  ldr  r3, = _ebss
 8005fd8:	20001af8 	.word	0x20001af8

08005fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fdc:	e7fe      	b.n	8005fdc <ADC_IRQHandler>
	...

08005fe0 <__errno>:
 8005fe0:	4b01      	ldr	r3, [pc, #4]	; (8005fe8 <__errno+0x8>)
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	200001b0 	.word	0x200001b0

08005fec <__libc_init_array>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4d0d      	ldr	r5, [pc, #52]	; (8006024 <__libc_init_array+0x38>)
 8005ff0:	4c0d      	ldr	r4, [pc, #52]	; (8006028 <__libc_init_array+0x3c>)
 8005ff2:	1b64      	subs	r4, r4, r5
 8005ff4:	10a4      	asrs	r4, r4, #2
 8005ff6:	2600      	movs	r6, #0
 8005ff8:	42a6      	cmp	r6, r4
 8005ffa:	d109      	bne.n	8006010 <__libc_init_array+0x24>
 8005ffc:	4d0b      	ldr	r5, [pc, #44]	; (800602c <__libc_init_array+0x40>)
 8005ffe:	4c0c      	ldr	r4, [pc, #48]	; (8006030 <__libc_init_array+0x44>)
 8006000:	f000 f8f8 	bl	80061f4 <_init>
 8006004:	1b64      	subs	r4, r4, r5
 8006006:	10a4      	asrs	r4, r4, #2
 8006008:	2600      	movs	r6, #0
 800600a:	42a6      	cmp	r6, r4
 800600c:	d105      	bne.n	800601a <__libc_init_array+0x2e>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	f855 3b04 	ldr.w	r3, [r5], #4
 8006014:	4798      	blx	r3
 8006016:	3601      	adds	r6, #1
 8006018:	e7ee      	b.n	8005ff8 <__libc_init_array+0xc>
 800601a:	f855 3b04 	ldr.w	r3, [r5], #4
 800601e:	4798      	blx	r3
 8006020:	3601      	adds	r6, #1
 8006022:	e7f2      	b.n	800600a <__libc_init_array+0x1e>
 8006024:	0800626c 	.word	0x0800626c
 8006028:	0800626c 	.word	0x0800626c
 800602c:	0800626c 	.word	0x0800626c
 8006030:	08006270 	.word	0x08006270

08006034 <malloc>:
 8006034:	4b02      	ldr	r3, [pc, #8]	; (8006040 <malloc+0xc>)
 8006036:	4601      	mov	r1, r0
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	f000 b863 	b.w	8006104 <_malloc_r>
 800603e:	bf00      	nop
 8006040:	200001b0 	.word	0x200001b0

08006044 <free>:
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <free+0xc>)
 8006046:	4601      	mov	r1, r0
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	f000 b80b 	b.w	8006064 <_free_r>
 800604e:	bf00      	nop
 8006050:	200001b0 	.word	0x200001b0

08006054 <memset>:
 8006054:	4402      	add	r2, r0
 8006056:	4603      	mov	r3, r0
 8006058:	4293      	cmp	r3, r2
 800605a:	d100      	bne.n	800605e <memset+0xa>
 800605c:	4770      	bx	lr
 800605e:	f803 1b01 	strb.w	r1, [r3], #1
 8006062:	e7f9      	b.n	8006058 <memset+0x4>

08006064 <_free_r>:
 8006064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006066:	2900      	cmp	r1, #0
 8006068:	d048      	beq.n	80060fc <_free_r+0x98>
 800606a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800606e:	9001      	str	r0, [sp, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f1a1 0404 	sub.w	r4, r1, #4
 8006076:	bfb8      	it	lt
 8006078:	18e4      	addlt	r4, r4, r3
 800607a:	f000 f8ad 	bl	80061d8 <__malloc_lock>
 800607e:	4a20      	ldr	r2, [pc, #128]	; (8006100 <_free_r+0x9c>)
 8006080:	9801      	ldr	r0, [sp, #4]
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	4615      	mov	r5, r2
 8006086:	b933      	cbnz	r3, 8006096 <_free_r+0x32>
 8006088:	6063      	str	r3, [r4, #4]
 800608a:	6014      	str	r4, [r2, #0]
 800608c:	b003      	add	sp, #12
 800608e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006092:	f000 b8a7 	b.w	80061e4 <__malloc_unlock>
 8006096:	42a3      	cmp	r3, r4
 8006098:	d90b      	bls.n	80060b2 <_free_r+0x4e>
 800609a:	6821      	ldr	r1, [r4, #0]
 800609c:	1862      	adds	r2, r4, r1
 800609e:	4293      	cmp	r3, r2
 80060a0:	bf04      	itt	eq
 80060a2:	681a      	ldreq	r2, [r3, #0]
 80060a4:	685b      	ldreq	r3, [r3, #4]
 80060a6:	6063      	str	r3, [r4, #4]
 80060a8:	bf04      	itt	eq
 80060aa:	1852      	addeq	r2, r2, r1
 80060ac:	6022      	streq	r2, [r4, #0]
 80060ae:	602c      	str	r4, [r5, #0]
 80060b0:	e7ec      	b.n	800608c <_free_r+0x28>
 80060b2:	461a      	mov	r2, r3
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b10b      	cbz	r3, 80060bc <_free_r+0x58>
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	d9fa      	bls.n	80060b2 <_free_r+0x4e>
 80060bc:	6811      	ldr	r1, [r2, #0]
 80060be:	1855      	adds	r5, r2, r1
 80060c0:	42a5      	cmp	r5, r4
 80060c2:	d10b      	bne.n	80060dc <_free_r+0x78>
 80060c4:	6824      	ldr	r4, [r4, #0]
 80060c6:	4421      	add	r1, r4
 80060c8:	1854      	adds	r4, r2, r1
 80060ca:	42a3      	cmp	r3, r4
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	d1dd      	bne.n	800608c <_free_r+0x28>
 80060d0:	681c      	ldr	r4, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	6053      	str	r3, [r2, #4]
 80060d6:	4421      	add	r1, r4
 80060d8:	6011      	str	r1, [r2, #0]
 80060da:	e7d7      	b.n	800608c <_free_r+0x28>
 80060dc:	d902      	bls.n	80060e4 <_free_r+0x80>
 80060de:	230c      	movs	r3, #12
 80060e0:	6003      	str	r3, [r0, #0]
 80060e2:	e7d3      	b.n	800608c <_free_r+0x28>
 80060e4:	6825      	ldr	r5, [r4, #0]
 80060e6:	1961      	adds	r1, r4, r5
 80060e8:	428b      	cmp	r3, r1
 80060ea:	bf04      	itt	eq
 80060ec:	6819      	ldreq	r1, [r3, #0]
 80060ee:	685b      	ldreq	r3, [r3, #4]
 80060f0:	6063      	str	r3, [r4, #4]
 80060f2:	bf04      	itt	eq
 80060f4:	1949      	addeq	r1, r1, r5
 80060f6:	6021      	streq	r1, [r4, #0]
 80060f8:	6054      	str	r4, [r2, #4]
 80060fa:	e7c7      	b.n	800608c <_free_r+0x28>
 80060fc:	b003      	add	sp, #12
 80060fe:	bd30      	pop	{r4, r5, pc}
 8006100:	20000238 	.word	0x20000238

08006104 <_malloc_r>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	1ccd      	adds	r5, r1, #3
 8006108:	f025 0503 	bic.w	r5, r5, #3
 800610c:	3508      	adds	r5, #8
 800610e:	2d0c      	cmp	r5, #12
 8006110:	bf38      	it	cc
 8006112:	250c      	movcc	r5, #12
 8006114:	2d00      	cmp	r5, #0
 8006116:	4606      	mov	r6, r0
 8006118:	db01      	blt.n	800611e <_malloc_r+0x1a>
 800611a:	42a9      	cmp	r1, r5
 800611c:	d903      	bls.n	8006126 <_malloc_r+0x22>
 800611e:	230c      	movs	r3, #12
 8006120:	6033      	str	r3, [r6, #0]
 8006122:	2000      	movs	r0, #0
 8006124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006126:	f000 f857 	bl	80061d8 <__malloc_lock>
 800612a:	4921      	ldr	r1, [pc, #132]	; (80061b0 <_malloc_r+0xac>)
 800612c:	680a      	ldr	r2, [r1, #0]
 800612e:	4614      	mov	r4, r2
 8006130:	b99c      	cbnz	r4, 800615a <_malloc_r+0x56>
 8006132:	4f20      	ldr	r7, [pc, #128]	; (80061b4 <_malloc_r+0xb0>)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	b923      	cbnz	r3, 8006142 <_malloc_r+0x3e>
 8006138:	4621      	mov	r1, r4
 800613a:	4630      	mov	r0, r6
 800613c:	f000 f83c 	bl	80061b8 <_sbrk_r>
 8006140:	6038      	str	r0, [r7, #0]
 8006142:	4629      	mov	r1, r5
 8006144:	4630      	mov	r0, r6
 8006146:	f000 f837 	bl	80061b8 <_sbrk_r>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	d123      	bne.n	8006196 <_malloc_r+0x92>
 800614e:	230c      	movs	r3, #12
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	4630      	mov	r0, r6
 8006154:	f000 f846 	bl	80061e4 <__malloc_unlock>
 8006158:	e7e3      	b.n	8006122 <_malloc_r+0x1e>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	1b5b      	subs	r3, r3, r5
 800615e:	d417      	bmi.n	8006190 <_malloc_r+0x8c>
 8006160:	2b0b      	cmp	r3, #11
 8006162:	d903      	bls.n	800616c <_malloc_r+0x68>
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	441c      	add	r4, r3
 8006168:	6025      	str	r5, [r4, #0]
 800616a:	e004      	b.n	8006176 <_malloc_r+0x72>
 800616c:	6863      	ldr	r3, [r4, #4]
 800616e:	42a2      	cmp	r2, r4
 8006170:	bf0c      	ite	eq
 8006172:	600b      	streq	r3, [r1, #0]
 8006174:	6053      	strne	r3, [r2, #4]
 8006176:	4630      	mov	r0, r6
 8006178:	f000 f834 	bl	80061e4 <__malloc_unlock>
 800617c:	f104 000b 	add.w	r0, r4, #11
 8006180:	1d23      	adds	r3, r4, #4
 8006182:	f020 0007 	bic.w	r0, r0, #7
 8006186:	1ac2      	subs	r2, r0, r3
 8006188:	d0cc      	beq.n	8006124 <_malloc_r+0x20>
 800618a:	1a1b      	subs	r3, r3, r0
 800618c:	50a3      	str	r3, [r4, r2]
 800618e:	e7c9      	b.n	8006124 <_malloc_r+0x20>
 8006190:	4622      	mov	r2, r4
 8006192:	6864      	ldr	r4, [r4, #4]
 8006194:	e7cc      	b.n	8006130 <_malloc_r+0x2c>
 8006196:	1cc4      	adds	r4, r0, #3
 8006198:	f024 0403 	bic.w	r4, r4, #3
 800619c:	42a0      	cmp	r0, r4
 800619e:	d0e3      	beq.n	8006168 <_malloc_r+0x64>
 80061a0:	1a21      	subs	r1, r4, r0
 80061a2:	4630      	mov	r0, r6
 80061a4:	f000 f808 	bl	80061b8 <_sbrk_r>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d1dd      	bne.n	8006168 <_malloc_r+0x64>
 80061ac:	e7cf      	b.n	800614e <_malloc_r+0x4a>
 80061ae:	bf00      	nop
 80061b0:	20000238 	.word	0x20000238
 80061b4:	2000023c 	.word	0x2000023c

080061b8 <_sbrk_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d06      	ldr	r5, [pc, #24]	; (80061d4 <_sbrk_r+0x1c>)
 80061bc:	2300      	movs	r3, #0
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	f7ff f9b6 	bl	8005534 <_sbrk>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_sbrk_r+0x1a>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_sbrk_r+0x1a>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20001ae8 	.word	0x20001ae8

080061d8 <__malloc_lock>:
 80061d8:	4801      	ldr	r0, [pc, #4]	; (80061e0 <__malloc_lock+0x8>)
 80061da:	f000 b809 	b.w	80061f0 <__retarget_lock_acquire_recursive>
 80061de:	bf00      	nop
 80061e0:	20001af0 	.word	0x20001af0

080061e4 <__malloc_unlock>:
 80061e4:	4801      	ldr	r0, [pc, #4]	; (80061ec <__malloc_unlock+0x8>)
 80061e6:	f000 b804 	b.w	80061f2 <__retarget_lock_release_recursive>
 80061ea:	bf00      	nop
 80061ec:	20001af0 	.word	0x20001af0

080061f0 <__retarget_lock_acquire_recursive>:
 80061f0:	4770      	bx	lr

080061f2 <__retarget_lock_release_recursive>:
 80061f2:	4770      	bx	lr

080061f4 <_init>:
 80061f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f6:	bf00      	nop
 80061f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fa:	bc08      	pop	{r3}
 80061fc:	469e      	mov	lr, r3
 80061fe:	4770      	bx	lr

08006200 <_fini>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	bf00      	nop
 8006204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006206:	bc08      	pop	{r3}
 8006208:	469e      	mov	lr, r3
 800620a:	4770      	bx	lr
