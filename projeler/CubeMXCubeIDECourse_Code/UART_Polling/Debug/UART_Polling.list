
UART_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f58  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080020f0  080020f0  000120f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002108  08002108  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08002108  08002108  00012108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002110  08002110  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002114  08002114  00012114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000002c  08002144  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002144  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059c3  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001212  00000000  00000000  00025a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00026c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  00027210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145fb  00000000  00000000  00027750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c09  00000000  00000000  0003bd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000808f3  00000000  00000000  00042954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3247  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016cc  00000000  00000000  000c329c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080020d8 	.word	0x080020d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	080020d8 	.word	0x080020d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f931 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 f808 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f001 fcde 	bl	8001ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_InitTick+0x54>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_InitTick+0x58>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	fbb3 f3f1 	udiv	r3, r3, r1
 800052e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f93b 	bl	80007ae <HAL_SYSTICK_Config>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	e00e      	b.n	8000560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d80a      	bhi.n	800055e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f000 f911 	bl	8000776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_InitTick+0x5c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000028 	.word	0x20000028
 800056c:	20000004 	.word	0x20000004
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004
 8000598:	20000048 	.word	0x20000048

0800059c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return uwTick;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_GetTick+0x14>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000048 	.word	0x20000048

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff ffee 	bl	800059c <HAL_GetTick>
 80005c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005cc:	d005      	beq.n	80005da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_Delay+0x44>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4413      	add	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005da:	bf00      	nop
 80005dc:	f7ff ffde 	bl	800059c <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8f7      	bhi.n	80005dc <HAL_Delay+0x28>
  {
  }
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db0a      	blt.n	800068a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	490c      	ldr	r1, [pc, #48]	; (80006ac <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000688:	e00a      	b.n	80006a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4908      	ldr	r1, [pc, #32]	; (80006b0 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	440b      	add	r3, r1
 800069e:	761a      	strb	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43da      	mvns	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	401a      	ands	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43d9      	mvns	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800072c:	d301      	bcc.n	8000732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072e:	2301      	movs	r3, #1
 8000730:	e00f      	b.n	8000752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <SysTick_Config+0x40>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073a:	210f      	movs	r1, #15
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f7ff ff8e 	bl	8000660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <SysTick_Config+0x40>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <SysTick_Config+0x40>)
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff47 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000788:	f7ff ff5c 	bl	8000644 <__NVIC_GetPriorityGrouping>
 800078c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff ff8e 	bl	80006b4 <NVIC_EncodePriority>
 8000798:	4602      	mov	r2, r0
 800079a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5d 	bl	8000660 <__NVIC_SetPriority>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ffb0 	bl	800071c <SysTick_Config>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	e159      	b.n	8000a98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007e4:	2201      	movs	r2, #1
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	4013      	ands	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f040 8148 	bne.w	8000a92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d00b      	beq.n	8000822 <HAL_GPIO_Init+0x5a>
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d007      	beq.n	8000822 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000816:	2b11      	cmp	r3, #17
 8000818:	d003      	beq.n	8000822 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b12      	cmp	r3, #18
 8000820:	d130      	bne.n	8000884 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	2203      	movs	r2, #3
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	4013      	ands	r3, r2
 8000838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4313      	orrs	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000858:	2201      	movs	r2, #1
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4013      	ands	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	f003 0201 	and.w	r2, r3, #1
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4313      	orrs	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d003      	beq.n	80008c4 <HAL_GPIO_Init+0xfc>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b12      	cmp	r3, #18
 80008c2:	d123      	bne.n	800090c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	08da      	lsrs	r2, r3, #3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3208      	adds	r2, #8
 80008cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	220f      	movs	r2, #15
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	691a      	ldr	r2, [r3, #16]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	08da      	lsrs	r2, r3, #3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3208      	adds	r2, #8
 8000906:	69b9      	ldr	r1, [r7, #24]
 8000908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0203 	and.w	r2, r3, #3
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4313      	orrs	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 80a2 	beq.w	8000a92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b57      	ldr	r3, [pc, #348]	; (8000ab0 <HAL_GPIO_Init+0x2e8>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a56      	ldr	r2, [pc, #344]	; (8000ab0 <HAL_GPIO_Init+0x2e8>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b54      	ldr	r3, [pc, #336]	; (8000ab0 <HAL_GPIO_Init+0x2e8>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800096a:	4a52      	ldr	r2, [pc, #328]	; (8000ab4 <HAL_GPIO_Init+0x2ec>)
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	3302      	adds	r3, #2
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	220f      	movs	r2, #15
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a49      	ldr	r2, [pc, #292]	; (8000ab8 <HAL_GPIO_Init+0x2f0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d019      	beq.n	80009ca <HAL_GPIO_Init+0x202>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a48      	ldr	r2, [pc, #288]	; (8000abc <HAL_GPIO_Init+0x2f4>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d013      	beq.n	80009c6 <HAL_GPIO_Init+0x1fe>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a47      	ldr	r2, [pc, #284]	; (8000ac0 <HAL_GPIO_Init+0x2f8>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d00d      	beq.n	80009c2 <HAL_GPIO_Init+0x1fa>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a46      	ldr	r2, [pc, #280]	; (8000ac4 <HAL_GPIO_Init+0x2fc>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d007      	beq.n	80009be <HAL_GPIO_Init+0x1f6>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a45      	ldr	r2, [pc, #276]	; (8000ac8 <HAL_GPIO_Init+0x300>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_GPIO_Init+0x1f2>
 80009b6:	2304      	movs	r3, #4
 80009b8:	e008      	b.n	80009cc <HAL_GPIO_Init+0x204>
 80009ba:	2307      	movs	r3, #7
 80009bc:	e006      	b.n	80009cc <HAL_GPIO_Init+0x204>
 80009be:	2303      	movs	r3, #3
 80009c0:	e004      	b.n	80009cc <HAL_GPIO_Init+0x204>
 80009c2:	2302      	movs	r3, #2
 80009c4:	e002      	b.n	80009cc <HAL_GPIO_Init+0x204>
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <HAL_GPIO_Init+0x204>
 80009ca:	2300      	movs	r3, #0
 80009cc:	69fa      	ldr	r2, [r7, #28]
 80009ce:	f002 0203 	and.w	r2, r2, #3
 80009d2:	0092      	lsls	r2, r2, #2
 80009d4:	4093      	lsls	r3, r2
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009dc:	4935      	ldr	r1, [pc, #212]	; (8000ab4 <HAL_GPIO_Init+0x2ec>)
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	3302      	adds	r3, #2
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <HAL_GPIO_Init+0x304>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	43db      	mvns	r3, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4013      	ands	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a0e:	4a2f      	ldr	r2, [pc, #188]	; (8000acc <HAL_GPIO_Init+0x304>)
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <HAL_GPIO_Init+0x304>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4013      	ands	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a38:	4a24      	ldr	r2, [pc, #144]	; (8000acc <HAL_GPIO_Init+0x304>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <HAL_GPIO_Init+0x304>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a62:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <HAL_GPIO_Init+0x304>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_GPIO_Init+0x304>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_GPIO_Init+0x304>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3301      	adds	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	2b0f      	cmp	r3, #15
 8000a9c:	f67f aea2 	bls.w	80007e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40013800 	.word	0x40013800
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40013c00 	.word	0x40013c00

08000ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e25b      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d075      	beq.n	8000bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000aee:	4ba3      	ldr	r3, [pc, #652]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 030c 	and.w	r3, r3, #12
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d00c      	beq.n	8000b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000afa:	4ba0      	ldr	r3, [pc, #640]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b02:	2b08      	cmp	r3, #8
 8000b04:	d112      	bne.n	8000b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b06:	4b9d      	ldr	r3, [pc, #628]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b12:	d10b      	bne.n	8000b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b14:	4b99      	ldr	r3, [pc, #612]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d05b      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x108>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d157      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e236      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b34:	d106      	bne.n	8000b44 <HAL_RCC_OscConfig+0x74>
 8000b36:	4b91      	ldr	r3, [pc, #580]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a90      	ldr	r2, [pc, #576]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e01d      	b.n	8000b80 <HAL_RCC_OscConfig+0xb0>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b4c:	d10c      	bne.n	8000b68 <HAL_RCC_OscConfig+0x98>
 8000b4e:	4b8b      	ldr	r3, [pc, #556]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a8a      	ldr	r2, [pc, #552]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4b88      	ldr	r3, [pc, #544]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a87      	ldr	r2, [pc, #540]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e00b      	b.n	8000b80 <HAL_RCC_OscConfig+0xb0>
 8000b68:	4b84      	ldr	r3, [pc, #528]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a83      	ldr	r2, [pc, #524]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b81      	ldr	r3, [pc, #516]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a80      	ldr	r2, [pc, #512]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d013      	beq.n	8000bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b88:	f7ff fd08 	bl	800059c <HAL_GetTick>
 8000b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8e:	e008      	b.n	8000ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b90:	f7ff fd04 	bl	800059c <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b64      	cmp	r3, #100	; 0x64
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e1fb      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	4b76      	ldr	r3, [pc, #472]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f0      	beq.n	8000b90 <HAL_RCC_OscConfig+0xc0>
 8000bae:	e014      	b.n	8000bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fcf4 	bl	800059c <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb8:	f7ff fcf0 	bl	800059c <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b64      	cmp	r3, #100	; 0x64
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e1e7      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bca:	4b6c      	ldr	r3, [pc, #432]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f0      	bne.n	8000bb8 <HAL_RCC_OscConfig+0xe8>
 8000bd6:	e000      	b.n	8000bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d063      	beq.n	8000cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000be6:	4b65      	ldr	r3, [pc, #404]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 030c 	and.w	r3, r3, #12
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00b      	beq.n	8000c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d11c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bfe:	4b5f      	ldr	r3, [pc, #380]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d116      	bne.n	8000c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0a:	4b5c      	ldr	r3, [pc, #368]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <HAL_RCC_OscConfig+0x152>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d001      	beq.n	8000c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e1bb      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c22:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4952      	ldr	r1, [pc, #328]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c36:	e03a      	b.n	8000cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d020      	beq.n	8000c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c40:	4b4f      	ldr	r3, [pc, #316]	; (8000d80 <HAL_RCC_OscConfig+0x2b0>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c46:	f7ff fca9 	bl	800059c <HAL_GetTick>
 8000c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4c:	e008      	b.n	8000c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fca5 	bl	800059c <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d901      	bls.n	8000c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e19c      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c60:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f0      	beq.n	8000c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6c:	4b43      	ldr	r3, [pc, #268]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	4940      	ldr	r1, [pc, #256]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
 8000c80:	e015      	b.n	8000cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c82:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <HAL_RCC_OscConfig+0x2b0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c88:	f7ff fc88 	bl	800059c <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c90:	f7ff fc84 	bl	800059c <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e17b      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca2:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f0      	bne.n	8000c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d030      	beq.n	8000d1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d016      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <HAL_RCC_OscConfig+0x2b4>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cc8:	f7ff fc68 	bl	800059c <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc64 	bl	800059c <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e15b      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x200>
 8000cee:	e015      	b.n	8000d1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_RCC_OscConfig+0x2b4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cf6:	f7ff fc51 	bl	800059c <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fc4d 	bl	800059c <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e144      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f0      	bne.n	8000cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80a0 	beq.w	8000e6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10f      	bne.n	8000d5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d56:	2301      	movs	r3, #1
 8000d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_RCC_OscConfig+0x2b8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d121      	bne.n	8000daa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_RCC_OscConfig+0x2b8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_RCC_OscConfig+0x2b8>)
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d72:	f7ff fc13 	bl	800059c <HAL_GetTick>
 8000d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d78:	e011      	b.n	8000d9e <HAL_RCC_OscConfig+0x2ce>
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	42470000 	.word	0x42470000
 8000d84:	42470e80 	.word	0x42470e80
 8000d88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8c:	f7ff fc06 	bl	800059c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e0fd      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9e:	4b81      	ldr	r3, [pc, #516]	; (8000fa4 <HAL_RCC_OscConfig+0x4d4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d106      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x2f0>
 8000db2:	4b7d      	ldr	r3, [pc, #500]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db6:	4a7c      	ldr	r2, [pc, #496]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8000dbe:	e01c      	b.n	8000dfa <HAL_RCC_OscConfig+0x32a>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d10c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x312>
 8000dc8:	4b77      	ldr	r3, [pc, #476]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dcc:	4a76      	ldr	r2, [pc, #472]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8000dd4:	4b74      	ldr	r3, [pc, #464]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dd8:	4a73      	ldr	r2, [pc, #460]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6713      	str	r3, [r2, #112]	; 0x70
 8000de0:	e00b      	b.n	8000dfa <HAL_RCC_OscConfig+0x32a>
 8000de2:	4b71      	ldr	r3, [pc, #452]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de6:	4a70      	ldr	r2, [pc, #448]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	6713      	str	r3, [r2, #112]	; 0x70
 8000dee:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df2:	4a6d      	ldr	r2, [pc, #436]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000df4:	f023 0304 	bic.w	r3, r3, #4
 8000df8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d015      	beq.n	8000e2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e02:	f7ff fbcb 	bl	800059c <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e08:	e00a      	b.n	8000e20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0a:	f7ff fbc7 	bl	800059c <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e0bc      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e20:	4b61      	ldr	r3, [pc, #388]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0ee      	beq.n	8000e0a <HAL_RCC_OscConfig+0x33a>
 8000e2c:	e014      	b.n	8000e58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fbb5 	bl	800059c <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e34:	e00a      	b.n	8000e4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e36:	f7ff fbb1 	bl	800059c <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e0a6      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e4c:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1ee      	bne.n	8000e36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d105      	bne.n	8000e6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e5e:	4b52      	ldr	r3, [pc, #328]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a51      	ldr	r2, [pc, #324]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8092 	beq.w	8000f98 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e74:	4b4c      	ldr	r3, [pc, #304]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d05c      	beq.n	8000f3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d141      	bne.n	8000f0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e88:	4b48      	ldr	r3, [pc, #288]	; (8000fac <HAL_RCC_OscConfig+0x4dc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fb85 	bl	800059c <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fb81 	bl	800059c <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e078      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	019b      	lsls	r3, r3, #6
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	085b      	lsrs	r3, r3, #1
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed6:	061b      	lsls	r3, r3, #24
 8000ed8:	4933      	ldr	r1, [pc, #204]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <HAL_RCC_OscConfig+0x4dc>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fb5a 	bl	800059c <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eec:	f7ff fb56 	bl	800059c <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e04d      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0x41c>
 8000f0a:	e045      	b.n	8000f98 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <HAL_RCC_OscConfig+0x4dc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f12:	f7ff fb43 	bl	800059c <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f1a:	f7ff fb3f 	bl	800059c <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e036      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f0      	bne.n	8000f1a <HAL_RCC_OscConfig+0x44a>
 8000f38:	e02e      	b.n	8000f98 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e029      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d11c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d115      	bne.n	8000f94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f6e:	4013      	ands	r3, r2
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d10d      	bne.n	8000f94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d106      	bne.n	8000f94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d001      	beq.n	8000f98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40007000 	.word	0x40007000
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	42470060 	.word	0x42470060

08000fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0cc      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc4:	4b68      	ldr	r3, [pc, #416]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d90c      	bls.n	8000fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd2:	4b65      	ldr	r3, [pc, #404]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fda:	4b63      	ldr	r3, [pc, #396]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d001      	beq.n	8000fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e0b8      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d020      	beq.n	800103a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001004:	4b59      	ldr	r3, [pc, #356]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4a58      	ldr	r2, [pc, #352]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800100a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800100e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a52      	ldr	r2, [pc, #328]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001028:	4b50      	ldr	r3, [pc, #320]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	494d      	ldr	r1, [pc, #308]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001036:	4313      	orrs	r3, r2
 8001038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d044      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d107      	bne.n	800105e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	4b47      	ldr	r3, [pc, #284]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d119      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e07f      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d003      	beq.n	800106e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106a:	2b03      	cmp	r3, #3
 800106c:	d107      	bne.n	800107e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e06f      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e067      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f023 0203 	bic.w	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4934      	ldr	r1, [pc, #208]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	4313      	orrs	r3, r2
 800109e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010a0:	f7ff fa7c 	bl	800059c <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a6:	e00a      	b.n	80010be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a8:	f7ff fa78 	bl	800059c <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e04f      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 020c 	and.w	r2, r3, #12
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d1eb      	bne.n	80010a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d20c      	bcs.n	80010f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e032      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4916      	ldr	r1, [pc, #88]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	4313      	orrs	r3, r2
 8001114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d009      	beq.n	8001136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	490e      	ldr	r1, [pc, #56]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	4313      	orrs	r3, r2
 8001134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001136:	f000 f821 	bl	800117c <HAL_RCC_GetSysClockFreq>
 800113a:	4602      	mov	r2, r0
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	490a      	ldr	r1, [pc, #40]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	5ccb      	ldrb	r3, [r1, r3]
 800114a:	fa22 f303 	lsr.w	r3, r2, r3
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_RCC_ClockConfig+0x1c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9dc 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00
 800116c:	40023800 	.word	0x40023800
 8001170:	080020f0 	.word	0x080020f0
 8001174:	20000028 	.word	0x20000028
 8001178:	20000000 	.word	0x20000000

0800117c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800117c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	2300      	movs	r3, #0
 800118e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001194:	4b67      	ldr	r3, [pc, #412]	; (8001334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d00d      	beq.n	80011bc <HAL_RCC_GetSysClockFreq+0x40>
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	f200 80bd 	bhi.w	8001320 <HAL_RCC_GetSysClockFreq+0x1a4>
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <HAL_RCC_GetSysClockFreq+0x34>
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d003      	beq.n	80011b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80011ae:	e0b7      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011b0:	4b61      	ldr	r3, [pc, #388]	; (8001338 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80011b2:	60bb      	str	r3, [r7, #8]
       break;
 80011b4:	e0b7      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011b6:	4b61      	ldr	r3, [pc, #388]	; (800133c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80011b8:	60bb      	str	r3, [r7, #8]
      break;
 80011ba:	e0b4      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011c6:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d04d      	beq.n	800126e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d2:	4b58      	ldr	r3, [pc, #352]	; (8001334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	099b      	lsrs	r3, r3, #6
 80011d8:	461a      	mov	r2, r3
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80011e2:	f04f 0100 	mov.w	r1, #0
 80011e6:	ea02 0800 	and.w	r8, r2, r0
 80011ea:	ea03 0901 	and.w	r9, r3, r1
 80011ee:	4640      	mov	r0, r8
 80011f0:	4649      	mov	r1, r9
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	014b      	lsls	r3, r1, #5
 80011fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001200:	0142      	lsls	r2, r0, #5
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	ebb0 0008 	subs.w	r0, r0, r8
 800120a:	eb61 0109 	sbc.w	r1, r1, r9
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	018b      	lsls	r3, r1, #6
 8001218:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800121c:	0182      	lsls	r2, r0, #6
 800121e:	1a12      	subs	r2, r2, r0
 8001220:	eb63 0301 	sbc.w	r3, r3, r1
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	f04f 0100 	mov.w	r1, #0
 800122c:	00d9      	lsls	r1, r3, #3
 800122e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001232:	00d0      	lsls	r0, r2, #3
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	eb12 0208 	adds.w	r2, r2, r8
 800123c:	eb43 0309 	adc.w	r3, r3, r9
 8001240:	f04f 0000 	mov.w	r0, #0
 8001244:	f04f 0100 	mov.w	r1, #0
 8001248:	0259      	lsls	r1, r3, #9
 800124a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800124e:	0250      	lsls	r0, r2, #9
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	461a      	mov	r2, r3
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	f7fe ffba 	bl	80001d8 <__aeabi_uldivmod>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4613      	mov	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e04a      	b.n	8001304 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126e:	4b31      	ldr	r3, [pc, #196]	; (8001334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	099b      	lsrs	r3, r3, #6
 8001274:	461a      	mov	r2, r3
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800127e:	f04f 0100 	mov.w	r1, #0
 8001282:	ea02 0400 	and.w	r4, r2, r0
 8001286:	ea03 0501 	and.w	r5, r3, r1
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	014b      	lsls	r3, r1, #5
 8001298:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800129c:	0142      	lsls	r2, r0, #5
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	1b00      	subs	r0, r0, r4
 80012a4:	eb61 0105 	sbc.w	r1, r1, r5
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	018b      	lsls	r3, r1, #6
 80012b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80012b6:	0182      	lsls	r2, r0, #6
 80012b8:	1a12      	subs	r2, r2, r0
 80012ba:	eb63 0301 	sbc.w	r3, r3, r1
 80012be:	f04f 0000 	mov.w	r0, #0
 80012c2:	f04f 0100 	mov.w	r1, #0
 80012c6:	00d9      	lsls	r1, r3, #3
 80012c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80012cc:	00d0      	lsls	r0, r2, #3
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	1912      	adds	r2, r2, r4
 80012d4:	eb45 0303 	adc.w	r3, r5, r3
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	f04f 0100 	mov.w	r1, #0
 80012e0:	0299      	lsls	r1, r3, #10
 80012e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80012e6:	0290      	lsls	r0, r2, #10
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	461a      	mov	r2, r3
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	f7fe ff6e 	bl	80001d8 <__aeabi_uldivmod>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4613      	mov	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	3301      	adds	r3, #1
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	60bb      	str	r3, [r7, #8]
      break;
 800131e:	e002      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001322:	60bb      	str	r3, [r7, #8]
      break;
 8001324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001326:	68bb      	ldr	r3, [r7, #8]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	00f42400 	.word	0x00f42400
 800133c:	007a1200 	.word	0x007a1200

08001340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_RCC_GetHCLKFreq+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000028 	.word	0x20000028

08001358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800135c:	f7ff fff0 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	0a9b      	lsrs	r3, r3, #10
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4903      	ldr	r1, [pc, #12]	; (800137c <HAL_RCC_GetPCLK1Freq+0x24>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	08002100 	.word	0x08002100

08001380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001384:	f7ff ffdc 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 8001388:	4602      	mov	r2, r0
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	0b5b      	lsrs	r3, r3, #13
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	4903      	ldr	r1, [pc, #12]	; (80013a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001396:	5ccb      	ldrb	r3, [r1, r3]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	08002100 	.word	0x08002100

080013a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e03f      	b.n	800143a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fda0 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f90b 	bl	8001608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2220      	movs	r2, #32
 800142c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2220      	movs	r2, #32
 8001434:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b088      	sub	sp, #32
 8001446:	af02      	add	r7, sp, #8
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4613      	mov	r3, r2
 8001450:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b20      	cmp	r3, #32
 8001460:	f040 8083 	bne.w	800156a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <HAL_UART_Transmit+0x2e>
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e07b      	b.n	800156c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_UART_Transmit+0x40>
 800147e:	2302      	movs	r3, #2
 8001480:	e074      	b.n	800156c <HAL_UART_Transmit+0x12a>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2221      	movs	r2, #33	; 0x21
 8001494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001498:	f7ff f880 	bl	800059c <HAL_GetTick>
 800149c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	88fa      	ldrh	r2, [r7, #6]
 80014a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80014b2:	e042      	b.n	800153a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ca:	d122      	bne.n	8001512 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2200      	movs	r2, #0
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f84c 	bl	8001574 <UART_WaitOnFlagUntilTimeout>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e042      	b.n	800156c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3302      	adds	r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	e017      	b.n	800153a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3301      	adds	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	e013      	b.n	800153a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2200      	movs	r2, #0
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 f829 	bl	8001574 <UART_WaitOnFlagUntilTimeout>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e01f      	b.n	800156c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800153e:	b29b      	uxth	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1b7      	bne.n	80014b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2200      	movs	r2, #0
 800154c:	2140      	movs	r1, #64	; 0x40
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 f810 	bl	8001574 <UART_WaitOnFlagUntilTimeout>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e006      	b.n	800156c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2220      	movs	r2, #32
 8001562:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800156a:	2302      	movs	r3, #2
  }
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001584:	e02c      	b.n	80015e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d028      	beq.n	80015e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001594:	f7ff f802 	bl	800059c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d21d      	bcs.n	80015e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2220      	movs	r2, #32
 80015c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2220      	movs	r2, #32
 80015d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e00f      	b.n	8001600 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	4013      	ands	r3, r2
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	bf0c      	ite	eq
 80015f0:	2301      	moveq	r3, #1
 80015f2:	2300      	movne	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d0c3      	beq.n	8001586 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800160c:	b0bd      	sub	sp, #244	; 0xf4
 800160e:	af00      	add	r7, sp, #0
 8001610:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001624:	68d9      	ldr	r1, [r3, #12]
 8001626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	ea40 0301 	orr.w	r3, r0, r1
 8001630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	431a      	orrs	r2, r3
 8001640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	431a      	orrs	r2, r3
 8001648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4313      	orrs	r3, r2
 8001650:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8001654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001660:	f021 010c 	bic.w	r1, r1, #12
 8001664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800166e:	430b      	orrs	r3, r1
 8001670:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800167e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001682:	6999      	ldr	r1, [r3, #24]
 8001684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	ea40 0301 	orr.w	r3, r0, r1
 800168e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800169a:	f040 81a5 	bne.w	80019e8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800169e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4bcd      	ldr	r3, [pc, #820]	; (80019dc <UART_SetConfig+0x3d4>)
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d006      	beq.n	80016b8 <UART_SetConfig+0xb0>
 80016aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4bcb      	ldr	r3, [pc, #812]	; (80019e0 <UART_SetConfig+0x3d8>)
 80016b2:	429a      	cmp	r2, r3
 80016b4:	f040 80cb 	bne.w	800184e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80016b8:	f7ff fe62 	bl	8001380 <HAL_RCC_GetPCLK2Freq>
 80016bc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80016c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016c4:	461c      	mov	r4, r3
 80016c6:	f04f 0500 	mov.w	r5, #0
 80016ca:	4622      	mov	r2, r4
 80016cc:	462b      	mov	r3, r5
 80016ce:	1891      	adds	r1, r2, r2
 80016d0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80016d4:	415b      	adcs	r3, r3
 80016d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80016da:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80016de:	1912      	adds	r2, r2, r4
 80016e0:	eb45 0303 	adc.w	r3, r5, r3
 80016e4:	f04f 0000 	mov.w	r0, #0
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	00d9      	lsls	r1, r3, #3
 80016ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016f2:	00d0      	lsls	r0, r2, #3
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	1911      	adds	r1, r2, r4
 80016fa:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80016fe:	416b      	adcs	r3, r5
 8001700:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	461a      	mov	r2, r3
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	1891      	adds	r1, r2, r2
 8001712:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001716:	415b      	adcs	r3, r3
 8001718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800171c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001720:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001724:	f7fe fd58 	bl	80001d8 <__aeabi_uldivmod>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4bad      	ldr	r3, [pc, #692]	; (80019e4 <UART_SetConfig+0x3dc>)
 800172e:	fba3 2302 	umull	r2, r3, r3, r2
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	011e      	lsls	r6, r3, #4
 8001736:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800173a:	461c      	mov	r4, r3
 800173c:	f04f 0500 	mov.w	r5, #0
 8001740:	4622      	mov	r2, r4
 8001742:	462b      	mov	r3, r5
 8001744:	1891      	adds	r1, r2, r2
 8001746:	67b9      	str	r1, [r7, #120]	; 0x78
 8001748:	415b      	adcs	r3, r3
 800174a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800174c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001750:	1912      	adds	r2, r2, r4
 8001752:	eb45 0303 	adc.w	r3, r5, r3
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	00d9      	lsls	r1, r3, #3
 8001760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001764:	00d0      	lsls	r0, r2, #3
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	1911      	adds	r1, r2, r4
 800176c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001770:	416b      	adcs	r3, r5
 8001772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	461a      	mov	r2, r3
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	1891      	adds	r1, r2, r2
 8001784:	6739      	str	r1, [r7, #112]	; 0x70
 8001786:	415b      	adcs	r3, r3
 8001788:	677b      	str	r3, [r7, #116]	; 0x74
 800178a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800178e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001792:	f7fe fd21 	bl	80001d8 <__aeabi_uldivmod>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4b92      	ldr	r3, [pc, #584]	; (80019e4 <UART_SetConfig+0x3dc>)
 800179c:	fba3 1302 	umull	r1, r3, r3, r2
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	2164      	movs	r1, #100	; 0x64
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	3332      	adds	r3, #50	; 0x32
 80017ae:	4a8d      	ldr	r2, [pc, #564]	; (80019e4 <UART_SetConfig+0x3dc>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	095b      	lsrs	r3, r3, #5
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80017bc:	441e      	add	r6, r3
 80017be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80017c2:	4618      	mov	r0, r3
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	1894      	adds	r4, r2, r2
 80017ce:	66bc      	str	r4, [r7, #104]	; 0x68
 80017d0:	415b      	adcs	r3, r3
 80017d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80017d8:	1812      	adds	r2, r2, r0
 80017da:	eb41 0303 	adc.w	r3, r1, r3
 80017de:	f04f 0400 	mov.w	r4, #0
 80017e2:	f04f 0500 	mov.w	r5, #0
 80017e6:	00dd      	lsls	r5, r3, #3
 80017e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80017ec:	00d4      	lsls	r4, r2, #3
 80017ee:	4622      	mov	r2, r4
 80017f0:	462b      	mov	r3, r5
 80017f2:	1814      	adds	r4, r2, r0
 80017f4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80017f8:	414b      	adcs	r3, r1
 80017fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	461a      	mov	r2, r3
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	1891      	adds	r1, r2, r2
 800180c:	6639      	str	r1, [r7, #96]	; 0x60
 800180e:	415b      	adcs	r3, r3
 8001810:	667b      	str	r3, [r7, #100]	; 0x64
 8001812:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001816:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800181a:	f7fe fcdd 	bl	80001d8 <__aeabi_uldivmod>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <UART_SetConfig+0x3dc>)
 8001824:	fba3 1302 	umull	r1, r3, r3, r2
 8001828:	095b      	lsrs	r3, r3, #5
 800182a:	2164      	movs	r1, #100	; 0x64
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	3332      	adds	r3, #50	; 0x32
 8001836:	4a6b      	ldr	r2, [pc, #428]	; (80019e4 <UART_SetConfig+0x3dc>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	f003 0207 	and.w	r2, r3, #7
 8001842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4432      	add	r2, r6
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	e26d      	b.n	8001d2a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800184e:	f7ff fd83 	bl	8001358 <HAL_RCC_GetPCLK1Freq>
 8001852:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001856:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800185a:	461c      	mov	r4, r3
 800185c:	f04f 0500 	mov.w	r5, #0
 8001860:	4622      	mov	r2, r4
 8001862:	462b      	mov	r3, r5
 8001864:	1891      	adds	r1, r2, r2
 8001866:	65b9      	str	r1, [r7, #88]	; 0x58
 8001868:	415b      	adcs	r3, r3
 800186a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800186c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001870:	1912      	adds	r2, r2, r4
 8001872:	eb45 0303 	adc.w	r3, r5, r3
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	00d9      	lsls	r1, r3, #3
 8001880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001884:	00d0      	lsls	r0, r2, #3
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	1911      	adds	r1, r2, r4
 800188c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001890:	416b      	adcs	r3, r5
 8001892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	461a      	mov	r2, r3
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	1891      	adds	r1, r2, r2
 80018a4:	6539      	str	r1, [r7, #80]	; 0x50
 80018a6:	415b      	adcs	r3, r3
 80018a8:	657b      	str	r3, [r7, #84]	; 0x54
 80018aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018ae:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80018b2:	f7fe fc91 	bl	80001d8 <__aeabi_uldivmod>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <UART_SetConfig+0x3dc>)
 80018bc:	fba3 2302 	umull	r2, r3, r3, r2
 80018c0:	095b      	lsrs	r3, r3, #5
 80018c2:	011e      	lsls	r6, r3, #4
 80018c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80018c8:	461c      	mov	r4, r3
 80018ca:	f04f 0500 	mov.w	r5, #0
 80018ce:	4622      	mov	r2, r4
 80018d0:	462b      	mov	r3, r5
 80018d2:	1891      	adds	r1, r2, r2
 80018d4:	64b9      	str	r1, [r7, #72]	; 0x48
 80018d6:	415b      	adcs	r3, r3
 80018d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018de:	1912      	adds	r2, r2, r4
 80018e0:	eb45 0303 	adc.w	r3, r5, r3
 80018e4:	f04f 0000 	mov.w	r0, #0
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	00d9      	lsls	r1, r3, #3
 80018ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018f2:	00d0      	lsls	r0, r2, #3
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	1911      	adds	r1, r2, r4
 80018fa:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80018fe:	416b      	adcs	r3, r5
 8001900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	461a      	mov	r2, r3
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	1891      	adds	r1, r2, r2
 8001912:	6439      	str	r1, [r7, #64]	; 0x40
 8001914:	415b      	adcs	r3, r3
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
 8001918:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800191c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001920:	f7fe fc5a 	bl	80001d8 <__aeabi_uldivmod>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <UART_SetConfig+0x3dc>)
 800192a:	fba3 1302 	umull	r1, r3, r3, r2
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2164      	movs	r1, #100	; 0x64
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	3332      	adds	r3, #50	; 0x32
 800193c:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <UART_SetConfig+0x3dc>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800194a:	441e      	add	r6, r3
 800194c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001950:	4618      	mov	r0, r3
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	1894      	adds	r4, r2, r2
 800195c:	63bc      	str	r4, [r7, #56]	; 0x38
 800195e:	415b      	adcs	r3, r3
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001962:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001966:	1812      	adds	r2, r2, r0
 8001968:	eb41 0303 	adc.w	r3, r1, r3
 800196c:	f04f 0400 	mov.w	r4, #0
 8001970:	f04f 0500 	mov.w	r5, #0
 8001974:	00dd      	lsls	r5, r3, #3
 8001976:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800197a:	00d4      	lsls	r4, r2, #3
 800197c:	4622      	mov	r2, r4
 800197e:	462b      	mov	r3, r5
 8001980:	1814      	adds	r4, r2, r0
 8001982:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8001986:	414b      	adcs	r3, r1
 8001988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800198c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	461a      	mov	r2, r3
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	1891      	adds	r1, r2, r2
 800199a:	6339      	str	r1, [r7, #48]	; 0x30
 800199c:	415b      	adcs	r3, r3
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
 80019a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019a4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80019a8:	f7fe fc16 	bl	80001d8 <__aeabi_uldivmod>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <UART_SetConfig+0x3dc>)
 80019b2:	fba3 1302 	umull	r1, r3, r3, r2
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2164      	movs	r1, #100	; 0x64
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	3332      	adds	r3, #50	; 0x32
 80019c4:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <UART_SetConfig+0x3dc>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	f003 0207 	and.w	r2, r3, #7
 80019d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4432      	add	r2, r6
 80019d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80019da:	e1a6      	b.n	8001d2a <UART_SetConfig+0x722>
 80019dc:	40011000 	.word	0x40011000
 80019e0:	40011400 	.word	0x40011400
 80019e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4bd1      	ldr	r3, [pc, #836]	; (8001d34 <UART_SetConfig+0x72c>)
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d006      	beq.n	8001a02 <UART_SetConfig+0x3fa>
 80019f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4bcf      	ldr	r3, [pc, #828]	; (8001d38 <UART_SetConfig+0x730>)
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 80ca 	bne.w	8001b96 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a02:	f7ff fcbd 	bl	8001380 <HAL_RCC_GetPCLK2Freq>
 8001a06:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a0e:	461c      	mov	r4, r3
 8001a10:	f04f 0500 	mov.w	r5, #0
 8001a14:	4622      	mov	r2, r4
 8001a16:	462b      	mov	r3, r5
 8001a18:	1891      	adds	r1, r2, r2
 8001a1a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a1c:	415b      	adcs	r3, r3
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a24:	1912      	adds	r2, r2, r4
 8001a26:	eb45 0303 	adc.w	r3, r5, r3
 8001a2a:	f04f 0000 	mov.w	r0, #0
 8001a2e:	f04f 0100 	mov.w	r1, #0
 8001a32:	00d9      	lsls	r1, r3, #3
 8001a34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a38:	00d0      	lsls	r0, r2, #3
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	eb12 0a04 	adds.w	sl, r2, r4
 8001a42:	eb43 0b05 	adc.w	fp, r3, r5
 8001a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	008b      	lsls	r3, r1, #2
 8001a5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001a60:	0082      	lsls	r2, r0, #2
 8001a62:	4650      	mov	r0, sl
 8001a64:	4659      	mov	r1, fp
 8001a66:	f7fe fbb7 	bl	80001d8 <__aeabi_uldivmod>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4bb3      	ldr	r3, [pc, #716]	; (8001d3c <UART_SetConfig+0x734>)
 8001a70:	fba3 2302 	umull	r2, r3, r3, r2
 8001a74:	095b      	lsrs	r3, r3, #5
 8001a76:	011e      	lsls	r6, r3, #4
 8001a78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	1894      	adds	r4, r2, r2
 8001a88:	623c      	str	r4, [r7, #32]
 8001a8a:	415b      	adcs	r3, r3
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a92:	1812      	adds	r2, r2, r0
 8001a94:	eb41 0303 	adc.w	r3, r1, r3
 8001a98:	f04f 0400 	mov.w	r4, #0
 8001a9c:	f04f 0500 	mov.w	r5, #0
 8001aa0:	00dd      	lsls	r5, r3, #3
 8001aa2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001aa6:	00d4      	lsls	r4, r2, #3
 8001aa8:	4622      	mov	r2, r4
 8001aaa:	462b      	mov	r3, r5
 8001aac:	1814      	adds	r4, r2, r0
 8001aae:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8001ab2:	414b      	adcs	r3, r1
 8001ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	008b      	lsls	r3, r1, #2
 8001ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001ad2:	0082      	lsls	r2, r0, #2
 8001ad4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001ad8:	f7fe fb7e 	bl	80001d8 <__aeabi_uldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4b96      	ldr	r3, [pc, #600]	; (8001d3c <UART_SetConfig+0x734>)
 8001ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2164      	movs	r1, #100	; 0x64
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	3332      	adds	r3, #50	; 0x32
 8001af4:	4a91      	ldr	r2, [pc, #580]	; (8001d3c <UART_SetConfig+0x734>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b00:	441e      	add	r6, r3
 8001b02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b06:	4618      	mov	r0, r3
 8001b08:	f04f 0100 	mov.w	r1, #0
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	1894      	adds	r4, r2, r2
 8001b12:	61bc      	str	r4, [r7, #24]
 8001b14:	415b      	adcs	r3, r3
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1c:	1812      	adds	r2, r2, r0
 8001b1e:	eb41 0303 	adc.w	r3, r1, r3
 8001b22:	f04f 0400 	mov.w	r4, #0
 8001b26:	f04f 0500 	mov.w	r5, #0
 8001b2a:	00dd      	lsls	r5, r3, #3
 8001b2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001b30:	00d4      	lsls	r4, r2, #3
 8001b32:	4622      	mov	r2, r4
 8001b34:	462b      	mov	r3, r5
 8001b36:	1814      	adds	r4, r2, r0
 8001b38:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8001b3c:	414b      	adcs	r3, r1
 8001b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	008b      	lsls	r3, r1, #2
 8001b58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001b5c:	0082      	lsls	r2, r0, #2
 8001b5e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001b62:	f7fe fb39 	bl	80001d8 <__aeabi_uldivmod>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <UART_SetConfig+0x734>)
 8001b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	2164      	movs	r1, #100	; 0x64
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	3332      	adds	r3, #50	; 0x32
 8001b7e:	4a6f      	ldr	r2, [pc, #444]	; (8001d3c <UART_SetConfig+0x734>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	f003 020f 	and.w	r2, r3, #15
 8001b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4432      	add	r2, r6
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	e0c9      	b.n	8001d2a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b96:	f7ff fbdf 	bl	8001358 <HAL_RCC_GetPCLK1Freq>
 8001b9a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ba2:	461c      	mov	r4, r3
 8001ba4:	f04f 0500 	mov.w	r5, #0
 8001ba8:	4622      	mov	r2, r4
 8001baa:	462b      	mov	r3, r5
 8001bac:	1891      	adds	r1, r2, r2
 8001bae:	6139      	str	r1, [r7, #16]
 8001bb0:	415b      	adcs	r3, r3
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bb8:	1912      	adds	r2, r2, r4
 8001bba:	eb45 0303 	adc.w	r3, r5, r3
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	00d9      	lsls	r1, r3, #3
 8001bc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bcc:	00d0      	lsls	r0, r2, #3
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	eb12 0804 	adds.w	r8, r2, r4
 8001bd6:	eb43 0905 	adc.w	r9, r3, r5
 8001bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	008b      	lsls	r3, r1, #2
 8001bf0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001bf4:	0082      	lsls	r2, r0, #2
 8001bf6:	4640      	mov	r0, r8
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	f7fe faed 	bl	80001d8 <__aeabi_uldivmod>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <UART_SetConfig+0x734>)
 8001c04:	fba3 2302 	umull	r2, r3, r3, r2
 8001c08:	095b      	lsrs	r3, r3, #5
 8001c0a:	011e      	lsls	r6, r3, #4
 8001c0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c10:	4618      	mov	r0, r3
 8001c12:	f04f 0100 	mov.w	r1, #0
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	1894      	adds	r4, r2, r2
 8001c1c:	60bc      	str	r4, [r7, #8]
 8001c1e:	415b      	adcs	r3, r3
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c26:	1812      	adds	r2, r2, r0
 8001c28:	eb41 0303 	adc.w	r3, r1, r3
 8001c2c:	f04f 0400 	mov.w	r4, #0
 8001c30:	f04f 0500 	mov.w	r5, #0
 8001c34:	00dd      	lsls	r5, r3, #3
 8001c36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001c3a:	00d4      	lsls	r4, r2, #3
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	462b      	mov	r3, r5
 8001c40:	1814      	adds	r4, r2, r0
 8001c42:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8001c46:	414b      	adcs	r3, r1
 8001c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f04f 0100 	mov.w	r1, #0
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	008b      	lsls	r3, r1, #2
 8001c62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001c66:	0082      	lsls	r2, r0, #2
 8001c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001c6c:	f7fe fab4 	bl	80001d8 <__aeabi_uldivmod>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <UART_SetConfig+0x734>)
 8001c76:	fba3 1302 	umull	r1, r3, r3, r2
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2164      	movs	r1, #100	; 0x64
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	3332      	adds	r3, #50	; 0x32
 8001c88:	4a2c      	ldr	r2, [pc, #176]	; (8001d3c <UART_SetConfig+0x734>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c94:	441e      	add	r6, r3
 8001c96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	1894      	adds	r4, r2, r2
 8001ca6:	603c      	str	r4, [r7, #0]
 8001ca8:	415b      	adcs	r3, r3
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cb0:	1812      	adds	r2, r2, r0
 8001cb2:	eb41 0303 	adc.w	r3, r1, r3
 8001cb6:	f04f 0400 	mov.w	r4, #0
 8001cba:	f04f 0500 	mov.w	r5, #0
 8001cbe:	00dd      	lsls	r5, r3, #3
 8001cc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001cc4:	00d4      	lsls	r4, r2, #3
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	462b      	mov	r3, r5
 8001cca:	1814      	adds	r4, r2, r0
 8001ccc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001cd0:	414b      	adcs	r3, r1
 8001cd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f04f 0100 	mov.w	r1, #0
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	008b      	lsls	r3, r1, #2
 8001cec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001cf0:	0082      	lsls	r2, r0, #2
 8001cf2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cf6:	f7fe fa6f 	bl	80001d8 <__aeabi_uldivmod>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <UART_SetConfig+0x734>)
 8001d00:	fba3 1302 	umull	r1, r3, r3, r2
 8001d04:	095b      	lsrs	r3, r3, #5
 8001d06:	2164      	movs	r1, #100	; 0x64
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	3332      	adds	r3, #50	; 0x32
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <UART_SetConfig+0x734>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4432      	add	r2, r6
 8001d26:	609a      	str	r2, [r3, #8]
}
 8001d28:	e7ff      	b.n	8001d2a <UART_SetConfig+0x722>
 8001d2a:	bf00      	nop
 8001d2c:	37f4      	adds	r7, #244	; 0xf4
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d34:	40011000 	.word	0x40011000
 8001d38:	40011400 	.word	0x40011400
 8001d3c:	51eb851f 	.word	0x51eb851f

08001d40 <main>:
static void MX_USART2_UART_Init(void);

char message[30]= "Hello from CubeMX\r\n";

int main(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0

  HAL_Init();
 8001d44:	f7fe fbc4 	bl	80004d0 <HAL_Init>


  SystemClock_Config();
 8001d48:	f000 f812 	bl	8001d70 <SystemClock_Config>


  MX_GPIO_Init();
 8001d4c:	f000 f898 	bl	8001e80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d50:	f000 f86c 	bl	8001e2c <MX_USART2_UART_Init>


  while (1)
  {
	 HAL_UART_Transmit(&huart2,(uint8_t *)message,30,100);
 8001d54:	2364      	movs	r3, #100	; 0x64
 8001d56:	221e      	movs	r2, #30
 8001d58:	4903      	ldr	r1, [pc, #12]	; (8001d68 <main+0x28>)
 8001d5a:	4804      	ldr	r0, [pc, #16]	; (8001d6c <main+0x2c>)
 8001d5c:	f7ff fb71 	bl	8001442 <HAL_UART_Transmit>
	 HAL_Delay(10);
 8001d60:	200a      	movs	r0, #10
 8001d62:	f7fe fc27 	bl	80005b4 <HAL_Delay>
	 HAL_UART_Transmit(&huart2,(uint8_t *)message,30,100);
 8001d66:	e7f5      	b.n	8001d54 <main+0x14>
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	2000004c 	.word	0x2000004c

08001d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b094      	sub	sp, #80	; 0x50
 8001d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	2230      	movs	r2, #48	; 0x30
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f9a2 	bl	80020c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <SystemClock_Config+0xb4>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <SystemClock_Config+0xb4>)
 8001d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <SystemClock_Config+0xb4>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <SystemClock_Config+0xb8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1b      	ldr	r2, [pc, #108]	; (8001e28 <SystemClock_Config+0xb8>)
 8001dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <SystemClock_Config+0xb8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ddc:	f107 0320 	add.w	r3, r7, #32
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fe75 	bl	8000ad0 <HAL_RCC_OscConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001dec:	f000 f862 	bl	8001eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df0:	230f      	movs	r3, #15
 8001df2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f8d0 	bl	8000fb0 <HAL_RCC_ClockConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001e16:	f000 f84d 	bl	8001eb4 <Error_Handler>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3750      	adds	r7, #80	; 0x50
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40007000 	.word	0x40007000

08001e2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <MX_USART2_UART_Init+0x50>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e64:	f7ff faa0 	bl	80013a8 <HAL_UART_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e6e:	f000 f821 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000004c 	.word	0x2000004c
 8001e7c:	40004400 	.word	0x40004400

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_GPIO_Init+0x30>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <MX_GPIO_Init+0x30>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_GPIO_Init+0x30>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]

}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_MspInit+0x4c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_MspInit+0x4c>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f02:	2007      	movs	r0, #7
 8001f04:	f7fe fc2c 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_UART_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12b      	bne.n	8001f8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f6e:	230c      	movs	r3, #12
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_UART_MspInit+0x8c>)
 8001f8a:	f7fe fc1d 	bl	80007c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40004400 	.word	0x40004400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f7fe fabc 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <SystemInit+0x28>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <SystemInit+0x28>)
 800200c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SystemInit+0x28>)
 8002016:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800201a:	609a      	str	r2, [r3, #8]
#endif
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800202c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002064 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002030:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002032:	e003      	b.n	800203c <LoopCopyDataInit>

08002034 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002036:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002038:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800203a:	3104      	adds	r1, #4

0800203c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800203c:	480b      	ldr	r0, [pc, #44]	; (800206c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002040:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002042:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002044:	d3f6      	bcc.n	8002034 <CopyDataInit>
  ldr  r2, =_sbss
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002048:	e002      	b.n	8002050 <LoopFillZerobss>

0800204a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800204a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800204c:	f842 3b04 	str.w	r3, [r2], #4

08002050 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002052:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002054:	d3f9      	bcc.n	800204a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002056:	f7ff ffd3 	bl	8002000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205a:	f000 f811 	bl	8002080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205e:	f7ff fe6f 	bl	8001d40 <main>
  bx  lr    
 8002062:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002064:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002068:	08002118 	.word	0x08002118
  ldr  r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002070:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8002074:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8002078:	2000008c 	.word	0x2000008c

0800207c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800207c:	e7fe      	b.n	800207c <ADC_IRQHandler>
	...

08002080 <__libc_init_array>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	4d0d      	ldr	r5, [pc, #52]	; (80020b8 <__libc_init_array+0x38>)
 8002084:	4c0d      	ldr	r4, [pc, #52]	; (80020bc <__libc_init_array+0x3c>)
 8002086:	1b64      	subs	r4, r4, r5
 8002088:	10a4      	asrs	r4, r4, #2
 800208a:	2600      	movs	r6, #0
 800208c:	42a6      	cmp	r6, r4
 800208e:	d109      	bne.n	80020a4 <__libc_init_array+0x24>
 8002090:	4d0b      	ldr	r5, [pc, #44]	; (80020c0 <__libc_init_array+0x40>)
 8002092:	4c0c      	ldr	r4, [pc, #48]	; (80020c4 <__libc_init_array+0x44>)
 8002094:	f000 f820 	bl	80020d8 <_init>
 8002098:	1b64      	subs	r4, r4, r5
 800209a:	10a4      	asrs	r4, r4, #2
 800209c:	2600      	movs	r6, #0
 800209e:	42a6      	cmp	r6, r4
 80020a0:	d105      	bne.n	80020ae <__libc_init_array+0x2e>
 80020a2:	bd70      	pop	{r4, r5, r6, pc}
 80020a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a8:	4798      	blx	r3
 80020aa:	3601      	adds	r6, #1
 80020ac:	e7ee      	b.n	800208c <__libc_init_array+0xc>
 80020ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b2:	4798      	blx	r3
 80020b4:	3601      	adds	r6, #1
 80020b6:	e7f2      	b.n	800209e <__libc_init_array+0x1e>
 80020b8:	08002110 	.word	0x08002110
 80020bc:	08002110 	.word	0x08002110
 80020c0:	08002110 	.word	0x08002110
 80020c4:	08002114 	.word	0x08002114

080020c8 <memset>:
 80020c8:	4402      	add	r2, r0
 80020ca:	4603      	mov	r3, r0
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d100      	bne.n	80020d2 <memset+0xa>
 80020d0:	4770      	bx	lr
 80020d2:	f803 1b01 	strb.w	r1, [r3], #1
 80020d6:	e7f9      	b.n	80020cc <memset+0x4>

080020d8 <_init>:
 80020d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020da:	bf00      	nop
 80020dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020de:	bc08      	pop	{r3}
 80020e0:	469e      	mov	lr, r3
 80020e2:	4770      	bx	lr

080020e4 <_fini>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	bf00      	nop
 80020e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ea:	bc08      	pop	{r3}
 80020ec:	469e      	mov	lr, r3
 80020ee:	4770      	bx	lr
