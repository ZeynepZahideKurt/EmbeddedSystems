
SPI_Poll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e54  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fec  08000fec  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fec  08000fec  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000fec  08000fec  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fec  08000fec  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fec  08000fec  00010fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000018  0800100c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800100c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000507e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e5a  00000000  00000000  000250c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000550  00000000  00000000  00025f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004c8  00000000  00000000  00026470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014367  00000000  00000000  00026938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000469d  00000000  00000000  0003ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007fdd3  00000000  00000000  0003f33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf10f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001440  00000000  00000000  000bf18c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000fd4 	.word	0x08000fd4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08000fd4 	.word	0x08000fd4

080001d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <HAL_Init+0x40>)
 80001e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <HAL_Init+0x40>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <HAL_Init+0x40>)
 80001fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 f90d 	bl	8000420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f808 	bl	800021c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800020c:	f000 fde0 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40023c00 	.word	0x40023c00

0800021c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <HAL_InitTick+0x54>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <HAL_InitTick+0x58>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	4619      	mov	r1, r3
 800022e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000232:	fbb3 f3f1 	udiv	r3, r3, r1
 8000236:	fbb2 f3f3 	udiv	r3, r2, r3
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f917 	bl	800046e <HAL_SYSTICK_Config>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000246:	2301      	movs	r3, #1
 8000248:	e00e      	b.n	8000268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b0f      	cmp	r3, #15
 800024e:	d80a      	bhi.n	8000266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000250:	2200      	movs	r2, #0
 8000252:	6879      	ldr	r1, [r7, #4]
 8000254:	f04f 30ff 	mov.w	r0, #4294967295
 8000258:	f000 f8ed 	bl	8000436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800025c:	4a06      	ldr	r2, [pc, #24]	; (8000278 <HAL_InitTick+0x5c>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000262:	2300      	movs	r3, #0
 8000264:	e000      	b.n	8000268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000266:	2301      	movs	r3, #1
}
 8000268:	4618      	mov	r0, r3
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000014 	.word	0x20000014
 8000274:	20000004 	.word	0x20000004
 8000278:	20000000 	.word	0x20000000

0800027c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_IncTick+0x20>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	461a      	mov	r2, r3
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_IncTick+0x24>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4413      	add	r3, r2
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <HAL_IncTick+0x24>)
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000004 	.word	0x20000004
 80002a0:	20000034 	.word	0x20000034

080002a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return uwTick;
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <HAL_GetTick+0x14>)
 80002aa:	681b      	ldr	r3, [r3, #0]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	20000034 	.word	0x20000034

080002bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f003 0307 	and.w	r3, r3, #7
 80002ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <__NVIC_SetPriorityGrouping+0x44>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002d2:	68ba      	ldr	r2, [r7, #8]
 80002d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002d8:	4013      	ands	r3, r2
 80002da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002ee:	4a04      	ldr	r2, [pc, #16]	; (8000300 <__NVIC_SetPriorityGrouping+0x44>)
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	60d3      	str	r3, [r2, #12]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <__NVIC_GetPriorityGrouping+0x18>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	f003 0307 	and.w	r3, r3, #7
}
 8000312:	4618      	mov	r0, r3
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800032c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	db0a      	blt.n	800034a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	490c      	ldr	r1, [pc, #48]	; (800036c <__NVIC_SetPriority+0x4c>)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	0112      	lsls	r2, r2, #4
 8000340:	b2d2      	uxtb	r2, r2
 8000342:	440b      	add	r3, r1
 8000344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000348:	e00a      	b.n	8000360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4908      	ldr	r1, [pc, #32]	; (8000370 <__NVIC_SetPriority+0x50>)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	f003 030f 	and.w	r3, r3, #15
 8000356:	3b04      	subs	r3, #4
 8000358:	0112      	lsls	r2, r2, #4
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	440b      	add	r3, r1
 800035e:	761a      	strb	r2, [r3, #24]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	e000e100 	.word	0xe000e100
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000374:	b480      	push	{r7}
 8000376:	b089      	sub	sp, #36	; 0x24
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f003 0307 	and.w	r3, r3, #7
 8000386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	f1c3 0307 	rsb	r3, r3, #7
 800038e:	2b04      	cmp	r3, #4
 8000390:	bf28      	it	cs
 8000392:	2304      	movcs	r3, #4
 8000394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	3304      	adds	r3, #4
 800039a:	2b06      	cmp	r3, #6
 800039c:	d902      	bls.n	80003a4 <NVIC_EncodePriority+0x30>
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	3b03      	subs	r3, #3
 80003a2:	e000      	b.n	80003a6 <NVIC_EncodePriority+0x32>
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ac:	69bb      	ldr	r3, [r7, #24]
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	43da      	mvns	r2, r3
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	401a      	ands	r2, r3
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003bc:	f04f 31ff 	mov.w	r1, #4294967295
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	43d9      	mvns	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	4313      	orrs	r3, r2
         );
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3724      	adds	r7, #36	; 0x24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
	...

080003dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003ec:	d301      	bcc.n	80003f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ee:	2301      	movs	r3, #1
 80003f0:	e00f      	b.n	8000412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <SysTick_Config+0x40>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003fa:	210f      	movs	r1, #15
 80003fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000400:	f7ff ff8e 	bl	8000320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <SysTick_Config+0x40>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <SysTick_Config+0x40>)
 800040c:	2207      	movs	r2, #7
 800040e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	e000e010 	.word	0xe000e010

08000420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f7ff ff47 	bl	80002bc <__NVIC_SetPriorityGrouping>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000436:	b580      	push	{r7, lr}
 8000438:	b086      	sub	sp, #24
 800043a:	af00      	add	r7, sp, #0
 800043c:	4603      	mov	r3, r0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000448:	f7ff ff5c 	bl	8000304 <__NVIC_GetPriorityGrouping>
 800044c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	68b9      	ldr	r1, [r7, #8]
 8000452:	6978      	ldr	r0, [r7, #20]
 8000454:	f7ff ff8e 	bl	8000374 <NVIC_EncodePriority>
 8000458:	4602      	mov	r2, r0
 800045a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800045e:	4611      	mov	r1, r2
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff5d 	bl	8000320 <__NVIC_SetPriority>
}
 8000466:	bf00      	nop
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f7ff ffb0 	bl	80003dc <SysTick_Config>
 800047c:	4603      	mov	r3, r0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000488:	b480      	push	{r7}
 800048a:	b089      	sub	sp, #36	; 0x24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800049e:	2300      	movs	r3, #0
 80004a0:	61fb      	str	r3, [r7, #28]
 80004a2:	e159      	b.n	8000758 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80004a4:	2201      	movs	r2, #1
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	697a      	ldr	r2, [r7, #20]
 80004b4:	4013      	ands	r3, r2
 80004b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80004b8:	693a      	ldr	r2, [r7, #16]
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	429a      	cmp	r2, r3
 80004be:	f040 8148 	bne.w	8000752 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d00b      	beq.n	80004e2 <HAL_GPIO_Init+0x5a>
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d007      	beq.n	80004e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d6:	2b11      	cmp	r3, #17
 80004d8:	d003      	beq.n	80004e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	2b12      	cmp	r3, #18
 80004e0:	d130      	bne.n	8000544 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004e8:	69fb      	ldr	r3, [r7, #28]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2203      	movs	r2, #3
 80004ee:	fa02 f303 	lsl.w	r3, r2, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	69ba      	ldr	r2, [r7, #24]
 80004f6:	4013      	ands	r3, r2
 80004f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	68da      	ldr	r2, [r3, #12]
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	69ba      	ldr	r2, [r7, #24]
 8000508:	4313      	orrs	r3, r2
 800050a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	69ba      	ldr	r2, [r7, #24]
 8000510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000518:	2201      	movs	r2, #1
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	69ba      	ldr	r2, [r7, #24]
 8000524:	4013      	ands	r3, r2
 8000526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	091b      	lsrs	r3, r3, #4
 800052e:	f003 0201 	and.w	r2, r3, #1
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
 8000538:	69ba      	ldr	r2, [r7, #24]
 800053a:	4313      	orrs	r3, r2
 800053c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	69ba      	ldr	r2, [r7, #24]
 8000542:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	2203      	movs	r2, #3
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	69ba      	ldr	r2, [r7, #24]
 8000558:	4013      	ands	r3, r2
 800055a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	689a      	ldr	r2, [r3, #8]
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	69ba      	ldr	r2, [r7, #24]
 800056a:	4313      	orrs	r3, r2
 800056c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	69ba      	ldr	r2, [r7, #24]
 8000572:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b02      	cmp	r3, #2
 800057a:	d003      	beq.n	8000584 <HAL_GPIO_Init+0xfc>
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2b12      	cmp	r3, #18
 8000582:	d123      	bne.n	80005cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	08da      	lsrs	r2, r3, #3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3208      	adds	r2, #8
 800058c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	f003 0307 	and.w	r3, r3, #7
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	220f      	movs	r2, #15
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	43db      	mvns	r3, r3
 80005a2:	69ba      	ldr	r2, [r7, #24]
 80005a4:	4013      	ands	r3, r2
 80005a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	691a      	ldr	r2, [r3, #16]
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	f003 0307 	and.w	r3, r3, #7
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	08da      	lsrs	r2, r3, #3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3208      	adds	r2, #8
 80005c6:	69b9      	ldr	r1, [r7, #24]
 80005c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	2203      	movs	r2, #3
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	69ba      	ldr	r2, [r7, #24]
 80005e0:	4013      	ands	r3, r2
 80005e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	f003 0203 	and.w	r2, r3, #3
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	69ba      	ldr	r2, [r7, #24]
 80005fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	2b00      	cmp	r3, #0
 800060a:	f000 80a2 	beq.w	8000752 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b56      	ldr	r3, [pc, #344]	; (800076c <HAL_GPIO_Init+0x2e4>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000616:	4a55      	ldr	r2, [pc, #340]	; (800076c <HAL_GPIO_Init+0x2e4>)
 8000618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061c:	6453      	str	r3, [r2, #68]	; 0x44
 800061e:	4b53      	ldr	r3, [pc, #332]	; (800076c <HAL_GPIO_Init+0x2e4>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800062a:	4a51      	ldr	r2, [pc, #324]	; (8000770 <HAL_GPIO_Init+0x2e8>)
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	3302      	adds	r3, #2
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	f003 0303 	and.w	r3, r3, #3
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	220f      	movs	r2, #15
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	4013      	ands	r3, r2
 800064c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a48      	ldr	r2, [pc, #288]	; (8000774 <HAL_GPIO_Init+0x2ec>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d019      	beq.n	800068a <HAL_GPIO_Init+0x202>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a47      	ldr	r2, [pc, #284]	; (8000778 <HAL_GPIO_Init+0x2f0>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d013      	beq.n	8000686 <HAL_GPIO_Init+0x1fe>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a46      	ldr	r2, [pc, #280]	; (800077c <HAL_GPIO_Init+0x2f4>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d00d      	beq.n	8000682 <HAL_GPIO_Init+0x1fa>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a45      	ldr	r2, [pc, #276]	; (8000780 <HAL_GPIO_Init+0x2f8>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d007      	beq.n	800067e <HAL_GPIO_Init+0x1f6>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a44      	ldr	r2, [pc, #272]	; (8000784 <HAL_GPIO_Init+0x2fc>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d101      	bne.n	800067a <HAL_GPIO_Init+0x1f2>
 8000676:	2304      	movs	r3, #4
 8000678:	e008      	b.n	800068c <HAL_GPIO_Init+0x204>
 800067a:	2307      	movs	r3, #7
 800067c:	e006      	b.n	800068c <HAL_GPIO_Init+0x204>
 800067e:	2303      	movs	r3, #3
 8000680:	e004      	b.n	800068c <HAL_GPIO_Init+0x204>
 8000682:	2302      	movs	r3, #2
 8000684:	e002      	b.n	800068c <HAL_GPIO_Init+0x204>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <HAL_GPIO_Init+0x204>
 800068a:	2300      	movs	r3, #0
 800068c:	69fa      	ldr	r2, [r7, #28]
 800068e:	f002 0203 	and.w	r2, r2, #3
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	4093      	lsls	r3, r2
 8000696:	69ba      	ldr	r2, [r7, #24]
 8000698:	4313      	orrs	r3, r2
 800069a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800069c:	4934      	ldr	r1, [pc, #208]	; (8000770 <HAL_GPIO_Init+0x2e8>)
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	089b      	lsrs	r3, r3, #2
 80006a2:	3302      	adds	r3, #2
 80006a4:	69ba      	ldr	r2, [r7, #24]
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006aa:	4b37      	ldr	r3, [pc, #220]	; (8000788 <HAL_GPIO_Init+0x300>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	43db      	mvns	r3, r3
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	4013      	ands	r3, r2
 80006b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80006c6:	69ba      	ldr	r2, [r7, #24]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80006ce:	4a2e      	ldr	r2, [pc, #184]	; (8000788 <HAL_GPIO_Init+0x300>)
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006d4:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <HAL_GPIO_Init+0x300>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	43db      	mvns	r3, r3
 80006de:	69ba      	ldr	r2, [r7, #24]
 80006e0:	4013      	ands	r3, r2
 80006e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d003      	beq.n	80006f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80006f0:	69ba      	ldr	r2, [r7, #24]
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80006f8:	4a23      	ldr	r2, [pc, #140]	; (8000788 <HAL_GPIO_Init+0x300>)
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <HAL_GPIO_Init+0x300>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	43db      	mvns	r3, r3
 8000708:	69ba      	ldr	r2, [r7, #24]
 800070a:	4013      	ands	r3, r2
 800070c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800071a:	69ba      	ldr	r2, [r7, #24]
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	4313      	orrs	r3, r2
 8000720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <HAL_GPIO_Init+0x300>)
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_GPIO_Init+0x300>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	43db      	mvns	r3, r3
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	4013      	ands	r3, r2
 8000736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000740:	2b00      	cmp	r3, #0
 8000742:	d003      	beq.n	800074c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	4313      	orrs	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_GPIO_Init+0x300>)
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3301      	adds	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	2b0f      	cmp	r3, #15
 800075c:	f67f aea2 	bls.w	80004a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000760:	bf00      	nop
 8000762:	3724      	adds	r7, #36	; 0x24
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40023800 	.word	0x40023800
 8000770:	40013800 	.word	0x40013800
 8000774:	40020000 	.word	0x40020000
 8000778:	40020400 	.word	0x40020400
 800077c:	40020800 	.word	0x40020800
 8000780:	40020c00 	.word	0x40020c00
 8000784:	40021000 	.word	0x40021000
 8000788:	40013c00 	.word	0x40013c00

0800078c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e056      	b.n	800084c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d106      	bne.n	80007be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 fb31 	bl	8000e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2202      	movs	r2, #2
 80007c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	431a      	orrs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	431a      	orrs	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	431a      	orrs	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007fa:	431a      	orrs	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	431a      	orrs	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	ea42 0103 	orr.w	r1, r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	430a      	orrs	r2, r1
 8000814:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	0c1b      	lsrs	r3, r3, #16
 800081c:	f003 0104 	and.w	r1, r3, #4
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	430a      	orrs	r2, r1
 800082a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	69da      	ldr	r2, [r3, #28]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800083a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2201      	movs	r2, #1
 8000846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8000862:	2301      	movs	r3, #1
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000872:	2b01      	cmp	r3, #1
 8000874:	d101      	bne.n	800087a <HAL_SPI_TransmitReceive+0x26>
 8000876:	2302      	movs	r3, #2
 8000878:	e18a      	b.n	8000b90 <HAL_SPI_TransmitReceive+0x33c>
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2201      	movs	r2, #1
 800087e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000882:	f7ff fd0f 	bl	80002a4 <HAL_GetTick>
 8000886:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800088e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8000898:	887b      	ldrh	r3, [r7, #2]
 800089a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800089c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d00f      	beq.n	80008c4 <HAL_SPI_TransmitReceive+0x70>
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80008aa:	d107      	bne.n	80008bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d103      	bne.n	80008bc <HAL_SPI_TransmitReceive+0x68>
 80008b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d003      	beq.n	80008c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80008bc:	2302      	movs	r3, #2
 80008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80008c2:	e15b      	b.n	8000b7c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d005      	beq.n	80008d6 <HAL_SPI_TransmitReceive+0x82>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <HAL_SPI_TransmitReceive+0x82>
 80008d0:	887b      	ldrh	r3, [r7, #2]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d103      	bne.n	80008de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80008dc:	e14e      	b.n	8000b7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d003      	beq.n	80008f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2205      	movs	r2, #5
 80008ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2200      	movs	r2, #0
 80008f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	887a      	ldrh	r2, [r7, #2]
 8000902:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	887a      	ldrh	r2, [r7, #2]
 8000908:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	887a      	ldrh	r2, [r7, #2]
 8000914:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	887a      	ldrh	r2, [r7, #2]
 800091a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2200      	movs	r2, #0
 8000920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2200      	movs	r2, #0
 8000926:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000932:	2b40      	cmp	r3, #64	; 0x40
 8000934:	d007      	beq.n	8000946 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800094e:	d178      	bne.n	8000a42 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <HAL_SPI_TransmitReceive+0x10a>
 8000958:	8b7b      	ldrh	r3, [r7, #26]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d166      	bne.n	8000a2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	881a      	ldrh	r2, [r3, #0]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	1c9a      	adds	r2, r3, #2
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000978:	b29b      	uxth	r3, r3
 800097a:	3b01      	subs	r3, #1
 800097c:	b29a      	uxth	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000982:	e053      	b.n	8000a2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	2b02      	cmp	r3, #2
 8000990:	d11b      	bne.n	80009ca <HAL_SPI_TransmitReceive+0x176>
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000996:	b29b      	uxth	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d016      	beq.n	80009ca <HAL_SPI_TransmitReceive+0x176>
 800099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d113      	bne.n	80009ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	881a      	ldrh	r2, [r3, #0]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	1c9a      	adds	r2, r3, #2
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80009bc:	b29b      	uxth	r3, r3
 80009be:	3b01      	subs	r3, #1
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d119      	bne.n	8000a0c <HAL_SPI_TransmitReceive+0x1b8>
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80009dc:	b29b      	uxth	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d014      	beq.n	8000a0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ec:	b292      	uxth	r2, r2
 80009ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f4:	1c9a      	adds	r2, r3, #2
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	3b01      	subs	r3, #1
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8000a0c:	f7ff fc4a 	bl	80002a4 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d807      	bhi.n	8000a2c <HAL_SPI_TransmitReceive+0x1d8>
 8000a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a22:	d003      	beq.n	8000a2c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000a2a:	e0a7      	b.n	8000b7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1a6      	bne.n	8000984 <HAL_SPI_TransmitReceive+0x130>
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1a1      	bne.n	8000984 <HAL_SPI_TransmitReceive+0x130>
 8000a40:	e07c      	b.n	8000b3c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <HAL_SPI_TransmitReceive+0x1fc>
 8000a4a:	8b7b      	ldrh	r3, [r7, #26]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d16b      	bne.n	8000b28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	330c      	adds	r3, #12
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000a76:	e057      	b.n	8000b28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d11c      	bne.n	8000ac0 <HAL_SPI_TransmitReceive+0x26c>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d017      	beq.n	8000ac0 <HAL_SPI_TransmitReceive+0x26c>
 8000a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d114      	bne.n	8000ac0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	330c      	adds	r3, #12
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d119      	bne.n	8000b02 <HAL_SPI_TransmitReceive+0x2ae>
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d014      	beq.n	8000b02 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68da      	ldr	r2, [r3, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	3b01      	subs	r3, #1
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8000b02:	f7ff fbcf 	bl	80002a4 <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d803      	bhi.n	8000b1a <HAL_SPI_TransmitReceive+0x2c6>
 8000b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	d102      	bne.n	8000b20 <HAL_SPI_TransmitReceive+0x2cc>
 8000b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d103      	bne.n	8000b28 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8000b20:	2303      	movs	r3, #3
 8000b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000b26:	e029      	b.n	8000b7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1a2      	bne.n	8000a78 <HAL_SPI_TransmitReceive+0x224>
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d19d      	bne.n	8000a78 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f000 f893 	bl	8000c6c <SPI_EndRxTxTransaction>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2220      	movs	r2, #32
 8000b56:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8000b58:	e010      	b.n	8000b7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10b      	bne.n	8000b7a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	e000      	b.n	8000b7c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8000b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8000b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3730      	adds	r7, #48	; 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000ba8:	e04c      	b.n	8000c44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d048      	beq.n	8000c44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000bb2:	f7ff fb77 	bl	80002a4 <HAL_GetTick>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d902      	bls.n	8000bc8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d13d      	bne.n	8000c44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000be0:	d111      	bne.n	8000c06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bea:	d004      	beq.n	8000bf6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf4:	d107      	bne.n	8000c06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c0e:	d10f      	bne.n	8000c30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e00f      	b.n	8000c64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	bf0c      	ite	eq
 8000c54:	2301      	moveq	r3, #1
 8000c56:	2300      	movne	r3, #0
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d1a3      	bne.n	8000baa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <SPI_EndRxTxTransaction+0x7c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <SPI_EndRxTxTransaction+0x80>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	0d5b      	lsrs	r3, r3, #21
 8000c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c88:	fb02 f303 	mul.w	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000c96:	d112      	bne.n	8000cbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff ff78 	bl	8000b98 <SPI_WaitFlagStateUntilTimeout>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d016      	beq.n	8000cdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cb2:	f043 0220 	orr.w	r2, r3, #32
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e00f      	b.n	8000cde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00a      	beq.n	8000cda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd4:	2b80      	cmp	r3, #128	; 0x80
 8000cd6:	d0f2      	beq.n	8000cbe <SPI_EndRxTxTransaction+0x52>
 8000cd8:	e000      	b.n	8000cdc <SPI_EndRxTxTransaction+0x70>
        break;
 8000cda:	bf00      	nop
  }

  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000014 	.word	0x20000014
 8000cec:	165e9f81 	.word	0x165e9f81

08000cf0 <main>:
uint8_t  rx_buffer[10];



int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af02      	add	r7, sp, #8

  HAL_Init();
 8000cf6:	f7ff fa6f 	bl	80001d8 <HAL_Init>


  //SystemClock_Config();


  MX_GPIO_Init();
 8000cfa:	f000 f847 	bl	8000d8c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cfe:	f000 f80f 	bl	8000d20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
 
 
   HAL_SPI_TransmitReceive(&hspi1,tx_buffer,rx_buffer,10,100);
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	230a      	movs	r3, #10
 8000d08:	4a02      	ldr	r2, [pc, #8]	; (8000d14 <main+0x24>)
 8000d0a:	4903      	ldr	r1, [pc, #12]	; (8000d18 <main+0x28>)
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <main+0x2c>)
 8000d0e:	f7ff fda1 	bl	8000854 <HAL_SPI_TransmitReceive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <main+0x22>
 8000d14:	20000038 	.word	0x20000038
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000044 	.word	0x20000044

08000d20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <MX_SPI1_Init+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d54:	2210      	movs	r2, #16
 8000d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d72:	f7ff fd0b 	bl	800078c <HAL_SPI_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d7c:	f000 f820 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000044 	.word	0x20000044
 8000d88:	40013000 	.word	0x40013000

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_GPIO_Init+0x30>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <MX_GPIO_Init+0x30>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_GPIO_Init+0x30>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x4c>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e0e:	2007      	movs	r0, #7
 8000e10:	f7ff fb06 	bl	8000420 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800

08000e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_SPI_MspInit+0x84>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12b      	bne.n	8000e9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e7a:	23e0      	movs	r3, #224	; 0xe0
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_SPI_MspInit+0x8c>)
 8000e96:	f7ff faf7 	bl	8000488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f7ff f9ba 	bl	800027c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <SystemInit+0x28>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <SystemInit+0x28>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SystemInit+0x28>)
 8000f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f26:	609a      	str	r2, [r3, #8]
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f3e:	e003      	b.n	8000f48 <LoopCopyDataInit>

08000f40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f46:	3104      	adds	r1, #4

08000f48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f50:	d3f6      	bcc.n	8000f40 <CopyDataInit>
  ldr  r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f54:	e002      	b.n	8000f5c <LoopFillZerobss>

08000f56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f58:	f842 3b04 	str.w	r3, [r2], #4

08000f5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f60:	d3f9      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f62:	f7ff ffd3 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f000 f811 	bl	8000f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fec1 	bl	8000cf0 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f74:	08000ff4 	.word	0x08000ff4
  ldr  r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f7c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000f80:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000f84:	2000009c 	.word	0x2000009c

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <__libc_init_array>:
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	4e0d      	ldr	r6, [pc, #52]	; (8000fc4 <__libc_init_array+0x38>)
 8000f90:	4c0d      	ldr	r4, [pc, #52]	; (8000fc8 <__libc_init_array+0x3c>)
 8000f92:	1ba4      	subs	r4, r4, r6
 8000f94:	10a4      	asrs	r4, r4, #2
 8000f96:	2500      	movs	r5, #0
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	d109      	bne.n	8000fb0 <__libc_init_array+0x24>
 8000f9c:	4e0b      	ldr	r6, [pc, #44]	; (8000fcc <__libc_init_array+0x40>)
 8000f9e:	4c0c      	ldr	r4, [pc, #48]	; (8000fd0 <__libc_init_array+0x44>)
 8000fa0:	f000 f818 	bl	8000fd4 <_init>
 8000fa4:	1ba4      	subs	r4, r4, r6
 8000fa6:	10a4      	asrs	r4, r4, #2
 8000fa8:	2500      	movs	r5, #0
 8000faa:	42a5      	cmp	r5, r4
 8000fac:	d105      	bne.n	8000fba <__libc_init_array+0x2e>
 8000fae:	bd70      	pop	{r4, r5, r6, pc}
 8000fb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fb4:	4798      	blx	r3
 8000fb6:	3501      	adds	r5, #1
 8000fb8:	e7ee      	b.n	8000f98 <__libc_init_array+0xc>
 8000fba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fbe:	4798      	blx	r3
 8000fc0:	3501      	adds	r5, #1
 8000fc2:	e7f2      	b.n	8000faa <__libc_init_array+0x1e>
 8000fc4:	08000fec 	.word	0x08000fec
 8000fc8:	08000fec 	.word	0x08000fec
 8000fcc:	08000fec 	.word	0x08000fec
 8000fd0:	08000ff0 	.word	0x08000ff0

08000fd4 <_init>:
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd6:	bf00      	nop
 8000fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fda:	bc08      	pop	{r3}
 8000fdc:	469e      	mov	lr, r3
 8000fde:	4770      	bx	lr

08000fe0 <_fini>:
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	bf00      	nop
 8000fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe6:	bc08      	pop	{r3}
 8000fe8:	469e      	mov	lr, r3
 8000fea:	4770      	bx	lr
