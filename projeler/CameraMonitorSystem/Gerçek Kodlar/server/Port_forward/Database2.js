const Pool = require("pg").Pool;
const postegrePassword = "2382985"; //"YHrYNaB88UC7vAQ5" ;
const pool = new Pool({
  user: "postgres",
  password: "2382985",
  host: "localhost",
  port: 5433,
  database: "securitycam",
});
const CreateDatabasePool = new Pool({
  user: "postgres",
  password: postegrePassword,
  host: "localhost",
  port: 5433,
});
const dataBaseName = "securitycam";

module.exports = {
  createDatebase: async function () {
    try {
      const database = await CreateDatabasePool.query(
        `CREATE DATABASE ${dataBaseName}`
      );
    } catch (error) {}

    try {
      const table1 = await pool.query(
        "CREATE TABLE Mac_Table (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  F_id INT,mac character varying)"
      );
    } catch (error) {}
    try {
      const table2 = await pool.query(
        "CREATE TABLE login (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,mail character varying,sifre character varying,verify character varying, verify_status boolean)"
      );
    } catch (error) {}
  },
  findIdFromMail: async function (mail) {
    try {
      const insertText =
        "SELECT id FROM  login WHERE mail= $1 AND verify_status=true";
      var response = await pool.query(insertText, [mail]);
      if (response.rowCount > 0) {
        return response.rows[0].id;
      } else {
        return -1;
      }
    } catch (error) {
      console.log(error);
      return -1
    }
  },
  findMac: async function (mac)  {
    try {
      const insertText = "SELECT id FROM  mac_table WHERE mac= $1 ";
      var response = await pool.query(insertText, [mac]);
      if (response.rowCount > 0) {
        //  console.log("mac buldum"+response.rows[0].id)
        return response.rows[0].id;
      } else {
        return -1;
      }
    } catch (error) {
      console.log(error);
      return -1
    }
  },
  registerMac: async function (mac, userId)  {
    try {
      const RegisterMac_insertText =
        "INSERT INTO mac_table( mac,f_id ) VALUES($1,$2) RETURNING id";

      const RegisterMac_response = await pool.query(RegisterMac_insertText, [
        mac,
        userId,
      ]);
      if (RegisterMac_response.rowCount > 0) {
        //  console.log("mac buldum"+response.rows[0].id)
        return true;
      } else {
        return -1;
      }
    } catch (error) {
      console.log(error);
    }
  },
  updateMacUser: async function (macId, userId)  {
    try {
      const UpdateMac_insertText =
        "UPDATE mac_table SET F_id= $1 WHERE id=" + macId + "";

      const UpdateMac_response = await pool.query(UpdateMac_insertText, [
        userId,
      ]);
      if (UpdateMac_response.rowCount > 0) {
        //  console.log("mac buldum"+response.rows[0].id)
        return true;
      } else {
        return -1;
      }
    } catch (error) {
      console.log(error);
    }
  },
  login: async function (mail, password)  {
    try {
      const logIninsertText =
        "SELECT id FROM  login WHERE mail= $1 AND sifre = $2 AND verify_status=true";
      const logIn_response = await pool.query(logIninsertText, [
        mail,
        password,
      ]);
      if (logIn_response.rowCount == 1) {
        const macFınd_insertText =
          "SELECT mac FROM  mac_table WHERE f_id= $1  ";
        const macFınd_response = await pool.query(macFınd_insertText, [
          logIn_response.rows[0].id,
        ]);
      
          return macFınd_response.rows;
       
      } else {
        return -1;
      }
    } catch (error) {
      console.log(error);
      return -1
    }
  },
  getAllDevices: async function (userId)  {
    try {
      const macFınd_insertText = "SELECT mac FROM  mac_table WHERE f_id= $1  ";
      const macFınd_response = await pool.query(macFınd_insertText, [userId]);
      if (macFınd_response.rowCount > 0) {
        //  console.log("mac buldum"+response.rows[0].id)
        return macFınd_insertText.rows;
      } else {
        return -1;
      }
    } catch (error) {
      console.log(error);
    }
  },
  changePassword: async function (mail, newPassword, oldPassword,res)  {
    try {
      const changePasswordInsertText =
        "SELECT id FROM  login WHERE mail= $1 AND sifre = $2";
      const IdResponse = await pool.query(changePasswordInsertText, [
        mail,
        oldPassword,
      ]);
      if (IdResponse.rowCount == 1) {
        const updateInsertText = "UPDATE login SET sifre= $1 WHERE mail=$2";

        const updateResponse = await pool.query(updateInsertText, [
          newPassword,
          mail,
        ]);

        if (updateResponse.rowCount == 1) {
          res.json({ success: true, message: "Şifre Değiştirildi" });
        } else {
          res.json({
            success: false,
            message: "Şifre Değiştirilemedi",
          });
        }
      } else {
        res.json({
          success: false,
          message: "Eski Şifre Hatalı",
        });
      }
    } catch (error) {
      console.log(error);
      res.json({
        success: false,
        message: "Teknik Bir Hata Oluştu",
      });
    }
  },
  singIn: async function (mail, password, verify_token,res)  {
    try {
      const insertText =
        "INSERT INTO login(mail,sifre,verify,verify_status ) VALUES($1,$2,$3,$4) RETURNING id";
      const response = await pool.query(insertText, [
        mail,
        password,
        verify_token,
        false,
      ]);
      if (response.rowCount != 0) {
        res.json({ message: "Kayıt Başarılı", status: true });
      } else {
        res.json({ message: "Teknik Bir Hata oluştu", status: false });
      }
    } catch (error) {
      console.log(error);
      res.json({
        success: false,
        message: "Teknik Bir Hata Oluştu",
      });
    }
  },
  verifyUser:async function (mail,verify,res)  {
    try {
      const insertText =
      "UPDATE login SET verify_status=$1,verify=$2 WHERE mail=$3  AND verify=$4";
      const response = await pool.query(insertText, [
        true,
        "",
        mail,
        verify,
      ]);
      if (response.rowCount != 0) {
        res.writeHead(200, { "Content-Type": "text/html; charset=UTF-8" });
        res.write("<h2>Emailiniz Doğrulandı\n</h2>");
        res.end();
      } else {
        res.writeHead(200, { "Content-Type": "text/html; charset=UTF-8" });
        res.write("<h2>Emailiniz Doğrulanamadı\n</h2>");
        res.end();
      }
    } catch (error) {
      console.log(error);
      res.writeHead(200, { "Content-Type": "text/html; charset=UTF-8" });
      res.write("<h2>Emailiniz Doğrulanamadı\n</h2>");
      res.end();
    }
  },
};
