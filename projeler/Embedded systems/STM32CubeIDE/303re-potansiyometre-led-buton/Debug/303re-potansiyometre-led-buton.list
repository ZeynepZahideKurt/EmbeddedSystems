
303re-potansiyometre-led-buton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003490  08003490  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003490  08003490  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003490  08003490  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080034a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080034a4  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071da  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001456  00000000  00000000  00027216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  00028670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00028c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f15c  00000000  00000000  000290f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009308  00000000  00000000  00048254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c03d3  00000000  00000000  0005155c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011192f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001500  00000000  00000000  00111984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003448 	.word	0x08003448

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003448 	.word	0x08003448

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa10 	bl	80005fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f828 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8f4 	bl	80003cc <MX_GPIO_Init>
  MX_ADC1_Init();
 80001e4:	f000 f882 	bl	80002ec <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80001e8:	480e      	ldr	r0, [pc, #56]	; (8000224 <main+0x50>)
 80001ea:	f000 fc8b 	bl	8000b04 <HAL_ADC_Start>
  if(HAL_ADC_PollForConversion(&hadc1, 1000)== HAL_OK){
 80001ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001f2:	480c      	ldr	r0, [pc, #48]	; (8000224 <main+0x50>)
 80001f4:	f000 fd9c 	bl	8000d30 <HAL_ADC_PollForConversion>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d106      	bne.n	800020c <main+0x38>

	  adc = HAL_ADC_GetValue(&hadc1);
 80001fe:	4809      	ldr	r0, [pc, #36]	; (8000224 <main+0x50>)
 8000200:	f000 fe90 	bl	8000f24 <HAL_ADC_GetValue>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <main+0x54>)
 800020a:	601a      	str	r2, [r3, #0]

  }
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800020c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x58>)
 8000212:	f001 fdb9 	bl	8001d88 <HAL_GPIO_TogglePin>
  HAL_Delay(adc);
 8000216:	4b04      	ldr	r3, [pc, #16]	; (8000228 <main+0x54>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fa54 	bl	80006c8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000220:	e7e2      	b.n	80001e8 <main+0x14>
 8000222:	bf00      	nop
 8000224:	20000028 	.word	0x20000028
 8000228:	20000078 	.word	0x20000078
 800022c:	48000800 	.word	0x48000800

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b0a6      	sub	sp, #152	; 0x98
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 f8fa 	bl	8003438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2258      	movs	r2, #88	; 0x58
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 f8ec 	bl	8003438 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000260:	2302      	movs	r3, #2
 8000262:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000268:	2310      	movs	r3, #16
 800026a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800027c:	2300      	movs	r3, #0
 800027e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800028c:	4618      	mov	r0, r3
 800028e:	f001 fd95 	bl	8001dbc <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000298:	f000 f8e4 	bl	8000464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a0:	2300      	movs	r3, #0
 80002a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fc96 	bl	8002be8 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002c2:	f000 f8cf 	bl	8000464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002c6:	2380      	movs	r3, #128	; 0x80
 80002c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fe6e 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002de:	f000 f8c1 	bl	8000464 <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3798      	adds	r7, #152	; 0x98
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002f2:	f107 031c 	add.w	r3, r7, #28
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
 800030c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800030e:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000310:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000314:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000322:	4b29      	ldr	r3, [pc, #164]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000328:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800032a:	2200      	movs	r2, #0
 800032c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000330:	2200      	movs	r2, #0
 8000332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033c:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800033e:	2201      	movs	r2, #1
 8000340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000342:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800034a:	2201      	movs	r2, #1
 800034c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800034e:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000358:	2204      	movs	r2, #4
 800035a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800035e:	2200      	movs	r2, #0
 8000360:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000362:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000364:	2200      	movs	r2, #0
 8000366:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000368:	4817      	ldr	r0, [pc, #92]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800036a:	f000 f9d1 	bl	8000710 <HAL_ADC_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000374:	f000 f876 	bl	8000464 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800037c:	f107 031c 	add.w	r3, r7, #28
 8000380:	4619      	mov	r1, r3
 8000382:	4811      	ldr	r0, [pc, #68]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000384:	f001 f8c8 	bl	8001518 <HAL_ADCEx_MultiModeConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800038e:	f000 f869 	bl	8000464 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000392:	2301      	movs	r3, #1
 8000394:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000396:	2301      	movs	r3, #1
 8000398:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800039a:	2301      	movs	r3, #1
 800039c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	4806      	ldr	r0, [pc, #24]	; (80003c8 <MX_ADC1_Init+0xdc>)
 80003b0:	f000 fdc6 	bl	8000f40 <HAL_ADC_ConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003ba:	f000 f853 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	3728      	adds	r7, #40	; 0x28
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000028 	.word	0x20000028

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 030c 	add.w	r3, r7, #12
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e2:	4b1e      	ldr	r3, [pc, #120]	; (800045c <MX_GPIO_Init+0x90>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a1d      	ldr	r2, [pc, #116]	; (800045c <MX_GPIO_Init+0x90>)
 80003e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_GPIO_Init+0x90>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_GPIO_Init+0x90>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a17      	ldr	r2, [pc, #92]	; (800045c <MX_GPIO_Init+0x90>)
 8000400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_GPIO_Init+0x90>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_GPIO_Init+0x90>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <MX_GPIO_Init+0x90>)
 8000418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_GPIO_Init+0x90>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <MX_GPIO_Init+0x94>)
 8000432:	f001 fc91 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800043a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000448:	f107 030c 	add.w	r3, r7, #12
 800044c:	4619      	mov	r1, r3
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <MX_GPIO_Init+0x94>)
 8000450:	f001 faf8 	bl	8001a44 <HAL_GPIO_Init>

}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	48000800 	.word	0x48000800

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	e7fe      	b.n	800046c <Error_Handler+0x8>
	...

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <HAL_MspInit+0x44>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <HAL_MspInit+0x44>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_MspInit+0x44>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_MspInit+0x44>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_MspInit+0x44>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_MspInit+0x44>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	; 0x28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004d8:	d124      	bne.n	8000524 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <HAL_ADC_MspInit+0x74>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a13      	ldr	r2, [pc, #76]	; (800052c <HAL_ADC_MspInit+0x74>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <HAL_ADC_MspInit+0x74>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_ADC_MspInit+0x74>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_ADC_MspInit+0x74>)
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_ADC_MspInit+0x74>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800050a:	2303      	movs	r3, #3
 800050c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050e:	2303      	movs	r3, #3
 8000510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f001 fa90 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000524:	bf00      	nop
 8000526:	3728      	adds	r7, #40	; 0x28
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f884 	bl	8000688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <SystemInit+0x20>)
 800058a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800058e:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <SystemInit+0x20>)
 8000590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ae:	490e      	ldr	r1, [pc, #56]	; (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b0:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c4:	4c0b      	ldr	r4, [pc, #44]	; (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005d2:	f7ff ffd7 	bl	8000584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005d6:	f002 ff0b 	bl	80033f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005da:	f7ff fdfb 	bl	80001d4 <main>

080005de <LoopForever>:

LoopForever:
    b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ec:	08003498 	.word	0x08003498
  ldr r2, =_sbss
 80005f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f4:	20000080 	.word	0x20000080

080005f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_2_IRQHandler>
	...

080005fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_Init+0x28>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <HAL_Init+0x28>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060c:	2003      	movs	r0, #3
 800060e:	f001 f9e5 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f808 	bl	8000628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000618:	f7ff ff2a 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40022000 	.word	0x40022000

08000628 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_InitTick+0x54>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_InitTick+0x58>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f9ef 	bl	8001a2a <HAL_SYSTICK_Config>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e00e      	b.n	8000674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d80a      	bhi.n	8000672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f001 f9c5 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <HAL_InitTick+0x5c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	e000      	b.n	8000674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000000 	.word	0x20000000
 8000680:	20000008 	.word	0x20000008
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_IncTick+0x20>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_IncTick+0x24>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_IncTick+0x24>)
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000008 	.word	0x20000008
 80006ac:	2000007c 	.word	0x2000007c

080006b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <HAL_GetTick+0x14>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	2000007c 	.word	0x2000007c

080006c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d0:	f7ff ffee 	bl	80006b0 <HAL_GetTick>
 80006d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e0:	d005      	beq.n	80006ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_Delay+0x44>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006ee:	bf00      	nop
 80006f0:	f7ff ffde 	bl	80006b0 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d8f7      	bhi.n	80006f0 <HAL_Delay+0x28>
  {
  }
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008

08000710 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09a      	sub	sp, #104	; 0x68
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800071e:	2300      	movs	r3, #0
 8000720:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800072c:	2301      	movs	r3, #1
 800072e:	e1e3      	b.n	8000af8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	2b00      	cmp	r3, #0
 8000740:	d176      	bne.n	8000830 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	2b00      	cmp	r3, #0
 8000748:	d152      	bne.n	80007f0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2200      	movs	r2, #0
 800075a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fea7 	bl	80004b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	2b00      	cmp	r3, #0
 8000776:	d13b      	bne.n	80007f0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f001 f81d 	bl	80017b8 <ADC_Disable>
 800077e:	4603      	mov	r3, r0
 8000780:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	2b00      	cmp	r3, #0
 800078e:	d12f      	bne.n	80007f0 <HAL_ADC_Init+0xe0>
 8000790:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000794:	2b00      	cmp	r3, #0
 8000796:	d12b      	bne.n	80007f0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007a0:	f023 0302 	bic.w	r3, r3, #2
 80007a4:	f043 0202 	orr.w	r2, r3, #2
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	689a      	ldr	r2, [r3, #8]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80007ba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	689a      	ldr	r2, [r3, #8]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007cc:	4b92      	ldr	r3, [pc, #584]	; (8000a18 <HAL_ADC_Init+0x308>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a92      	ldr	r2, [pc, #584]	; (8000a1c <HAL_ADC_Init+0x30c>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007e2:	e002      	b.n	80007ea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f9      	bne.n	80007e4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d007      	beq.n	800080e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800080c:	d110      	bne.n	8000830 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f023 0312 	bic.w	r3, r3, #18
 8000816:	f043 0210 	orr.w	r2, r3, #16
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f043 0201 	orr.w	r2, r3, #1
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 0310 	and.w	r3, r3, #16
 8000838:	2b00      	cmp	r3, #0
 800083a:	f040 8150 	bne.w	8000ade <HAL_ADC_Init+0x3ce>
 800083e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000842:	2b00      	cmp	r3, #0
 8000844:	f040 814b 	bne.w	8000ade <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000852:	2b00      	cmp	r3, #0
 8000854:	f040 8143 	bne.w	8000ade <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000860:	f043 0202 	orr.w	r2, r3, #2
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000870:	d004      	beq.n	800087c <HAL_ADC_Init+0x16c>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a6a      	ldr	r2, [pc, #424]	; (8000a20 <HAL_ADC_Init+0x310>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d101      	bne.n	8000880 <HAL_ADC_Init+0x170>
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_ADC_Init+0x314>)
 800087e:	e000      	b.n	8000882 <HAL_ADC_Init+0x172>
 8000880:	4b69      	ldr	r3, [pc, #420]	; (8000a28 <HAL_ADC_Init+0x318>)
 8000882:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800088c:	d102      	bne.n	8000894 <HAL_ADC_Init+0x184>
 800088e:	4b64      	ldr	r3, [pc, #400]	; (8000a20 <HAL_ADC_Init+0x310>)
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e01a      	b.n	80008ca <HAL_ADC_Init+0x1ba>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a61      	ldr	r2, [pc, #388]	; (8000a20 <HAL_ADC_Init+0x310>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d103      	bne.n	80008a6 <HAL_ADC_Init+0x196>
 800089e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e011      	b.n	80008ca <HAL_ADC_Init+0x1ba>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a60      	ldr	r2, [pc, #384]	; (8000a2c <HAL_ADC_Init+0x31c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d102      	bne.n	80008b6 <HAL_ADC_Init+0x1a6>
 80008b0:	4b5f      	ldr	r3, [pc, #380]	; (8000a30 <HAL_ADC_Init+0x320>)
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e009      	b.n	80008ca <HAL_ADC_Init+0x1ba>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a5d      	ldr	r2, [pc, #372]	; (8000a30 <HAL_ADC_Init+0x320>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d102      	bne.n	80008c6 <HAL_ADC_Init+0x1b6>
 80008c0:	4b5a      	ldr	r3, [pc, #360]	; (8000a2c <HAL_ADC_Init+0x31c>)
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	e001      	b.n	80008ca <HAL_ADC_Init+0x1ba>
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d108      	bne.n	80008ea <HAL_ADC_Init+0x1da>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d101      	bne.n	80008ea <HAL_ADC_Init+0x1da>
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <HAL_ADC_Init+0x1dc>
 80008ea:	2300      	movs	r3, #0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d11c      	bne.n	800092a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80008f0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d010      	beq.n	8000918 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f003 0303 	and.w	r3, r3, #3
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d107      	bne.n	8000912 <HAL_ADC_Init+0x202>
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	2b01      	cmp	r3, #1
 800090c:	d101      	bne.n	8000912 <HAL_ADC_Init+0x202>
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <HAL_ADC_Init+0x204>
 8000912:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000914:	2b00      	cmp	r3, #0
 8000916:	d108      	bne.n	800092a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	431a      	orrs	r2, r3
 8000926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000928:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7e5b      	ldrb	r3, [r3, #25]
 800092e:	035b      	lsls	r3, r3, #13
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000934:	2a01      	cmp	r2, #1
 8000936:	d002      	beq.n	800093e <HAL_ADC_Init+0x22e>
 8000938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093c:	e000      	b.n	8000940 <HAL_ADC_Init+0x230>
 800093e:	2200      	movs	r2, #0
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	4313      	orrs	r3, r2
 800094e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000950:	4313      	orrs	r3, r2
 8000952:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d11b      	bne.n	8000996 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7e5b      	ldrb	r3, [r3, #25]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d109      	bne.n	800097a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096a:	3b01      	subs	r3, #1
 800096c:	045a      	lsls	r2, r3, #17
 800096e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000970:	4313      	orrs	r3, r2
 8000972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000976:	663b      	str	r3, [r7, #96]	; 0x60
 8000978:	e00d      	b.n	8000996 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000982:	f043 0220 	orr.w	r2, r3, #32
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f043 0201 	orr.w	r2, r3, #1
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099a:	2b01      	cmp	r3, #1
 800099c:	d054      	beq.n	8000a48 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <HAL_ADC_Init+0x31c>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d004      	beq.n	80009b2 <HAL_ADC_Init+0x2a2>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <HAL_ADC_Init+0x320>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d140      	bne.n	8000a34 <HAL_ADC_Init+0x324>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80009ba:	d02a      	beq.n	8000a12 <HAL_ADC_Init+0x302>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009c4:	d022      	beq.n	8000a0c <HAL_ADC_Init+0x2fc>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ca:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80009ce:	d01a      	beq.n	8000a06 <HAL_ADC_Init+0x2f6>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80009d8:	d012      	beq.n	8000a00 <HAL_ADC_Init+0x2f0>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80009e2:	d00a      	beq.n	80009fa <HAL_ADC_Init+0x2ea>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80009ec:	d002      	beq.n	80009f4 <HAL_ADC_Init+0x2e4>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f2:	e023      	b.n	8000a3c <HAL_ADC_Init+0x32c>
 80009f4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009f8:	e020      	b.n	8000a3c <HAL_ADC_Init+0x32c>
 80009fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80009fe:	e01d      	b.n	8000a3c <HAL_ADC_Init+0x32c>
 8000a00:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000a04:	e01a      	b.n	8000a3c <HAL_ADC_Init+0x32c>
 8000a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0a:	e017      	b.n	8000a3c <HAL_ADC_Init+0x32c>
 8000a0c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000a10:	e014      	b.n	8000a3c <HAL_ADC_Init+0x32c>
 8000a12:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000a16:	e011      	b.n	8000a3c <HAL_ADC_Init+0x32c>
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	431bde83 	.word	0x431bde83
 8000a20:	50000100 	.word	0x50000100
 8000a24:	50000300 	.word	0x50000300
 8000a28:	50000700 	.word	0x50000700
 8000a2c:	50000400 	.word	0x50000400
 8000a30:	50000500 	.word	0x50000500
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a40:	4313      	orrs	r3, r2
 8000a42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a44:	4313      	orrs	r3, r2
 8000a46:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	f003 030c 	and.w	r3, r3, #12
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d114      	bne.n	8000a80 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a64:	f023 0302 	bic.w	r3, r3, #2
 8000a68:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7e1b      	ldrb	r3, [r3, #24]
 8000a6e:	039a      	lsls	r2, r3, #14
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68da      	ldr	r2, [r3, #12]
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_ADC_Init+0x3f0>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	6812      	ldr	r2, [r2, #0]
 8000a8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a90:	430b      	orrs	r3, r1
 8000a92:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d10c      	bne.n	8000ab6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f023 010f 	bic.w	r1, r3, #15
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ab4:	e007      	b.n	8000ac6 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 020f 	bic.w	r2, r2, #15
 8000ac4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f023 0303 	bic.w	r3, r3, #3
 8000ad4:	f043 0201 	orr.w	r2, r3, #1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	641a      	str	r2, [r3, #64]	; 0x40
 8000adc:	e00a      	b.n	8000af4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f023 0312 	bic.w	r3, r3, #18
 8000ae6:	f043 0210 	orr.w	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000aee:	2301      	movs	r3, #1
 8000af0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000af4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3768      	adds	r7, #104	; 0x68
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	fff0c007 	.word	0xfff0c007

08000b04 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 80f9 	bne.w	8000d12 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_Start+0x2a>
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	e0f4      	b.n	8000d18 <HAL_ADC_Start+0x214>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2201      	movs	r2, #1
 8000b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 fde0 	bl	80016fc <ADC_Enable>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f040 80e0 	bne.w	8000d08 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b50:	f023 0301 	bic.w	r3, r3, #1
 8000b54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b64:	d004      	beq.n	8000b70 <HAL_ADC_Start+0x6c>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a6d      	ldr	r2, [pc, #436]	; (8000d20 <HAL_ADC_Start+0x21c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d106      	bne.n	8000b7e <HAL_ADC_Start+0x7a>
 8000b70:	4b6c      	ldr	r3, [pc, #432]	; (8000d24 <HAL_ADC_Start+0x220>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f003 031f 	and.w	r3, r3, #31
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d010      	beq.n	8000b9e <HAL_ADC_Start+0x9a>
 8000b7c:	e005      	b.n	8000b8a <HAL_ADC_Start+0x86>
 8000b7e:	4b6a      	ldr	r3, [pc, #424]	; (8000d28 <HAL_ADC_Start+0x224>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f003 031f 	and.w	r3, r3, #31
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d009      	beq.n	8000b9e <HAL_ADC_Start+0x9a>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b92:	d004      	beq.n	8000b9e <HAL_ADC_Start+0x9a>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a64      	ldr	r2, [pc, #400]	; (8000d2c <HAL_ADC_Start+0x228>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d115      	bne.n	8000bca <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d036      	beq.n	8000c26 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000bc8:	e02d      	b.n	8000c26 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bde:	d004      	beq.n	8000bea <HAL_ADC_Start+0xe6>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a4e      	ldr	r2, [pc, #312]	; (8000d20 <HAL_ADC_Start+0x21c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d10a      	bne.n	8000c00 <HAL_ADC_Start+0xfc>
 8000bea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	e008      	b.n	8000c12 <HAL_ADC_Start+0x10e>
 8000c00:	4b4a      	ldr	r3, [pc, #296]	; (8000d2c <HAL_ADC_Start+0x228>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	bf14      	ite	ne
 8000c0c:	2301      	movne	r3, #1
 8000c0e:	2300      	moveq	r3, #0
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c32:	d106      	bne.n	8000c42 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	f023 0206 	bic.w	r2, r3, #6
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	645a      	str	r2, [r3, #68]	; 0x44
 8000c40:	e002      	b.n	8000c48 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	221c      	movs	r2, #28
 8000c56:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c60:	d004      	beq.n	8000c6c <HAL_ADC_Start+0x168>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <HAL_ADC_Start+0x21c>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d106      	bne.n	8000c7a <HAL_ADC_Start+0x176>
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_ADC_Start+0x220>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d03e      	beq.n	8000cf6 <HAL_ADC_Start+0x1f2>
 8000c78:	e005      	b.n	8000c86 <HAL_ADC_Start+0x182>
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <HAL_ADC_Start+0x224>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d037      	beq.n	8000cf6 <HAL_ADC_Start+0x1f2>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c8e:	d004      	beq.n	8000c9a <HAL_ADC_Start+0x196>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <HAL_ADC_Start+0x21c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d106      	bne.n	8000ca8 <HAL_ADC_Start+0x1a4>
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <HAL_ADC_Start+0x220>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 031f 	and.w	r3, r3, #31
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d027      	beq.n	8000cf6 <HAL_ADC_Start+0x1f2>
 8000ca6:	e005      	b.n	8000cb4 <HAL_ADC_Start+0x1b0>
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_ADC_Start+0x224>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f003 031f 	and.w	r3, r3, #31
 8000cb0:	2b05      	cmp	r3, #5
 8000cb2:	d020      	beq.n	8000cf6 <HAL_ADC_Start+0x1f2>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cbc:	d004      	beq.n	8000cc8 <HAL_ADC_Start+0x1c4>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_ADC_Start+0x21c>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d106      	bne.n	8000cd6 <HAL_ADC_Start+0x1d2>
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_ADC_Start+0x220>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 031f 	and.w	r3, r3, #31
 8000cd0:	2b09      	cmp	r3, #9
 8000cd2:	d010      	beq.n	8000cf6 <HAL_ADC_Start+0x1f2>
 8000cd4:	e005      	b.n	8000ce2 <HAL_ADC_Start+0x1de>
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_ADC_Start+0x224>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	2b09      	cmp	r3, #9
 8000ce0:	d009      	beq.n	8000cf6 <HAL_ADC_Start+0x1f2>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cea:	d004      	beq.n	8000cf6 <HAL_ADC_Start+0x1f2>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_ADC_Start+0x228>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10f      	bne.n	8000d16 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f042 0204 	orr.w	r2, r2, #4
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	e006      	b.n	8000d16 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000d10:	e001      	b.n	8000d16 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d12:	2302      	movs	r3, #2
 8000d14:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	50000100 	.word	0x50000100
 8000d24:	50000300 	.word	0x50000300
 8000d28:	50000700 	.word	0x50000700
 8000d2c:	50000400 	.word	0x50000400

08000d30 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d102      	bne.n	8000d4c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000d46:	2308      	movs	r3, #8
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e03a      	b.n	8000dc2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d54:	d004      	beq.n	8000d60 <HAL_ADC_PollForConversion+0x30>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a6e      	ldr	r2, [pc, #440]	; (8000f14 <HAL_ADC_PollForConversion+0x1e4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_ADC_PollForConversion+0x34>
 8000d60:	4b6d      	ldr	r3, [pc, #436]	; (8000f18 <HAL_ADC_PollForConversion+0x1e8>)
 8000d62:	e000      	b.n	8000d66 <HAL_ADC_PollForConversion+0x36>
 8000d64:	4b6d      	ldr	r3, [pc, #436]	; (8000f1c <HAL_ADC_PollForConversion+0x1ec>)
 8000d66:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d112      	bne.n	8000d9a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d11d      	bne.n	8000dbe <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f043 0220 	orr.w	r2, r3, #32
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0b8      	b.n	8000f0c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f043 0220 	orr.w	r2, r3, #32
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e0a6      	b.n	8000f0c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dca:	d004      	beq.n	8000dd6 <HAL_ADC_PollForConversion+0xa6>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a50      	ldr	r2, [pc, #320]	; (8000f14 <HAL_ADC_PollForConversion+0x1e4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d106      	bne.n	8000de4 <HAL_ADC_PollForConversion+0xb4>
 8000dd6:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <HAL_ADC_PollForConversion+0x1e8>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d010      	beq.n	8000e04 <HAL_ADC_PollForConversion+0xd4>
 8000de2:	e005      	b.n	8000df0 <HAL_ADC_PollForConversion+0xc0>
 8000de4:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <HAL_ADC_PollForConversion+0x1ec>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d009      	beq.n	8000e04 <HAL_ADC_PollForConversion+0xd4>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df8:	d004      	beq.n	8000e04 <HAL_ADC_PollForConversion+0xd4>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <HAL_ADC_PollForConversion+0x1f0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d104      	bne.n	8000e0e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	e00f      	b.n	8000e2e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e16:	d004      	beq.n	8000e22 <HAL_ADC_PollForConversion+0xf2>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a3d      	ldr	r2, [pc, #244]	; (8000f14 <HAL_ADC_PollForConversion+0x1e4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d102      	bne.n	8000e28 <HAL_ADC_PollForConversion+0xf8>
 8000e22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e26:	e000      	b.n	8000e2a <HAL_ADC_PollForConversion+0xfa>
 8000e28:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <HAL_ADC_PollForConversion+0x1f0>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000e2e:	f7ff fc3f 	bl	80006b0 <HAL_GetTick>
 8000e32:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e34:	e01a      	b.n	8000e6c <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d016      	beq.n	8000e6c <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d007      	beq.n	8000e54 <HAL_ADC_PollForConversion+0x124>
 8000e44:	f7ff fc34 	bl	80006b0 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d20b      	bcs.n	8000e6c <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f043 0204 	orr.w	r2, r3, #4
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e04f      	b.n	8000f0c <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0dd      	beq.n	8000e36 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d131      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d12c      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d125      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d112      	bne.n	8000ee0 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d112      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f043 0201 	orr.w	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ede:	e00b      	b.n	8000ef8 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f043 0220 	orr.w	r2, r3, #32
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	f043 0201 	orr.w	r2, r3, #1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d103      	bne.n	8000f0a <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	50000100 	.word	0x50000100
 8000f18:	50000300 	.word	0x50000300
 8000f1c:	50000700 	.word	0x50000700
 8000f20:	50000400 	.word	0x50000400

08000f24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b09b      	sub	sp, #108	; 0x6c
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d101      	bne.n	8000f62 <HAL_ADC_ConfigChannel+0x22>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e2cb      	b.n	80014fa <HAL_ADC_ConfigChannel+0x5ba>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f040 82af 	bne.w	80014d8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d81c      	bhi.n	8000fbc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	461a      	mov	r2, r3
 8000f96:	231f      	movs	r3, #31
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4019      	ands	r1, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fba:	e063      	b.n	8001084 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	d81e      	bhi.n	8001002 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	3b1e      	subs	r3, #30
 8000fd8:	221f      	movs	r2, #31
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4019      	ands	r1, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	3b1e      	subs	r3, #30
 8000ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8001000:	e040      	b.n	8001084 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b0e      	cmp	r3, #14
 8001008:	d81e      	bhi.n	8001048 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	3b3c      	subs	r3, #60	; 0x3c
 800101e:	221f      	movs	r2, #31
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	4019      	ands	r1, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	3b3c      	subs	r3, #60	; 0x3c
 800103a:	fa00 f203 	lsl.w	r2, r0, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	639a      	str	r2, [r3, #56]	; 0x38
 8001046:	e01d      	b.n	8001084 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	3b5a      	subs	r3, #90	; 0x5a
 800105c:	221f      	movs	r2, #31
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	4019      	ands	r1, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	3b5a      	subs	r3, #90	; 0x5a
 8001078:	fa00 f203 	lsl.w	r2, r0, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 80e5 	bne.w	800125e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b09      	cmp	r3, #9
 800109a:	d91c      	bls.n	80010d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6999      	ldr	r1, [r3, #24]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	3b1e      	subs	r3, #30
 80010ae:	2207      	movs	r2, #7
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4019      	ands	r1, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	6898      	ldr	r0, [r3, #8]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	3b1e      	subs	r3, #30
 80010c8:	fa00 f203 	lsl.w	r2, r0, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	619a      	str	r2, [r3, #24]
 80010d4:	e019      	b.n	800110a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6959      	ldr	r1, [r3, #20]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	2207      	movs	r2, #7
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4019      	ands	r1, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	6898      	ldr	r0, [r3, #8]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	3b01      	subs	r3, #1
 8001128:	2b03      	cmp	r3, #3
 800112a:	d84f      	bhi.n	80011cc <HAL_ADC_ConfigChannel+0x28c>
 800112c:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <HAL_ADC_ConfigChannel+0x1f4>)
 800112e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001132:	bf00      	nop
 8001134:	08001145 	.word	0x08001145
 8001138:	08001167 	.word	0x08001167
 800113c:	08001189 	.word	0x08001189
 8001140:	080011ab 	.word	0x080011ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800114a:	4b9f      	ldr	r3, [pc, #636]	; (80013c8 <HAL_ADC_ConfigChannel+0x488>)
 800114c:	4013      	ands	r3, r2
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	0691      	lsls	r1, r2, #26
 8001154:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001156:	430a      	orrs	r2, r1
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001162:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001164:	e07e      	b.n	8001264 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800116c:	4b96      	ldr	r3, [pc, #600]	; (80013c8 <HAL_ADC_ConfigChannel+0x488>)
 800116e:	4013      	ands	r3, r2
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	0691      	lsls	r1, r2, #26
 8001176:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001178:	430a      	orrs	r2, r1
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001184:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001186:	e06d      	b.n	8001264 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800118e:	4b8e      	ldr	r3, [pc, #568]	; (80013c8 <HAL_ADC_ConfigChannel+0x488>)
 8001190:	4013      	ands	r3, r2
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	0691      	lsls	r1, r2, #26
 8001198:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800119a:	430a      	orrs	r2, r1
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011a8:	e05c      	b.n	8001264 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011b0:	4b85      	ldr	r3, [pc, #532]	; (80013c8 <HAL_ADC_ConfigChannel+0x488>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	0691      	lsls	r1, r2, #26
 80011ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011bc:	430a      	orrs	r2, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011ca:	e04b      	b.n	8001264 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	069b      	lsls	r3, r3, #26
 80011dc:	429a      	cmp	r2, r3
 80011de:	d107      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	069b      	lsls	r3, r3, #26
 8001200:	429a      	cmp	r2, r3
 8001202:	d107      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001212:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800121a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	069b      	lsls	r3, r3, #26
 8001224:	429a      	cmp	r2, r3
 8001226:	d107      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001236:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800123e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	069b      	lsls	r3, r3, #26
 8001248:	429a      	cmp	r2, r3
 800124a:	d10a      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800125a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800125c:	e001      	b.n	8001262 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001262:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d108      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x344>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x344>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_ADC_ConfigChannel+0x346>
 8001284:	2300      	movs	r3, #0
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 8131 	bne.w	80014ee <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d00f      	beq.n	80012b4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80012b2:	e049      	b.n	8001348 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	409a      	lsls	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d91c      	bls.n	8001310 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6999      	ldr	r1, [r3, #24]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	3b1b      	subs	r3, #27
 80012e8:	2207      	movs	r2, #7
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	4019      	ands	r1, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	6898      	ldr	r0, [r3, #8]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	3b1b      	subs	r3, #27
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	619a      	str	r2, [r3, #24]
 800130e:	e01b      	b.n	8001348 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6959      	ldr	r1, [r3, #20]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	2207      	movs	r2, #7
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	4019      	ands	r1, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6898      	ldr	r0, [r3, #8]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	fa00 f203 	lsl.w	r2, r0, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001350:	d004      	beq.n	800135c <HAL_ADC_ConfigChannel+0x41c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_ADC_ConfigChannel+0x48c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x420>
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_ADC_ConfigChannel+0x490>)
 800135e:	e000      	b.n	8001362 <HAL_ADC_ConfigChannel+0x422>
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_ADC_ConfigChannel+0x494>)
 8001362:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b10      	cmp	r3, #16
 800136a:	d105      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800136c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001374:	2b00      	cmp	r3, #0
 8001376:	d015      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800137c:	2b11      	cmp	r3, #17
 800137e:	d105      	bne.n	800138c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00b      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001390:	2b12      	cmp	r3, #18
 8001392:	f040 80ac 	bne.w	80014ee <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 80a5 	bne.w	80014ee <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ac:	d102      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x474>
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_ADC_ConfigChannel+0x48c>)
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e023      	b.n	80013fc <HAL_ADC_ConfigChannel+0x4bc>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_ADC_ConfigChannel+0x48c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10c      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x498>
 80013be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	e01a      	b.n	80013fc <HAL_ADC_ConfigChannel+0x4bc>
 80013c6:	bf00      	nop
 80013c8:	83fff000 	.word	0x83fff000
 80013cc:	50000100 	.word	0x50000100
 80013d0:	50000300 	.word	0x50000300
 80013d4:	50000700 	.word	0x50000700
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a4a      	ldr	r2, [pc, #296]	; (8001508 <HAL_ADC_ConfigChannel+0x5c8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d102      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x4a8>
 80013e2:	4b4a      	ldr	r3, [pc, #296]	; (800150c <HAL_ADC_ConfigChannel+0x5cc>)
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e009      	b.n	80013fc <HAL_ADC_ConfigChannel+0x4bc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a47      	ldr	r2, [pc, #284]	; (800150c <HAL_ADC_ConfigChannel+0x5cc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d102      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x4b8>
 80013f2:	4b45      	ldr	r3, [pc, #276]	; (8001508 <HAL_ADC_ConfigChannel+0x5c8>)
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e001      	b.n	80013fc <HAL_ADC_ConfigChannel+0x4bc>
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d108      	bne.n	800141c <HAL_ADC_ConfigChannel+0x4dc>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_ADC_ConfigChannel+0x4dc>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_ADC_ConfigChannel+0x4de>
 800141c:	2300      	movs	r3, #0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d150      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001422:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001424:	2b00      	cmp	r3, #0
 8001426:	d010      	beq.n	800144a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b01      	cmp	r3, #1
 8001432:	d107      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x504>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x504>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_ADC_ConfigChannel+0x506>
 8001444:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001446:	2b00      	cmp	r3, #0
 8001448:	d13c      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b10      	cmp	r3, #16
 8001450:	d11d      	bne.n	800148e <HAL_ADC_ConfigChannel+0x54e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800145a:	d118      	bne.n	800148e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800145c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001466:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <HAL_ADC_ConfigChannel+0x5d0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_ADC_ConfigChannel+0x5d4>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9a      	lsrs	r2, r3, #18
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800147e:	e002      	b.n	8001486 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3b01      	subs	r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f9      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800148c:	e02e      	b.n	80014ec <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b11      	cmp	r3, #17
 8001494:	d10b      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x56e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149e:	d106      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80014a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80014a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014aa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014ac:	e01e      	b.n	80014ec <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d11a      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80014b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014c2:	e013      	b.n	80014ec <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f043 0220 	orr.w	r2, r3, #32
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80014d6:	e00a      	b.n	80014ee <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f043 0220 	orr.w	r2, r3, #32
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80014ea:	e000      	b.n	80014ee <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014ec:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	376c      	adds	r7, #108	; 0x6c
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	50000400 	.word	0x50000400
 800150c:	50000500 	.word	0x50000500
 8001510:	20000000 	.word	0x20000000
 8001514:	431bde83 	.word	0x431bde83

08001518 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001518:	b480      	push	{r7}
 800151a:	b099      	sub	sp, #100	; 0x64
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001530:	d102      	bne.n	8001538 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001532:	4b6d      	ldr	r3, [pc, #436]	; (80016e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	e01a      	b.n	800156e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a6a      	ldr	r2, [pc, #424]	; (80016e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d103      	bne.n	800154a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001542:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	e011      	b.n	800156e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a67      	ldr	r2, [pc, #412]	; (80016ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d102      	bne.n	800155a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001554:	4b66      	ldr	r3, [pc, #408]	; (80016f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	e009      	b.n	800156e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a64      	ldr	r2, [pc, #400]	; (80016f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d102      	bne.n	800156a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001564:	4b61      	ldr	r3, [pc, #388]	; (80016ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	e001      	b.n	800156e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0b0      	b.n	80016da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001582:	2302      	movs	r3, #2
 8001584:	e0a9      	b.n	80016da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f040 808d 	bne.w	80016b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 8086 	bne.w	80016b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b4:	d004      	beq.n	80015c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a4b      	ldr	r2, [pc, #300]	; (80016e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80015c2:	e000      	b.n	80015c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80015c4:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80015c6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d040      	beq.n	8001652 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015e2:	035b      	lsls	r3, r3, #13
 80015e4:	430b      	orrs	r3, r1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d108      	bne.n	800160c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800160c:	2300      	movs	r3, #0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d15c      	bne.n	80016cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d107      	bne.n	800162e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800162e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001630:	2b00      	cmp	r3, #0
 8001632:	d14b      	bne.n	80016cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800163c:	f023 030f 	bic.w	r3, r3, #15
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	6811      	ldr	r1, [r2, #0]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	6892      	ldr	r2, [r2, #8]
 8001648:	430a      	orrs	r2, r1
 800164a:	431a      	orrs	r2, r3
 800164c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800164e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001650:	e03c      	b.n	80016cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800165a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800165c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800167e:	2300      	movs	r3, #0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d123      	bne.n	80016cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80016a0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d112      	bne.n	80016cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80016a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80016ae:	f023 030f 	bic.w	r3, r3, #15
 80016b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016b4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016b6:	e009      	b.n	80016cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f043 0220 	orr.w	r2, r3, #32
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80016ca:	e000      	b.n	80016ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016cc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80016da:	4618      	mov	r0, r3
 80016dc:	3764      	adds	r7, #100	; 0x64
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	50000100 	.word	0x50000100
 80016ec:	50000400 	.word	0x50000400
 80016f0:	50000500 	.word	0x50000500
 80016f4:	50000300 	.word	0x50000300
 80016f8:	50000700 	.word	0x50000700

080016fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <ADC_Enable+0x2c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <ADC_Enable+0x2c>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <ADC_Enable+0x2e>
 8001728:	2300      	movs	r3, #0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d13c      	bne.n	80017a8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <ADC_Enable+0xb8>)
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00d      	beq.n	8001758 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f043 0210 	orr.w	r2, r3, #16
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	f043 0201 	orr.w	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e028      	b.n	80017aa <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001768:	f7fe ffa2 	bl	80006b0 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800176e:	e014      	b.n	800179a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001770:	f7fe ff9e 	bl	80006b0 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d90d      	bls.n	800179a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f043 0210 	orr.w	r2, r3, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e007      	b.n	80017aa <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d1e3      	bne.n	8001770 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	8000003f 	.word	0x8000003f

080017b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d108      	bne.n	80017e4 <ADC_Disable+0x2c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <ADC_Disable+0x2c>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <ADC_Disable+0x2e>
 80017e4:	2300      	movs	r3, #0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d040      	beq.n	800186c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030d 	and.w	r3, r3, #13
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d10f      	bne.n	8001818 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0202 	orr.w	r2, r2, #2
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2203      	movs	r2, #3
 800180e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001810:	f7fe ff4e 	bl	80006b0 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001816:	e022      	b.n	800185e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f043 0210 	orr.w	r2, r3, #16
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e01c      	b.n	800186e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001834:	f7fe ff3c 	bl	80006b0 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d90d      	bls.n	800185e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f043 0210 	orr.w	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e007      	b.n	800186e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d0e3      	beq.n	8001834 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f7ff ff8e 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff47 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff5c 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff8e 	bl	8001930 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5d 	bl	80018dc <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffb0 	bl	8001998 <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e160      	b.n	8001d16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8152 	beq.w	8001d10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d00b      	beq.n	8001a8c <HAL_GPIO_Init+0x48>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d007      	beq.n	8001a8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a80:	2b11      	cmp	r3, #17
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b12      	cmp	r3, #18
 8001a8a:	d130      	bne.n	8001aee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f003 0201 	and.w	r2, r3, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0xea>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d123      	bne.n	8001b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	6939      	ldr	r1, [r7, #16]
 8001b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0203 	and.w	r2, r3, #3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80ac 	beq.w	8001d10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd0:	4a59      	ldr	r2, [pc, #356]	; (8001d38 <HAL_GPIO_Init+0x2f4>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfa:	d025      	beq.n	8001c48 <HAL_GPIO_Init+0x204>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x2f8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01f      	beq.n	8001c44 <HAL_GPIO_Init+0x200>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4e      	ldr	r2, [pc, #312]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d019      	beq.n	8001c40 <HAL_GPIO_Init+0x1fc>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1f8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1f4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_GPIO_Init+0x308>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1f0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a4a      	ldr	r2, [pc, #296]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1ec>
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	e00c      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c30:	2307      	movs	r3, #7
 8001c32:	e00a      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c34:	2305      	movs	r3, #5
 8001c36:	e008      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c38:	2304      	movs	r3, #4
 8001c3a:	e006      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e004      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e002      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	f002 0203 	and.w	r2, r2, #3
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	4093      	lsls	r3, r2
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c5a:	4937      	ldr	r1, [pc, #220]	; (8001d38 <HAL_GPIO_Init+0x2f4>)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c68:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c8c:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cb6:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f47f ae97 	bne.w	8001a54 <HAL_GPIO_Init+0x10>
  }
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	48000400 	.word	0x48000400
 8001d40:	48000800 	.word	0x48000800
 8001d44:	48000c00 	.word	0x48000c00
 8001d48:	48001000 	.word	0x48001000
 8001d4c:	48001400 	.word	0x48001400
 8001d50:	48001800 	.word	0x48001800
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43d9      	mvns	r1, r3
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	400b      	ands	r3, r1
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f000 bf01 	b.w	8002bd8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8160 	beq.w	80020a6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001de6:	4bae      	ldr	r3, [pc, #696]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d00c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df2:	4bab      	ldr	r3, [pc, #684]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d159      	bne.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
 8001dfe:	4ba8      	ldr	r3, [pc, #672]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0a:	d152      	bne.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
 8001e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e10:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <HAL_RCC_OscConfig+0x82>
 8001e38:	4b99      	ldr	r3, [pc, #612]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0xae>
 8001e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e56:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e5a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e66:	4b8e      	ldr	r3, [pc, #568]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e6e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001e72:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001e76:	fa92 f2a2 	rbit	r2, r2
 8001e7a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001e7e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8102 	beq.w	80020a4 <HAL_RCC_OscConfig+0x2e8>
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 80fc 	bne.w	80020a4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f000 be93 	b.w	8002bd8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCC_OscConfig+0x110>
 8001ebe:	4b78      	ldr	r3, [pc, #480]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a77      	ldr	r2, [pc, #476]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e030      	b.n	8001f2e <HAL_RCC_OscConfig+0x172>
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x134>
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a71      	ldr	r2, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6e      	ldr	r2, [pc, #440]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01e      	b.n	8001f2e <HAL_RCC_OscConfig+0x172>
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x15a>
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a67      	ldr	r2, [pc, #412]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b65      	ldr	r3, [pc, #404]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a64      	ldr	r2, [pc, #400]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0x172>
 8001f16:	4b62      	ldr	r3, [pc, #392]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a61      	ldr	r2, [pc, #388]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a5e      	ldr	r2, [pc, #376]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d059      	beq.n	8001fec <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fbba 	bl	80006b0 <HAL_GetTick>
 8001f3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f42:	f7fe fbb5 	bl	80006b0 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d902      	bls.n	8001f58 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	f000 be40 	b.w	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 8001f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001f6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_OscConfig+0x1ce>
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1fa>
 8001f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fa6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fba:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001fbe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001fca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0ab      	beq.n	8001f42 <HAL_RCC_OscConfig+0x186>
 8001fea:	e05c      	b.n	80020a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe fb60 	bl	80006b0 <HAL_GetTick>
 8001ff0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff6:	f7fe fb5b 	bl	80006b0 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d902      	bls.n	800200c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	f000 bde6 	b.w	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 800200c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002010:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002020:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d102      	bne.n	800203e <HAL_RCC_OscConfig+0x282>
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x2ae>
 800203e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002042:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002056:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800205a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCC_OscConfig+0x2e4>)
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800206e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002072:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800207e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f042 0220 	orr.w	r2, r2, #32
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ab      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x23a>
 800209e:	e002      	b.n	80020a6 <HAL_RCC_OscConfig+0x2ea>
 80020a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8170 	beq.w	8002396 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020b6:	4bd0      	ldr	r3, [pc, #832]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020c2:	4bcd      	ldr	r3, [pc, #820]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d16d      	bne.n	80021aa <HAL_RCC_OscConfig+0x3ee>
 80020ce:	4bca      	ldr	r3, [pc, #808]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80020d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020da:	d166      	bne.n	80021aa <HAL_RCC_OscConfig+0x3ee>
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80020ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <HAL_RCC_OscConfig+0x350>
 8002106:	4bbc      	ldr	r3, [pc, #752]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	e013      	b.n	8002134 <HAL_RCC_OscConfig+0x378>
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002124:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002130:	4bb1      	ldr	r3, [pc, #708]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2202      	movs	r2, #2
 8002136:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800213a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800213e:	fa92 f2a2 	rbit	r2, r2
 8002142:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002146:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800214a:	fab2 f282 	clz	r2, r2
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	f042 0220 	orr.w	r2, r2, #32
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f002 021f 	and.w	r2, r2, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <HAL_RCC_OscConfig+0x3ba>
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d002      	beq.n	8002176 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	f000 bd31 	b.w	8002bd8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002176:	4ba0      	ldr	r3, [pc, #640]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	21f8      	movs	r1, #248	; 0xf8
 8002186:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800218e:	fa91 f1a1 	rbit	r1, r1
 8002192:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002196:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800219a:	fab1 f181 	clz	r1, r1
 800219e:	b2c9      	uxtb	r1, r1
 80021a0:	408b      	lsls	r3, r1
 80021a2:	4995      	ldr	r1, [pc, #596]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a8:	e0f5      	b.n	8002396 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8085 	beq.w	80022c0 <HAL_RCC_OscConfig+0x504>
 80021b6:	2301      	movs	r3, #1
 80021b8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80021c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	461a      	mov	r2, r3
 80021de:	2301      	movs	r3, #1
 80021e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe fa65 	bl	80006b0 <HAL_GetTick>
 80021e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ec:	f7fe fa60 	bl	80006b0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d902      	bls.n	8002202 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	f000 bceb 	b.w	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002214:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d102      	bne.n	8002232 <HAL_RCC_OscConfig+0x476>
 800222c:	4b72      	ldr	r3, [pc, #456]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	e013      	b.n	800225a <HAL_RCC_OscConfig+0x49e>
 8002232:	2302      	movs	r3, #2
 8002234:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800224a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002256:	4b68      	ldr	r3, [pc, #416]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2202      	movs	r2, #2
 800225c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002260:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002264:	fa92 f2a2 	rbit	r2, r2
 8002268:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800226c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002270:	fab2 f282 	clz	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	f042 0220 	orr.w	r2, r2, #32
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	f002 021f 	and.w	r2, r2, #31
 8002280:	2101      	movs	r1, #1
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0af      	beq.n	80021ec <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	21f8      	movs	r1, #248	; 0xf8
 800229c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80022a4:	fa91 f1a1 	rbit	r1, r1
 80022a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80022ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022b0:	fab1 f181 	clz	r1, r1
 80022b4:	b2c9      	uxtb	r1, r1
 80022b6:	408b      	lsls	r3, r1
 80022b8:	494f      	ldr	r1, [pc, #316]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
 80022be:	e06a      	b.n	8002396 <HAL_RCC_OscConfig+0x5da>
 80022c0:	2301      	movs	r3, #1
 80022c2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80022d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	461a      	mov	r2, r3
 80022e8:	2300      	movs	r3, #0
 80022ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe f9e0 	bl	80006b0 <HAL_GetTick>
 80022f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f6:	f7fe f9db 	bl	80006b0 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d902      	bls.n	800230c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	f000 bc66 	b.w	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 800230c:	2302      	movs	r3, #2
 800230e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800231e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d102      	bne.n	800233c <HAL_RCC_OscConfig+0x580>
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	e013      	b.n	8002364 <HAL_RCC_OscConfig+0x5a8>
 800233c:	2302      	movs	r3, #2
 800233e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800234e:	2302      	movs	r3, #2
 8002350:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002354:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002360:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <HAL_RCC_OscConfig+0x63c>)
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	2202      	movs	r2, #2
 8002366:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800236a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800236e:	fa92 f2a2 	rbit	r2, r2
 8002372:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002376:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800237a:	fab2 f282 	clz	r2, r2
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f042 0220 	orr.w	r2, r2, #32
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	f002 021f 	and.w	r2, r2, #31
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f202 	lsl.w	r2, r1, r2
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1af      	bne.n	80022f6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80da 	beq.w	800255a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d069      	beq.n	8002484 <HAL_RCC_OscConfig+0x6c8>
 80023b0:	2301      	movs	r3, #1
 80023b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80023c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x640>)
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	461a      	mov	r2, r3
 80023d6:	2301      	movs	r3, #1
 80023d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7fe f969 	bl	80006b0 <HAL_GetTick>
 80023de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	e00d      	b.n	8002400 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e4:	f7fe f964 	bl	80006b0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d905      	bls.n	8002400 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e3ef      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 80023f8:	40021000 	.word	0x40021000
 80023fc:	10908120 	.word	0x10908120
 8002400:	2302      	movs	r3, #2
 8002402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800240a:	fa93 f2a3 	rbit	r2, r3
 800240e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002418:	2202      	movs	r2, #2
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002430:	2202      	movs	r2, #2
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002442:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002444:	4ba4      	ldr	r3, [pc, #656]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002448:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800244c:	2102      	movs	r1, #2
 800244e:	6019      	str	r1, [r3, #0]
 8002450:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f1a3 	rbit	r1, r3
 800245a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800245e:	6019      	str	r1, [r3, #0]
  return result;
 8002460:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0b0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x628>
 8002482:	e06a      	b.n	800255a <HAL_RCC_OscConfig+0x79e>
 8002484:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800249a:	601a      	str	r2, [r3, #0]
  return result;
 800249c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b8c      	ldr	r3, [pc, #560]	; (80026dc <HAL_RCC_OscConfig+0x920>)
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	461a      	mov	r2, r3
 80024b2:	2300      	movs	r3, #0
 80024b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7fe f8fb 	bl	80006b0 <HAL_GetTick>
 80024ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024be:	e009      	b.n	80024d4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe f8f6 	bl	80006b0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e381      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 80024d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024d8:	2202      	movs	r2, #2
 80024da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	fa93 f2a3 	rbit	r2, r3
 80024fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002508:	2202      	movs	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	fa93 f2a3 	rbit	r2, r3
 8002516:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800251a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	4b6e      	ldr	r3, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 800251e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002520:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002524:	2102      	movs	r1, #2
 8002526:	6019      	str	r1, [r3, #0]
 8002528:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fa93 f1a3 	rbit	r1, r3
 8002532:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002536:	6019      	str	r1, [r3, #0]
  return result;
 8002538:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1b2      	bne.n	80024c0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8157 	beq.w	8002818 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d112      	bne.n	80025a2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4b56      	ldr	r3, [pc, #344]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	4a55      	ldr	r2, [pc, #340]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002586:	61d3      	str	r3, [r2, #28]
 8002588:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4b4f      	ldr	r3, [pc, #316]	; (80026e0 <HAL_RCC_OscConfig+0x924>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11a      	bne.n	80025e4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4b4c      	ldr	r3, [pc, #304]	; (80026e0 <HAL_RCC_OscConfig+0x924>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a4b      	ldr	r2, [pc, #300]	; (80026e0 <HAL_RCC_OscConfig+0x924>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7fe f879 	bl	80006b0 <HAL_GetTick>
 80025be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	e009      	b.n	80025d8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c4:	f7fe f874 	bl	80006b0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e2ff      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_OscConfig+0x924>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ef      	beq.n	80025c4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x840>
 80025ee:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a39      	ldr	r2, [pc, #228]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6213      	str	r3, [r2, #32]
 80025fa:	e02f      	b.n	800265c <HAL_RCC_OscConfig+0x8a0>
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x864>
 8002606:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4a33      	ldr	r2, [pc, #204]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	6213      	str	r3, [r2, #32]
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a30      	ldr	r2, [pc, #192]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	6213      	str	r3, [r2, #32]
 800261e:	e01d      	b.n	800265c <HAL_RCC_OscConfig+0x8a0>
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x888>
 800262a:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a2a      	ldr	r2, [pc, #168]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	e00b      	b.n	800265c <HAL_RCC_OscConfig+0x8a0>
 8002644:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a20      	ldr	r2, [pc, #128]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 8002656:	f023 0304 	bic.w	r3, r3, #4
 800265a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d06a      	beq.n	800273c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7fe f823 	bl	80006b0 <HAL_GetTick>
 800266a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe f81e 	bl	80006b0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e2a7      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 8002688:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800268c:	2202      	movs	r2, #2
 800268e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	fa93 f2a3 	rbit	r2, r3
 800269a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026a4:	2202      	movs	r2, #2
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026b6:	601a      	str	r2, [r3, #0]
  return result;
 80026b8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x928>
 80026d2:	4b01      	ldr	r3, [pc, #4]	; (80026d8 <HAL_RCC_OscConfig+0x91c>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	e013      	b.n	8002700 <HAL_RCC_OscConfig+0x944>
 80026d8:	40021000 	.word	0x40021000
 80026dc:	10908120 	.word	0x10908120
 80026e0:	40007000 	.word	0x40007000
 80026e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026e8:	2202      	movs	r2, #2
 80026ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	fa93 f2a3 	rbit	r2, r3
 80026f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	4bc0      	ldr	r3, [pc, #768]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002704:	2102      	movs	r1, #2
 8002706:	6011      	str	r1, [r2, #0]
 8002708:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	fa92 f1a2 	rbit	r1, r2
 8002712:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002716:	6011      	str	r1, [r2, #0]
  return result;
 8002718:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	fab2 f282 	clz	r2, r2
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f002 021f 	and.w	r2, r2, #31
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f202 	lsl.w	r2, r1, r2
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d09a      	beq.n	8002670 <HAL_RCC_OscConfig+0x8b4>
 800273a:	e063      	b.n	8002804 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fd ffb8 	bl	80006b0 <HAL_GetTick>
 8002740:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fd ffb3 	bl	80006b0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e23c      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 800275e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002762:	2202      	movs	r2, #2
 8002764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	fa93 f2a3 	rbit	r2, r3
 8002770:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800277a:	2202      	movs	r2, #2
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800278c:	601a      	str	r2, [r3, #0]
  return result;
 800278e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002792:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d102      	bne.n	80027ae <HAL_RCC_OscConfig+0x9f2>
 80027a8:	4b95      	ldr	r3, [pc, #596]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	e00d      	b.n	80027ca <HAL_RCC_OscConfig+0xa0e>
 80027ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027b2:	2202      	movs	r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fa93 f2a3 	rbit	r2, r3
 80027c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	4b8e      	ldr	r3, [pc, #568]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80027ce:	2102      	movs	r1, #2
 80027d0:	6011      	str	r1, [r2, #0]
 80027d2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	fa92 f1a2 	rbit	r1, r2
 80027dc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027e0:	6011      	str	r1, [r2, #0]
  return result;
 80027e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	fab2 f282 	clz	r2, r2
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f002 021f 	and.w	r2, r2, #31
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1a0      	bne.n	8002746 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002804:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b7c      	ldr	r3, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4a7b      	ldr	r2, [pc, #492]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002816:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 81d9 	beq.w	8002bd6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002824:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	f000 81a6 	beq.w	8002b7e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b02      	cmp	r3, #2
 800283a:	f040 811e 	bne.w	8002a7a <HAL_RCC_OscConfig+0xcbe>
 800283e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002842:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002856:	601a      	str	r2, [r3, #0]
  return result;
 8002858:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800285c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002868:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	2300      	movs	r3, #0
 8002872:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fd ff1c 	bl	80006b0 <HAL_GetTick>
 8002878:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	e009      	b.n	8002892 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fd ff17 	bl	80006b0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1a2      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 8002892:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028aa:	601a      	str	r2, [r3, #0]
  return result;
 80028ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_OscConfig+0xb10>
 80028c6:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e01b      	b.n	8002904 <HAL_RCC_OscConfig+0xb48>
 80028cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f2a3 	rbit	r2, r3
 80028e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002908:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800290c:	6011      	str	r1, [r2, #0]
 800290e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	fa92 f1a2 	rbit	r1, r2
 8002918:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800291c:	6011      	str	r1, [r2, #0]
  return result;
 800291e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	fab2 f282 	clz	r2, r2
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f002 021f 	and.w	r2, r2, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f202 	lsl.w	r2, r1, r2
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d19e      	bne.n	800287e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002940:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f023 020f 	bic.w	r2, r3, #15
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	492c      	ldr	r1, [pc, #176]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002950:	4313      	orrs	r3, r2
 8002952:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6a19      	ldr	r1, [r3, #32]
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	430b      	orrs	r3, r1
 800296a:	4925      	ldr	r1, [pc, #148]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
 8002970:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002988:	601a      	str	r2, [r3, #0]
  return result;
 800298a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800298e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800299a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	461a      	mov	r2, r3
 80029a2:	2301      	movs	r3, #1
 80029a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fd fe83 	bl	80006b0 <HAL_GetTick>
 80029aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ae:	e009      	b.n	80029c4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fd fe7e 	bl	80006b0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e109      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 80029c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029dc:	601a      	str	r2, [r3, #0]
  return result;
 80029de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0xc48>
 80029f8:	4b01      	ldr	r3, [pc, #4]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	e01e      	b.n	8002a3c <HAL_RCC_OscConfig+0xc80>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	4b6a      	ldr	r3, [pc, #424]	; (8002be4 <HAL_RCC_OscConfig+0xe28>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a44:	6011      	str	r1, [r2, #0]
 8002a46:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fa92 f1a2 	rbit	r1, r2
 8002a50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a54:	6011      	str	r1, [r2, #0]
  return result;
 8002a56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	fab2 f282 	clz	r2, r2
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f042 0220 	orr.w	r2, r2, #32
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f002 021f 	and.w	r2, r2, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d09b      	beq.n	80029b0 <HAL_RCC_OscConfig+0xbf4>
 8002a78:	e0ad      	b.n	8002bd6 <HAL_RCC_OscConfig+0xe1a>
 8002a7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a92:	601a      	str	r2, [r3, #0]
  return result;
 8002a94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2300      	movs	r3, #0
 8002aae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fd fdfe 	bl	80006b0 <HAL_GetTick>
 8002ab4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab8:	e009      	b.n	8002ace <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fd fdf9 	bl	80006b0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e084      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
 8002ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ae6:	601a      	str	r2, [r3, #0]
  return result;
 8002ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0xd4c>
 8002b02:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_RCC_OscConfig+0xe28>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e01b      	b.n	8002b40 <HAL_RCC_OscConfig+0xd84>
 8002b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f107 0320 	add.w	r3, r7, #32
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f107 0318 	add.w	r3, r7, #24
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <HAL_RCC_OscConfig+0xe28>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f107 0214 	add.w	r2, r7, #20
 8002b44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b48:	6011      	str	r1, [r2, #0]
 8002b4a:	f107 0214 	add.w	r2, r7, #20
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fa92 f1a2 	rbit	r1, r2
 8002b54:	f107 0210 	add.w	r2, r7, #16
 8002b58:	6011      	str	r1, [r2, #0]
  return result;
 8002b5a:	f107 0210 	add.w	r2, r7, #16
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f042 0220 	orr.w	r2, r2, #32
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 021f 	and.w	r2, r2, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d19e      	bne.n	8002aba <HAL_RCC_OscConfig+0xcfe>
 8002b7c:	e02b      	b.n	8002bd6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e025      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_RCC_OscConfig+0xe28>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <HAL_RCC_OscConfig+0xe28>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ba0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d111      	bne.n	8002bd2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002bb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d108      	bne.n	8002bd2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000

08002be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b09e      	sub	sp, #120	; 0x78
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e162      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b90      	ldr	r3, [pc, #576]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d910      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b8d      	ldr	r3, [pc, #564]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	498b      	ldr	r1, [pc, #556]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b89      	ldr	r3, [pc, #548]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e14a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b82      	ldr	r3, [pc, #520]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	497f      	ldr	r1, [pc, #508]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80dc 	beq.w	8002e14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d13c      	bne.n	8002cde <HAL_RCC_ClockConfig+0xf6>
 8002c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d102      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xa6>
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	e00f      	b.n	8002cae <HAL_RCC_ClockConfig+0xc6>
 8002c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002caa:	4b67      	ldr	r3, [pc, #412]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cb6:	fa92 f2a2 	rbit	r2, r2
 8002cba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cbe:	fab2 f282 	clz	r2, r2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f042 0220 	orr.w	r2, r2, #32
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f002 021f 	and.w	r2, r2, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d17b      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0f3      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d13c      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x178>
 8002ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d102      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x128>
 8002d0a:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	e00f      	b.n	8002d30 <HAL_RCC_ClockConfig+0x148>
 8002d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40
 8002d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d2c:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d34:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d38:	fa92 f2a2 	rbit	r2, r2
 8002d3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d40:	fab2 f282 	clz	r2, r2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f042 0220 	orr.w	r2, r2, #32
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f002 021f 	and.w	r2, r2, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d13a      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b2      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
 8002d60:	2302      	movs	r3, #2
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e00d      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1bc>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
 8002d94:	2302      	movs	r3, #2
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2202      	movs	r2, #2
 8002da6:	61ba      	str	r2, [r7, #24]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	fa92 f2a2 	rbit	r2, r2
 8002dae:	617a      	str	r2, [r7, #20]
  return result;
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	fab2 f282 	clz	r2, r2
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	f042 0220 	orr.w	r2, r2, #32
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f002 021f 	and.w	r2, r2, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e079      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	491a      	ldr	r1, [pc, #104]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de4:	f7fd fc64 	bl	80006b0 <HAL_GetTick>
 8002de8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fd fc60 	bl	80006b0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e061      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d214      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 0207 	bic.w	r2, r3, #7
 8002e2a:	4906      	ldr	r1, [pc, #24]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e040      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	491a      	ldr	r1, [pc, #104]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4912      	ldr	r1, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e8a:	f000 f829 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4601      	mov	r1, r0
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e98:	22f0      	movs	r2, #240	; 0xf0
 8002e9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	40d3      	lsrs	r3, r2
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x2ec>)
 8002eb0:	5cd3      	ldrb	r3, [r2, r3]
 8002eb2:	fa21 f303 	lsr.w	r3, r1, r3
 8002eb6:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <HAL_RCC_ClockConfig+0x2f0>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_ClockConfig+0x2f4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fbb2 	bl	8000628 <HAL_InitTick>
  
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3778      	adds	r7, #120	; 0x78
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	08003460 	.word	0x08003460
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000004 	.word	0x20000004

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b08b      	sub	sp, #44	; 0x2c
 8002ee4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d002      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x30>
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0x36>
 8002f0e:	e03f      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f12:	623b      	str	r3, [r7, #32]
      break;
 8002f14:	e03f      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	fa92 f2a2 	rbit	r2, r2
 8002f28:	607a      	str	r2, [r7, #4]
  return result;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	40d3      	lsrs	r3, r2
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	220f      	movs	r2, #15
 8002f44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	fa92 f2a2 	rbit	r2, r2
 8002f4c:	60fa      	str	r2, [r7, #12]
  return result;
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	40d3      	lsrs	r3, r2
 8002f58:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f68:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	e007      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f7a:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fb02 f303 	mul.w	r3, r2, r3
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	623b      	str	r3, [r7, #32]
      break;
 8002f8e:	e002      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f92:	623b      	str	r3, [r7, #32]
      break;
 8002f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f96:	6a3b      	ldr	r3, [r7, #32]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	372c      	adds	r7, #44	; 0x2c
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	007a1200 	.word	0x007a1200
 8002fac:	08003470 	.word	0x08003470
 8002fb0:	08003480 	.word	0x08003480

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b092      	sub	sp, #72	; 0x48
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80d4 	beq.w	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd8:	4b4e      	ldr	r3, [pc, #312]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10e      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	61d3      	str	r3, [r2, #28]
 8002ff0:	4b48      	ldr	r3, [pc, #288]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b45      	ldr	r3, [pc, #276]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b42      	ldr	r3, [pc, #264]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a41      	ldr	r2, [pc, #260]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fd fb49 	bl	80006b0 <HAL_GetTick>
 800301e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fd fb45 	bl	80006b0 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1d6      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8084 	beq.w	800315a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800305c:	429a      	cmp	r2, r3
 800305e:	d07c      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003060:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4b26      	ldr	r3, [pc, #152]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	2301      	movs	r3, #1
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	461a      	mov	r2, r3
 80030ae:	2300      	movs	r3, #0
 80030b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d04b      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fd faf5 	bl	80006b0 <HAL_GetTick>
 80030c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fd faf1 	bl	80006b0 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e180      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
 80030ec:	2302      	movs	r3, #2
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	61fb      	str	r3, [r7, #28]
  return result;
 80030f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d108      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800310e:	4b01      	ldr	r3, [pc, #4]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	e00d      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
 800311c:	10908100 	.word	0x10908100
 8003120:	2302      	movs	r3, #2
 8003122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	4ba0      	ldr	r3, [pc, #640]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2202      	movs	r2, #2
 8003132:	613a      	str	r2, [r7, #16]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	fa92 f2a2 	rbit	r2, r2
 800313a:	60fa      	str	r2, [r7, #12]
  return result;
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	fab2 f282 	clz	r2, r2
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	f002 021f 	and.w	r2, r2, #31
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0b7      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800315a:	4b95      	ldr	r3, [pc, #596]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4992      	ldr	r1, [pc, #584]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800316c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003174:	4b8e      	ldr	r3, [pc, #568]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4a8d      	ldr	r2, [pc, #564]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800317a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800318c:	4b88      	ldr	r3, [pc, #544]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f023 0203 	bic.w	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4985      	ldr	r1, [pc, #532]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031aa:	4b81      	ldr	r3, [pc, #516]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	497e      	ldr	r1, [pc, #504]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031c8:	4b79      	ldr	r3, [pc, #484]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	4976      	ldr	r1, [pc, #472]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e6:	4b72      	ldr	r3, [pc, #456]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f023 0210 	bic.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	496f      	ldr	r1, [pc, #444]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003204:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	4967      	ldr	r1, [pc, #412]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f023 0220 	bic.w	r2, r3, #32
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4960      	ldr	r1, [pc, #384]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003230:	4313      	orrs	r3, r2
 8003232:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003240:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	4958      	ldr	r1, [pc, #352]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800325e:	4b54      	ldr	r3, [pc, #336]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	4951      	ldr	r1, [pc, #324]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800327c:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	4949      	ldr	r1, [pc, #292]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800329a:	4b45      	ldr	r3, [pc, #276]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4942      	ldr	r1, [pc, #264]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032b8:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	493a      	ldr	r1, [pc, #232]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	4933      	ldr	r1, [pc, #204]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032f4:	4b2e      	ldr	r3, [pc, #184]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	492b      	ldr	r1, [pc, #172]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003312:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4924      	ldr	r1, [pc, #144]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	491c      	ldr	r1, [pc, #112]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	4915      	ldr	r1, [pc, #84]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	490d      	ldr	r1, [pc, #52]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003396:	4906      	ldr	r1, [pc, #24]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003398:	4313      	orrs	r3, r2
 800339a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80033a8:	4b01      	ldr	r3, [pc, #4]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	e002      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033bc:	490b      	ldr	r1, [pc, #44]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033da:	4904      	ldr	r1, [pc, #16]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3748      	adds	r7, #72	; 0x48
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000

080033f0 <__libc_init_array>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	4d0d      	ldr	r5, [pc, #52]	; (8003428 <__libc_init_array+0x38>)
 80033f4:	4c0d      	ldr	r4, [pc, #52]	; (800342c <__libc_init_array+0x3c>)
 80033f6:	1b64      	subs	r4, r4, r5
 80033f8:	10a4      	asrs	r4, r4, #2
 80033fa:	2600      	movs	r6, #0
 80033fc:	42a6      	cmp	r6, r4
 80033fe:	d109      	bne.n	8003414 <__libc_init_array+0x24>
 8003400:	4d0b      	ldr	r5, [pc, #44]	; (8003430 <__libc_init_array+0x40>)
 8003402:	4c0c      	ldr	r4, [pc, #48]	; (8003434 <__libc_init_array+0x44>)
 8003404:	f000 f820 	bl	8003448 <_init>
 8003408:	1b64      	subs	r4, r4, r5
 800340a:	10a4      	asrs	r4, r4, #2
 800340c:	2600      	movs	r6, #0
 800340e:	42a6      	cmp	r6, r4
 8003410:	d105      	bne.n	800341e <__libc_init_array+0x2e>
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	f855 3b04 	ldr.w	r3, [r5], #4
 8003418:	4798      	blx	r3
 800341a:	3601      	adds	r6, #1
 800341c:	e7ee      	b.n	80033fc <__libc_init_array+0xc>
 800341e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003422:	4798      	blx	r3
 8003424:	3601      	adds	r6, #1
 8003426:	e7f2      	b.n	800340e <__libc_init_array+0x1e>
 8003428:	08003490 	.word	0x08003490
 800342c:	08003490 	.word	0x08003490
 8003430:	08003490 	.word	0x08003490
 8003434:	08003494 	.word	0x08003494

08003438 <memset>:
 8003438:	4402      	add	r2, r0
 800343a:	4603      	mov	r3, r0
 800343c:	4293      	cmp	r3, r2
 800343e:	d100      	bne.n	8003442 <memset+0xa>
 8003440:	4770      	bx	lr
 8003442:	f803 1b01 	strb.w	r1, [r3], #1
 8003446:	e7f9      	b.n	800343c <memset+0x4>

08003448 <_init>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	bf00      	nop
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr

08003454 <_fini>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	bf00      	nop
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr
