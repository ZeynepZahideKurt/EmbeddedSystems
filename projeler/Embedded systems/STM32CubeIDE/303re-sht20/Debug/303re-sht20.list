
303re-sht20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c60  08004c60  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c60  08004c60  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c60  08004c60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08004cd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004cd8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c054  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d06  00000000  00000000  0002c0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002029b  00000000  00000000  0002f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d933  00000000  00000000  0004f3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c17b1  00000000  00000000  0005ccd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011e487  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d10  00000000  00000000  0011e4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004bac 	.word	0x08004bac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004bac 	.word	0x08004bac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ad0:	b0a7      	sub	sp, #156	; 0x9c
 8000ad2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad4:	f000 fc94 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad8:	f000 f880 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000adc:	f000 f942 	bl	8000d64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ae0:	f000 f8d0 	bl	8000c84 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ae4:	f000 f90e 	bl	8000d04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SHT2x_Init(&hi2c1);
 8000ae8:	4839      	ldr	r0, [pc, #228]	; (8000bd0 <main+0x104>)
 8000aea:	f000 f97d 	bl	8000de8 <SHT2x_Init>
  	SHT2x_SetResolution(RES_14_12);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fa60 	bl	8000fb4 <SHT2x_SetResolution>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  unsigned char buffer[100] = { 0 };
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2260      	movs	r2, #96	; 0x60
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 fc1d 	bl	8004340 <memset>
	  		/* Gets current temperature & relative humidity. */
	  		float cel = SHT2x_GetTemperature(1);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 f9ce 	bl	8000ea8 <SHT2x_GetTemperature>
 8000b0c:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
	  		/* Converts temperature to degrees Fahrenheit and Kelvin */
	  		float fah = SHT2x_CelsiusToFahrenheit(cel);
 8000b10:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000b14:	f000 fa78 	bl	8001008 <SHT2x_CelsiusToFahrenheit>
 8000b18:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	  		float kel = SHT2x_CelsiusToKelvin(cel);
 8000b1c:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000b20:	f000 fa9c 	bl	800105c <SHT2x_CelsiusToKelvin>
 8000b24:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	  		float rh = SHT2x_GetRelativeHumidity(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f000 fa03 	bl	8000f34 <SHT2x_GetRelativeHumidity>
 8000b2e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	  		/* May show warning below. Ignore and proceed. */
	  		sprintf(buffer,
 8000b32:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000b36:	f000 faa5 	bl	8001084 <SHT2x_GetInteger>
 8000b3a:	4680      	mov	r8, r0
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000b42:	f000 fab0 	bl	80010a6 <SHT2x_GetDecimal>
 8000b46:	4681      	mov	r9, r0
 8000b48:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8000b4c:	f000 fa9a 	bl	8001084 <SHT2x_GetInteger>
 8000b50:	4604      	mov	r4, r0
 8000b52:	2001      	movs	r0, #1
 8000b54:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8000b58:	f000 faa5 	bl	80010a6 <SHT2x_GetDecimal>
 8000b5c:	4605      	mov	r5, r0
 8000b5e:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8000b62:	f000 fa8f 	bl	8001084 <SHT2x_GetInteger>
 8000b66:	4606      	mov	r6, r0
 8000b68:	2001      	movs	r0, #1
 8000b6a:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8000b6e:	f000 fa9a 	bl	80010a6 <SHT2x_GetDecimal>
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000b78:	f000 fa84 	bl	8001084 <SHT2x_GetInteger>
 8000b7c:	6038      	str	r0, [r7, #0]
 8000b7e:	2001      	movs	r0, #1
 8000b80:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000b84:	f000 fa8f 	bl	80010a6 <SHT2x_GetDecimal>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f107 000c 	add.w	r0, r7, #12
 8000b8e:	9305      	str	r3, [sp, #20]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	9304      	str	r3, [sp, #16]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	9303      	str	r3, [sp, #12]
 8000b98:	9602      	str	r6, [sp, #8]
 8000b9a:	9501      	str	r5, [sp, #4]
 8000b9c:	9400      	str	r4, [sp, #0]
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	4642      	mov	r2, r8
 8000ba2:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <main+0x108>)
 8000ba4:	f003 fbd4 	bl	8004350 <siprintf>
	  				"%d.%dºC, %d.%dºF, %d.%d K, %d.%d%% RH\n",
	  				SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
	  				SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
	  				SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
	  				SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));
	  		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fb17 	bl	80001e0 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f107 010c 	add.w	r1, r7, #12
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <main+0x10c>)
 8000bc0:	f002 ffc2 	bl	8003b48 <HAL_UART_Transmit>
	  		HAL_Delay(2000);
 8000bc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bc8:	f000 fc80 	bl	80014cc <HAL_Delay>
  {
 8000bcc:	e792      	b.n	8000af4 <main+0x28>
 8000bce:	bf00      	nop
 8000bd0:	20000098 	.word	0x20000098
 8000bd4:	08004bc4 	.word	0x08004bc4
 8000bd8:	200000e4 	.word	0x200000e4

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0a6      	sub	sp, #152	; 0x98
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000be6:	2228      	movs	r2, #40	; 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fba8 	bl	8004340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2258      	movs	r2, #88	; 0x58
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fb9a 	bl	8004340 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	2301      	movs	r3, #1
 8000c12:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c14:	2310      	movs	r3, #16
 8000c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fbd7 	bl	80023d8 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c30:	f000 f8d4 	bl	8000ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fad8 	bl	8003204 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c5a:	f000 f8bf 	bl	8000ddc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000c5e:	2321      	movs	r3, #33	; 0x21
 8000c60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 fcff 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c78:	f000 f8b0 	bl	8000ddc <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3798      	adds	r7, #152	; 0x98
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <MX_I2C1_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <MX_I2C1_Init+0x7c>)
 8000c92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cbe:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cc0:	f000 fe98 	bl	80019f4 <HAL_I2C_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cca:	f000 f887 	bl	8000ddc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cd2:	f001 fae9 	bl	80022a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f000 f87e 	bl	8000ddc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000ce4:	f001 fb2b 	bl	800233e <HAL_I2CEx_ConfigDigitalFilter>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f000 f875 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000098 	.word	0x20000098
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	2000090e 	.word	0x2000090e

08000d04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d0a:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <MX_USART1_UART_Init+0x5c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART1_UART_Init+0x58>)
 8000d48:	f002 feb0 	bl	8003aac <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d52:	f000 f843 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000e4 	.word	0x200000e4
 8000d60:	40013800 	.word	0x40013800

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000d70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000d88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6153      	str	r3, [r2, #20]
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_GPIO_Init+0x74>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <SHT2x_Init>:

/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <SHT2x_Init+0x1c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000168 	.word	0x20000168

08000e08 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8000e0e:	23e7      	movs	r3, #231	; 0xe7
 8000e10:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <SHT2x_ReadUserReg+0x3c>)
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	1dba      	adds	r2, r7, #6
 8000e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	f000 fe77 	bl	8001b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <SHT2x_ReadUserReg+0x3c>)
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2301      	movs	r3, #1
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	f000 ff61 	bl	8001cfc <HAL_I2C_Master_Receive>
	return val;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000168 	.word	0x20000168

08000e48 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <SHT2x_GetRaw+0x58>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	81bb      	strh	r3, [r7, #12]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <SHT2x_GetRaw+0x5c>)
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	1dfa      	adds	r2, r7, #7
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	f000 fe52 	bl	8001b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <SHT2x_GetRaw+0x5c>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2303      	movs	r3, #3
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	f000 ff3b 	bl	8001cfc <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 8000e86:	7b3b      	ldrb	r3, [r7, #12]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	b29b      	uxth	r3, r3
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08004bf0 	.word	0x08004bf0
 8000ea4:	20000168 	.word	0x20000168

08000ea8 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SHT2x_GetTemperature+0x14>
 8000eb8:	23e3      	movs	r3, #227	; 0xe3
 8000eba:	e000      	b.n	8000ebe <SHT2x_GetTemperature+0x16>
 8000ebc:	23f3      	movs	r3, #243	; 0xf3
 8000ebe:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffc0 	bl	8000e48 <SHT2x_GetRaw>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb32 	bl	8000534 <__aeabi_i2d>
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <SHT2x_GetTemperature+0x88>)
 8000ed6:	f7ff fcc1 	bl	800085c <__aeabi_ddiv>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	a30f      	add	r3, pc, #60	; (adr r3, 8000f20 <SHT2x_GetTemperature+0x78>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fb8e 	bl	8000608 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	a30c      	add	r3, pc, #48	; (adr r3, 8000f28 <SHT2x_GetTemperature+0x80>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	f7ff f9cd 	bl	8000298 <__aeabi_dsub>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fd91 	bl	8000a2c <__aeabi_d2f>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	ee07 3a90 	vmov	s15, r3
}
 8000f10:	eeb0 0a67 	vmov.f32	s0, s15
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	f3af 8000 	nop.w
 8000f20:	3d70a3d7 	.word	0x3d70a3d7
 8000f24:	4065f70a 	.word	0x4065f70a
 8000f28:	cccccccd 	.word	0xcccccccd
 8000f2c:	40476ccc 	.word	0x40476ccc
 8000f30:	40f00000 	.word	0x40f00000

08000f34 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SHT2x_GetRelativeHumidity+0x14>
 8000f44:	23e5      	movs	r3, #229	; 0xe5
 8000f46:	e000      	b.n	8000f4a <SHT2x_GetRelativeHumidity+0x16>
 8000f48:	23f5      	movs	r3, #245	; 0xf5
 8000f4a:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff7a 	bl	8000e48 <SHT2x_GetRaw>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff faec 	bl	8000534 <__aeabi_i2d>
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <SHT2x_GetRelativeHumidity+0x74>)
 8000f62:	f7ff fc7b 	bl	800085c <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <SHT2x_GetRelativeHumidity+0x78>)
 8000f74:	f7ff fb48 	bl	8000608 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <SHT2x_GetRelativeHumidity+0x7c>)
 8000f86:	f7ff f987 	bl	8000298 <__aeabi_dsub>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fd4b 	bl	8000a2c <__aeabi_d2f>
 8000f96:	4603      	mov	r3, r0
 8000f98:	ee07 3a90 	vmov	s15, r3
}
 8000f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40f00000 	.word	0x40f00000
 8000fac:	405f4000 	.word	0x405f4000
 8000fb0:	40180000 	.word	0x40180000

08000fb4 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 8000fbe:	f7ff ff23 	bl	8000e08 <SHT2x_ReadUserReg>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000fce:	b25a      	sxtb	r2, r3
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8000fda:	23e6      	movs	r3, #230	; 0xe6
 8000fdc:	733b      	strb	r3, [r7, #12]
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <SHT2x_SetResolution+0x4c>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	f000 fd8e 	bl	8001b14 <HAL_I2C_Master_Transmit>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000168 	.word	0x20000168
 8001004:	00000000 	.word	0x00000000

08001008 <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff faa0 	bl	8000558 <__aeabi_f2d>
 8001018:	a30e      	add	r3, pc, #56	; (adr r3, 8001054 <SHT2x_CelsiusToFahrenheit+0x4c>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff faf3 	bl	8000608 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SHT2x_CelsiusToFahrenheit+0x48>)
 8001030:	f7ff f934 	bl	800029c <__adddf3>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fcf6 	bl	8000a2c <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	ee07 3a90 	vmov	s15, r3
}
 8001046:	eeb0 0a67 	vmov.f32	s0, s15
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40400000 	.word	0x40400000
 8001054:	cccccccd 	.word	0xcccccccd
 8001058:	3ffccccc 	.word	0x3ffccccc

0800105c <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	ed87 0a01 	vstr	s0, [r7, #4]
	return celsius + 273;
 8001066:	edd7 7a01 	vldr	s15, [r7, #4]
 800106a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001080 <SHT2x_CelsiusToKelvin+0x24>
 800106e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	43888000 	.word	0x43888000

08001084 <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	ed87 0a01 	vstr	s0, [r7, #4]
	return num / 1;
 800108e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80010b0:	6038      	str	r0, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 80010b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b6:	f7ff ffe5 	bl	8001084 <SHT2x_GetInteger>
 80010ba:	ee07 0a90 	vmov	s15, r0
 80010be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80010c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ca:	edc7 7a03 	vstr	s15, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	200a      	movs	r0, #10
 80010d4:	f000 f810 	bl	80010f8 <SHT2x_Ipow>
 80010d8:	ee07 0a90 	vmov	s15, r0
 80010dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ec:	ee17 3a90 	vmov	r3, s15
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 8001106:	2301      	movs	r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	e007      	b.n	800111c <SHT2x_Ipow+0x24>
		temp *= base;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	fb02 f303 	mul.w	r3, r2, r3
 8001114:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3301      	adds	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3f3      	bcc.n	800110c <SHT2x_Ipow+0x14>
	return temp;
 8001124:	68fb      	ldr	r3, [r7, #12]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_MspInit+0x44>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_MspInit+0x44>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_MspInit+0x44>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_MspInit+0x44>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <HAL_MspInit+0x44>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	61d3      	str	r3, [r2, #28]
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_MspInit+0x44>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a26      	ldr	r2, [pc, #152]	; (8001234 <HAL_I2C_MspInit+0xb8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d145      	bne.n	800122a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_I2C_MspInit+0xbc>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <HAL_I2C_MspInit+0xbc>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <HAL_I2C_MspInit+0xbc>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_I2C_MspInit+0xbc>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_I2C_MspInit+0xbc>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_I2C_MspInit+0xbc>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e0:	2304      	movs	r3, #4
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f000 fa77 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f6:	2312      	movs	r3, #18
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001202:	2304      	movs	r3, #4
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <HAL_I2C_MspInit+0xc0>)
 800120e:	f000 fa67 	bl	80016e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_I2C_MspInit+0xbc>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_I2C_MspInit+0xbc>)
 8001218:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_I2C_MspInit+0xbc>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005400 	.word	0x40005400
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_UART_MspInit+0x7c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d127      	bne.n	80012b2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0x80>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <HAL_UART_MspInit+0x80>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_UART_MspInit+0x80>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_UART_MspInit+0x80>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_UART_MspInit+0x80>)
 8001280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_UART_MspInit+0x80>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001292:	2330      	movs	r3, #48	; 0x30
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a2:	2307      	movs	r3, #7
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_UART_MspInit+0x84>)
 80012ae:	f000 fa17 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000800 	.word	0x48000800

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f8ba 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f002 ffce 	bl	80042ec <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20010000 	.word	0x20010000
 800137c:	00000400 	.word	0x00000400
 8001380:	2000008c 	.word	0x2000008c
 8001384:	20000180 	.word	0x20000180

08001388 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490e      	ldr	r1, [pc, #56]	; (80013ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0b      	ldr	r4, [pc, #44]	; (80013f8 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013d6:	f7ff ffd7 	bl	8001388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013da:	f002 ff8d 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013de:	f7ff fb75 	bl	8000acc <main>

080013e2 <LoopForever>:

LoopForever:
    b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013f0:	08004c68 	.word	0x08004c68
  ldr r2, =_sbss
 80013f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013f8:	20000180 	.word	0x20000180

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>
	...

08001400 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_Init+0x28>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_Init+0x28>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f931 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f808 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff fe8a 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f93b 	bl	80016c6 <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f911 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000000 	.word	0x20000000
 8001484:	20000008 	.word	0x20000008
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008
 80014b0:	2000016c 	.word	0x2000016c

080014b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	2000016c 	.word	0x2000016c

080014cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff ffee 	bl	80014b4 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014f2:	bf00      	nop
 80014f4:	f7ff ffde 	bl	80014b4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff47 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff5c 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffb0 	bl	8001634 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e160      	b.n	80019b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8152 	beq.w	80019ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d00b      	beq.n	8001728 <HAL_GPIO_Init+0x48>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800171c:	2b11      	cmp	r3, #17
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b12      	cmp	r3, #18
 8001726:	d130      	bne.n	800178a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800175e:	2201      	movs	r2, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 0201 	and.w	r2, r3, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0xea>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d123      	bne.n	8001812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	6939      	ldr	r1, [r7, #16]
 800180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80ac 	beq.w	80019ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001854:	4b5e      	ldr	r3, [pc, #376]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a5d      	ldr	r2, [pc, #372]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b5b      	ldr	r3, [pc, #364]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800186c:	4a59      	ldr	r2, [pc, #356]	; (80019d4 <HAL_GPIO_Init+0x2f4>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001896:	d025      	beq.n	80018e4 <HAL_GPIO_Init+0x204>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <HAL_GPIO_Init+0x2f8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d01f      	beq.n	80018e0 <HAL_GPIO_Init+0x200>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a4e      	ldr	r2, [pc, #312]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d019      	beq.n	80018dc <HAL_GPIO_Init+0x1fc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <HAL_GPIO_Init+0x300>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_GPIO_Init+0x1f8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a4c      	ldr	r2, [pc, #304]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1f4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a4b      	ldr	r2, [pc, #300]	; (80019e8 <HAL_GPIO_Init+0x308>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1f0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a4a      	ldr	r2, [pc, #296]	; (80019ec <HAL_GPIO_Init+0x30c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1ec>
 80018c8:	2306      	movs	r3, #6
 80018ca:	e00c      	b.n	80018e6 <HAL_GPIO_Init+0x206>
 80018cc:	2307      	movs	r3, #7
 80018ce:	e00a      	b.n	80018e6 <HAL_GPIO_Init+0x206>
 80018d0:	2305      	movs	r3, #5
 80018d2:	e008      	b.n	80018e6 <HAL_GPIO_Init+0x206>
 80018d4:	2304      	movs	r3, #4
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x206>
 80018d8:	2303      	movs	r3, #3
 80018da:	e004      	b.n	80018e6 <HAL_GPIO_Init+0x206>
 80018dc:	2302      	movs	r3, #2
 80018de:	e002      	b.n	80018e6 <HAL_GPIO_Init+0x206>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_GPIO_Init+0x206>
 80018e4:	2300      	movs	r3, #0
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	f002 0203 	and.w	r2, r2, #3
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	4093      	lsls	r3, r2
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018f6:	4937      	ldr	r1, [pc, #220]	; (80019d4 <HAL_GPIO_Init+0x2f4>)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001904:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_GPIO_Init+0x310>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001928:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_GPIO_Init+0x310>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_GPIO_Init+0x310>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001952:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <HAL_GPIO_Init+0x310>)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_GPIO_Init+0x310>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800197c:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_GPIO_Init+0x310>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_GPIO_Init+0x310>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <HAL_GPIO_Init+0x310>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3301      	adds	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f47f ae97 	bne.w	80016f0 <HAL_GPIO_Init+0x10>
  }
}
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40010000 	.word	0x40010000
 80019d8:	48000400 	.word	0x48000400
 80019dc:	48000800 	.word	0x48000800
 80019e0:	48000c00 	.word	0x48000c00
 80019e4:	48001000 	.word	0x48001000
 80019e8:	48001400 	.word	0x48001400
 80019ec:	48001800 	.word	0x48001800
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e081      	b.n	8001b0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fbae 	bl	800117c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d107      	bne.n	8001a6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	e006      	b.n	8001a7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d104      	bne.n	8001a8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	ea42 0103 	orr.w	r1, r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	021a      	lsls	r2, r3, #8
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69d9      	ldr	r1, [r3, #28]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	460b      	mov	r3, r1
 8001b22:	817b      	strh	r3, [r7, #10]
 8001b24:	4613      	mov	r3, r2
 8001b26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	f040 80da 	bne.w	8001cea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_I2C_Master_Transmit+0x30>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e0d3      	b.n	8001cec <HAL_I2C_Master_Transmit+0x1d8>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b4c:	f7ff fcb2 	bl	80014b4 <HAL_GetTick>
 8001b50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2319      	movs	r3, #25
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f9e6 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0be      	b.n	8001cec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2221      	movs	r2, #33	; 0x21
 8001b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	893a      	ldrh	r2, [r7, #8]
 8001b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2bff      	cmp	r3, #255	; 0xff
 8001b9e:	d90e      	bls.n	8001bbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	22ff      	movs	r2, #255	; 0xff
 8001ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	8979      	ldrh	r1, [r7, #10]
 8001bae:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fb48 	bl	800224c <I2C_TransferConfig>
 8001bbc:	e06c      	b.n	8001c98 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	8979      	ldrh	r1, [r7, #10]
 8001bd0:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fb37 	bl	800224c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001bde:	e05b      	b.n	8001c98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	6a39      	ldr	r1, [r7, #32]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f9e3 	bl	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e07b      	b.n	8001cec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d034      	beq.n	8001c98 <HAL_I2C_Master_Transmit+0x184>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d130      	bne.n	8001c98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2180      	movs	r1, #128	; 0x80
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f975 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e04d      	b.n	8001cec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2bff      	cmp	r3, #255	; 0xff
 8001c58:	d90e      	bls.n	8001c78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	22ff      	movs	r2, #255	; 0xff
 8001c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	8979      	ldrh	r1, [r7, #10]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 faeb 	bl	800224c <I2C_TransferConfig>
 8001c76:	e00f      	b.n	8001c98 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	8979      	ldrh	r1, [r7, #10]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 fada 	bl	800224c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d19e      	bne.n	8001be0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f9c2 	bl	8002030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e01a      	b.n	8001cec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001cca:	400b      	ands	r3, r1
 8001ccc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	80002000 	.word	0x80002000
 8001cf8:	fe00e800 	.word	0xfe00e800

08001cfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	461a      	mov	r2, r3
 8001d08:	460b      	mov	r3, r1
 8001d0a:	817b      	strh	r3, [r7, #10]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b20      	cmp	r3, #32
 8001d1a:	f040 80db 	bne.w	8001ed4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_I2C_Master_Receive+0x30>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0d4      	b.n	8001ed6 <HAL_I2C_Master_Receive+0x1da>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d34:	f7ff fbbe 	bl	80014b4 <HAL_GetTick>
 8001d38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2319      	movs	r3, #25
 8001d40:	2201      	movs	r2, #1
 8001d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8f2 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0bf      	b.n	8001ed6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2222      	movs	r2, #34	; 0x22
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2210      	movs	r2, #16
 8001d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	893a      	ldrh	r2, [r7, #8]
 8001d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2bff      	cmp	r3, #255	; 0xff
 8001d86:	d90e      	bls.n	8001da6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	22ff      	movs	r2, #255	; 0xff
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	8979      	ldrh	r1, [r7, #10]
 8001d96:	4b52      	ldr	r3, [pc, #328]	; (8001ee0 <HAL_I2C_Master_Receive+0x1e4>)
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fa54 	bl	800224c <I2C_TransferConfig>
 8001da4:	e06d      	b.n	8001e82 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	8979      	ldrh	r1, [r7, #10]
 8001db8:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_I2C_Master_Receive+0x1e4>)
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fa43 	bl	800224c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001dc6:	e05c      	b.n	8001e82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	6a39      	ldr	r1, [r7, #32]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f96b 	bl	80020a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e07c      	b.n	8001ed6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d034      	beq.n	8001e82 <HAL_I2C_Master_Receive+0x186>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d130      	bne.n	8001e82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	2200      	movs	r2, #0
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f880 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e04d      	b.n	8001ed6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2bff      	cmp	r3, #255	; 0xff
 8001e42:	d90e      	bls.n	8001e62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	22ff      	movs	r2, #255	; 0xff
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	8979      	ldrh	r1, [r7, #10]
 8001e52:	2300      	movs	r3, #0
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f9f6 	bl	800224c <I2C_TransferConfig>
 8001e60:	e00f      	b.n	8001e82 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	8979      	ldrh	r1, [r7, #10]
 8001e74:	2300      	movs	r3, #0
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f9e5 	bl	800224c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d19d      	bne.n	8001dc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	6a39      	ldr	r1, [r7, #32]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f8cd 	bl	8002030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e01a      	b.n	8001ed6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6859      	ldr	r1, [r3, #4]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_I2C_Master_Receive+0x1e8>)
 8001eb4:	400b      	ands	r3, r1
 8001eb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e000      	b.n	8001ed6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
  }
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	80002400 	.word	0x80002400
 8001ee4:	fe00e800 	.word	0xfe00e800

08001ee8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d103      	bne.n	8001f06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d007      	beq.n	8001f24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	619a      	str	r2, [r3, #24]
  }
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f40:	e022      	b.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d01e      	beq.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7ff fab3 	bl	80014b4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d113      	bne.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	f043 0220 	orr.w	r2, r3, #32
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e00f      	b.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d0cd      	beq.n	8001f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fbc:	e02c      	b.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f8dc 	bl	8002180 <I2C_IsAcknowledgeFailed>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e02a      	b.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d01e      	beq.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fda:	f7ff fa6b 	bl	80014b4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d302      	bcc.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d113      	bne.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e007      	b.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b02      	cmp	r3, #2
 8002024:	d1cb      	bne.n	8001fbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800203c:	e028      	b.n	8002090 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f89c 	bl	8002180 <I2C_IsAcknowledgeFailed>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e026      	b.n	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002052:	f7ff fa2f 	bl	80014b4 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d302      	bcc.n	8002068 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d113      	bne.n	8002090 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e007      	b.n	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b20      	cmp	r3, #32
 800209c:	d1cf      	bne.n	800203e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020b4:	e055      	b.n	8002162 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f860 	bl	8002180 <I2C_IsAcknowledgeFailed>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e053      	b.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d129      	bne.n	800212c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d105      	bne.n	80020f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e03f      	b.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2220      	movs	r2, #32
 80020f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002106:	400b      	ands	r3, r1
 8002108:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e022      	b.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212c:	f7ff f9c2 	bl	80014b4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	d302      	bcc.n	8002142 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f043 0220 	orr.w	r2, r3, #32
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e007      	b.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b04      	cmp	r3, #4
 800216e:	d1a2      	bne.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	fe00e800 	.word	0xfe00e800

08002180 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b10      	cmp	r3, #16
 8002198:	d151      	bne.n	800223e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800219a:	e022      	b.n	80021e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d01e      	beq.n	80021e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a4:	f7ff f986 	bl	80014b4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d302      	bcc.n	80021ba <I2C_IsAcknowledgeFailed+0x3a>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d113      	bne.n	80021e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e02e      	b.n	8002240 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d1d5      	bne.n	800219c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2210      	movs	r2, #16
 80021f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2220      	movs	r2, #32
 80021fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff fe71 	bl	8001ee8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <I2C_IsAcknowledgeFailed+0xc8>)
 8002212:	400b      	ands	r3, r1
 8002214:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f043 0204 	orr.w	r2, r3, #4
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	fe00e800 	.word	0xfe00e800

0800224c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	817b      	strh	r3, [r7, #10]
 800225a:	4613      	mov	r3, r2
 800225c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	0d5b      	lsrs	r3, r3, #21
 8002268:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <I2C_TransferConfig+0x58>)
 800226e:	430b      	orrs	r3, r1
 8002270:	43db      	mvns	r3, r3
 8002272:	ea02 0103 	and.w	r1, r2, r3
 8002276:	897b      	ldrh	r3, [r7, #10]
 8002278:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800227c:	7a7b      	ldrb	r3, [r7, #9]
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	431a      	orrs	r2, r3
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	03ff63ff 	.word	0x03ff63ff

080022a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d138      	bne.n	8002330 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e032      	b.n	8002332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6819      	ldr	r1, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	e000      	b.n	8002332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002330:	2302      	movs	r3, #2
  }
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b20      	cmp	r3, #32
 8002352:	d139      	bne.n	80023c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800235e:	2302      	movs	r3, #2
 8002360:	e033      	b.n	80023ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2224      	movs	r2, #36	; 0x24
 800236e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002390:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80023de:	af00      	add	r7, sp, #0
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f000 bf01 	b.w	80031f4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8160 	beq.w	80026c2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002402:	4bae      	ldr	r3, [pc, #696]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d00c      	beq.n	8002428 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800240e:	4bab      	ldr	r3, [pc, #684]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b08      	cmp	r3, #8
 8002418:	d159      	bne.n	80024ce <HAL_RCC_OscConfig+0xf6>
 800241a:	4ba8      	ldr	r3, [pc, #672]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002426:	d152      	bne.n	80024ce <HAL_RCC_OscConfig+0xf6>
 8002428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800243c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <HAL_RCC_OscConfig+0x82>
 8002454:	4b99      	ldr	r3, [pc, #612]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e015      	b.n	8002486 <HAL_RCC_OscConfig+0xae>
 800245a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800246e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002472:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002476:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002482:	4b8e      	ldr	r3, [pc, #568]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800248a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800248e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002492:	fa92 f2a2 	rbit	r2, r2
 8002496:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800249a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800249e:	fab2 f282 	clz	r2, r2
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f042 0220 	orr.w	r2, r2, #32
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 021f 	and.w	r2, r2, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8102 	beq.w	80026c0 <HAL_RCC_OscConfig+0x2e8>
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80fc 	bne.w	80026c0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f000 be93 	b.w	80031f4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d106      	bne.n	80024e8 <HAL_RCC_OscConfig+0x110>
 80024da:	4b78      	ldr	r3, [pc, #480]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a77      	ldr	r2, [pc, #476]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e030      	b.n	800254a <HAL_RCC_OscConfig+0x172>
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x134>
 80024f2:	4b72      	ldr	r3, [pc, #456]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a71      	ldr	r2, [pc, #452]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b6f      	ldr	r3, [pc, #444]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6e      	ldr	r2, [pc, #440]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01e      	b.n	800254a <HAL_RCC_OscConfig+0x172>
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002516:	d10c      	bne.n	8002532 <HAL_RCC_OscConfig+0x15a>
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a67      	ldr	r2, [pc, #412]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 800251e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b65      	ldr	r3, [pc, #404]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a64      	ldr	r2, [pc, #400]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e00b      	b.n	800254a <HAL_RCC_OscConfig+0x172>
 8002532:	4b62      	ldr	r3, [pc, #392]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a61      	ldr	r2, [pc, #388]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5e      	ldr	r2, [pc, #376]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d059      	beq.n	8002608 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe ffae 	bl	80014b4 <HAL_GetTick>
 8002558:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255e:	f7fe ffa9 	bl	80014b4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d902      	bls.n	8002574 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	f000 be40 	b.w	80031f4 <HAL_RCC_OscConfig+0xe1c>
 8002574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002578:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002588:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_OscConfig+0x1ce>
 80025a0:	4b46      	ldr	r3, [pc, #280]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x1fa>
 80025a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80025ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025be:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025c2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025ce:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80025da:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80025de:	fa92 f2a2 	rbit	r2, r2
 80025e2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80025e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ab      	beq.n	800255e <HAL_RCC_OscConfig+0x186>
 8002606:	e05c      	b.n	80026c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe ff54 	bl	80014b4 <HAL_GetTick>
 800260c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002612:	f7fe ff4f 	bl	80014b4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d902      	bls.n	8002628 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	f000 bde6 	b.w	80031f4 <HAL_RCC_OscConfig+0xe1c>
 8002628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800263c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b01      	cmp	r3, #1
 8002652:	d102      	bne.n	800265a <HAL_RCC_OscConfig+0x282>
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x2ae>
 800265a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800266e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002672:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002676:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_RCC_OscConfig+0x2e4>)
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800268a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800268e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002692:	fa92 f2a2 	rbit	r2, r2
 8002696:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800269a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ab      	bne.n	8002612 <HAL_RCC_OscConfig+0x23a>
 80026ba:	e002      	b.n	80026c2 <HAL_RCC_OscConfig+0x2ea>
 80026bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8170 	beq.w	80029b2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026d2:	4bd0      	ldr	r3, [pc, #832]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026de:	4bcd      	ldr	r3, [pc, #820]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d16d      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3ee>
 80026ea:	4bca      	ldr	r3, [pc, #808]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80026f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f6:	d166      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3ee>
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800270a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_RCC_OscConfig+0x350>
 8002722:	4bbc      	ldr	r3, [pc, #752]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x378>
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002740:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800274c:	4bb1      	ldr	r3, [pc, #708]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2202      	movs	r2, #2
 8002752:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002756:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002762:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_RCC_OscConfig+0x3ba>
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d002      	beq.n	8002792 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	f000 bd31 	b.w	80031f4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4ba0      	ldr	r3, [pc, #640]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	21f8      	movs	r1, #248	; 0xf8
 80027a2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80027aa:	fa91 f1a1 	rbit	r1, r1
 80027ae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80027b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027b6:	fab1 f181 	clz	r1, r1
 80027ba:	b2c9      	uxtb	r1, r1
 80027bc:	408b      	lsls	r3, r1
 80027be:	4995      	ldr	r1, [pc, #596]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c4:	e0f5      	b.n	80029b2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8085 	beq.w	80028dc <HAL_RCC_OscConfig+0x504>
 80027d2:	2301      	movs	r3, #1
 80027d4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80027e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	461a      	mov	r2, r3
 80027fa:	2301      	movs	r3, #1
 80027fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe fe59 	bl	80014b4 <HAL_GetTick>
 8002802:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002808:	f7fe fe54 	bl	80014b4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d902      	bls.n	800281e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	f000 bceb 	b.w	80031f4 <HAL_RCC_OscConfig+0xe1c>
 800281e:	2302      	movs	r3, #2
 8002820:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002830:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d102      	bne.n	800284e <HAL_RCC_OscConfig+0x476>
 8002848:	4b72      	ldr	r3, [pc, #456]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	e013      	b.n	8002876 <HAL_RCC_OscConfig+0x49e>
 800284e:	2302      	movs	r3, #2
 8002850:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002860:	2302      	movs	r3, #2
 8002862:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002866:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002872:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2202      	movs	r2, #2
 8002878:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800287c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002880:	fa92 f2a2 	rbit	r2, r2
 8002884:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002888:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800288c:	fab2 f282 	clz	r2, r2
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	f042 0220 	orr.w	r2, r2, #32
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f002 021f 	and.w	r2, r2, #31
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f202 	lsl.w	r2, r1, r2
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0af      	beq.n	8002808 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b5a      	ldr	r3, [pc, #360]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	21f8      	movs	r1, #248	; 0xf8
 80028b8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80028c0:	fa91 f1a1 	rbit	r1, r1
 80028c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80028c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028cc:	fab1 f181 	clz	r1, r1
 80028d0:	b2c9      	uxtb	r1, r1
 80028d2:	408b      	lsls	r3, r1
 80028d4:	494f      	ldr	r1, [pc, #316]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
 80028da:	e06a      	b.n	80029b2 <HAL_RCC_OscConfig+0x5da>
 80028dc:	2301      	movs	r3, #1
 80028de:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80028ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	461a      	mov	r2, r3
 8002904:	2300      	movs	r3, #0
 8002906:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe fdd4 	bl	80014b4 <HAL_GetTick>
 800290c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002912:	f7fe fdcf 	bl	80014b4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d902      	bls.n	8002928 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	f000 bc66 	b.w	80031f4 <HAL_RCC_OscConfig+0xe1c>
 8002928:	2302      	movs	r3, #2
 800292a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800293a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d102      	bne.n	8002958 <HAL_RCC_OscConfig+0x580>
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	e013      	b.n	8002980 <HAL_RCC_OscConfig+0x5a8>
 8002958:	2302      	movs	r3, #2
 800295a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002970:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_RCC_OscConfig+0x63c>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2202      	movs	r2, #2
 8002982:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002986:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800298a:	fa92 f2a2 	rbit	r2, r2
 800298e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002992:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002996:	fab2 f282 	clz	r2, r2
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f042 0220 	orr.w	r2, r2, #32
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f002 021f 	and.w	r2, r2, #31
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1af      	bne.n	8002912 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80da 	beq.w	8002b76 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d069      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x6c8>
 80029cc:	2301      	movs	r3, #1
 80029ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80029de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_OscConfig+0x640>)
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	461a      	mov	r2, r3
 80029f2:	2301      	movs	r3, #1
 80029f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fd5d 	bl	80014b4 <HAL_GetTick>
 80029fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	e00d      	b.n	8002a1c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a00:	f7fe fd58 	bl	80014b4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d905      	bls.n	8002a1c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e3ef      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
 8002a14:	40021000 	.word	0x40021000
 8002a18:	10908120 	.word	0x10908120
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a26:	fa93 f2a3 	rbit	r2, r3
 8002a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002a34:	2202      	movs	r2, #2
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	fa93 f2a3 	rbit	r2, r3
 8002a42:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	fa93 f2a3 	rbit	r2, r3
 8002a5a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a60:	4ba4      	ldr	r3, [pc, #656]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a64:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a68:	2102      	movs	r1, #2
 8002a6a:	6019      	str	r1, [r3, #0]
 8002a6c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fa93 f1a3 	rbit	r1, r3
 8002a76:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a7a:	6019      	str	r1, [r3, #0]
  return result;
 8002a7c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0b0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x628>
 8002a9e:	e06a      	b.n	8002b76 <HAL_RCC_OscConfig+0x79e>
 8002aa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ab6:	601a      	str	r2, [r3, #0]
  return result;
 8002ab8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002abc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b8c      	ldr	r3, [pc, #560]	; (8002cf8 <HAL_RCC_OscConfig+0x920>)
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	461a      	mov	r2, r3
 8002ace:	2300      	movs	r3, #0
 8002ad0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fcef 	bl	80014b4 <HAL_GetTick>
 8002ad6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ada:	e009      	b.n	8002af0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe fcea 	bl	80014b4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e381      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
 8002af0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002af4:	2202      	movs	r2, #2
 8002af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	fa93 f2a3 	rbit	r2, r3
 8002b02:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f2a3 	rbit	r2, r3
 8002b1a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b24:	2202      	movs	r2, #2
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	fa93 f2a3 	rbit	r2, r3
 8002b32:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b38:	4b6e      	ldr	r3, [pc, #440]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b40:	2102      	movs	r1, #2
 8002b42:	6019      	str	r1, [r3, #0]
 8002b44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f1a3 	rbit	r1, r3
 8002b4e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b52:	6019      	str	r1, [r3, #0]
  return result;
 8002b54:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1b2      	bne.n	8002adc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8157 	beq.w	8002e34 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d112      	bne.n	8002bbe <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	4b56      	ldr	r3, [pc, #344]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	4a55      	ldr	r2, [pc, #340]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	61d3      	str	r3, [r2, #28]
 8002ba4:	4b53      	ldr	r3, [pc, #332]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f107 030c 	add.w	r3, r7, #12
 8002bb6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <HAL_RCC_OscConfig+0x924>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d11a      	bne.n	8002c00 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bca:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <HAL_RCC_OscConfig+0x924>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_RCC_OscConfig+0x924>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fc6d 	bl	80014b4 <HAL_GetTick>
 8002bda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bde:	e009      	b.n	8002bf4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be0:	f7fe fc68 	bl	80014b4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b64      	cmp	r3, #100	; 0x64
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e2ff      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <HAL_RCC_OscConfig+0x924>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ef      	beq.n	8002be0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d106      	bne.n	8002c18 <HAL_RCC_OscConfig+0x840>
 8002c0a:	4b3a      	ldr	r3, [pc, #232]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a39      	ldr	r2, [pc, #228]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6213      	str	r3, [r2, #32]
 8002c16:	e02f      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a0>
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x864>
 8002c22:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a33      	ldr	r2, [pc, #204]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6213      	str	r3, [r2, #32]
 8002c2e:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a30      	ldr	r2, [pc, #192]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	6213      	str	r3, [r2, #32]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a0>
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x888>
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c4c:	f043 0304 	orr.w	r3, r3, #4
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a0>
 8002c60:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a20      	ldr	r2, [pc, #128]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002c72:	f023 0304 	bic.w	r3, r3, #4
 8002c76:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d06a      	beq.n	8002d58 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fe fc17 	bl	80014b4 <HAL_GetTick>
 8002c86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe fc12 	bl	80014b4 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e2a7      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
 8002ca4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ca8:	2202      	movs	r2, #2
 8002caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cd2:	601a      	str	r2, [r3, #0]
  return result;
 8002cd4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cd8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d108      	bne.n	8002d00 <HAL_RCC_OscConfig+0x928>
 8002cee:	4b01      	ldr	r3, [pc, #4]	; (8002cf4 <HAL_RCC_OscConfig+0x91c>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	e013      	b.n	8002d1c <HAL_RCC_OscConfig+0x944>
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	10908120 	.word	0x10908120
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d04:	2202      	movs	r2, #2
 8002d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f2a3 	rbit	r2, r3
 8002d12:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	4bc0      	ldr	r3, [pc, #768]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d20:	2102      	movs	r1, #2
 8002d22:	6011      	str	r1, [r2, #0]
 8002d24:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	fa92 f1a2 	rbit	r1, r2
 8002d2e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d32:	6011      	str	r1, [r2, #0]
  return result;
 8002d34:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d09a      	beq.n	8002c8c <HAL_RCC_OscConfig+0x8b4>
 8002d56:	e063      	b.n	8002e20 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d58:	f7fe fbac 	bl	80014b4 <HAL_GetTick>
 8002d5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe fba7 	bl	80014b4 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e23c      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
 8002d7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d7e:	2202      	movs	r2, #2
 8002d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d96:	2202      	movs	r2, #2
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	fa93 f2a3 	rbit	r2, r3
 8002da4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002da8:	601a      	str	r2, [r3, #0]
  return result;
 8002daa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002dae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d102      	bne.n	8002dca <HAL_RCC_OscConfig+0x9f2>
 8002dc4:	4b95      	ldr	r3, [pc, #596]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	e00d      	b.n	8002de6 <HAL_RCC_OscConfig+0xa0e>
 8002dca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dce:	2202      	movs	r2, #2
 8002dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	4b8e      	ldr	r3, [pc, #568]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002dea:	2102      	movs	r1, #2
 8002dec:	6011      	str	r1, [r2, #0]
 8002dee:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	fa92 f1a2 	rbit	r1, r2
 8002df8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002dfc:	6011      	str	r1, [r2, #0]
  return result;
 8002dfe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f002 021f 	and.w	r2, r2, #31
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1a0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e20:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b7c      	ldr	r3, [pc, #496]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	4a7b      	ldr	r2, [pc, #492]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 81d9 	beq.w	80031f2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e40:	4b76      	ldr	r3, [pc, #472]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	f000 81a6 	beq.w	800319a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	f040 811e 	bne.w	8003096 <HAL_RCC_OscConfig+0xcbe>
 8002e5a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e72:	601a      	str	r2, [r3, #0]
  return result;
 8002e74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fb10 	bl	80014b4 <HAL_GetTick>
 8002e94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e98:	e009      	b.n	8002eae <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fe fb0b 	bl	80014b4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e1a2      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
 8002eae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002eb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	fa93 f2a3 	rbit	r2, r3
 8002ec2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ec6:	601a      	str	r2, [r3, #0]
  return result;
 8002ec8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ecc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xb10>
 8002ee2:	4b4e      	ldr	r3, [pc, #312]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	e01b      	b.n	8002f20 <HAL_RCC_OscConfig+0xb48>
 8002ee8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fa93 f2a3 	rbit	r2, r3
 8002efc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fa93 f2a3 	rbit	r2, r3
 8002f16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002f24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f28:	6011      	str	r1, [r2, #0]
 8002f2a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	fa92 f1a2 	rbit	r1, r2
 8002f34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f38:	6011      	str	r1, [r2, #0]
  return result;
 8002f3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	fab2 f282 	clz	r2, r2
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f042 0220 	orr.w	r2, r2, #32
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f002 021f 	and.w	r2, r2, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f202 	lsl.w	r2, r1, r2
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d19e      	bne.n	8002e9a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	f023 020f 	bic.w	r2, r3, #15
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	492c      	ldr	r1, [pc, #176]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002f70:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a19      	ldr	r1, [r3, #32]
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	4925      	ldr	r1, [pc, #148]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
 8002f8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fa93 f2a3 	rbit	r2, r3
 8002fa0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fa4:	601a      	str	r2, [r3, #0]
  return result;
 8002fa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002faa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fa77 	bl	80014b4 <HAL_GetTick>
 8002fc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fca:	e009      	b.n	8002fe0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe fa72 	bl	80014b4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e109      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
 8002fe0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ff8:	601a      	str	r2, [r3, #0]
  return result;
 8002ffa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ffe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0xc48>
 8003014:	4b01      	ldr	r3, [pc, #4]	; (800301c <HAL_RCC_OscConfig+0xc44>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	e01e      	b.n	8003058 <HAL_RCC_OscConfig+0xc80>
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	fa93 f2a3 	rbit	r2, r3
 8003034:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800303e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	4b6a      	ldr	r3, [pc, #424]	; (8003200 <HAL_RCC_OscConfig+0xe28>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800305c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003060:	6011      	str	r1, [r2, #0]
 8003062:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	fa92 f1a2 	rbit	r1, r2
 800306c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003070:	6011      	str	r1, [r2, #0]
  return result;
 8003072:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	f042 0220 	orr.w	r2, r2, #32
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f002 021f 	and.w	r2, r2, #31
 8003088:	2101      	movs	r1, #1
 800308a:	fa01 f202 	lsl.w	r2, r1, r2
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d09b      	beq.n	8002fcc <HAL_RCC_OscConfig+0xbf4>
 8003094:	e0ad      	b.n	80031f2 <HAL_RCC_OscConfig+0xe1a>
 8003096:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800309a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030ae:	601a      	str	r2, [r3, #0]
  return result;
 80030b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	461a      	mov	r2, r3
 80030c8:	2300      	movs	r3, #0
 80030ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe f9f2 	bl	80014b4 <HAL_GetTick>
 80030d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d4:	e009      	b.n	80030ea <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe f9ed 	bl	80014b4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e084      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
 80030ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003102:	601a      	str	r2, [r3, #0]
  return result;
 8003104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003108:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_RCC_OscConfig+0xd4c>
 800311e:	4b38      	ldr	r3, [pc, #224]	; (8003200 <HAL_RCC_OscConfig+0xe28>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	e01b      	b.n	800315c <HAL_RCC_OscConfig+0xd84>
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	fa93 f2a3 	rbit	r2, r3
 8003138:	f107 0320 	add.w	r3, r7, #32
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f107 0318 	add.w	r3, r7, #24
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	4b29      	ldr	r3, [pc, #164]	; (8003200 <HAL_RCC_OscConfig+0xe28>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f107 0214 	add.w	r2, r7, #20
 8003160:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	f107 0214 	add.w	r2, r7, #20
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	fa92 f1a2 	rbit	r1, r2
 8003170:	f107 0210 	add.w	r2, r7, #16
 8003174:	6011      	str	r1, [r2, #0]
  return result;
 8003176:	f107 0210 	add.w	r2, r7, #16
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	fab2 f282 	clz	r2, r2
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f042 0220 	orr.w	r2, r2, #32
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f002 021f 	and.w	r2, r2, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d19e      	bne.n	80030d6 <HAL_RCC_OscConfig+0xcfe>
 8003198:	e02b      	b.n	80031f2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e025      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <HAL_RCC_OscConfig+0xe28>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_RCC_OscConfig+0xe28>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80031bc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d111      	bne.n	80031ee <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80031ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031d8:	429a      	cmp	r2, r3
 80031da:	d108      	bne.n	80031ee <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80031dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000

08003204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b09e      	sub	sp, #120	; 0x78
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e162      	b.n	80034e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b90      	ldr	r3, [pc, #576]	; (8003460 <HAL_RCC_ClockConfig+0x25c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d910      	bls.n	800324c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b8d      	ldr	r3, [pc, #564]	; (8003460 <HAL_RCC_ClockConfig+0x25c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0207 	bic.w	r2, r3, #7
 8003232:	498b      	ldr	r1, [pc, #556]	; (8003460 <HAL_RCC_ClockConfig+0x25c>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCC_ClockConfig+0x25c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e14a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b82      	ldr	r3, [pc, #520]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	497f      	ldr	r1, [pc, #508]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80dc 	beq.w	8003430 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d13c      	bne.n	80032fa <HAL_RCC_ClockConfig+0xf6>
 8003280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003284:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d102      	bne.n	80032aa <HAL_RCC_ClockConfig+0xa6>
 80032a4:	4b6f      	ldr	r3, [pc, #444]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	e00f      	b.n	80032ca <HAL_RCC_ClockConfig+0xc6>
 80032aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	667b      	str	r3, [r7, #100]	; 0x64
 80032b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032bc:	663b      	str	r3, [r7, #96]	; 0x60
 80032be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032c6:	4b67      	ldr	r3, [pc, #412]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80032d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032d2:	fa92 f2a2 	rbit	r2, r2
 80032d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032da:	fab2 f282 	clz	r2, r2
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f042 0220 	orr.w	r2, r2, #32
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	f002 021f 	and.w	r2, r2, #31
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f202 	lsl.w	r2, r1, r2
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d17b      	bne.n	80033ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0f3      	b.n	80034e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d13c      	bne.n	800337c <HAL_RCC_ClockConfig+0x178>
 8003302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003306:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <HAL_RCC_ClockConfig+0x128>
 8003326:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	e00f      	b.n	800334c <HAL_RCC_ClockConfig+0x148>
 800332c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003330:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	647b      	str	r3, [r7, #68]	; 0x44
 800333a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333e:	643b      	str	r3, [r7, #64]	; 0x40
 8003340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003348:	4b46      	ldr	r3, [pc, #280]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003350:	63ba      	str	r2, [r7, #56]	; 0x38
 8003352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003354:	fa92 f2a2 	rbit	r2, r2
 8003358:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800335a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f042 0220 	orr.w	r2, r2, #32
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d13a      	bne.n	80033ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0b2      	b.n	80034e2 <HAL_RCC_ClockConfig+0x2de>
 800337c:	2302      	movs	r3, #2
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d102      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x1a0>
 800339e:	4b31      	ldr	r3, [pc, #196]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	e00d      	b.n	80033c0 <HAL_RCC_ClockConfig+0x1bc>
 80033a4:	2302      	movs	r3, #2
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
 80033b0:	2302      	movs	r3, #2
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	2202      	movs	r2, #2
 80033c2:	61ba      	str	r2, [r7, #24]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	fa92 f2a2 	rbit	r2, r2
 80033ca:	617a      	str	r2, [r7, #20]
  return result;
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	fab2 f282 	clz	r2, r2
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	f042 0220 	orr.w	r2, r2, #32
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f002 021f 	and.w	r2, r2, #31
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f202 	lsl.w	r2, r1, r2
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e079      	b.n	80034e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	491a      	ldr	r1, [pc, #104]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003400:	f7fe f858 	bl	80014b4 <HAL_GetTick>
 8003404:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7fe f854 	bl	80014b4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e061      	b.n	80034e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_ClockConfig+0x260>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 020c 	and.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1eb      	bne.n	8003408 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_ClockConfig+0x25c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d214      	bcs.n	8003468 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HAL_RCC_ClockConfig+0x25c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 0207 	bic.w	r2, r3, #7
 8003446:	4906      	ldr	r1, [pc, #24]	; (8003460 <HAL_RCC_ClockConfig+0x25c>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <HAL_RCC_ClockConfig+0x25c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e040      	b.n	80034e2 <HAL_RCC_ClockConfig+0x2de>
 8003460:	40022000 	.word	0x40022000
 8003464:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_RCC_ClockConfig+0x2e8>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	491a      	ldr	r1, [pc, #104]	; (80034ec <HAL_RCC_ClockConfig+0x2e8>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <HAL_RCC_ClockConfig+0x2e8>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4912      	ldr	r1, [pc, #72]	; (80034ec <HAL_RCC_ClockConfig+0x2e8>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034a6:	f000 f829 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 80034aa:	4601      	mov	r1, r0
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <HAL_RCC_ClockConfig+0x2e8>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b4:	22f0      	movs	r2, #240	; 0xf0
 80034b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	fa92 f2a2 	rbit	r2, r2
 80034be:	60fa      	str	r2, [r7, #12]
  return result;
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	fab2 f282 	clz	r2, r2
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	40d3      	lsrs	r3, r2
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x2ec>)
 80034cc:	5cd3      	ldrb	r3, [r2, r3]
 80034ce:	fa21 f303 	lsr.w	r3, r1, r3
 80034d2:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <HAL_RCC_ClockConfig+0x2f0>)
 80034d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_RCC_ClockConfig+0x2f4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd ffa6 	bl	800142c <HAL_InitTick>
  
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3778      	adds	r7, #120	; 0x78
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08004bf4 	.word	0x08004bf4
 80034f4:	20000000 	.word	0x20000000
 80034f8:	20000004 	.word	0x20000004

080034fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b08b      	sub	sp, #44	; 0x2c
 8003500:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b04      	cmp	r3, #4
 8003524:	d002      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x30>
 8003526:	2b08      	cmp	r3, #8
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x36>
 800352a:	e03f      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800352e:	623b      	str	r3, [r7, #32]
      break;
 8003530:	e03f      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003538:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800353c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	607a      	str	r2, [r7, #4]
  return result;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	220f      	movs	r2, #15
 8003560:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	fa92 f2a2 	rbit	r2, r2
 8003568:	60fa      	str	r2, [r7, #12]
  return result;
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	fab2 f282 	clz	r2, r2
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	40d3      	lsrs	r3, r2
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003576:	5cd3      	ldrb	r3, [r2, r3]
 8003578:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003584:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	fbb2 f2f3 	udiv	r2, r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
 8003594:	e007      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003596:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	fbb2 f2f3 	udiv	r2, r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	623b      	str	r3, [r7, #32]
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035ae:	623b      	str	r3, [r7, #32]
      break;
 80035b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b2:	6a3b      	ldr	r3, [r7, #32]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	372c      	adds	r7, #44	; 0x2c
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40021000 	.word	0x40021000
 80035c4:	007a1200 	.word	0x007a1200
 80035c8:	08004c0c 	.word	0x08004c0c
 80035cc:	08004c1c 	.word	0x08004c1c

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035ee:	f7ff ffef 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f2:	4601      	mov	r1, r0
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003600:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	fa92 f2a2 	rbit	r2, r2
 8003608:	603a      	str	r2, [r7, #0]
  return result;
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	fab2 f282 	clz	r2, r2
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	40d3      	lsrs	r3, r2
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	08004c04 	.word	0x08004c04

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003632:	f7ff ffcd 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003636:	4601      	mov	r1, r0
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003640:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003644:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	fa92 f2a2 	rbit	r2, r2
 800364c:	603a      	str	r2, [r7, #0]
  return result;
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	fab2 f282 	clz	r2, r2
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	40d3      	lsrs	r3, r2
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <HAL_RCC_GetPCLK2Freq+0x40>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	08004c04 	.word	0x08004c04

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b092      	sub	sp, #72	; 0x48
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003680:	2300      	movs	r3, #0
 8003682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80d4 	beq.w	800383c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003694:	4b4e      	ldr	r3, [pc, #312]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10e      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a0:	4b4b      	ldr	r3, [pc, #300]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	4a4a      	ldr	r2, [pc, #296]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036aa:	61d3      	str	r3, [r2, #28]
 80036ac:	4b48      	ldr	r3, [pc, #288]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036be:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ca:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a41      	ldr	r2, [pc, #260]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fd feed 	bl	80014b4 <HAL_GetTick>
 80036da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	e008      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7fd fee9 	bl	80014b4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b64      	cmp	r3, #100	; 0x64
 80036ea:	d901      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e1d6      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f0:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036fc:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8084 	beq.w	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003718:	429a      	cmp	r2, r3
 800371a:	d07c      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800371c:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	461a      	mov	r2, r3
 8003746:	2301      	movs	r3, #1
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800374e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	461a      	mov	r2, r3
 800376a:	2300      	movs	r3, #0
 800376c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d04b      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fd fe99 	bl	80014b4 <HAL_GetTick>
 8003782:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fe95 	bl	80014b4 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e180      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800379c:	2302      	movs	r3, #2
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
 80037a8:	2302      	movs	r3, #2
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	61fb      	str	r3, [r7, #28]
  return result;
 80037b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d108      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037ca:	4b01      	ldr	r3, [pc, #4]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	e00d      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40007000 	.word	0x40007000
 80037d8:	10908100 	.word	0x10908100
 80037dc:	2302      	movs	r3, #2
 80037de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	4ba0      	ldr	r3, [pc, #640]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2202      	movs	r2, #2
 80037ee:	613a      	str	r2, [r7, #16]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	fa92 f2a2 	rbit	r2, r2
 80037f6:	60fa      	str	r2, [r7, #12]
  return result;
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	fab2 f282 	clz	r2, r2
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	f002 021f 	and.w	r2, r2, #31
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f202 	lsl.w	r2, r1, r2
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0b7      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003816:	4b95      	ldr	r3, [pc, #596]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4992      	ldr	r1, [pc, #584]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003824:	4313      	orrs	r3, r2
 8003826:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003828:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003830:	4b8e      	ldr	r3, [pc, #568]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	4a8d      	ldr	r2, [pc, #564]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003848:	4b88      	ldr	r3, [pc, #544]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f023 0203 	bic.w	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4985      	ldr	r1, [pc, #532]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003866:	4b81      	ldr	r3, [pc, #516]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	497e      	ldr	r1, [pc, #504]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003884:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	4976      	ldr	r1, [pc, #472]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038a2:	4b72      	ldr	r3, [pc, #456]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f023 0210 	bic.w	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	496f      	ldr	r1, [pc, #444]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	4967      	ldr	r1, [pc, #412]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038de:	4b63      	ldr	r3, [pc, #396]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f023 0220 	bic.w	r2, r3, #32
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	4960      	ldr	r1, [pc, #384]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038fc:	4b5b      	ldr	r3, [pc, #364]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	4958      	ldr	r1, [pc, #352]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800391a:	4b54      	ldr	r3, [pc, #336]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4951      	ldr	r1, [pc, #324]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003938:	4b4c      	ldr	r3, [pc, #304]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	4949      	ldr	r1, [pc, #292]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003956:	4b45      	ldr	r3, [pc, #276]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4942      	ldr	r1, [pc, #264]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003974:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	493a      	ldr	r1, [pc, #232]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003992:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	4933      	ldr	r1, [pc, #204]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039b0:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	492b      	ldr	r1, [pc, #172]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80039ce:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	4924      	ldr	r1, [pc, #144]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80039ec:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	491c      	ldr	r1, [pc, #112]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003a0a:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	4915      	ldr	r1, [pc, #84]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	490d      	ldr	r1, [pc, #52]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a52:	4906      	ldr	r1, [pc, #24]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00c      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003a64:	4b01      	ldr	r3, [pc, #4]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	e002      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	490b      	ldr	r1, [pc, #44]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	4904      	ldr	r1, [pc, #16]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3748      	adds	r7, #72	; 0x48
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000

08003aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e040      	b.n	8003b40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fbb6 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8c0 	bl	8003c70 <UART_SetConfig>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e022      	b.n	8003b40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa8a 	bl	800401c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fb11 	bl	8004160 <UART_CheckIdleState>
 8003b3e:	4603      	mov	r3, r0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	; 0x28
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	f040 8082 	bne.w	8003c66 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_UART_Transmit+0x26>
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e07a      	b.n	8003c68 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_UART_Transmit+0x38>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e073      	b.n	8003c68 <HAL_UART_Transmit+0x120>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2221      	movs	r2, #33	; 0x21
 8003b94:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b96:	f7fd fc8d 	bl	80014b4 <HAL_GetTick>
 8003b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	88fa      	ldrh	r2, [r7, #6]
 8003ba0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	88fa      	ldrh	r2, [r7, #6]
 8003ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb4:	d108      	bne.n	8003bc8 <HAL_UART_Transmit+0x80>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	e003      	b.n	8003bd0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003bd8:	e02d      	b.n	8003c36 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fb04 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e039      	b.n	8003c68 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c06:	b292      	uxth	r2, r2
 8003c08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	e008      	b.n	8003c24 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3301      	adds	r3, #1
 8003c22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1cb      	bne.n	8003bda <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2140      	movs	r1, #64	; 0x40
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fad0 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e005      	b.n	8003c68 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4bab      	ldr	r3, [pc, #684]	; (8003f48 <UART_SetConfig+0x2d8>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	6979      	ldr	r1, [r7, #20]
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a99      	ldr	r2, [pc, #612]	; (8003f4c <UART_SetConfig+0x2dc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d120      	bne.n	8003d2e <UART_SetConfig+0xbe>
 8003cec:	4b98      	ldr	r3, [pc, #608]	; (8003f50 <UART_SetConfig+0x2e0>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d817      	bhi.n	8003d28 <UART_SetConfig+0xb8>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <UART_SetConfig+0x90>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d11 	.word	0x08003d11
 8003d04:	08003d1d 	.word	0x08003d1d
 8003d08:	08003d23 	.word	0x08003d23
 8003d0c:	08003d17 	.word	0x08003d17
 8003d10:	2301      	movs	r3, #1
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e0b5      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d16:	2302      	movs	r3, #2
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e0b2      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e0af      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d22:	2308      	movs	r3, #8
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e0ac      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e0a9      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a88      	ldr	r2, [pc, #544]	; (8003f54 <UART_SetConfig+0x2e4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d124      	bne.n	8003d82 <UART_SetConfig+0x112>
 8003d38:	4b85      	ldr	r3, [pc, #532]	; (8003f50 <UART_SetConfig+0x2e0>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d44:	d011      	beq.n	8003d6a <UART_SetConfig+0xfa>
 8003d46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d4a:	d817      	bhi.n	8003d7c <UART_SetConfig+0x10c>
 8003d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d50:	d011      	beq.n	8003d76 <UART_SetConfig+0x106>
 8003d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d56:	d811      	bhi.n	8003d7c <UART_SetConfig+0x10c>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <UART_SetConfig+0xf4>
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d006      	beq.n	8003d70 <UART_SetConfig+0x100>
 8003d62:	e00b      	b.n	8003d7c <UART_SetConfig+0x10c>
 8003d64:	2300      	movs	r3, #0
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e08b      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e088      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d70:	2304      	movs	r3, #4
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e085      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d76:	2308      	movs	r3, #8
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e082      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e07f      	b.n	8003e82 <UART_SetConfig+0x212>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a74      	ldr	r2, [pc, #464]	; (8003f58 <UART_SetConfig+0x2e8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d124      	bne.n	8003dd6 <UART_SetConfig+0x166>
 8003d8c:	4b70      	ldr	r3, [pc, #448]	; (8003f50 <UART_SetConfig+0x2e0>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003d94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d98:	d011      	beq.n	8003dbe <UART_SetConfig+0x14e>
 8003d9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d9e:	d817      	bhi.n	8003dd0 <UART_SetConfig+0x160>
 8003da0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003da4:	d011      	beq.n	8003dca <UART_SetConfig+0x15a>
 8003da6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003daa:	d811      	bhi.n	8003dd0 <UART_SetConfig+0x160>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <UART_SetConfig+0x148>
 8003db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003db4:	d006      	beq.n	8003dc4 <UART_SetConfig+0x154>
 8003db6:	e00b      	b.n	8003dd0 <UART_SetConfig+0x160>
 8003db8:	2300      	movs	r3, #0
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e061      	b.n	8003e82 <UART_SetConfig+0x212>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e05e      	b.n	8003e82 <UART_SetConfig+0x212>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e05b      	b.n	8003e82 <UART_SetConfig+0x212>
 8003dca:	2308      	movs	r3, #8
 8003dcc:	77fb      	strb	r3, [r7, #31]
 8003dce:	e058      	b.n	8003e82 <UART_SetConfig+0x212>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e055      	b.n	8003e82 <UART_SetConfig+0x212>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a60      	ldr	r2, [pc, #384]	; (8003f5c <UART_SetConfig+0x2ec>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d124      	bne.n	8003e2a <UART_SetConfig+0x1ba>
 8003de0:	4b5b      	ldr	r3, [pc, #364]	; (8003f50 <UART_SetConfig+0x2e0>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003de8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dec:	d011      	beq.n	8003e12 <UART_SetConfig+0x1a2>
 8003dee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003df2:	d817      	bhi.n	8003e24 <UART_SetConfig+0x1b4>
 8003df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003df8:	d011      	beq.n	8003e1e <UART_SetConfig+0x1ae>
 8003dfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dfe:	d811      	bhi.n	8003e24 <UART_SetConfig+0x1b4>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <UART_SetConfig+0x19c>
 8003e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e08:	d006      	beq.n	8003e18 <UART_SetConfig+0x1a8>
 8003e0a:	e00b      	b.n	8003e24 <UART_SetConfig+0x1b4>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e037      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e12:	2302      	movs	r3, #2
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e034      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e031      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e1e:	2308      	movs	r3, #8
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e02e      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e24:	2310      	movs	r3, #16
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e02b      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a4c      	ldr	r2, [pc, #304]	; (8003f60 <UART_SetConfig+0x2f0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d124      	bne.n	8003e7e <UART_SetConfig+0x20e>
 8003e34:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <UART_SetConfig+0x2e0>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003e3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e40:	d011      	beq.n	8003e66 <UART_SetConfig+0x1f6>
 8003e42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e46:	d817      	bhi.n	8003e78 <UART_SetConfig+0x208>
 8003e48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e4c:	d011      	beq.n	8003e72 <UART_SetConfig+0x202>
 8003e4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e52:	d811      	bhi.n	8003e78 <UART_SetConfig+0x208>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <UART_SetConfig+0x1f0>
 8003e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5c:	d006      	beq.n	8003e6c <UART_SetConfig+0x1fc>
 8003e5e:	e00b      	b.n	8003e78 <UART_SetConfig+0x208>
 8003e60:	2300      	movs	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e00d      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e66:	2302      	movs	r3, #2
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e00a      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e007      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e72:	2308      	movs	r3, #8
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e004      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e001      	b.n	8003e82 <UART_SetConfig+0x212>
 8003e7e:	2310      	movs	r3, #16
 8003e80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8a:	d16d      	bne.n	8003f68 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003e8c:	7ffb      	ldrb	r3, [r7, #31]
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d827      	bhi.n	8003ee2 <UART_SetConfig+0x272>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0x228>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	08003ee3 	.word	0x08003ee3
 8003ea8:	08003ed3 	.word	0x08003ed3
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003ee3 	.word	0x08003ee3
 8003eb8:	08003edb 	.word	0x08003edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7ff fb94 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	61b8      	str	r0, [r7, #24]
        break;
 8003ec2:	e013      	b.n	8003eec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7ff fbb2 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8003ec8:	61b8      	str	r0, [r7, #24]
        break;
 8003eca:	e00f      	b.n	8003eec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <UART_SetConfig+0x2f4>)
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e00c      	b.n	8003eec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed2:	f7ff fb13 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 8003ed6:	61b8      	str	r0, [r7, #24]
        break;
 8003ed8:	e008      	b.n	8003eec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ede:	61bb      	str	r3, [r7, #24]
        break;
 8003ee0:	e004      	b.n	8003eec <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8086 	beq.w	8004000 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	005a      	lsls	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	441a      	add	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	d916      	bls.n	8003f40 <UART_SetConfig+0x2d0>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f18:	d212      	bcs.n	8003f40 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f023 030f 	bic.w	r3, r3, #15
 8003f22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	89fb      	ldrh	r3, [r7, #14]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	89fa      	ldrh	r2, [r7, #14]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	e05f      	b.n	8004000 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	77bb      	strb	r3, [r7, #30]
 8003f44:	e05c      	b.n	8004000 <UART_SetConfig+0x390>
 8003f46:	bf00      	nop
 8003f48:	efff69f3 	.word	0xefff69f3
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40004400 	.word	0x40004400
 8003f58:	40004800 	.word	0x40004800
 8003f5c:	40004c00 	.word	0x40004c00
 8003f60:	40005000 	.word	0x40005000
 8003f64:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f68:	7ffb      	ldrb	r3, [r7, #31]
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d827      	bhi.n	8003fbe <UART_SetConfig+0x34e>
 8003f6e:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0x304>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	08003fbf 	.word	0x08003fbf
 8003f84:	08003faf 	.word	0x08003faf
 8003f88:	08003fbf 	.word	0x08003fbf
 8003f8c:	08003fbf 	.word	0x08003fbf
 8003f90:	08003fbf 	.word	0x08003fbf
 8003f94:	08003fb7 	.word	0x08003fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f98:	f7ff fb26 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	61b8      	str	r0, [r7, #24]
        break;
 8003f9e:	e013      	b.n	8003fc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa0:	f7ff fb44 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8003fa4:	61b8      	str	r0, [r7, #24]
        break;
 8003fa6:	e00f      	b.n	8003fc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <UART_SetConfig+0x3a8>)
 8003faa:	61bb      	str	r3, [r7, #24]
        break;
 8003fac:	e00c      	b.n	8003fc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fae:	f7ff faa5 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 8003fb2:	61b8      	str	r0, [r7, #24]
        break;
 8003fb4:	e008      	b.n	8003fc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fba:	61bb      	str	r3, [r7, #24]
        break;
 8003fbc:	e004      	b.n	8003fc8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	77bb      	strb	r3, [r7, #30]
        break;
 8003fc6:	bf00      	nop
    }

    if (pclk != 0U)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d018      	beq.n	8004000 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	085a      	lsrs	r2, r3, #1
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	441a      	add	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b0f      	cmp	r3, #15
 8003fe8:	d908      	bls.n	8003ffc <UART_SetConfig+0x38c>
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff0:	d204      	bcs.n	8003ffc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	e001      	b.n	8004000 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800400c:	7fbb      	ldrb	r3, [r7, #30]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	007a1200 	.word	0x007a1200

0800401c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01a      	beq.n	8004132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800411a:	d10a      	bne.n	8004132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	605a      	str	r2, [r3, #4]
  }
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af02      	add	r7, sp, #8
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004170:	f7fd f9a0 	bl	80014b4 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b08      	cmp	r3, #8
 8004182:	d10e      	bne.n	80041a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f82d 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e023      	b.n	80041ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d10e      	bne.n	80041ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f817 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e00d      	b.n	80041ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004202:	e05e      	b.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d05a      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420c:	f7fd f952 	bl	80014b4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <UART_WaitOnFlagUntilTimeout+0x30>
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d11b      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004230:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e043      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d02c      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d124      	bne.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004280:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004290:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e00f      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d091      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <__errno>:
 80042ec:	4b01      	ldr	r3, [pc, #4]	; (80042f4 <__errno+0x8>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	2000000c 	.word	0x2000000c

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4d0d      	ldr	r5, [pc, #52]	; (8004330 <__libc_init_array+0x38>)
 80042fc:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	2600      	movs	r6, #0
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	4d0b      	ldr	r5, [pc, #44]	; (8004338 <__libc_init_array+0x40>)
 800430a:	4c0c      	ldr	r4, [pc, #48]	; (800433c <__libc_init_array+0x44>)
 800430c:	f000 fc4e 	bl	8004bac <_init>
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	2600      	movs	r6, #0
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	08004c60 	.word	0x08004c60
 8004334:	08004c60 	.word	0x08004c60
 8004338:	08004c60 	.word	0x08004c60
 800433c:	08004c64 	.word	0x08004c64

08004340 <memset>:
 8004340:	4402      	add	r2, r0
 8004342:	4603      	mov	r3, r0
 8004344:	4293      	cmp	r3, r2
 8004346:	d100      	bne.n	800434a <memset+0xa>
 8004348:	4770      	bx	lr
 800434a:	f803 1b01 	strb.w	r1, [r3], #1
 800434e:	e7f9      	b.n	8004344 <memset+0x4>

08004350 <siprintf>:
 8004350:	b40e      	push	{r1, r2, r3}
 8004352:	b500      	push	{lr}
 8004354:	b09c      	sub	sp, #112	; 0x70
 8004356:	ab1d      	add	r3, sp, #116	; 0x74
 8004358:	9002      	str	r0, [sp, #8]
 800435a:	9006      	str	r0, [sp, #24]
 800435c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004360:	4809      	ldr	r0, [pc, #36]	; (8004388 <siprintf+0x38>)
 8004362:	9107      	str	r1, [sp, #28]
 8004364:	9104      	str	r1, [sp, #16]
 8004366:	4909      	ldr	r1, [pc, #36]	; (800438c <siprintf+0x3c>)
 8004368:	f853 2b04 	ldr.w	r2, [r3], #4
 800436c:	9105      	str	r1, [sp, #20]
 800436e:	6800      	ldr	r0, [r0, #0]
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	a902      	add	r1, sp, #8
 8004374:	f000 f868 	bl	8004448 <_svfiprintf_r>
 8004378:	9b02      	ldr	r3, [sp, #8]
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	b01c      	add	sp, #112	; 0x70
 8004380:	f85d eb04 	ldr.w	lr, [sp], #4
 8004384:	b003      	add	sp, #12
 8004386:	4770      	bx	lr
 8004388:	2000000c 	.word	0x2000000c
 800438c:	ffff0208 	.word	0xffff0208

08004390 <__ssputs_r>:
 8004390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004394:	688e      	ldr	r6, [r1, #8]
 8004396:	429e      	cmp	r6, r3
 8004398:	4682      	mov	sl, r0
 800439a:	460c      	mov	r4, r1
 800439c:	4690      	mov	r8, r2
 800439e:	461f      	mov	r7, r3
 80043a0:	d838      	bhi.n	8004414 <__ssputs_r+0x84>
 80043a2:	898a      	ldrh	r2, [r1, #12]
 80043a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043a8:	d032      	beq.n	8004410 <__ssputs_r+0x80>
 80043aa:	6825      	ldr	r5, [r4, #0]
 80043ac:	6909      	ldr	r1, [r1, #16]
 80043ae:	eba5 0901 	sub.w	r9, r5, r1
 80043b2:	6965      	ldr	r5, [r4, #20]
 80043b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043bc:	3301      	adds	r3, #1
 80043be:	444b      	add	r3, r9
 80043c0:	106d      	asrs	r5, r5, #1
 80043c2:	429d      	cmp	r5, r3
 80043c4:	bf38      	it	cc
 80043c6:	461d      	movcc	r5, r3
 80043c8:	0553      	lsls	r3, r2, #21
 80043ca:	d531      	bpl.n	8004430 <__ssputs_r+0xa0>
 80043cc:	4629      	mov	r1, r5
 80043ce:	f000 fb47 	bl	8004a60 <_malloc_r>
 80043d2:	4606      	mov	r6, r0
 80043d4:	b950      	cbnz	r0, 80043ec <__ssputs_r+0x5c>
 80043d6:	230c      	movs	r3, #12
 80043d8:	f8ca 3000 	str.w	r3, [sl]
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ec:	6921      	ldr	r1, [r4, #16]
 80043ee:	464a      	mov	r2, r9
 80043f0:	f000 fabe 	bl	8004970 <memcpy>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	6126      	str	r6, [r4, #16]
 8004402:	6165      	str	r5, [r4, #20]
 8004404:	444e      	add	r6, r9
 8004406:	eba5 0509 	sub.w	r5, r5, r9
 800440a:	6026      	str	r6, [r4, #0]
 800440c:	60a5      	str	r5, [r4, #8]
 800440e:	463e      	mov	r6, r7
 8004410:	42be      	cmp	r6, r7
 8004412:	d900      	bls.n	8004416 <__ssputs_r+0x86>
 8004414:	463e      	mov	r6, r7
 8004416:	4632      	mov	r2, r6
 8004418:	6820      	ldr	r0, [r4, #0]
 800441a:	4641      	mov	r1, r8
 800441c:	f000 fab6 	bl	800498c <memmove>
 8004420:	68a3      	ldr	r3, [r4, #8]
 8004422:	6822      	ldr	r2, [r4, #0]
 8004424:	1b9b      	subs	r3, r3, r6
 8004426:	4432      	add	r2, r6
 8004428:	60a3      	str	r3, [r4, #8]
 800442a:	6022      	str	r2, [r4, #0]
 800442c:	2000      	movs	r0, #0
 800442e:	e7db      	b.n	80043e8 <__ssputs_r+0x58>
 8004430:	462a      	mov	r2, r5
 8004432:	f000 fb6f 	bl	8004b14 <_realloc_r>
 8004436:	4606      	mov	r6, r0
 8004438:	2800      	cmp	r0, #0
 800443a:	d1e1      	bne.n	8004400 <__ssputs_r+0x70>
 800443c:	6921      	ldr	r1, [r4, #16]
 800443e:	4650      	mov	r0, sl
 8004440:	f000 fabe 	bl	80049c0 <_free_r>
 8004444:	e7c7      	b.n	80043d6 <__ssputs_r+0x46>
	...

08004448 <_svfiprintf_r>:
 8004448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444c:	4698      	mov	r8, r3
 800444e:	898b      	ldrh	r3, [r1, #12]
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	b09d      	sub	sp, #116	; 0x74
 8004454:	4607      	mov	r7, r0
 8004456:	460d      	mov	r5, r1
 8004458:	4614      	mov	r4, r2
 800445a:	d50e      	bpl.n	800447a <_svfiprintf_r+0x32>
 800445c:	690b      	ldr	r3, [r1, #16]
 800445e:	b963      	cbnz	r3, 800447a <_svfiprintf_r+0x32>
 8004460:	2140      	movs	r1, #64	; 0x40
 8004462:	f000 fafd 	bl	8004a60 <_malloc_r>
 8004466:	6028      	str	r0, [r5, #0]
 8004468:	6128      	str	r0, [r5, #16]
 800446a:	b920      	cbnz	r0, 8004476 <_svfiprintf_r+0x2e>
 800446c:	230c      	movs	r3, #12
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	e0d1      	b.n	800461a <_svfiprintf_r+0x1d2>
 8004476:	2340      	movs	r3, #64	; 0x40
 8004478:	616b      	str	r3, [r5, #20]
 800447a:	2300      	movs	r3, #0
 800447c:	9309      	str	r3, [sp, #36]	; 0x24
 800447e:	2320      	movs	r3, #32
 8004480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004484:	f8cd 800c 	str.w	r8, [sp, #12]
 8004488:	2330      	movs	r3, #48	; 0x30
 800448a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004634 <_svfiprintf_r+0x1ec>
 800448e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004492:	f04f 0901 	mov.w	r9, #1
 8004496:	4623      	mov	r3, r4
 8004498:	469a      	mov	sl, r3
 800449a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800449e:	b10a      	cbz	r2, 80044a4 <_svfiprintf_r+0x5c>
 80044a0:	2a25      	cmp	r2, #37	; 0x25
 80044a2:	d1f9      	bne.n	8004498 <_svfiprintf_r+0x50>
 80044a4:	ebba 0b04 	subs.w	fp, sl, r4
 80044a8:	d00b      	beq.n	80044c2 <_svfiprintf_r+0x7a>
 80044aa:	465b      	mov	r3, fp
 80044ac:	4622      	mov	r2, r4
 80044ae:	4629      	mov	r1, r5
 80044b0:	4638      	mov	r0, r7
 80044b2:	f7ff ff6d 	bl	8004390 <__ssputs_r>
 80044b6:	3001      	adds	r0, #1
 80044b8:	f000 80aa 	beq.w	8004610 <_svfiprintf_r+0x1c8>
 80044bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044be:	445a      	add	r2, fp
 80044c0:	9209      	str	r2, [sp, #36]	; 0x24
 80044c2:	f89a 3000 	ldrb.w	r3, [sl]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80a2 	beq.w	8004610 <_svfiprintf_r+0x1c8>
 80044cc:	2300      	movs	r3, #0
 80044ce:	f04f 32ff 	mov.w	r2, #4294967295
 80044d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044d6:	f10a 0a01 	add.w	sl, sl, #1
 80044da:	9304      	str	r3, [sp, #16]
 80044dc:	9307      	str	r3, [sp, #28]
 80044de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044e2:	931a      	str	r3, [sp, #104]	; 0x68
 80044e4:	4654      	mov	r4, sl
 80044e6:	2205      	movs	r2, #5
 80044e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ec:	4851      	ldr	r0, [pc, #324]	; (8004634 <_svfiprintf_r+0x1ec>)
 80044ee:	f7fb fe7f 	bl	80001f0 <memchr>
 80044f2:	9a04      	ldr	r2, [sp, #16]
 80044f4:	b9d8      	cbnz	r0, 800452e <_svfiprintf_r+0xe6>
 80044f6:	06d0      	lsls	r0, r2, #27
 80044f8:	bf44      	itt	mi
 80044fa:	2320      	movmi	r3, #32
 80044fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004500:	0711      	lsls	r1, r2, #28
 8004502:	bf44      	itt	mi
 8004504:	232b      	movmi	r3, #43	; 0x2b
 8004506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800450a:	f89a 3000 	ldrb.w	r3, [sl]
 800450e:	2b2a      	cmp	r3, #42	; 0x2a
 8004510:	d015      	beq.n	800453e <_svfiprintf_r+0xf6>
 8004512:	9a07      	ldr	r2, [sp, #28]
 8004514:	4654      	mov	r4, sl
 8004516:	2000      	movs	r0, #0
 8004518:	f04f 0c0a 	mov.w	ip, #10
 800451c:	4621      	mov	r1, r4
 800451e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004522:	3b30      	subs	r3, #48	; 0x30
 8004524:	2b09      	cmp	r3, #9
 8004526:	d94e      	bls.n	80045c6 <_svfiprintf_r+0x17e>
 8004528:	b1b0      	cbz	r0, 8004558 <_svfiprintf_r+0x110>
 800452a:	9207      	str	r2, [sp, #28]
 800452c:	e014      	b.n	8004558 <_svfiprintf_r+0x110>
 800452e:	eba0 0308 	sub.w	r3, r0, r8
 8004532:	fa09 f303 	lsl.w	r3, r9, r3
 8004536:	4313      	orrs	r3, r2
 8004538:	9304      	str	r3, [sp, #16]
 800453a:	46a2      	mov	sl, r4
 800453c:	e7d2      	b.n	80044e4 <_svfiprintf_r+0x9c>
 800453e:	9b03      	ldr	r3, [sp, #12]
 8004540:	1d19      	adds	r1, r3, #4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	9103      	str	r1, [sp, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	bfbb      	ittet	lt
 800454a:	425b      	neglt	r3, r3
 800454c:	f042 0202 	orrlt.w	r2, r2, #2
 8004550:	9307      	strge	r3, [sp, #28]
 8004552:	9307      	strlt	r3, [sp, #28]
 8004554:	bfb8      	it	lt
 8004556:	9204      	strlt	r2, [sp, #16]
 8004558:	7823      	ldrb	r3, [r4, #0]
 800455a:	2b2e      	cmp	r3, #46	; 0x2e
 800455c:	d10c      	bne.n	8004578 <_svfiprintf_r+0x130>
 800455e:	7863      	ldrb	r3, [r4, #1]
 8004560:	2b2a      	cmp	r3, #42	; 0x2a
 8004562:	d135      	bne.n	80045d0 <_svfiprintf_r+0x188>
 8004564:	9b03      	ldr	r3, [sp, #12]
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	9203      	str	r2, [sp, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	bfb8      	it	lt
 8004570:	f04f 33ff 	movlt.w	r3, #4294967295
 8004574:	3402      	adds	r4, #2
 8004576:	9305      	str	r3, [sp, #20]
 8004578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004644 <_svfiprintf_r+0x1fc>
 800457c:	7821      	ldrb	r1, [r4, #0]
 800457e:	2203      	movs	r2, #3
 8004580:	4650      	mov	r0, sl
 8004582:	f7fb fe35 	bl	80001f0 <memchr>
 8004586:	b140      	cbz	r0, 800459a <_svfiprintf_r+0x152>
 8004588:	2340      	movs	r3, #64	; 0x40
 800458a:	eba0 000a 	sub.w	r0, r0, sl
 800458e:	fa03 f000 	lsl.w	r0, r3, r0
 8004592:	9b04      	ldr	r3, [sp, #16]
 8004594:	4303      	orrs	r3, r0
 8004596:	3401      	adds	r4, #1
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459e:	4826      	ldr	r0, [pc, #152]	; (8004638 <_svfiprintf_r+0x1f0>)
 80045a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045a4:	2206      	movs	r2, #6
 80045a6:	f7fb fe23 	bl	80001f0 <memchr>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d038      	beq.n	8004620 <_svfiprintf_r+0x1d8>
 80045ae:	4b23      	ldr	r3, [pc, #140]	; (800463c <_svfiprintf_r+0x1f4>)
 80045b0:	bb1b      	cbnz	r3, 80045fa <_svfiprintf_r+0x1b2>
 80045b2:	9b03      	ldr	r3, [sp, #12]
 80045b4:	3307      	adds	r3, #7
 80045b6:	f023 0307 	bic.w	r3, r3, #7
 80045ba:	3308      	adds	r3, #8
 80045bc:	9303      	str	r3, [sp, #12]
 80045be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c0:	4433      	add	r3, r6
 80045c2:	9309      	str	r3, [sp, #36]	; 0x24
 80045c4:	e767      	b.n	8004496 <_svfiprintf_r+0x4e>
 80045c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ca:	460c      	mov	r4, r1
 80045cc:	2001      	movs	r0, #1
 80045ce:	e7a5      	b.n	800451c <_svfiprintf_r+0xd4>
 80045d0:	2300      	movs	r3, #0
 80045d2:	3401      	adds	r4, #1
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	4619      	mov	r1, r3
 80045d8:	f04f 0c0a 	mov.w	ip, #10
 80045dc:	4620      	mov	r0, r4
 80045de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045e2:	3a30      	subs	r2, #48	; 0x30
 80045e4:	2a09      	cmp	r2, #9
 80045e6:	d903      	bls.n	80045f0 <_svfiprintf_r+0x1a8>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0c5      	beq.n	8004578 <_svfiprintf_r+0x130>
 80045ec:	9105      	str	r1, [sp, #20]
 80045ee:	e7c3      	b.n	8004578 <_svfiprintf_r+0x130>
 80045f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045f4:	4604      	mov	r4, r0
 80045f6:	2301      	movs	r3, #1
 80045f8:	e7f0      	b.n	80045dc <_svfiprintf_r+0x194>
 80045fa:	ab03      	add	r3, sp, #12
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	462a      	mov	r2, r5
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <_svfiprintf_r+0x1f8>)
 8004602:	a904      	add	r1, sp, #16
 8004604:	4638      	mov	r0, r7
 8004606:	f3af 8000 	nop.w
 800460a:	1c42      	adds	r2, r0, #1
 800460c:	4606      	mov	r6, r0
 800460e:	d1d6      	bne.n	80045be <_svfiprintf_r+0x176>
 8004610:	89ab      	ldrh	r3, [r5, #12]
 8004612:	065b      	lsls	r3, r3, #25
 8004614:	f53f af2c 	bmi.w	8004470 <_svfiprintf_r+0x28>
 8004618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800461a:	b01d      	add	sp, #116	; 0x74
 800461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004620:	ab03      	add	r3, sp, #12
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	462a      	mov	r2, r5
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <_svfiprintf_r+0x1f8>)
 8004628:	a904      	add	r1, sp, #16
 800462a:	4638      	mov	r0, r7
 800462c:	f000 f87a 	bl	8004724 <_printf_i>
 8004630:	e7eb      	b.n	800460a <_svfiprintf_r+0x1c2>
 8004632:	bf00      	nop
 8004634:	08004c2c 	.word	0x08004c2c
 8004638:	08004c36 	.word	0x08004c36
 800463c:	00000000 	.word	0x00000000
 8004640:	08004391 	.word	0x08004391
 8004644:	08004c32 	.word	0x08004c32

08004648 <_printf_common>:
 8004648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800464c:	4616      	mov	r6, r2
 800464e:	4699      	mov	r9, r3
 8004650:	688a      	ldr	r2, [r1, #8]
 8004652:	690b      	ldr	r3, [r1, #16]
 8004654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004658:	4293      	cmp	r3, r2
 800465a:	bfb8      	it	lt
 800465c:	4613      	movlt	r3, r2
 800465e:	6033      	str	r3, [r6, #0]
 8004660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004664:	4607      	mov	r7, r0
 8004666:	460c      	mov	r4, r1
 8004668:	b10a      	cbz	r2, 800466e <_printf_common+0x26>
 800466a:	3301      	adds	r3, #1
 800466c:	6033      	str	r3, [r6, #0]
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	0699      	lsls	r1, r3, #26
 8004672:	bf42      	ittt	mi
 8004674:	6833      	ldrmi	r3, [r6, #0]
 8004676:	3302      	addmi	r3, #2
 8004678:	6033      	strmi	r3, [r6, #0]
 800467a:	6825      	ldr	r5, [r4, #0]
 800467c:	f015 0506 	ands.w	r5, r5, #6
 8004680:	d106      	bne.n	8004690 <_printf_common+0x48>
 8004682:	f104 0a19 	add.w	sl, r4, #25
 8004686:	68e3      	ldr	r3, [r4, #12]
 8004688:	6832      	ldr	r2, [r6, #0]
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	42ab      	cmp	r3, r5
 800468e:	dc26      	bgt.n	80046de <_printf_common+0x96>
 8004690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004694:	1e13      	subs	r3, r2, #0
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	bf18      	it	ne
 800469a:	2301      	movne	r3, #1
 800469c:	0692      	lsls	r2, r2, #26
 800469e:	d42b      	bmi.n	80046f8 <_printf_common+0xb0>
 80046a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046a4:	4649      	mov	r1, r9
 80046a6:	4638      	mov	r0, r7
 80046a8:	47c0      	blx	r8
 80046aa:	3001      	adds	r0, #1
 80046ac:	d01e      	beq.n	80046ec <_printf_common+0xa4>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	68e5      	ldr	r5, [r4, #12]
 80046b2:	6832      	ldr	r2, [r6, #0]
 80046b4:	f003 0306 	and.w	r3, r3, #6
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	bf08      	it	eq
 80046bc:	1aad      	subeq	r5, r5, r2
 80046be:	68a3      	ldr	r3, [r4, #8]
 80046c0:	6922      	ldr	r2, [r4, #16]
 80046c2:	bf0c      	ite	eq
 80046c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046c8:	2500      	movne	r5, #0
 80046ca:	4293      	cmp	r3, r2
 80046cc:	bfc4      	itt	gt
 80046ce:	1a9b      	subgt	r3, r3, r2
 80046d0:	18ed      	addgt	r5, r5, r3
 80046d2:	2600      	movs	r6, #0
 80046d4:	341a      	adds	r4, #26
 80046d6:	42b5      	cmp	r5, r6
 80046d8:	d11a      	bne.n	8004710 <_printf_common+0xc8>
 80046da:	2000      	movs	r0, #0
 80046dc:	e008      	b.n	80046f0 <_printf_common+0xa8>
 80046de:	2301      	movs	r3, #1
 80046e0:	4652      	mov	r2, sl
 80046e2:	4649      	mov	r1, r9
 80046e4:	4638      	mov	r0, r7
 80046e6:	47c0      	blx	r8
 80046e8:	3001      	adds	r0, #1
 80046ea:	d103      	bne.n	80046f4 <_printf_common+0xac>
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f4:	3501      	adds	r5, #1
 80046f6:	e7c6      	b.n	8004686 <_printf_common+0x3e>
 80046f8:	18e1      	adds	r1, r4, r3
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	2030      	movs	r0, #48	; 0x30
 80046fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004702:	4422      	add	r2, r4
 8004704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800470c:	3302      	adds	r3, #2
 800470e:	e7c7      	b.n	80046a0 <_printf_common+0x58>
 8004710:	2301      	movs	r3, #1
 8004712:	4622      	mov	r2, r4
 8004714:	4649      	mov	r1, r9
 8004716:	4638      	mov	r0, r7
 8004718:	47c0      	blx	r8
 800471a:	3001      	adds	r0, #1
 800471c:	d0e6      	beq.n	80046ec <_printf_common+0xa4>
 800471e:	3601      	adds	r6, #1
 8004720:	e7d9      	b.n	80046d6 <_printf_common+0x8e>
	...

08004724 <_printf_i>:
 8004724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004728:	460c      	mov	r4, r1
 800472a:	4691      	mov	r9, r2
 800472c:	7e27      	ldrb	r7, [r4, #24]
 800472e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004730:	2f78      	cmp	r7, #120	; 0x78
 8004732:	4680      	mov	r8, r0
 8004734:	469a      	mov	sl, r3
 8004736:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800473a:	d807      	bhi.n	800474c <_printf_i+0x28>
 800473c:	2f62      	cmp	r7, #98	; 0x62
 800473e:	d80a      	bhi.n	8004756 <_printf_i+0x32>
 8004740:	2f00      	cmp	r7, #0
 8004742:	f000 80d8 	beq.w	80048f6 <_printf_i+0x1d2>
 8004746:	2f58      	cmp	r7, #88	; 0x58
 8004748:	f000 80a3 	beq.w	8004892 <_printf_i+0x16e>
 800474c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004754:	e03a      	b.n	80047cc <_printf_i+0xa8>
 8004756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800475a:	2b15      	cmp	r3, #21
 800475c:	d8f6      	bhi.n	800474c <_printf_i+0x28>
 800475e:	a001      	add	r0, pc, #4	; (adr r0, 8004764 <_printf_i+0x40>)
 8004760:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004764:	080047bd 	.word	0x080047bd
 8004768:	080047d1 	.word	0x080047d1
 800476c:	0800474d 	.word	0x0800474d
 8004770:	0800474d 	.word	0x0800474d
 8004774:	0800474d 	.word	0x0800474d
 8004778:	0800474d 	.word	0x0800474d
 800477c:	080047d1 	.word	0x080047d1
 8004780:	0800474d 	.word	0x0800474d
 8004784:	0800474d 	.word	0x0800474d
 8004788:	0800474d 	.word	0x0800474d
 800478c:	0800474d 	.word	0x0800474d
 8004790:	080048dd 	.word	0x080048dd
 8004794:	08004801 	.word	0x08004801
 8004798:	080048bf 	.word	0x080048bf
 800479c:	0800474d 	.word	0x0800474d
 80047a0:	0800474d 	.word	0x0800474d
 80047a4:	080048ff 	.word	0x080048ff
 80047a8:	0800474d 	.word	0x0800474d
 80047ac:	08004801 	.word	0x08004801
 80047b0:	0800474d 	.word	0x0800474d
 80047b4:	0800474d 	.word	0x0800474d
 80047b8:	080048c7 	.word	0x080048c7
 80047bc:	680b      	ldr	r3, [r1, #0]
 80047be:	1d1a      	adds	r2, r3, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	600a      	str	r2, [r1, #0]
 80047c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0a3      	b.n	8004918 <_printf_i+0x1f4>
 80047d0:	6825      	ldr	r5, [r4, #0]
 80047d2:	6808      	ldr	r0, [r1, #0]
 80047d4:	062e      	lsls	r6, r5, #24
 80047d6:	f100 0304 	add.w	r3, r0, #4
 80047da:	d50a      	bpl.n	80047f2 <_printf_i+0xce>
 80047dc:	6805      	ldr	r5, [r0, #0]
 80047de:	600b      	str	r3, [r1, #0]
 80047e0:	2d00      	cmp	r5, #0
 80047e2:	da03      	bge.n	80047ec <_printf_i+0xc8>
 80047e4:	232d      	movs	r3, #45	; 0x2d
 80047e6:	426d      	negs	r5, r5
 80047e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ec:	485e      	ldr	r0, [pc, #376]	; (8004968 <_printf_i+0x244>)
 80047ee:	230a      	movs	r3, #10
 80047f0:	e019      	b.n	8004826 <_printf_i+0x102>
 80047f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047f6:	6805      	ldr	r5, [r0, #0]
 80047f8:	600b      	str	r3, [r1, #0]
 80047fa:	bf18      	it	ne
 80047fc:	b22d      	sxthne	r5, r5
 80047fe:	e7ef      	b.n	80047e0 <_printf_i+0xbc>
 8004800:	680b      	ldr	r3, [r1, #0]
 8004802:	6825      	ldr	r5, [r4, #0]
 8004804:	1d18      	adds	r0, r3, #4
 8004806:	6008      	str	r0, [r1, #0]
 8004808:	0628      	lsls	r0, r5, #24
 800480a:	d501      	bpl.n	8004810 <_printf_i+0xec>
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	e002      	b.n	8004816 <_printf_i+0xf2>
 8004810:	0669      	lsls	r1, r5, #25
 8004812:	d5fb      	bpl.n	800480c <_printf_i+0xe8>
 8004814:	881d      	ldrh	r5, [r3, #0]
 8004816:	4854      	ldr	r0, [pc, #336]	; (8004968 <_printf_i+0x244>)
 8004818:	2f6f      	cmp	r7, #111	; 0x6f
 800481a:	bf0c      	ite	eq
 800481c:	2308      	moveq	r3, #8
 800481e:	230a      	movne	r3, #10
 8004820:	2100      	movs	r1, #0
 8004822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004826:	6866      	ldr	r6, [r4, #4]
 8004828:	60a6      	str	r6, [r4, #8]
 800482a:	2e00      	cmp	r6, #0
 800482c:	bfa2      	ittt	ge
 800482e:	6821      	ldrge	r1, [r4, #0]
 8004830:	f021 0104 	bicge.w	r1, r1, #4
 8004834:	6021      	strge	r1, [r4, #0]
 8004836:	b90d      	cbnz	r5, 800483c <_printf_i+0x118>
 8004838:	2e00      	cmp	r6, #0
 800483a:	d04d      	beq.n	80048d8 <_printf_i+0x1b4>
 800483c:	4616      	mov	r6, r2
 800483e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004842:	fb03 5711 	mls	r7, r3, r1, r5
 8004846:	5dc7      	ldrb	r7, [r0, r7]
 8004848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800484c:	462f      	mov	r7, r5
 800484e:	42bb      	cmp	r3, r7
 8004850:	460d      	mov	r5, r1
 8004852:	d9f4      	bls.n	800483e <_printf_i+0x11a>
 8004854:	2b08      	cmp	r3, #8
 8004856:	d10b      	bne.n	8004870 <_printf_i+0x14c>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	07df      	lsls	r7, r3, #31
 800485c:	d508      	bpl.n	8004870 <_printf_i+0x14c>
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	6861      	ldr	r1, [r4, #4]
 8004862:	4299      	cmp	r1, r3
 8004864:	bfde      	ittt	le
 8004866:	2330      	movle	r3, #48	; 0x30
 8004868:	f806 3c01 	strble.w	r3, [r6, #-1]
 800486c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004870:	1b92      	subs	r2, r2, r6
 8004872:	6122      	str	r2, [r4, #16]
 8004874:	f8cd a000 	str.w	sl, [sp]
 8004878:	464b      	mov	r3, r9
 800487a:	aa03      	add	r2, sp, #12
 800487c:	4621      	mov	r1, r4
 800487e:	4640      	mov	r0, r8
 8004880:	f7ff fee2 	bl	8004648 <_printf_common>
 8004884:	3001      	adds	r0, #1
 8004886:	d14c      	bne.n	8004922 <_printf_i+0x1fe>
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	b004      	add	sp, #16
 800488e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004892:	4835      	ldr	r0, [pc, #212]	; (8004968 <_printf_i+0x244>)
 8004894:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	680e      	ldr	r6, [r1, #0]
 800489c:	061f      	lsls	r7, r3, #24
 800489e:	f856 5b04 	ldr.w	r5, [r6], #4
 80048a2:	600e      	str	r6, [r1, #0]
 80048a4:	d514      	bpl.n	80048d0 <_printf_i+0x1ac>
 80048a6:	07d9      	lsls	r1, r3, #31
 80048a8:	bf44      	itt	mi
 80048aa:	f043 0320 	orrmi.w	r3, r3, #32
 80048ae:	6023      	strmi	r3, [r4, #0]
 80048b0:	b91d      	cbnz	r5, 80048ba <_printf_i+0x196>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	f023 0320 	bic.w	r3, r3, #32
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	2310      	movs	r3, #16
 80048bc:	e7b0      	b.n	8004820 <_printf_i+0xfc>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	f043 0320 	orr.w	r3, r3, #32
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	2378      	movs	r3, #120	; 0x78
 80048c8:	4828      	ldr	r0, [pc, #160]	; (800496c <_printf_i+0x248>)
 80048ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048ce:	e7e3      	b.n	8004898 <_printf_i+0x174>
 80048d0:	065e      	lsls	r6, r3, #25
 80048d2:	bf48      	it	mi
 80048d4:	b2ad      	uxthmi	r5, r5
 80048d6:	e7e6      	b.n	80048a6 <_printf_i+0x182>
 80048d8:	4616      	mov	r6, r2
 80048da:	e7bb      	b.n	8004854 <_printf_i+0x130>
 80048dc:	680b      	ldr	r3, [r1, #0]
 80048de:	6826      	ldr	r6, [r4, #0]
 80048e0:	6960      	ldr	r0, [r4, #20]
 80048e2:	1d1d      	adds	r5, r3, #4
 80048e4:	600d      	str	r5, [r1, #0]
 80048e6:	0635      	lsls	r5, r6, #24
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	d501      	bpl.n	80048f0 <_printf_i+0x1cc>
 80048ec:	6018      	str	r0, [r3, #0]
 80048ee:	e002      	b.n	80048f6 <_printf_i+0x1d2>
 80048f0:	0671      	lsls	r1, r6, #25
 80048f2:	d5fb      	bpl.n	80048ec <_printf_i+0x1c8>
 80048f4:	8018      	strh	r0, [r3, #0]
 80048f6:	2300      	movs	r3, #0
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	4616      	mov	r6, r2
 80048fc:	e7ba      	b.n	8004874 <_printf_i+0x150>
 80048fe:	680b      	ldr	r3, [r1, #0]
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	600a      	str	r2, [r1, #0]
 8004904:	681e      	ldr	r6, [r3, #0]
 8004906:	6862      	ldr	r2, [r4, #4]
 8004908:	2100      	movs	r1, #0
 800490a:	4630      	mov	r0, r6
 800490c:	f7fb fc70 	bl	80001f0 <memchr>
 8004910:	b108      	cbz	r0, 8004916 <_printf_i+0x1f2>
 8004912:	1b80      	subs	r0, r0, r6
 8004914:	6060      	str	r0, [r4, #4]
 8004916:	6863      	ldr	r3, [r4, #4]
 8004918:	6123      	str	r3, [r4, #16]
 800491a:	2300      	movs	r3, #0
 800491c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004920:	e7a8      	b.n	8004874 <_printf_i+0x150>
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	4632      	mov	r2, r6
 8004926:	4649      	mov	r1, r9
 8004928:	4640      	mov	r0, r8
 800492a:	47d0      	blx	sl
 800492c:	3001      	adds	r0, #1
 800492e:	d0ab      	beq.n	8004888 <_printf_i+0x164>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	079b      	lsls	r3, r3, #30
 8004934:	d413      	bmi.n	800495e <_printf_i+0x23a>
 8004936:	68e0      	ldr	r0, [r4, #12]
 8004938:	9b03      	ldr	r3, [sp, #12]
 800493a:	4298      	cmp	r0, r3
 800493c:	bfb8      	it	lt
 800493e:	4618      	movlt	r0, r3
 8004940:	e7a4      	b.n	800488c <_printf_i+0x168>
 8004942:	2301      	movs	r3, #1
 8004944:	4632      	mov	r2, r6
 8004946:	4649      	mov	r1, r9
 8004948:	4640      	mov	r0, r8
 800494a:	47d0      	blx	sl
 800494c:	3001      	adds	r0, #1
 800494e:	d09b      	beq.n	8004888 <_printf_i+0x164>
 8004950:	3501      	adds	r5, #1
 8004952:	68e3      	ldr	r3, [r4, #12]
 8004954:	9903      	ldr	r1, [sp, #12]
 8004956:	1a5b      	subs	r3, r3, r1
 8004958:	42ab      	cmp	r3, r5
 800495a:	dcf2      	bgt.n	8004942 <_printf_i+0x21e>
 800495c:	e7eb      	b.n	8004936 <_printf_i+0x212>
 800495e:	2500      	movs	r5, #0
 8004960:	f104 0619 	add.w	r6, r4, #25
 8004964:	e7f5      	b.n	8004952 <_printf_i+0x22e>
 8004966:	bf00      	nop
 8004968:	08004c3d 	.word	0x08004c3d
 800496c:	08004c4e 	.word	0x08004c4e

08004970 <memcpy>:
 8004970:	440a      	add	r2, r1
 8004972:	4291      	cmp	r1, r2
 8004974:	f100 33ff 	add.w	r3, r0, #4294967295
 8004978:	d100      	bne.n	800497c <memcpy+0xc>
 800497a:	4770      	bx	lr
 800497c:	b510      	push	{r4, lr}
 800497e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004986:	4291      	cmp	r1, r2
 8004988:	d1f9      	bne.n	800497e <memcpy+0xe>
 800498a:	bd10      	pop	{r4, pc}

0800498c <memmove>:
 800498c:	4288      	cmp	r0, r1
 800498e:	b510      	push	{r4, lr}
 8004990:	eb01 0402 	add.w	r4, r1, r2
 8004994:	d902      	bls.n	800499c <memmove+0x10>
 8004996:	4284      	cmp	r4, r0
 8004998:	4623      	mov	r3, r4
 800499a:	d807      	bhi.n	80049ac <memmove+0x20>
 800499c:	1e43      	subs	r3, r0, #1
 800499e:	42a1      	cmp	r1, r4
 80049a0:	d008      	beq.n	80049b4 <memmove+0x28>
 80049a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049aa:	e7f8      	b.n	800499e <memmove+0x12>
 80049ac:	4402      	add	r2, r0
 80049ae:	4601      	mov	r1, r0
 80049b0:	428a      	cmp	r2, r1
 80049b2:	d100      	bne.n	80049b6 <memmove+0x2a>
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049be:	e7f7      	b.n	80049b0 <memmove+0x24>

080049c0 <_free_r>:
 80049c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049c2:	2900      	cmp	r1, #0
 80049c4:	d048      	beq.n	8004a58 <_free_r+0x98>
 80049c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ca:	9001      	str	r0, [sp, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f1a1 0404 	sub.w	r4, r1, #4
 80049d2:	bfb8      	it	lt
 80049d4:	18e4      	addlt	r4, r4, r3
 80049d6:	f000 f8d3 	bl	8004b80 <__malloc_lock>
 80049da:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <_free_r+0x9c>)
 80049dc:	9801      	ldr	r0, [sp, #4]
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	4615      	mov	r5, r2
 80049e2:	b933      	cbnz	r3, 80049f2 <_free_r+0x32>
 80049e4:	6063      	str	r3, [r4, #4]
 80049e6:	6014      	str	r4, [r2, #0]
 80049e8:	b003      	add	sp, #12
 80049ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049ee:	f000 b8cd 	b.w	8004b8c <__malloc_unlock>
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	d90b      	bls.n	8004a0e <_free_r+0x4e>
 80049f6:	6821      	ldr	r1, [r4, #0]
 80049f8:	1862      	adds	r2, r4, r1
 80049fa:	4293      	cmp	r3, r2
 80049fc:	bf04      	itt	eq
 80049fe:	681a      	ldreq	r2, [r3, #0]
 8004a00:	685b      	ldreq	r3, [r3, #4]
 8004a02:	6063      	str	r3, [r4, #4]
 8004a04:	bf04      	itt	eq
 8004a06:	1852      	addeq	r2, r2, r1
 8004a08:	6022      	streq	r2, [r4, #0]
 8004a0a:	602c      	str	r4, [r5, #0]
 8004a0c:	e7ec      	b.n	80049e8 <_free_r+0x28>
 8004a0e:	461a      	mov	r2, r3
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	b10b      	cbz	r3, 8004a18 <_free_r+0x58>
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	d9fa      	bls.n	8004a0e <_free_r+0x4e>
 8004a18:	6811      	ldr	r1, [r2, #0]
 8004a1a:	1855      	adds	r5, r2, r1
 8004a1c:	42a5      	cmp	r5, r4
 8004a1e:	d10b      	bne.n	8004a38 <_free_r+0x78>
 8004a20:	6824      	ldr	r4, [r4, #0]
 8004a22:	4421      	add	r1, r4
 8004a24:	1854      	adds	r4, r2, r1
 8004a26:	42a3      	cmp	r3, r4
 8004a28:	6011      	str	r1, [r2, #0]
 8004a2a:	d1dd      	bne.n	80049e8 <_free_r+0x28>
 8004a2c:	681c      	ldr	r4, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	6053      	str	r3, [r2, #4]
 8004a32:	4421      	add	r1, r4
 8004a34:	6011      	str	r1, [r2, #0]
 8004a36:	e7d7      	b.n	80049e8 <_free_r+0x28>
 8004a38:	d902      	bls.n	8004a40 <_free_r+0x80>
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	6003      	str	r3, [r0, #0]
 8004a3e:	e7d3      	b.n	80049e8 <_free_r+0x28>
 8004a40:	6825      	ldr	r5, [r4, #0]
 8004a42:	1961      	adds	r1, r4, r5
 8004a44:	428b      	cmp	r3, r1
 8004a46:	bf04      	itt	eq
 8004a48:	6819      	ldreq	r1, [r3, #0]
 8004a4a:	685b      	ldreq	r3, [r3, #4]
 8004a4c:	6063      	str	r3, [r4, #4]
 8004a4e:	bf04      	itt	eq
 8004a50:	1949      	addeq	r1, r1, r5
 8004a52:	6021      	streq	r1, [r4, #0]
 8004a54:	6054      	str	r4, [r2, #4]
 8004a56:	e7c7      	b.n	80049e8 <_free_r+0x28>
 8004a58:	b003      	add	sp, #12
 8004a5a:	bd30      	pop	{r4, r5, pc}
 8004a5c:	20000090 	.word	0x20000090

08004a60 <_malloc_r>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	1ccd      	adds	r5, r1, #3
 8004a64:	f025 0503 	bic.w	r5, r5, #3
 8004a68:	3508      	adds	r5, #8
 8004a6a:	2d0c      	cmp	r5, #12
 8004a6c:	bf38      	it	cc
 8004a6e:	250c      	movcc	r5, #12
 8004a70:	2d00      	cmp	r5, #0
 8004a72:	4606      	mov	r6, r0
 8004a74:	db01      	blt.n	8004a7a <_malloc_r+0x1a>
 8004a76:	42a9      	cmp	r1, r5
 8004a78:	d903      	bls.n	8004a82 <_malloc_r+0x22>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	6033      	str	r3, [r6, #0]
 8004a7e:	2000      	movs	r0, #0
 8004a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a82:	f000 f87d 	bl	8004b80 <__malloc_lock>
 8004a86:	4921      	ldr	r1, [pc, #132]	; (8004b0c <_malloc_r+0xac>)
 8004a88:	680a      	ldr	r2, [r1, #0]
 8004a8a:	4614      	mov	r4, r2
 8004a8c:	b99c      	cbnz	r4, 8004ab6 <_malloc_r+0x56>
 8004a8e:	4f20      	ldr	r7, [pc, #128]	; (8004b10 <_malloc_r+0xb0>)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	b923      	cbnz	r3, 8004a9e <_malloc_r+0x3e>
 8004a94:	4621      	mov	r1, r4
 8004a96:	4630      	mov	r0, r6
 8004a98:	f000 f862 	bl	8004b60 <_sbrk_r>
 8004a9c:	6038      	str	r0, [r7, #0]
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 f85d 	bl	8004b60 <_sbrk_r>
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	d123      	bne.n	8004af2 <_malloc_r+0x92>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	6033      	str	r3, [r6, #0]
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f000 f86c 	bl	8004b8c <__malloc_unlock>
 8004ab4:	e7e3      	b.n	8004a7e <_malloc_r+0x1e>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	1b5b      	subs	r3, r3, r5
 8004aba:	d417      	bmi.n	8004aec <_malloc_r+0x8c>
 8004abc:	2b0b      	cmp	r3, #11
 8004abe:	d903      	bls.n	8004ac8 <_malloc_r+0x68>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	441c      	add	r4, r3
 8004ac4:	6025      	str	r5, [r4, #0]
 8004ac6:	e004      	b.n	8004ad2 <_malloc_r+0x72>
 8004ac8:	6863      	ldr	r3, [r4, #4]
 8004aca:	42a2      	cmp	r2, r4
 8004acc:	bf0c      	ite	eq
 8004ace:	600b      	streq	r3, [r1, #0]
 8004ad0:	6053      	strne	r3, [r2, #4]
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f000 f85a 	bl	8004b8c <__malloc_unlock>
 8004ad8:	f104 000b 	add.w	r0, r4, #11
 8004adc:	1d23      	adds	r3, r4, #4
 8004ade:	f020 0007 	bic.w	r0, r0, #7
 8004ae2:	1ac2      	subs	r2, r0, r3
 8004ae4:	d0cc      	beq.n	8004a80 <_malloc_r+0x20>
 8004ae6:	1a1b      	subs	r3, r3, r0
 8004ae8:	50a3      	str	r3, [r4, r2]
 8004aea:	e7c9      	b.n	8004a80 <_malloc_r+0x20>
 8004aec:	4622      	mov	r2, r4
 8004aee:	6864      	ldr	r4, [r4, #4]
 8004af0:	e7cc      	b.n	8004a8c <_malloc_r+0x2c>
 8004af2:	1cc4      	adds	r4, r0, #3
 8004af4:	f024 0403 	bic.w	r4, r4, #3
 8004af8:	42a0      	cmp	r0, r4
 8004afa:	d0e3      	beq.n	8004ac4 <_malloc_r+0x64>
 8004afc:	1a21      	subs	r1, r4, r0
 8004afe:	4630      	mov	r0, r6
 8004b00:	f000 f82e 	bl	8004b60 <_sbrk_r>
 8004b04:	3001      	adds	r0, #1
 8004b06:	d1dd      	bne.n	8004ac4 <_malloc_r+0x64>
 8004b08:	e7cf      	b.n	8004aaa <_malloc_r+0x4a>
 8004b0a:	bf00      	nop
 8004b0c:	20000090 	.word	0x20000090
 8004b10:	20000094 	.word	0x20000094

08004b14 <_realloc_r>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	4607      	mov	r7, r0
 8004b18:	4614      	mov	r4, r2
 8004b1a:	460e      	mov	r6, r1
 8004b1c:	b921      	cbnz	r1, 8004b28 <_realloc_r+0x14>
 8004b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b22:	4611      	mov	r1, r2
 8004b24:	f7ff bf9c 	b.w	8004a60 <_malloc_r>
 8004b28:	b922      	cbnz	r2, 8004b34 <_realloc_r+0x20>
 8004b2a:	f7ff ff49 	bl	80049c0 <_free_r>
 8004b2e:	4625      	mov	r5, r4
 8004b30:	4628      	mov	r0, r5
 8004b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b34:	f000 f830 	bl	8004b98 <_malloc_usable_size_r>
 8004b38:	42a0      	cmp	r0, r4
 8004b3a:	d20f      	bcs.n	8004b5c <_realloc_r+0x48>
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4638      	mov	r0, r7
 8004b40:	f7ff ff8e 	bl	8004a60 <_malloc_r>
 8004b44:	4605      	mov	r5, r0
 8004b46:	2800      	cmp	r0, #0
 8004b48:	d0f2      	beq.n	8004b30 <_realloc_r+0x1c>
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4622      	mov	r2, r4
 8004b4e:	f7ff ff0f 	bl	8004970 <memcpy>
 8004b52:	4631      	mov	r1, r6
 8004b54:	4638      	mov	r0, r7
 8004b56:	f7ff ff33 	bl	80049c0 <_free_r>
 8004b5a:	e7e9      	b.n	8004b30 <_realloc_r+0x1c>
 8004b5c:	4635      	mov	r5, r6
 8004b5e:	e7e7      	b.n	8004b30 <_realloc_r+0x1c>

08004b60 <_sbrk_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4d06      	ldr	r5, [pc, #24]	; (8004b7c <_sbrk_r+0x1c>)
 8004b64:	2300      	movs	r3, #0
 8004b66:	4604      	mov	r4, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	602b      	str	r3, [r5, #0]
 8004b6c:	f7fc fbd6 	bl	800131c <_sbrk>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_sbrk_r+0x1a>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_sbrk_r+0x1a>
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	20000170 	.word	0x20000170

08004b80 <__malloc_lock>:
 8004b80:	4801      	ldr	r0, [pc, #4]	; (8004b88 <__malloc_lock+0x8>)
 8004b82:	f000 b811 	b.w	8004ba8 <__retarget_lock_acquire_recursive>
 8004b86:	bf00      	nop
 8004b88:	20000178 	.word	0x20000178

08004b8c <__malloc_unlock>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	; (8004b94 <__malloc_unlock+0x8>)
 8004b8e:	f000 b80c 	b.w	8004baa <__retarget_lock_release_recursive>
 8004b92:	bf00      	nop
 8004b94:	20000178 	.word	0x20000178

08004b98 <_malloc_usable_size_r>:
 8004b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b9c:	1f18      	subs	r0, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bfbc      	itt	lt
 8004ba2:	580b      	ldrlt	r3, [r1, r0]
 8004ba4:	18c0      	addlt	r0, r0, r3
 8004ba6:	4770      	bx	lr

08004ba8 <__retarget_lock_acquire_recursive>:
 8004ba8:	4770      	bx	lr

08004baa <__retarget_lock_release_recursive>:
 8004baa:	4770      	bx	lr

08004bac <_init>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	bf00      	nop
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr

08004bb8 <_fini>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr
